/*
#############################################################################################
# Mass Effect 3 (1.5) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: sfxgamempcontent_functions.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function sfxgamempcontent.sfxgawreinforcementmanager.CanAffordNewStoreItems
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OldCredits                     ( CPF_Parm )
// int                            NewCredits                     ( CPF_Parm )

bool Usfxgawreinforcementmanager::CanAffordNewStoreItems ( int OldCredits, int NewCredits )
{
	static UFunction* pFnCanAffordNewStoreItems = NULL;

	if ( ! pFnCanAffordNewStoreItems )
		pFnCanAffordNewStoreItems = (UFunction*) UObject::GObjObjects()->Data[ 107942 ];

	Usfxgawreinforcementmanager_execCanAffordNewStoreItems_Parms CanAffordNewStoreItems_Parms;
	CanAffordNewStoreItems_Parms.OldCredits = OldCredits;
	CanAffordNewStoreItems_Parms.NewCredits = NewCredits;

	this->ProcessEvent ( pFnCanAffordNewStoreItems, &CanAffordNewStoreItems_Parms, NULL );

	return CanAffordNewStoreItems_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GetPCPointsBalance
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgawreinforcementmanager::GetPCPointsBalance ( )
{
	static UFunction* pFnGetPCPointsBalance = NULL;

	if ( ! pFnGetPCPointsBalance )
		pFnGetPCPointsBalance = (UFunction*) UObject::GObjObjects()->Data[ 107940 ];

	Usfxgawreinforcementmanager_execGetPCPointsBalance_Parms GetPCPointsBalance_Parms;

	this->ProcessEvent ( pFnGetPCPointsBalance, &GetPCPointsBalance_Parms, NULL );

	return GetPCPointsBalance_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GetOfferIDFromStoreID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StoreID                        ( CPF_Parm )

int Usfxgawreinforcementmanager::GetOfferIDFromStoreID ( int StoreID )
{
	static UFunction* pFnGetOfferIDFromStoreID = NULL;

	if ( ! pFnGetOfferIDFromStoreID )
		pFnGetOfferIDFromStoreID = (UFunction*) UObject::GObjObjects()->Data[ 107936 ];

	Usfxgawreinforcementmanager_execGetOfferIDFromStoreID_Parms GetOfferIDFromStoreID_Parms;
	GetOfferIDFromStoreID_Parms.StoreID = StoreID;

	this->ProcessEvent ( pFnGetOfferIDFromStoreID, &GetOfferIDFromStoreID_Parms, NULL );

	return GetOfferIDFromStoreID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GetStoreItemIDFromOffer
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            offerId                        ( CPF_Parm )

int Usfxgawreinforcementmanager::GetStoreItemIDFromOffer ( int offerId )
{
	static UFunction* pFnGetStoreItemIDFromOffer = NULL;

	if ( ! pFnGetStoreItemIDFromOffer )
		pFnGetStoreItemIDFromOffer = (UFunction*) UObject::GObjObjects()->Data[ 107932 ];

	Usfxgawreinforcementmanager_execGetStoreItemIDFromOffer_Parms GetStoreItemIDFromOffer_Parms;
	GetStoreItemIDFromOffer_Parms.offerId = offerId;

	this->ProcessEvent ( pFnGetStoreItemIDFromOffer, &GetStoreItemIDFromOffer_Parms, NULL );

	return GetStoreItemIDFromOffer_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.ConsumptionFlow_Finished
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Usfxgawreinforcementmanager::ConsumptionFlow_Finished ( int nResult )
{
	static UFunction* pFnConsumptionFlow_Finished = NULL;

	if ( ! pFnConsumptionFlow_Finished )
		pFnConsumptionFlow_Finished = (UFunction*) UObject::GObjObjects()->Data[ 107930 ];

	Usfxgawreinforcementmanager_execConsumptionFlow_Finished_Parms ConsumptionFlow_Finished_Parms;
	ConsumptionFlow_Finished_Parms.nResult = nResult;

	this->ProcessEvent ( pFnConsumptionFlow_Finished, &ConsumptionFlow_Finished_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.ExitConsumptionFlow
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void Usfxgawreinforcementmanager::ExitConsumptionFlow ( )
{
	static UFunction* pFnExitConsumptionFlow = NULL;

	if ( ! pFnExitConsumptionFlow )
		pFnExitConsumptionFlow = (UFunction*) UObject::GObjObjects()->Data[ 107877 ];

	Usfxgawreinforcementmanager_execExitConsumptionFlow_Parms ExitConsumptionFlow_Parms;

	this->ProcessEvent ( pFnExitConsumptionFlow, &ExitConsumptionFlow_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.FinishPurchase
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Usfxgawreinforcementmanager::FinishPurchase ( int nResult )
{
	static UFunction* pFnFinishPurchase = NULL;

	if ( ! pFnFinishPurchase )
		pFnFinishPurchase = (UFunction*) UObject::GObjObjects()->Data[ 107928 ];

	Usfxgawreinforcementmanager_execFinishPurchase_Parms FinishPurchase_Parms;
	FinishPurchase_Parms.nResult = nResult;

	this->ProcessEvent ( pFnFinishPurchase, &FinishPurchase_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.AwardPacks
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            nID                            ( CPF_Parm )
// int                            nCopies                        ( CPF_Parm )

void Usfxgawreinforcementmanager::AwardPacks ( int nID, int nCopies )
{
	static UFunction* pFnAwardPacks = NULL;

	if ( ! pFnAwardPacks )
		pFnAwardPacks = (UFunction*) UObject::GObjObjects()->Data[ 107910 ];

	Usfxgawreinforcementmanager_execAwardPacks_Parms AwardPacks_Parms;
	AwardPacks_Parms.nID = nID;
	AwardPacks_Parms.nCopies = nCopies;

	this->ProcessEvent ( pFnAwardPacks, &AwardPacks_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.UpdateLastAwardedCards
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void Usfxgawreinforcementmanager::UpdateLastAwardedCards ( )
{
	static UFunction* pFnUpdateLastAwardedCards = NULL;

	if ( ! pFnUpdateLastAwardedCards )
		pFnUpdateLastAwardedCards = (UFunction*) UObject::GObjObjects()->Data[ 107847 ];

	Usfxgawreinforcementmanager_execUpdateLastAwardedCards_Parms UpdateLastAwardedCards_Parms;

	this->ProcessEvent ( pFnUpdateLastAwardedCards, &UpdateLastAwardedCards_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.ConsumptionFlow_SaveComplete
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Usfxgawreinforcementmanager::ConsumptionFlow_SaveComplete ( int nResult )
{
	static UFunction* pFnConsumptionFlow_SaveComplete = NULL;

	if ( ! pFnConsumptionFlow_SaveComplete )
		pFnConsumptionFlow_SaveComplete = (UFunction*) UObject::GObjObjects()->Data[ 107920 ];

	Usfxgawreinforcementmanager_execConsumptionFlow_SaveComplete_Parms ConsumptionFlow_SaveComplete_Parms;
	ConsumptionFlow_SaveComplete_Parms.nResult = nResult;

	this->ProcessEvent ( pFnConsumptionFlow_SaveComplete, &ConsumptionFlow_SaveComplete_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.ConsumptionFlow_ProcessRemote
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgawreinforcementmanager::ConsumptionFlow_ProcessRemote ( )
{
	static UFunction* pFnConsumptionFlow_ProcessRemote = NULL;

	if ( ! pFnConsumptionFlow_ProcessRemote )
		pFnConsumptionFlow_ProcessRemote = (UFunction*) UObject::GObjObjects()->Data[ 107903 ];

	Usfxgawreinforcementmanager_execConsumptionFlow_ProcessRemote_Parms ConsumptionFlow_ProcessRemote_Parms;

	this->ProcessEvent ( pFnConsumptionFlow_ProcessRemote, &ConsumptionFlow_ProcessRemote_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GrantPackPurchasedEntitlement
// [0x00020002] 
// Parameters infos:

void Usfxgawreinforcementmanager::GrantPackPurchasedEntitlement ( )
{
	static UFunction* pFnGrantPackPurchasedEntitlement = NULL;

	if ( ! pFnGrantPackPurchasedEntitlement )
		pFnGrantPackPurchasedEntitlement = (UFunction*) UObject::GObjObjects()->Data[ 107912 ];

	Usfxgawreinforcementmanager_execGrantPackPurchasedEntitlement_Parms GrantPackPurchasedEntitlement_Parms;

	this->ProcessEvent ( pFnGrantPackPurchasedEntitlement, &GrantPackPurchasedEntitlement_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.ConsumptionFlow_ProcessLocal
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FBWConsumableId         Id                             ( CPF_Parm )
// int                            nCopies                        ( CPF_Parm )
// int                            nResult                        ( CPF_Parm )

void Usfxgawreinforcementmanager::ConsumptionFlow_ProcessLocal ( struct FBWConsumableId Id, int nCopies, int nResult )
{
	static UFunction* pFnConsumptionFlow_ProcessLocal = NULL;

	if ( ! pFnConsumptionFlow_ProcessLocal )
		pFnConsumptionFlow_ProcessLocal = (UFunction*) UObject::GObjObjects()->Data[ 107904 ];

	Usfxgawreinforcementmanager_execConsumptionFlow_ProcessLocal_Parms ConsumptionFlow_ProcessLocal_Parms;
	memcpy ( &ConsumptionFlow_ProcessLocal_Parms.Id, &Id, 0x4 );
	ConsumptionFlow_ProcessLocal_Parms.nCopies = nCopies;
	ConsumptionFlow_ProcessLocal_Parms.nResult = nResult;

	this->ProcessEvent ( pFnConsumptionFlow_ProcessLocal, &ConsumptionFlow_ProcessLocal_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.ConsumptionFlow_Top
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Usfxgawreinforcementmanager::ConsumptionFlow_Top ( int nResult )
{
	static UFunction* pFnConsumptionFlow_Top = NULL;

	if ( ! pFnConsumptionFlow_Top )
		pFnConsumptionFlow_Top = (UFunction*) UObject::GObjObjects()->Data[ 107898 ];

	Usfxgawreinforcementmanager_execConsumptionFlow_Top_Parms ConsumptionFlow_Top_Parms;
	ConsumptionFlow_Top_Parms.nResult = nResult;

	this->ProcessEvent ( pFnConsumptionFlow_Top, &ConsumptionFlow_Top_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.StartConsumptionFlow
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bRefreshSave                   ( CPF_Parm )

void Usfxgawreinforcementmanager::StartConsumptionFlow ( unsigned long bRefreshSave )
{
	static UFunction* pFnStartConsumptionFlow = NULL;

	if ( ! pFnStartConsumptionFlow )
		pFnStartConsumptionFlow = (UFunction*) UObject::GObjObjects()->Data[ 107878 ];

	Usfxgawreinforcementmanager_execStartConsumptionFlow_Parms StartConsumptionFlow_Parms;
	StartConsumptionFlow_Parms.bRefreshSave = bRefreshSave;

	this->ProcessEvent ( pFnStartConsumptionFlow, &StartConsumptionFlow_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.ConsumptionFlow_Setup
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Usfxgawreinforcementmanager::ConsumptionFlow_Setup ( int nResult )
{
	static UFunction* pFnConsumptionFlow_Setup = NULL;

	if ( ! pFnConsumptionFlow_Setup )
		pFnConsumptionFlow_Setup = (UFunction*) UObject::GObjObjects()->Data[ 107894 ];

	Usfxgawreinforcementmanager_execConsumptionFlow_Setup_Parms ConsumptionFlow_Setup_Parms;
	ConsumptionFlow_Setup_Parms.nResult = nResult;

	this->ProcessEvent ( pFnConsumptionFlow_Setup, &ConsumptionFlow_Setup_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.ProcessConsumables
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         ConsumeCallback                ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bRetry                         ( CPF_OptionalParm | CPF_Parm )

void Usfxgawreinforcementmanager::ProcessConsumables ( struct FScriptDelegate ConsumeCallback, unsigned long bRetry )
{
	static UFunction* pFnProcessConsumables = NULL;

	if ( ! pFnProcessConsumables )
		pFnProcessConsumables = (UFunction*) UObject::GObjObjects()->Data[ 107888 ];

	Usfxgawreinforcementmanager_execProcessConsumables_Parms ProcessConsumables_Parms;
	memcpy ( &ProcessConsumables_Parms.ConsumeCallback, &ConsumeCallback, 0xC );
	ProcessConsumables_Parms.bRetry = bRetry;

	this->ProcessEvent ( pFnProcessConsumables, &ProcessConsumables_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.ConsumptionFlow_ClearCallbackTimer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgawreinforcementmanager::ConsumptionFlow_ClearCallbackTimer ( )
{
	static UFunction* pFnConsumptionFlow_ClearCallbackTimer = NULL;

	if ( ! pFnConsumptionFlow_ClearCallbackTimer )
		pFnConsumptionFlow_ClearCallbackTimer = (UFunction*) UObject::GObjObjects()->Data[ 107885 ];

	Usfxgawreinforcementmanager_execConsumptionFlow_ClearCallbackTimer_Parms ConsumptionFlow_ClearCallbackTimer_Parms;

	this->ProcessEvent ( pFnConsumptionFlow_ClearCallbackTimer, &ConsumptionFlow_ClearCallbackTimer_Parms, NULL );

	return ConsumptionFlow_ClearCallbackTimer_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.ConsumptionFlow_SetCallbackTimer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fTime                          ( CPF_Parm )

bool Usfxgawreinforcementmanager::ConsumptionFlow_SetCallbackTimer ( float fTime )
{
	static UFunction* pFnConsumptionFlow_SetCallbackTimer = NULL;

	if ( ! pFnConsumptionFlow_SetCallbackTimer )
		pFnConsumptionFlow_SetCallbackTimer = (UFunction*) UObject::GObjObjects()->Data[ 107881 ];

	Usfxgawreinforcementmanager_execConsumptionFlow_SetCallbackTimer_Parms ConsumptionFlow_SetCallbackTimer_Parms;
	ConsumptionFlow_SetCallbackTimer_Parms.fTime = fTime;

	this->ProcessEvent ( pFnConsumptionFlow_SetCallbackTimer, &ConsumptionFlow_SetCallbackTimer_Parms, NULL );

	return ConsumptionFlow_SetCallbackTimer_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.ConsumptionFlow_Timer
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgawreinforcementmanager::ConsumptionFlow_Timer ( )
{
	static UFunction* pFnConsumptionFlow_Timer = NULL;

	if ( ! pFnConsumptionFlow_Timer )
		pFnConsumptionFlow_Timer = (UFunction*) UObject::GObjObjects()->Data[ 107879 ];

	Usfxgawreinforcementmanager_execConsumptionFlow_Timer_Parms ConsumptionFlow_Timer_Parms;

	this->ProcessEvent ( pFnConsumptionFlow_Timer, &ConsumptionFlow_Timer_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.ConsumptionFlowError
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FString                 sMsg                           ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAbortFlow                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bWipeSave                      ( CPF_OptionalParm | CPF_Parm )

void Usfxgawreinforcementmanager::ConsumptionFlowError ( struct FString sMsg, unsigned long bAbortFlow, unsigned long bWipeSave )
{
	static UFunction* pFnConsumptionFlowError = NULL;

	if ( ! pFnConsumptionFlowError )
		pFnConsumptionFlowError = (UFunction*) UObject::GObjObjects()->Data[ 107871 ];

	Usfxgawreinforcementmanager_execConsumptionFlowError_Parms ConsumptionFlowError_Parms;
	memcpy ( &ConsumptionFlowError_Parms.sMsg, &sMsg, 0xC );
	ConsumptionFlowError_Parms.bAbortFlow = bAbortFlow;
	ConsumptionFlowError_Parms.bWipeSave = bWipeSave;

	this->ProcessEvent ( pFnConsumptionFlowError, &ConsumptionFlowError_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.PurchaseItemFromPlatform
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemId                         ( CPF_Parm )
// struct FScriptDelegate         PurchaseCallback               ( CPF_Parm | CPF_NeedCtorLink )

bool Usfxgawreinforcementmanager::PurchaseItemFromPlatform ( int ItemId, struct FScriptDelegate PurchaseCallback )
{
	static UFunction* pFnPurchaseItemFromPlatform = NULL;

	if ( ! pFnPurchaseItemFromPlatform )
		pFnPurchaseItemFromPlatform = (UFunction*) UObject::GObjObjects()->Data[ 107860 ];

	Usfxgawreinforcementmanager_execPurchaseItemFromPlatform_Parms PurchaseItemFromPlatform_Parms;
	PurchaseItemFromPlatform_Parms.ItemId = ItemId;
	memcpy ( &PurchaseItemFromPlatform_Parms.PurchaseCallback, &PurchaseCallback, 0xC );

	this->ProcessEvent ( pFnPurchaseItemFromPlatform, &PurchaseItemFromPlatform_Parms, NULL );

	return PurchaseItemFromPlatform_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.CanPurchaseItemWithCredits
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemId                         ( CPF_Parm )

bool Usfxgawreinforcementmanager::CanPurchaseItemWithCredits ( int ItemId )
{
	static UFunction* pFnCanPurchaseItemWithCredits = NULL;

	if ( ! pFnCanPurchaseItemWithCredits )
		pFnCanPurchaseItemWithCredits = (UFunction*) UObject::GObjObjects()->Data[ 107854 ];

	Usfxgawreinforcementmanager_execCanPurchaseItemWithCredits_Parms CanPurchaseItemWithCredits_Parms;
	CanPurchaseItemWithCredits_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnCanPurchaseItemWithCredits, &CanPurchaseItemWithCredits_Parms, NULL );

	return CanPurchaseItemWithCredits_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.ReloadPlayerSettingsComplete
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void Usfxgawreinforcementmanager::ReloadPlayerSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnReloadPlayerSettingsComplete = NULL;

	if ( ! pFnReloadPlayerSettingsComplete )
		pFnReloadPlayerSettingsComplete = (UFunction*) UObject::GObjObjects()->Data[ 107859 ];

	Usfxgawreinforcementmanager_execReloadPlayerSettingsComplete_Parms ReloadPlayerSettingsComplete_Parms;
	ReloadPlayerSettingsComplete_Parms.LocalUserNum = LocalUserNum;
	ReloadPlayerSettingsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnReloadPlayerSettingsComplete, &ReloadPlayerSettingsComplete_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.OnPurchaseItemWithCreditsFinished
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Usfxgawreinforcementmanager::OnPurchaseItemWithCreditsFinished ( int nResult )
{
	static UFunction* pFnOnPurchaseItemWithCreditsFinished = NULL;

	if ( ! pFnOnPurchaseItemWithCreditsFinished )
		pFnOnPurchaseItemWithCreditsFinished = (UFunction*) UObject::GObjObjects()->Data[ 107848 ];

	Usfxgawreinforcementmanager_execOnPurchaseItemWithCreditsFinished_Parms OnPurchaseItemWithCreditsFinished_Parms;
	OnPurchaseItemWithCreditsFinished_Parms.nResult = nResult;

	this->ProcessEvent ( pFnOnPurchaseItemWithCreditsFinished, &OnPurchaseItemWithCreditsFinished_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.PurchaseItemWithCredits
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ItemId                         ( CPF_Parm )
// struct FScriptDelegate         SaveRecordsCallback            ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgawreinforcementmanager::PurchaseItemWithCredits ( int ItemId, struct FScriptDelegate SaveRecordsCallback )
{
	static UFunction* pFnPurchaseItemWithCredits = NULL;

	if ( ! pFnPurchaseItemWithCredits )
		pFnPurchaseItemWithCredits = (UFunction*) UObject::GObjObjects()->Data[ 107841 ];

	Usfxgawreinforcementmanager_execPurchaseItemWithCredits_Parms PurchaseItemWithCredits_Parms;
	PurchaseItemWithCredits_Parms.ItemId = ItemId;
	memcpy ( &PurchaseItemWithCredits_Parms.SaveRecordsCallback, &SaveRecordsCallback, 0xC );

	this->ProcessEvent ( pFnPurchaseItemWithCredits, &PurchaseItemWithCredits_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.EntitlementVisiblityCheck
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVisibleCondition       visible                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FBWEntitlementInfo > Entitlements                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxgawreinforcementmanager::EntitlementVisiblityCheck ( struct FVisibleCondition* visible, TArray< struct FBWEntitlementInfo >* Entitlements )
{
	static UFunction* pFnEntitlementVisiblityCheck = NULL;

	if ( ! pFnEntitlementVisiblityCheck )
		pFnEntitlementVisiblityCheck = (UFunction*) UObject::GObjObjects()->Data[ 107831 ];

	Usfxgawreinforcementmanager_execEntitlementVisiblityCheck_Parms EntitlementVisiblityCheck_Parms;

	this->ProcessEvent ( pFnEntitlementVisiblityCheck, &EntitlementVisiblityCheck_Parms, NULL );

	if ( visible )
		memcpy ( visible, &EntitlementVisiblityCheck_Parms.visible, 0xC );

	if ( Entitlements )
		memcpy ( Entitlements, &EntitlementVisiblityCheck_Parms.Entitlements, 0xC );

	return EntitlementVisiblityCheck_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.CheckOfferVisibility
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FStoreInfoEntry         StoreItem                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FBWEntitlementInfo > Entitlements                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxgawreinforcementmanager::CheckOfferVisibility ( struct FStoreInfoEntry* StoreItem, TArray< struct FBWEntitlementInfo >* Entitlements )
{
	static UFunction* pFnCheckOfferVisibility = NULL;

	if ( ! pFnCheckOfferVisibility )
		pFnCheckOfferVisibility = (UFunction*) UObject::GObjObjects()->Data[ 107791 ];

	Usfxgawreinforcementmanager_execCheckOfferVisibility_Parms CheckOfferVisibility_Parms;

	this->ProcessEvent ( pFnCheckOfferVisibility, &CheckOfferVisibility_Parms, NULL );

	if ( StoreItem )
		memcpy ( StoreItem, &CheckOfferVisibility_Parms.StoreItem, 0x80 );

	if ( Entitlements )
		memcpy ( Entitlements, &CheckOfferVisibility_Parms.Entitlements, 0xC );

	return CheckOfferVisibility_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.FindOfferIndex
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nOfferID                       ( CPF_Parm )
// TArray< struct FBWOfferInfo >  Offers                         ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int Usfxgawreinforcementmanager::FindOfferIndex ( int nOfferID, TArray< struct FBWOfferInfo >* Offers )
{
	static UFunction* pFnFindOfferIndex = NULL;

	if ( ! pFnFindOfferIndex )
		pFnFindOfferIndex = (UFunction*) UObject::GObjObjects()->Data[ 107792 ];

	Usfxgawreinforcementmanager_execFindOfferIndex_Parms FindOfferIndex_Parms;
	FindOfferIndex_Parms.nOfferID = nOfferID;

	this->ProcessEvent ( pFnFindOfferIndex, &FindOfferIndex_Parms, NULL );

	if ( Offers )
		memcpy ( Offers, &FindOfferIndex_Parms.Offers, 0xC );

	return FindOfferIndex_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GetStoreItemPurchaseType
// [0x00444003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FirstPartyPrice                ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FStoreInfoEntry         StoreItem                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

unsigned char Usfxgawreinforcementmanager::GetStoreItemPurchaseType ( struct FString FirstPartyPrice, struct FStoreInfoEntry* StoreItem )
{
	static UFunction* pFnGetStoreItemPurchaseType = NULL;

	if ( ! pFnGetStoreItemPurchaseType )
		pFnGetStoreItemPurchaseType = (UFunction*) UObject::GObjObjects()->Data[ 107793 ];

	Usfxgawreinforcementmanager_execGetStoreItemPurchaseType_Parms GetStoreItemPurchaseType_Parms;
	memcpy ( &GetStoreItemPurchaseType_Parms.FirstPartyPrice, &FirstPartyPrice, 0xC );

	this->ProcessEvent ( pFnGetStoreItemPurchaseType, &GetStoreItemPurchaseType_Parms, NULL );

	if ( StoreItem )
		memcpy ( StoreItem, &GetStoreItemPurchaseType_Parms.StoreItem, 0x80 );

	return GetStoreItemPurchaseType_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GetPlatformCostValue
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemId                         ( CPF_Parm )

int Usfxgawreinforcementmanager::GetPlatformCostValue ( int ItemId )
{
	static UFunction* pFnGetPlatformCostValue = NULL;

	if ( ! pFnGetPlatformCostValue )
		pFnGetPlatformCostValue = (UFunction*) UObject::GObjObjects()->Data[ 107810 ];

	Usfxgawreinforcementmanager_execGetPlatformCostValue_Parms GetPlatformCostValue_Parms;
	GetPlatformCostValue_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnGetPlatformCostValue, &GetPlatformCostValue_Parms, NULL );

	return GetPlatformCostValue_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GetPlatformCost
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            ItemId                         ( CPF_Parm )

struct FString Usfxgawreinforcementmanager::GetPlatformCost ( int ItemId )
{
	static UFunction* pFnGetPlatformCost = NULL;

	if ( ! pFnGetPlatformCost )
		pFnGetPlatformCost = (UFunction*) UObject::GObjObjects()->Data[ 107803 ];

	Usfxgawreinforcementmanager_execGetPlatformCost_Parms GetPlatformCost_Parms;
	GetPlatformCost_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnGetPlatformCost, &GetPlatformCost_Parms, NULL );

	return GetPlatformCost_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GetCreditCost
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemId                         ( CPF_Parm )

int Usfxgawreinforcementmanager::GetCreditCost ( int ItemId )
{
	static UFunction* pFnGetCreditCost = NULL;

	if ( ! pFnGetCreditCost )
		pFnGetCreditCost = (UFunction*) UObject::GObjObjects()->Data[ 107799 ];

	Usfxgawreinforcementmanager_execGetCreditCost_Parms GetCreditCost_Parms;
	GetCreditCost_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnGetCreditCost, &GetCreditCost_Parms, NULL );

	return GetCreditCost_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.StoreItemSort
// [0x00120002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FStoreGUIData           Entry_A                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FStoreGUIData           Entry_B                        ( CPF_Parm | CPF_NeedCtorLink )

int Usfxgawreinforcementmanager::StoreItemSort ( struct FStoreGUIData Entry_A, struct FStoreGUIData Entry_B )
{
	static UFunction* pFnStoreItemSort = NULL;

	if ( ! pFnStoreItemSort )
		pFnStoreItemSort = (UFunction*) UObject::GObjObjects()->Data[ 107795 ];

	Usfxgawreinforcementmanager_execStoreItemSort_Parms StoreItemSort_Parms;
	memcpy ( &StoreItemSort_Parms.Entry_A, &Entry_A, 0x58 );
	memcpy ( &StoreItemSort_Parms.Entry_B, &Entry_B, 0x58 );

	this->ProcessEvent ( pFnStoreItemSort, &StoreItemSort_Parms, NULL );

	return StoreItemSort_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GetStoreItems
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FStoreGUIData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FStoreGUIData > Usfxgawreinforcementmanager::GetStoreItems ( )
{
	static UFunction* pFnGetStoreItems = NULL;

	if ( ! pFnGetStoreItems )
		pFnGetStoreItems = (UFunction*) UObject::GObjObjects()->Data[ 107775 ];

	Usfxgawreinforcementmanager_execGetStoreItems_Parms GetStoreItems_Parms;

	this->ProcessEvent ( pFnGetStoreItems, &GetStoreItems_Parms, NULL );

	return GetStoreItems_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GetStoreInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FStoreInfoEntry > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FStoreInfoEntry > Usfxgawreinforcementmanager::GetStoreInfo ( )
{
	static UFunction* pFnGetStoreInfo = NULL;

	if ( ! pFnGetStoreInfo )
		pFnGetStoreInfo = (UFunction*) UObject::GObjObjects()->Data[ 107772 ];

	Usfxgawreinforcementmanager_execGetStoreInfo_Parms GetStoreInfo_Parms;

	this->ProcessEvent ( pFnGetStoreInfo, &GetStoreInfo_Parms, NULL );

	return GetStoreInfo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.IsFetchingProductDetails
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgawreinforcementmanager::IsFetchingProductDetails ( )
{
	static UFunction* pFnIsFetchingProductDetails = NULL;

	if ( ! pFnIsFetchingProductDetails )
		pFnIsFetchingProductDetails = (UFunction*) UObject::GObjObjects()->Data[ 107770 ];

	Usfxgawreinforcementmanager_execIsFetchingProductDetails_Parms IsFetchingProductDetails_Parms;

	this->ProcessEvent ( pFnIsFetchingProductDetails, &IsFetchingProductDetails_Parms, NULL );

	return IsFetchingProductDetails_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GetProductDetailsComplete
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void Usfxgawreinforcementmanager::GetProductDetailsComplete ( )
{
	static UFunction* pFnGetProductDetailsComplete = NULL;

	if ( ! pFnGetProductDetailsComplete )
		pFnGetProductDetailsComplete = (UFunction*) UObject::GObjObjects()->Data[ 107769 ];

	Usfxgawreinforcementmanager_execGetProductDetailsComplete_Parms GetProductDetailsComplete_Parms;

	this->ProcessEvent ( pFnGetProductDetailsComplete, &GetProductDetailsComplete_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.UpdateStoreDescriptions
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgawreinforcementmanager::UpdateStoreDescriptions ( )
{
	static UFunction* pFnUpdateStoreDescriptions = NULL;

	if ( ! pFnUpdateStoreDescriptions )
		pFnUpdateStoreDescriptions = (UFunction*) UObject::GObjObjects()->Data[ 107740 ];

	Usfxgawreinforcementmanager_execUpdateStoreDescriptions_Parms UpdateStoreDescriptions_Parms;

	this->ProcessEvent ( pFnUpdateStoreDescriptions, &UpdateStoreDescriptions_Parms, NULL );

	return UpdateStoreDescriptions_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.MatchConsumableSort
// [0x00120002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           ItemA                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FCardInfoData           ItemB                          ( CPF_Parm | CPF_NeedCtorLink )

int Usfxgawreinforcementmanager::MatchConsumableSort ( struct FCardInfoData ItemA, struct FCardInfoData ItemB )
{
	static UFunction* pFnMatchConsumableSort = NULL;

	if ( ! pFnMatchConsumableSort )
		pFnMatchConsumableSort = (UFunction*) UObject::GObjObjects()->Data[ 107734 ];

	Usfxgawreinforcementmanager_execMatchConsumableSort_Parms MatchConsumableSort_Parms;
	memcpy ( &MatchConsumableSort_Parms.ItemA, &ItemA, 0x68 );
	memcpy ( &MatchConsumableSort_Parms.ItemB, &ItemB, 0x68 );

	this->ProcessEvent ( pFnMatchConsumableSort, &MatchConsumableSort_Parms, NULL );

	return MatchConsumableSort_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GetUniqueMatchConsumables
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// class Usfxgawreinforcementmatchconsumable* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class Usfxgawreinforcementmatchconsumable* Usfxgawreinforcementmanager::GetUniqueMatchConsumables ( )
{
	static UFunction* pFnGetUniqueMatchConsumables = NULL;

	if ( ! pFnGetUniqueMatchConsumables )
		pFnGetUniqueMatchConsumables = (UFunction*) UObject::GObjObjects()->Data[ 107722 ];

	Usfxgawreinforcementmanager_execGetUniqueMatchConsumables_Parms GetUniqueMatchConsumables_Parms;

	this->ProcessEvent ( pFnGetUniqueMatchConsumables, &GetUniqueMatchConsumables_Parms, NULL );

	return GetUniqueMatchConsumables_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GiveCardPack
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FCardInfoData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 PackName                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            nConsumableId                  ( CPF_OptionalParm | CPF_Parm )

TArray< struct FCardInfoData > Usfxgawreinforcementmanager::GiveCardPack ( struct FString PackName, int nConsumableId )
{
	static UFunction* pFnGiveCardPack = NULL;

	if ( ! pFnGiveCardPack )
		pFnGiveCardPack = (UFunction*) UObject::GObjObjects()->Data[ 107696 ];

	Usfxgawreinforcementmanager_execGiveCardPack_Parms GiveCardPack_Parms;
	memcpy ( &GiveCardPack_Parms.PackName, &PackName, 0xC );
	GiveCardPack_Parms.nConsumableId = nConsumableId;

	this->ProcessEvent ( pFnGiveCardPack, &GiveCardPack_Parms, NULL );

	return GiveCardPack_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.AwardRandomCardsFromPoolCards
// [0x00C24003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 PoolName                       ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// int                            Quantity                       ( CPF_Parm )
// unsigned long                  AllowDupes                     ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FCardInfoData > ChosenCards                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int Usfxgawreinforcementmanager::AwardRandomCardsFromPoolCards ( struct FString PoolName, int Quantity, unsigned long AllowDupes, TArray< struct FCardInfoData >* ChosenCards )
{
	static UFunction* pFnAwardRandomCardsFromPoolCards = NULL;

	if ( ! pFnAwardRandomCardsFromPoolCards )
		pFnAwardRandomCardsFromPoolCards = (UFunction*) UObject::GObjObjects()->Data[ 107684 ];

	Usfxgawreinforcementmanager_execAwardRandomCardsFromPoolCards_Parms AwardRandomCardsFromPoolCards_Parms;
	memcpy ( &AwardRandomCardsFromPoolCards_Parms.PoolName, &PoolName, 0xC );
	AwardRandomCardsFromPoolCards_Parms.Quantity = Quantity;
	AwardRandomCardsFromPoolCards_Parms.AllowDupes = AllowDupes;

	this->ProcessEvent ( pFnAwardRandomCardsFromPoolCards, &AwardRandomCardsFromPoolCards_Parms, NULL );

	if ( ChosenCards )
		memcpy ( ChosenCards, &AwardRandomCardsFromPoolCards_Parms.ChosenCards, 0xC );

	return AwardRandomCardsFromPoolCards_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.PopulateCardData
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           Card                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxgawreinforcementmanager::PopulateCardData ( struct FCardInfoData* Card )
{
	static UFunction* pFnPopulateCardData = NULL;

	if ( ! pFnPopulateCardData )
		pFnPopulateCardData = (UFunction*) UObject::GObjObjects()->Data[ 107418 ];

	Usfxgawreinforcementmanager_execPopulateCardData_Parms PopulateCardData_Parms;

	this->ProcessEvent ( pFnPopulateCardData, &PopulateCardData_Parms, NULL );

	if ( Card )
		memcpy ( Card, &PopulateCardData_Parms.Card, 0x68 );

	return PopulateCardData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.GetCardsOfType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< class USFXGAWReinforcementBase* > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 PoolName                       ( CPF_Parm | CPF_NeedCtorLink )

TArray< class USFXGAWReinforcementBase* > Usfxgawreinforcementmanager::GetCardsOfType ( struct FString PoolName )
{
	static UFunction* pFnGetCardsOfType = NULL;

	if ( ! pFnGetCardsOfType )
		pFnGetCardsOfType = (UFunction*) UObject::GObjObjects()->Data[ 107665 ];

	Usfxgawreinforcementmanager_execGetCardsOfType_Parms GetCardsOfType_Parms;
	memcpy ( &GetCardsOfType_Parms.PoolName, &PoolName, 0xC );

	this->ProcessEvent ( pFnGetCardsOfType, &GetCardsOfType_Parms, NULL );

	return GetCardsOfType_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.CardSort
// [0x00120002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXGAWReinforcementBase* CardA                          ( CPF_Parm )
// class USFXGAWReinforcementBase* CardB                          ( CPF_Parm )

int Usfxgawreinforcementmanager::CardSort ( class USFXGAWReinforcementBase* CardA, class USFXGAWReinforcementBase* CardB )
{
	static UFunction* pFnCardSort = NULL;

	if ( ! pFnCardSort )
		pFnCardSort = (UFunction*) UObject::GObjObjects()->Data[ 107661 ];

	Usfxgawreinforcementmanager_execCardSort_Parms CardSort_Parms;
	CardSort_Parms.CardA = CardA;
	CardSort_Parms.CardB = CardB;

	this->ProcessEvent ( pFnCardSort, &CardSort_Parms, NULL );

	return CardSort_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.LoadDeck
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgawreinforcementmanager::LoadDeck ( )
{
	static UFunction* pFnLoadDeck = NULL;

	if ( ! pFnLoadDeck )
		pFnLoadDeck = (UFunction*) UObject::GObjObjects()->Data[ 107654 ];

	Usfxgawreinforcementmanager_execLoadDeck_Parms LoadDeck_Parms;

	this->ProcessEvent ( pFnLoadDeck, &LoadDeck_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.OnPurchaseItemWithCreditsDelegate
// [0x00120000] 
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Usfxgawreinforcementmanager::OnPurchaseItemWithCreditsDelegate ( int nResult )
{
	static UFunction* pFnOnPurchaseItemWithCreditsDelegate = NULL;

	if ( ! pFnOnPurchaseItemWithCreditsDelegate )
		pFnOnPurchaseItemWithCreditsDelegate = (UFunction*) UObject::GObjObjects()->Data[ 107652 ];

	Usfxgawreinforcementmanager_execOnPurchaseItemWithCreditsDelegate_Parms OnPurchaseItemWithCreditsDelegate_Parms;
	OnPurchaseItemWithCreditsDelegate_Parms.nResult = nResult;

	this->ProcessEvent ( pFnOnPurchaseItemWithCreditsDelegate, &OnPurchaseItemWithCreditsDelegate_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.OnProcessConsumablesDelegate
// [0x00120000] 
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Usfxgawreinforcementmanager::OnProcessConsumablesDelegate ( int nResult )
{
	static UFunction* pFnOnProcessConsumablesDelegate = NULL;

	if ( ! pFnOnProcessConsumablesDelegate )
		pFnOnProcessConsumablesDelegate = (UFunction*) UObject::GObjObjects()->Data[ 107650 ];

	Usfxgawreinforcementmanager_execOnProcessConsumablesDelegate_Parms OnProcessConsumablesDelegate_Parms;
	OnProcessConsumablesDelegate_Parms.nResult = nResult;

	this->ProcessEvent ( pFnOnProcessConsumablesDelegate, &OnProcessConsumablesDelegate_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmanager.OnPurchaseItemDelegate
// [0x00120000] 
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Usfxgawreinforcementmanager::OnPurchaseItemDelegate ( int nResult )
{
	static UFunction* pFnOnPurchaseItemDelegate = NULL;

	if ( ! pFnOnPurchaseItemDelegate )
		pFnOnPurchaseItemDelegate = (UFunction*) UObject::GObjObjects()->Data[ 107648 ];

	Usfxgawreinforcementmanager_execOnPurchaseItemDelegate_Parms OnPurchaseItemDelegate_Parms;
	OnPurchaseItemDelegate_Parms.nResult = nResult;

	this->ProcessEvent ( pFnOnPurchaseItemDelegate, &OnPurchaseItemDelegate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.ConsumeNonGameplayConsumable
// [0x00022002] 
// Parameters infos:
// struct FName                   UniqueName                     ( CPF_Parm )
// int                            VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementBase::ConsumeNonGameplayConsumable ( struct FName UniqueName, int VersionIdx )
{
	static UFunction* pFnConsumeNonGameplayConsumable = NULL;

	if ( ! pFnConsumeNonGameplayConsumable )
		pFnConsumeNonGameplayConsumable = (UFunction*) UObject::GObjObjects()->Data[ 105410 ];

	USFXGAWReinforcementBase_execConsumeNonGameplayConsumable_Parms ConsumeNonGameplayConsumable_Parms;
	memcpy ( &ConsumeNonGameplayConsumable_Parms.UniqueName, &UniqueName, 0x8 );
	ConsumeNonGameplayConsumable_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnConsumeNonGameplayConsumable, &ConsumeNonGameplayConsumable_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GenerateCardUniqueID
// [0x00020002] 
// Parameters infos:
// int                            idx                            ( CPF_Parm )

void USFXGAWReinforcementBase::GenerateCardUniqueID ( int idx )
{
	static UFunction* pFnGenerateCardUniqueID = NULL;

	if ( ! pFnGenerateCardUniqueID )
		pFnGenerateCardUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 105406 ];

	USFXGAWReinforcementBase_execGenerateCardUniqueID_Parms GenerateCardUniqueID_Parms;
	GenerateCardUniqueID_Parms.idx = idx;

	this->ProcessEvent ( pFnGenerateCardUniqueID, &GenerateCardUniqueID_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCardUniqueID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

int USFXGAWReinforcementBase::GetCardUniqueID ( int idx )
{
	static UFunction* pFnGetCardUniqueID = NULL;

	if ( ! pFnGetCardUniqueID )
		pFnGetCardUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 105394 ];

	USFXGAWReinforcementBase_execGetCardUniqueID_Parms GetCardUniqueID_Parms;
	GetCardUniqueID_Parms.idx = idx;

	this->ProcessEvent ( pFnGetCardUniqueID, &GetCardUniqueID_Parms, NULL );

	return GetCardUniqueID_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetPlayerVariableNameFromCard
// [0x00420002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           Card                           ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FName USFXGAWReinforcementBase::GetPlayerVariableNameFromCard ( struct FCardInfoData* Card )
{
	static UFunction* pFnGetPlayerVariableNameFromCard = NULL;

	if ( ! pFnGetPlayerVariableNameFromCard )
		pFnGetPlayerVariableNameFromCard = (UFunction*) UObject::GObjObjects()->Data[ 105390 ];

	USFXGAWReinforcementBase_execGetPlayerVariableNameFromCard_Parms GetPlayerVariableNameFromCard_Parms;

	this->ProcessEvent ( pFnGetPlayerVariableNameFromCard, &GetPlayerVariableNameFromCard_Parms, NULL );

	if ( Card )
		memcpy ( Card, &GetPlayerVariableNameFromCard_Parms.Card, 0x68 );

	return GetPlayerVariableNameFromCard_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetPlayerVariableName
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

struct FName USFXGAWReinforcementBase::GetPlayerVariableName ( int idx )
{
	static UFunction* pFnGetPlayerVariableName = NULL;

	if ( ! pFnGetPlayerVariableName )
		pFnGetPlayerVariableName = (UFunction*) UObject::GObjObjects()->Data[ 105384 ];

	USFXGAWReinforcementBase_execGetPlayerVariableName_Parms GetPlayerVariableName_Parms;
	GetPlayerVariableName_Parms.idx = idx;

	this->ProcessEvent ( pFnGetPlayerVariableName, &GetPlayerVariableName_Parms, NULL );

	return GetPlayerVariableName_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCurrentCount
// [0x00024002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SearchUniqueID                 ( CPF_Parm )
// int                            VersionIdx                     ( CPF_OptionalParm | CPF_Parm )

int USFXGAWReinforcementBase::GetCurrentCount ( int SearchUniqueID, int VersionIdx )
{
	static UFunction* pFnGetCurrentCount = NULL;

	if ( ! pFnGetCurrentCount )
		pFnGetCurrentCount = (UFunction*) UObject::GObjObjects()->Data[ 105381 ];

	USFXGAWReinforcementBase_execGetCurrentCount_Parms GetCurrentCount_Parms;
	GetCurrentCount_Parms.SearchUniqueID = SearchUniqueID;
	GetCurrentCount_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnGetCurrentCount, &GetCurrentCount_Parms, NULL );

	return GetCurrentCount_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.OnAwarded
// [0x00424002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           CardInfoOut                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FCardInfoData > ChosenCards                    ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXGAWReinforcementBase::OnAwarded ( struct FCardInfoData* CardInfoOut, TArray< struct FCardInfoData >* ChosenCards )
{
	static UFunction* pFnOnAwarded = NULL;

	if ( ! pFnOnAwarded )
		pFnOnAwarded = (UFunction*) UObject::GObjObjects()->Data[ 105367 ];

	USFXGAWReinforcementBase_execOnAwarded_Parms OnAwarded_Parms;

	this->ProcessEvent ( pFnOnAwarded, &OnAwarded_Parms, NULL );

	if ( CardInfoOut )
		memcpy ( CardInfoOut, &OnAwarded_Parms.CardInfoOut, 0x68 );

	if ( ChosenCards )
		memcpy ( ChosenCards, &OnAwarded_Parms.ChosenCards, 0xC );

	return OnAwarded_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.SetCurrentValue
// [0x00020002] 
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void USFXGAWReinforcementBase::SetCurrentValue ( struct FName VarName, int Value )
{
	static UFunction* pFnSetCurrentValue = NULL;

	if ( ! pFnSetCurrentValue )
		pFnSetCurrentValue = (UFunction*) UObject::GObjObjects()->Data[ 107431 ];

	USFXGAWReinforcementBase_execSetCurrentValue_Parms SetCurrentValue_Parms;
	memcpy ( &SetCurrentValue_Parms.VarName, &VarName, 0x8 );
	SetCurrentValue_Parms.Value = Value;

	this->ProcessEvent ( pFnSetCurrentValue, &SetCurrentValue_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCurrentValue
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   VarName                        ( CPF_Parm )

int USFXGAWReinforcementBase::GetCurrentValue ( struct FName VarName )
{
	static UFunction* pFnGetCurrentValue = NULL;

	if ( ! pFnGetCurrentValue )
		pFnGetCurrentValue = (UFunction*) UObject::GObjObjects()->Data[ 105745 ];

	USFXGAWReinforcementBase_execGetCurrentValue_Parms GetCurrentValue_Parms;
	memcpy ( &GetCurrentValue_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnGetCurrentValue, &GetCurrentValue_Parms, NULL );

	return GetCurrentValue_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Initialize
// [0x00020002] 
// Parameters infos:

void USFXGAWReinforcementBase::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 105742 ];

	USFXGAWReinforcementBase_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.IsActive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

bool USFXGAWReinforcementBase::IsActive ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 105739 ];

	USFXGAWReinforcementBase_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.UniqueId = UniqueId;
	IsActive_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	return IsActive_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Deactivate
// [0x00020000] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementBase::Deactivate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnDeactivate = NULL;

	if ( ! pFnDeactivate )
		pFnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 105737 ];

	USFXGAWReinforcementBase_execDeactivate_Parms Deactivate_Parms;
	Deactivate_Parms.UniqueId = UniqueId;
	Deactivate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnDeactivate, &Deactivate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Activate
// [0x00020000] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementBase::Activate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 105733 ];

	USFXGAWReinforcementBase_execActivate_Parms Activate_Parms;
	Activate_Parms.UniqueId = UniqueId;
	Activate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.TrimTrailingZeroes_NoGear
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  KeepDecimal                    ( CPF_Parm )

struct FString Usfxgawreinforcementmatchconsumable::TrimTrailingZeroes_NoGear ( struct FString S, unsigned long KeepDecimal )
{
	static UFunction* pFnTrimTrailingZeroes_NoGear = NULL;

	if ( ! pFnTrimTrailingZeroes_NoGear )
		pFnTrimTrailingZeroes_NoGear = (UFunction*) UObject::GObjObjects()->Data[ 109035 ];

	Usfxgawreinforcementmatchconsumable_execTrimTrailingZeroes_NoGear_Parms TrimTrailingZeroes_NoGear_Parms;
	memcpy ( &TrimTrailingZeroes_NoGear_Parms.S, &S, 0xC );
	TrimTrailingZeroes_NoGear_Parms.KeepDecimal = KeepDecimal;

	this->ProcessEvent ( pFnTrimTrailingZeroes_NoGear, &TrimTrailingZeroes_NoGear_Parms, NULL );

	return TrimTrailingZeroes_NoGear_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.FloatToString_NoGear
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// float                          F                              ( CPF_Parm )

struct FString Usfxgawreinforcementmatchconsumable::FloatToString_NoGear ( float F )
{
	static UFunction* pFnFloatToString_NoGear = NULL;

	if ( ! pFnFloatToString_NoGear )
		pFnFloatToString_NoGear = (UFunction*) UObject::GObjObjects()->Data[ 109048 ];

	Usfxgawreinforcementmatchconsumable_execFloatToString_NoGear_Parms FloatToString_NoGear_Parms;
	FloatToString_NoGear_Parms.F = F;

	this->ProcessEvent ( pFnFloatToString_NoGear, &FloatToString_NoGear_Parms, NULL );

	return FloatToString_NoGear_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.FloatToPercentString_NoGear
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// float                          F                              ( CPF_Parm )

struct FString Usfxgawreinforcementmatchconsumable::FloatToPercentString_NoGear ( float F )
{
	static UFunction* pFnFloatToPercentString_NoGear = NULL;

	if ( ! pFnFloatToPercentString_NoGear )
		pFnFloatToPercentString_NoGear = (UFunction*) UObject::GObjObjects()->Data[ 109053 ];

	Usfxgawreinforcementmatchconsumable_execFloatToPercentString_NoGear_Parms FloatToPercentString_NoGear_Parms;
	FloatToPercentString_NoGear_Parms.F = F;

	this->ProcessEvent ( pFnFloatToPercentString_NoGear, &FloatToPercentString_NoGear_Parms, NULL );

	return FloatToPercentString_NoGear_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.FindDescriptionTokens_NoGear
// [0x00020002] 
// Parameters infos:
// struct FDescriptionTokens      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 CardUniqueName                 ( CPF_Parm | CPF_NeedCtorLink )

struct FDescriptionTokens Usfxgawreinforcementmatchconsumable::FindDescriptionTokens_NoGear ( struct FString CardUniqueName )
{
	static UFunction* pFnFindDescriptionTokens_NoGear = NULL;

	if ( ! pFnFindDescriptionTokens_NoGear )
		pFnFindDescriptionTokens_NoGear = (UFunction*) UObject::GObjObjects()->Data[ 109056 ];

	Usfxgawreinforcementmatchconsumable_execFindDescriptionTokens_NoGear_Parms FindDescriptionTokens_NoGear_Parms;
	memcpy ( &FindDescriptionTokens_NoGear_Parms.CardUniqueName, &CardUniqueName, 0xC );

	this->ProcessEvent ( pFnFindDescriptionTokens_NoGear, &FindDescriptionTokens_NoGear_Parms, NULL );

	return FindDescriptionTokens_NoGear_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.PrepareCustomTokensForDescription
// [0x00020002] 
// Parameters infos:
// struct FString                 CardUniqueName                 ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgawreinforcementmatchconsumable::PrepareCustomTokensForDescription ( struct FString CardUniqueName )
{
	static UFunction* pFnPrepareCustomTokensForDescription = NULL;

	if ( ! pFnPrepareCustomTokensForDescription )
		pFnPrepareCustomTokensForDescription = (UFunction*) UObject::GObjObjects()->Data[ 109059 ];

	Usfxgawreinforcementmatchconsumable_execPrepareCustomTokensForDescription_Parms PrepareCustomTokensForDescription_Parms;
	memcpy ( &PrepareCustomTokensForDescription_Parms.CardUniqueName, &CardUniqueName, 0xC );

	this->ProcessEvent ( pFnPrepareCustomTokensForDescription, &PrepareCustomTokensForDescription_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.OnAwarded
// [0x00424002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           CardInfoOut                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FCardInfoData > ChosenCards                    ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxgawreinforcementmatchconsumable::OnAwarded ( struct FCardInfoData* CardInfoOut, TArray< struct FCardInfoData >* ChosenCards )
{
	static UFunction* pFnOnAwarded = NULL;

	if ( ! pFnOnAwarded )
		pFnOnAwarded = (UFunction*) UObject::GObjObjects()->Data[ 109026 ];

	Usfxgawreinforcementmatchconsumable_execOnAwarded_Parms OnAwarded_Parms;

	this->ProcessEvent ( pFnOnAwarded, &OnAwarded_Parms, NULL );

	if ( CardInfoOut )
		memcpy ( CardInfoOut, &OnAwarded_Parms.CardInfoOut, 0x68 );

	if ( ChosenCards )
		memcpy ( ChosenCards, &OnAwarded_Parms.ChosenCards, 0xC );

	return OnAwarded_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.GetPlayerVariableNameFromCard
// [0x00420002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           Card                           ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FName Usfxgawreinforcementmatchconsumable::GetPlayerVariableNameFromCard ( struct FCardInfoData* Card )
{
	static UFunction* pFnGetPlayerVariableNameFromCard = NULL;

	if ( ! pFnGetPlayerVariableNameFromCard )
		pFnGetPlayerVariableNameFromCard = (UFunction*) UObject::GObjObjects()->Data[ 109022 ];

	Usfxgawreinforcementmatchconsumable_execGetPlayerVariableNameFromCard_Parms GetPlayerVariableNameFromCard_Parms;

	this->ProcessEvent ( pFnGetPlayerVariableNameFromCard, &GetPlayerVariableNameFromCard_Parms, NULL );

	if ( Card )
		memcpy ( Card, &GetPlayerVariableNameFromCard_Parms.Card, 0x68 );

	return GetPlayerVariableNameFromCard_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.GetPlayerVariableName
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

struct FName Usfxgawreinforcementmatchconsumable::GetPlayerVariableName ( int idx )
{
	static UFunction* pFnGetPlayerVariableName = NULL;

	if ( ! pFnGetPlayerVariableName )
		pFnGetPlayerVariableName = (UFunction*) UObject::GObjObjects()->Data[ 109018 ];

	Usfxgawreinforcementmatchconsumable_execGetPlayerVariableName_Parms GetPlayerVariableName_Parms;
	GetPlayerVariableName_Parms.idx = idx;

	this->ProcessEvent ( pFnGetPlayerVariableName, &GetPlayerVariableName_Parms, NULL );

	return GetPlayerVariableName_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.GetSlotTypeForCategory
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Category                       ( CPF_Parm )

int Usfxgawreinforcementmatchconsumable::GetSlotTypeForCategory ( int Category )
{
	static UFunction* pFnGetSlotTypeForCategory = NULL;

	if ( ! pFnGetSlotTypeForCategory )
		pFnGetSlotTypeForCategory = (UFunction*) UObject::GObjObjects()->Data[ 109015 ];

	Usfxgawreinforcementmatchconsumable_execGetSlotTypeForCategory_Parms GetSlotTypeForCategory_Parms;
	GetSlotTypeForCategory_Parms.Category = Category;

	this->ProcessEvent ( pFnGetSlotTypeForCategory, &GetSlotTypeForCategory_Parms, NULL );

	return GetSlotTypeForCategory_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.Deactivate
// [0x00020002] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void Usfxgawreinforcementmatchconsumable::Deactivate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnDeactivate = NULL;

	if ( ! pFnDeactivate )
		pFnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 109010 ];

	Usfxgawreinforcementmatchconsumable_execDeactivate_Parms Deactivate_Parms;
	Deactivate_Parms.UniqueId = UniqueId;
	Deactivate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnDeactivate, &Deactivate_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.Activate
// [0x00020002] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void Usfxgawreinforcementmatchconsumable::Activate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 109005 ];

	Usfxgawreinforcementmatchconsumable_execActivate_Parms Activate_Parms;
	Activate_Parms.UniqueId = UniqueId;
	Activate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.IsActive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

bool Usfxgawreinforcementmatchconsumable::IsActive ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 108999 ];

	Usfxgawreinforcementmatchconsumable_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.UniqueId = UniqueId;
	IsActive_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	return IsActive_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.ContainsCard
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

bool Usfxgawreinforcementmatchconsumable::ContainsCard ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnContainsCard = NULL;

	if ( ! pFnContainsCard )
		pFnContainsCard = (UFunction*) UObject::GObjObjects()->Data[ 107731 ];

	Usfxgawreinforcementmatchconsumable_execContainsCard_Parms ContainsCard_Parms;
	ContainsCard_Parms.UniqueId = UniqueId;
	ContainsCard_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnContainsCard, &ContainsCard_Parms, NULL );

	return ContainsCard_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.FindCardIndexFromID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

int Usfxgawreinforcementmatchconsumable::FindCardIndexFromID ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnFindCardIndexFromID = NULL;

	if ( ! pFnFindCardIndexFromID )
		pFnFindCardIndexFromID = (UFunction*) UObject::GObjObjects()->Data[ 108991 ];

	Usfxgawreinforcementmatchconsumable_execFindCardIndexFromID_Parms FindCardIndexFromID_Parms;
	FindCardIndexFromID_Parms.UniqueId = UniqueId;
	FindCardIndexFromID_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnFindCardIndexFromID, &FindCardIndexFromID_Parms, NULL );

	return FindCardIndexFromID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.GetPRI
// [0x00020002] 
// Parameters infos:
// class Asfxpri*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class Asfxpri* Usfxgawreinforcementmatchconsumable::GetPRI ( )
{
	static UFunction* pFnGetPRI = NULL;

	if ( ! pFnGetPRI )
		pFnGetPRI = (UFunction*) UObject::GObjObjects()->Data[ 108985 ];

	Usfxgawreinforcementmatchconsumable_execGetPRI_Parms GetPRI_Parms;

	this->ProcessEvent ( pFnGetPRI, &GetPRI_Parms, NULL );

	return GetPRI_Parms.ReturnValue;
};

// Function SFXGame.SFXTelemetry.SendCachedDisconnectEvent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void Usfxtelemetryhooksmp::SendCachedDisconnectEvent ( )
{
	static UFunction* pFnSendCachedDisconnectEvent = NULL;

	if ( ! pFnSendCachedDisconnectEvent )
		pFnSendCachedDisconnectEvent = (UFunction*) UObject::GObjObjects()->Data[ 87418 ];

	Usfxtelemetryhooksmp_execSendCachedDisconnectEvent_Parms SendCachedDisconnectEvent_Parms;

	pFnSendCachedDisconnectEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendCachedDisconnectEvent, &SendCachedDisconnectEvent_Parms, NULL );

	pFnSendCachedDisconnectEvent->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXTelemetry.SendLanguageOverrideSettings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void Usfxtelemetryhooksmp::SendLanguageOverrideSettings ( )
{
	static UFunction* pFnSendLanguageOverrideSettings = NULL;

	if ( ! pFnSendLanguageOverrideSettings )
		pFnSendLanguageOverrideSettings = (UFunction*) UObject::GObjObjects()->Data[ 87417 ];

	Usfxtelemetryhooksmp_execSendLanguageOverrideSettings_Parms SendLanguageOverrideSettings_Parms;

	pFnSendLanguageOverrideSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendLanguageOverrideSettings, &SendLanguageOverrideSettings_Parms, NULL );

	pFnSendLanguageOverrideSettings->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXTelemetry.GetCharacterID
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FGuid                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Pawn                           ( CPF_Parm )

struct FGuid Usfxtelemetryhooksmp::eventGetCharacterID ( class ABioPawn* Pawn )
{
	static UFunction* pFnGetCharacterID = NULL;

	if ( ! pFnGetCharacterID )
		pFnGetCharacterID = (UFunction*) UObject::GObjObjects()->Data[ 87419 ];

	Usfxtelemetryhooksmp_eventGetCharacterID_Parms GetCharacterID_Parms;
	GetCharacterID_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnGetCharacterID, &GetCharacterID_Parms, NULL );

	return GetCharacterID_Parms.ReturnValue;
};

// Function SFXGame.SFXTelemetry.SendProfileDependentTelemetry
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void Usfxtelemetryhooksmp::SendProfileDependentTelemetry ( unsigned char LocalUserNum )
{
	static UFunction* pFnSendProfileDependentTelemetry = NULL;

	if ( ! pFnSendProfileDependentTelemetry )
		pFnSendProfileDependentTelemetry = (UFunction*) UObject::GObjObjects()->Data[ 87413 ];

	Usfxtelemetryhooksmp_execSendProfileDependentTelemetry_Parms SendProfileDependentTelemetry_Parms;
	SendProfileDependentTelemetry_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnSendProfileDependentTelemetry, &SendProfileDependentTelemetry_Parms, NULL );
};

// Function SFXGame.SFXTelemetry.SendTelemetryOnProfileReadComplete
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void Usfxtelemetryhooksmp::SendTelemetryOnProfileReadComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnSendTelemetryOnProfileReadComplete = NULL;

	if ( ! pFnSendTelemetryOnProfileReadComplete )
		pFnSendTelemetryOnProfileReadComplete = (UFunction*) UObject::GObjObjects()->Data[ 87407 ];

	Usfxtelemetryhooksmp_execSendTelemetryOnProfileReadComplete_Parms SendTelemetryOnProfileReadComplete_Parms;
	SendTelemetryOnProfileReadComplete_Parms.LocalUserNum = LocalUserNum;
	SendTelemetryOnProfileReadComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnSendTelemetryOnProfileReadComplete, &SendTelemetryOnProfileReadComplete_Parms, NULL );
};

// Function SFXGame.SFXTelemetry.OnLoginChange
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void Usfxtelemetryhooksmp::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 87402 ];

	Usfxtelemetryhooksmp_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function SFXGame.SFXTelemetry.OnAuthenticate
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxtelemetryhooksmp::OnAuthenticate ( )
{
	static UFunction* pFnOnAuthenticate = NULL;

	if ( ! pFnOnAuthenticate )
		pFnOnAuthenticate = (UFunction*) UObject::GObjObjects()->Data[ 87398 ];

	Usfxtelemetryhooksmp_execOnAuthenticate_Parms OnAuthenticate_Parms;

	this->ProcessEvent ( pFnOnAuthenticate, &OnAuthenticate_Parms, NULL );
};

// Function SFXGame.SFXTelemetry.InitConnectionDelegates
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void Usfxtelemetryhooksmp::eventInitConnectionDelegates ( )
{
	static UFunction* pFnInitConnectionDelegates = NULL;

	if ( ! pFnInitConnectionDelegates )
		pFnInitConnectionDelegates = (UFunction*) UObject::GObjObjects()->Data[ 87395 ];

	Usfxtelemetryhooksmp_eventInitConnectionDelegates_Parms InitConnectionDelegates_Parms;

	this->ProcessEvent ( pFnInitConnectionDelegates, &InitConnectionDelegates_Parms, NULL );
};

// Function SFXGame.SFXTelemetry.OnDisconnect
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            Error                          ( CPF_Parm )
// int                            PreviousState                  ( CPF_Parm )
// int                            NewState                       ( CPF_Parm )
// struct FString                 SessionId                      ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void Usfxtelemetryhooksmp::OnDisconnect ( int Error, int PreviousState, int NewState, struct FString SessionId )
{
	static UFunction* pFnOnDisconnect = NULL;

	if ( ! pFnOnDisconnect )
		pFnOnDisconnect = (UFunction*) UObject::GObjObjects()->Data[ 87390 ];

	Usfxtelemetryhooksmp_execOnDisconnect_Parms OnDisconnect_Parms;
	OnDisconnect_Parms.Error = Error;
	OnDisconnect_Parms.PreviousState = PreviousState;
	OnDisconnect_Parms.NewState = NewState;
	memcpy ( &OnDisconnect_Parms.SessionId, &SessionId, 0xC );

	pFnOnDisconnect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnDisconnect, &OnDisconnect_Parms, NULL );

	pFnOnDisconnect->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXTelemetry.IsCollectionEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxtelemetryhooksmp::IsCollectionEnabled ( )
{
	static UFunction* pFnIsCollectionEnabled = NULL;

	if ( ! pFnIsCollectionEnabled )
		pFnIsCollectionEnabled = (UFunction*) UObject::GObjObjects()->Data[ 87388 ];

	Usfxtelemetryhooksmp_execIsCollectionEnabled_Parms IsCollectionEnabled_Parms;

	pFnIsCollectionEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCollectionEnabled, &IsCollectionEnabled_Parms, NULL );

	pFnIsCollectionEnabled->FunctionFlags |= 0x400;

	return IsCollectionEnabled_Parms.ReturnValue;
};

// Function SFXGame.SFXTelemetry.AddAttributeToArray
// [0x00426002] 
// Parameters infos:
// unsigned char                  Type                           ( CPF_Parm )
// struct FString                 Key                            ( CPF_Parm | CPF_NeedCtorLink )
// int                            nData                          ( CPF_OptionalParm | CPF_Parm )
// float                          fData                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bData                          ( CPF_OptionalParm | CPF_Parm )
// struct FName                   nmData                         ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FTelemetryAttribute > Attributes                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 sData                          ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxtelemetryhooksmp::AddAttributeToArray ( unsigned char Type, struct FString Key, int nData, float fData, unsigned long bData, struct FName nmData, TArray< struct FTelemetryAttribute >* Attributes, struct FString* sData )
{
	static UFunction* pFnAddAttributeToArray = NULL;

	if ( ! pFnAddAttributeToArray )
		pFnAddAttributeToArray = (UFunction*) UObject::GObjObjects()->Data[ 87376 ];

	Usfxtelemetryhooksmp_execAddAttributeToArray_Parms AddAttributeToArray_Parms;
	AddAttributeToArray_Parms.Type = Type;
	memcpy ( &AddAttributeToArray_Parms.Key, &Key, 0xC );
	AddAttributeToArray_Parms.nData = nData;
	AddAttributeToArray_Parms.fData = fData;
	AddAttributeToArray_Parms.bData = bData;
	memcpy ( &AddAttributeToArray_Parms.nmData, &nmData, 0x8 );

	this->ProcessEvent ( pFnAddAttributeToArray, &AddAttributeToArray_Parms, NULL );

	if ( Attributes )
		memcpy ( Attributes, &AddAttributeToArray_Parms.Attributes, 0xC );

	if ( sData )
		memcpy ( sData, &AddAttributeToArray_Parms.sData, 0xC );
};

// Function SFXGame.SFXTelemetry.SendAchievement
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            AchievementId                  ( CPF_Parm )

void Usfxtelemetryhooksmp::SendAchievement ( int AchievementId )
{
	static UFunction* pFnSendAchievement = NULL;

	if ( ! pFnSendAchievement )
		pFnSendAchievement = (UFunction*) UObject::GObjObjects()->Data[ 63734 ];

	Usfxtelemetryhooksmp_execSendAchievement_Parms SendAchievement_Parms;
	SendAchievement_Parms.AchievementId = AchievementId;

	pFnSendAchievement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendAchievement, &SendAchievement_Parms, NULL );

	pFnSendAchievement->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXTelemetry.GenerateUniqueClassId
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class UObject*                 Object                         ( CPF_Parm )

struct FString Usfxtelemetryhooksmp::GenerateUniqueClassId ( class UObject* Object )
{
	static UFunction* pFnGenerateUniqueClassId = NULL;

	if ( ! pFnGenerateUniqueClassId )
		pFnGenerateUniqueClassId = (UFunction*) UObject::GObjObjects()->Data[ 75536 ];

	Usfxtelemetryhooksmp_execGenerateUniqueClassId_Parms GenerateUniqueClassId_Parms;
	GenerateUniqueClassId_Parms.Object = Object;

	pFnGenerateUniqueClassId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGenerateUniqueClassId, &GenerateUniqueClassId_Parms, NULL );

	pFnGenerateUniqueClassId->FunctionFlags |= 0x400;

	return GenerateUniqueClassId_Parms.ReturnValue;
};

// Function SFXGame.SFXTelemetry.GenerateUniqueClassIdFromString
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 FullFriendlyName               ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FString Usfxtelemetryhooksmp::GenerateUniqueClassIdFromString ( struct FString* FullFriendlyName )
{
	static UFunction* pFnGenerateUniqueClassIdFromString = NULL;

	if ( ! pFnGenerateUniqueClassIdFromString )
		pFnGenerateUniqueClassIdFromString = (UFunction*) UObject::GObjObjects()->Data[ 74610 ];

	Usfxtelemetryhooksmp_execGenerateUniqueClassIdFromString_Parms GenerateUniqueClassIdFromString_Parms;

	pFnGenerateUniqueClassIdFromString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGenerateUniqueClassIdFromString, &GenerateUniqueClassIdFromString_Parms, NULL );

	pFnGenerateUniqueClassIdFromString->FunctionFlags |= 0x400;

	if ( FullFriendlyName )
		memcpy ( FullFriendlyName, &GenerateUniqueClassIdFromString_Parms.FullFriendlyName, 0xC );

	return GenerateUniqueClassIdFromString_Parms.ReturnValue;
};

// Function SFXGame.SFXTelemetry.FStringToFourCC
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 s4CharID                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int Usfxtelemetryhooksmp::FStringToFourCC ( struct FString* s4CharID )
{
	static UFunction* pFnFStringToFourCC = NULL;

	if ( ! pFnFStringToFourCC )
		pFnFStringToFourCC = (UFunction*) UObject::GObjObjects()->Data[ 57479 ];

	Usfxtelemetryhooksmp_execFStringToFourCC_Parms FStringToFourCC_Parms;

	pFnFStringToFourCC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFStringToFourCC, &FStringToFourCC_Parms, NULL );

	pFnFStringToFourCC->FunctionFlags |= 0x400;

	if ( s4CharID )
		memcpy ( s4CharID, &FStringToFourCC_Parms.s4CharID, 0xC );

	return FStringToFourCC_Parms.ReturnValue;
};

// Function SFXGame.SFXTelemetry.SendArray
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   HookName                       ( CPF_Parm )
// TArray< struct FTelemetryAttribute > Attributes                     ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void Usfxtelemetryhooksmp::SendArray ( struct FName HookName, TArray< struct FTelemetryAttribute > Attributes )
{
	static UFunction* pFnSendArray = NULL;

	if ( ! pFnSendArray )
		pFnSendArray = (UFunction*) UObject::GObjObjects()->Data[ 43649 ];

	Usfxtelemetryhooksmp_execSendArray_Parms SendArray_Parms;
	memcpy ( &SendArray_Parms.HookName, &HookName, 0x8 );
	memcpy ( &SendArray_Parms.Attributes, &Attributes, 0xC );

	pFnSendArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendArray, &SendArray_Parms, NULL );

	pFnSendArray->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXTelemetry.SendBool
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   HookName                       ( CPF_Parm )
// unsigned long                  B                              ( CPF_Const | CPF_Parm )

void Usfxtelemetryhooksmp::SendBool ( struct FName HookName, unsigned long B )
{
	static UFunction* pFnSendBool = NULL;

	if ( ! pFnSendBool )
		pFnSendBool = (UFunction*) UObject::GObjObjects()->Data[ 44451 ];

	Usfxtelemetryhooksmp_execSendBool_Parms SendBool_Parms;
	memcpy ( &SendBool_Parms.HookName, &HookName, 0x8 );
	SendBool_Parms.B = B;

	pFnSendBool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendBool, &SendBool_Parms, NULL );

	pFnSendBool->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXTelemetry.SendFloat
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   HookName                       ( CPF_Parm )
// float                          F                              ( CPF_Const | CPF_Parm )

void Usfxtelemetryhooksmp::SendFloat ( struct FName HookName, float F )
{
	static UFunction* pFnSendFloat = NULL;

	if ( ! pFnSendFloat )
		pFnSendFloat = (UFunction*) UObject::GObjObjects()->Data[ 87364 ];

	Usfxtelemetryhooksmp_execSendFloat_Parms SendFloat_Parms;
	memcpy ( &SendFloat_Parms.HookName, &HookName, 0x8 );
	SendFloat_Parms.F = F;

	pFnSendFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendFloat, &SendFloat_Parms, NULL );

	pFnSendFloat->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXTelemetry.SendInt
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   HookName                       ( CPF_Parm )
// int                            i                              ( CPF_Const | CPF_Parm )

void Usfxtelemetryhooksmp::SendInt ( struct FName HookName, int i )
{
	static UFunction* pFnSendInt = NULL;

	if ( ! pFnSendInt )
		pFnSendInt = (UFunction*) UObject::GObjObjects()->Data[ 46890 ];

	Usfxtelemetryhooksmp_execSendInt_Parms SendInt_Parms;
	memcpy ( &SendInt_Parms.HookName, &HookName, 0x8 );
	SendInt_Parms.i = i;

	pFnSendInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendInt, &SendInt_Parms, NULL );

	pFnSendInt->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXTelemetry.SendString
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   HookName                       ( CPF_Parm )
// struct FString                 S                              ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void Usfxtelemetryhooksmp::SendString ( struct FName HookName, struct FString S )
{
	static UFunction* pFnSendString = NULL;

	if ( ! pFnSendString )
		pFnSendString = (UFunction*) UObject::GObjObjects()->Data[ 75535 ];

	Usfxtelemetryhooksmp_execSendString_Parms SendString_Parms;
	memcpy ( &SendString_Parms.HookName, &HookName, 0x8 );
	memcpy ( &SendString_Parms.S, &S, 0xC );

	pFnSendString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendString, &SendString_Parms, NULL );

	pFnSendString->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXTelemetry.SendName
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   HookName                       ( CPF_Parm )
// struct FName                   N                              ( CPF_Parm )

void Usfxtelemetryhooksmp::SendName ( struct FName HookName, struct FName N )
{
	static UFunction* pFnSendName = NULL;

	if ( ! pFnSendName )
		pFnSendName = (UFunction*) UObject::GObjObjects()->Data[ 60669 ];

	Usfxtelemetryhooksmp_execSendName_Parms SendName_Parms;
	memcpy ( &SendName_Parms.HookName, &HookName, 0x8 );
	memcpy ( &SendName_Parms.N, &N, 0x8 );

	pFnSendName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendName, &SendName_Parms, NULL );

	pFnSendName->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXTelemetry.SendVoid
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   HookName                       ( CPF_Parm )

void Usfxtelemetryhooksmp::SendVoid ( struct FName HookName )
{
	static UFunction* pFnSendVoid = NULL;

	if ( ! pFnSendVoid )
		pFnSendVoid = (UFunction*) UObject::GObjObjects()->Data[ 44410 ];

	Usfxtelemetryhooksmp_execSendVoid_Parms SendVoid_Parms;
	memcpy ( &SendVoid_Parms.HookName, &HookName, 0x8 );

	pFnSendVoid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendVoid, &SendVoid_Parms, NULL );

	pFnSendVoid->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXTelemetry.GetInstanceGameSession
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USFXTelemetryGameSession* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXTelemetryGameSession* Usfxtelemetryhooksmp::GetInstanceGameSession ( )
{
	static UFunction* pFnGetInstanceGameSession = NULL;

	if ( ! pFnGetInstanceGameSession )
		pFnGetInstanceGameSession = (UFunction*) UObject::GObjObjects()->Data[ 87355 ];

	Usfxtelemetryhooksmp_execGetInstanceGameSession_Parms GetInstanceGameSession_Parms;

	pFnGetInstanceGameSession->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInstanceGameSession, &GetInstanceGameSession_Parms, NULL );

	pFnGetInstanceGameSession->FunctionFlags |= 0x400;

	return GetInstanceGameSession_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.ConsumeNonGameplayConsumable
// [0x00022002] 
// Parameters infos:
// struct FName                   UniqueName                     ( CPF_Parm )
// int                            VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementInGameConsumable::ConsumeNonGameplayConsumable ( struct FName UniqueName, int VersionIdx )
{
	static UFunction* pFnConsumeNonGameplayConsumable = NULL;

	if ( ! pFnConsumeNonGameplayConsumable )
		pFnConsumeNonGameplayConsumable = (UFunction*) UObject::GObjObjects()->Data[ 105410 ];

	USFXGAWReinforcementInGameConsumable_execConsumeNonGameplayConsumable_Parms ConsumeNonGameplayConsumable_Parms;
	memcpy ( &ConsumeNonGameplayConsumable_Parms.UniqueName, &UniqueName, 0x8 );
	ConsumeNonGameplayConsumable_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnConsumeNonGameplayConsumable, &ConsumeNonGameplayConsumable_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GenerateCardUniqueID
// [0x00020002] 
// Parameters infos:
// int                            idx                            ( CPF_Parm )

void USFXGAWReinforcementInGameConsumable::GenerateCardUniqueID ( int idx )
{
	static UFunction* pFnGenerateCardUniqueID = NULL;

	if ( ! pFnGenerateCardUniqueID )
		pFnGenerateCardUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 105406 ];

	USFXGAWReinforcementInGameConsumable_execGenerateCardUniqueID_Parms GenerateCardUniqueID_Parms;
	GenerateCardUniqueID_Parms.idx = idx;

	this->ProcessEvent ( pFnGenerateCardUniqueID, &GenerateCardUniqueID_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCardUniqueID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

int USFXGAWReinforcementInGameConsumable::GetCardUniqueID ( int idx )
{
	static UFunction* pFnGetCardUniqueID = NULL;

	if ( ! pFnGetCardUniqueID )
		pFnGetCardUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 105394 ];

	USFXGAWReinforcementInGameConsumable_execGetCardUniqueID_Parms GetCardUniqueID_Parms;
	GetCardUniqueID_Parms.idx = idx;

	this->ProcessEvent ( pFnGetCardUniqueID, &GetCardUniqueID_Parms, NULL );

	return GetCardUniqueID_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetPlayerVariableNameFromCard
// [0x00420002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           Card                           ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FName USFXGAWReinforcementInGameConsumable::GetPlayerVariableNameFromCard ( struct FCardInfoData* Card )
{
	static UFunction* pFnGetPlayerVariableNameFromCard = NULL;

	if ( ! pFnGetPlayerVariableNameFromCard )
		pFnGetPlayerVariableNameFromCard = (UFunction*) UObject::GObjObjects()->Data[ 105390 ];

	USFXGAWReinforcementInGameConsumable_execGetPlayerVariableNameFromCard_Parms GetPlayerVariableNameFromCard_Parms;

	this->ProcessEvent ( pFnGetPlayerVariableNameFromCard, &GetPlayerVariableNameFromCard_Parms, NULL );

	if ( Card )
		memcpy ( Card, &GetPlayerVariableNameFromCard_Parms.Card, 0x68 );

	return GetPlayerVariableNameFromCard_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetPlayerVariableName
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

struct FName USFXGAWReinforcementInGameConsumable::GetPlayerVariableName ( int idx )
{
	static UFunction* pFnGetPlayerVariableName = NULL;

	if ( ! pFnGetPlayerVariableName )
		pFnGetPlayerVariableName = (UFunction*) UObject::GObjObjects()->Data[ 105384 ];

	USFXGAWReinforcementInGameConsumable_execGetPlayerVariableName_Parms GetPlayerVariableName_Parms;
	GetPlayerVariableName_Parms.idx = idx;

	this->ProcessEvent ( pFnGetPlayerVariableName, &GetPlayerVariableName_Parms, NULL );

	return GetPlayerVariableName_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCurrentCount
// [0x00024002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SearchUniqueID                 ( CPF_Parm )
// int                            VersionIdx                     ( CPF_OptionalParm | CPF_Parm )

int USFXGAWReinforcementInGameConsumable::GetCurrentCount ( int SearchUniqueID, int VersionIdx )
{
	static UFunction* pFnGetCurrentCount = NULL;

	if ( ! pFnGetCurrentCount )
		pFnGetCurrentCount = (UFunction*) UObject::GObjObjects()->Data[ 105381 ];

	USFXGAWReinforcementInGameConsumable_execGetCurrentCount_Parms GetCurrentCount_Parms;
	GetCurrentCount_Parms.SearchUniqueID = SearchUniqueID;
	GetCurrentCount_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnGetCurrentCount, &GetCurrentCount_Parms, NULL );

	return GetCurrentCount_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.OnAwarded
// [0x00424002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           CardInfoOut                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FCardInfoData > ChosenCards                    ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXGAWReinforcementInGameConsumable::OnAwarded ( struct FCardInfoData* CardInfoOut, TArray< struct FCardInfoData >* ChosenCards )
{
	static UFunction* pFnOnAwarded = NULL;

	if ( ! pFnOnAwarded )
		pFnOnAwarded = (UFunction*) UObject::GObjObjects()->Data[ 105367 ];

	USFXGAWReinforcementInGameConsumable_execOnAwarded_Parms OnAwarded_Parms;

	this->ProcessEvent ( pFnOnAwarded, &OnAwarded_Parms, NULL );

	if ( CardInfoOut )
		memcpy ( CardInfoOut, &OnAwarded_Parms.CardInfoOut, 0x68 );

	if ( ChosenCards )
		memcpy ( ChosenCards, &OnAwarded_Parms.ChosenCards, 0xC );

	return OnAwarded_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.SetCurrentValue
// [0x00020002] 
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void USFXGAWReinforcementInGameConsumable::SetCurrentValue ( struct FName VarName, int Value )
{
	static UFunction* pFnSetCurrentValue = NULL;

	if ( ! pFnSetCurrentValue )
		pFnSetCurrentValue = (UFunction*) UObject::GObjObjects()->Data[ 107431 ];

	USFXGAWReinforcementInGameConsumable_execSetCurrentValue_Parms SetCurrentValue_Parms;
	memcpy ( &SetCurrentValue_Parms.VarName, &VarName, 0x8 );
	SetCurrentValue_Parms.Value = Value;

	this->ProcessEvent ( pFnSetCurrentValue, &SetCurrentValue_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCurrentValue
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   VarName                        ( CPF_Parm )

int USFXGAWReinforcementInGameConsumable::GetCurrentValue ( struct FName VarName )
{
	static UFunction* pFnGetCurrentValue = NULL;

	if ( ! pFnGetCurrentValue )
		pFnGetCurrentValue = (UFunction*) UObject::GObjObjects()->Data[ 105745 ];

	USFXGAWReinforcementInGameConsumable_execGetCurrentValue_Parms GetCurrentValue_Parms;
	memcpy ( &GetCurrentValue_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnGetCurrentValue, &GetCurrentValue_Parms, NULL );

	return GetCurrentValue_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Initialize
// [0x00020002] 
// Parameters infos:

void USFXGAWReinforcementInGameConsumable::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 105742 ];

	USFXGAWReinforcementInGameConsumable_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.IsActive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

bool USFXGAWReinforcementInGameConsumable::IsActive ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 105739 ];

	USFXGAWReinforcementInGameConsumable_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.UniqueId = UniqueId;
	IsActive_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	return IsActive_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Deactivate
// [0x00020000] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementInGameConsumable::Deactivate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnDeactivate = NULL;

	if ( ! pFnDeactivate )
		pFnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 105737 ];

	USFXGAWReinforcementInGameConsumable_execDeactivate_Parms Deactivate_Parms;
	Deactivate_Parms.UniqueId = UniqueId;
	Deactivate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnDeactivate, &Deactivate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Activate
// [0x00020000] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementInGameConsumable::Activate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 105733 ];

	USFXGAWReinforcementInGameConsumable_execActivate_Parms Activate_Parms;
	Activate_Parms.UniqueId = UniqueId;
	Activate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.ConsumeNonGameplayConsumable
// [0x00022002] 
// Parameters infos:
// struct FName                   UniqueName                     ( CPF_Parm )
// int                            VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementInventoryUnlock::ConsumeNonGameplayConsumable ( struct FName UniqueName, int VersionIdx )
{
	static UFunction* pFnConsumeNonGameplayConsumable = NULL;

	if ( ! pFnConsumeNonGameplayConsumable )
		pFnConsumeNonGameplayConsumable = (UFunction*) UObject::GObjObjects()->Data[ 105410 ];

	USFXGAWReinforcementInventoryUnlock_execConsumeNonGameplayConsumable_Parms ConsumeNonGameplayConsumable_Parms;
	memcpy ( &ConsumeNonGameplayConsumable_Parms.UniqueName, &UniqueName, 0x8 );
	ConsumeNonGameplayConsumable_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnConsumeNonGameplayConsumable, &ConsumeNonGameplayConsumable_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GenerateCardUniqueID
// [0x00020002] 
// Parameters infos:
// int                            idx                            ( CPF_Parm )

void USFXGAWReinforcementInventoryUnlock::GenerateCardUniqueID ( int idx )
{
	static UFunction* pFnGenerateCardUniqueID = NULL;

	if ( ! pFnGenerateCardUniqueID )
		pFnGenerateCardUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 105406 ];

	USFXGAWReinforcementInventoryUnlock_execGenerateCardUniqueID_Parms GenerateCardUniqueID_Parms;
	GenerateCardUniqueID_Parms.idx = idx;

	this->ProcessEvent ( pFnGenerateCardUniqueID, &GenerateCardUniqueID_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCardUniqueID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

int USFXGAWReinforcementInventoryUnlock::GetCardUniqueID ( int idx )
{
	static UFunction* pFnGetCardUniqueID = NULL;

	if ( ! pFnGetCardUniqueID )
		pFnGetCardUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 105394 ];

	USFXGAWReinforcementInventoryUnlock_execGetCardUniqueID_Parms GetCardUniqueID_Parms;
	GetCardUniqueID_Parms.idx = idx;

	this->ProcessEvent ( pFnGetCardUniqueID, &GetCardUniqueID_Parms, NULL );

	return GetCardUniqueID_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetPlayerVariableNameFromCard
// [0x00420002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           Card                           ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FName USFXGAWReinforcementInventoryUnlock::GetPlayerVariableNameFromCard ( struct FCardInfoData* Card )
{
	static UFunction* pFnGetPlayerVariableNameFromCard = NULL;

	if ( ! pFnGetPlayerVariableNameFromCard )
		pFnGetPlayerVariableNameFromCard = (UFunction*) UObject::GObjObjects()->Data[ 105390 ];

	USFXGAWReinforcementInventoryUnlock_execGetPlayerVariableNameFromCard_Parms GetPlayerVariableNameFromCard_Parms;

	this->ProcessEvent ( pFnGetPlayerVariableNameFromCard, &GetPlayerVariableNameFromCard_Parms, NULL );

	if ( Card )
		memcpy ( Card, &GetPlayerVariableNameFromCard_Parms.Card, 0x68 );

	return GetPlayerVariableNameFromCard_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetPlayerVariableName
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

struct FName USFXGAWReinforcementInventoryUnlock::GetPlayerVariableName ( int idx )
{
	static UFunction* pFnGetPlayerVariableName = NULL;

	if ( ! pFnGetPlayerVariableName )
		pFnGetPlayerVariableName = (UFunction*) UObject::GObjObjects()->Data[ 105384 ];

	USFXGAWReinforcementInventoryUnlock_execGetPlayerVariableName_Parms GetPlayerVariableName_Parms;
	GetPlayerVariableName_Parms.idx = idx;

	this->ProcessEvent ( pFnGetPlayerVariableName, &GetPlayerVariableName_Parms, NULL );

	return GetPlayerVariableName_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCurrentCount
// [0x00024002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SearchUniqueID                 ( CPF_Parm )
// int                            VersionIdx                     ( CPF_OptionalParm | CPF_Parm )

int USFXGAWReinforcementInventoryUnlock::GetCurrentCount ( int SearchUniqueID, int VersionIdx )
{
	static UFunction* pFnGetCurrentCount = NULL;

	if ( ! pFnGetCurrentCount )
		pFnGetCurrentCount = (UFunction*) UObject::GObjObjects()->Data[ 105381 ];

	USFXGAWReinforcementInventoryUnlock_execGetCurrentCount_Parms GetCurrentCount_Parms;
	GetCurrentCount_Parms.SearchUniqueID = SearchUniqueID;
	GetCurrentCount_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnGetCurrentCount, &GetCurrentCount_Parms, NULL );

	return GetCurrentCount_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.OnAwarded
// [0x00424002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           CardInfoOut                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FCardInfoData > ChosenCards                    ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXGAWReinforcementInventoryUnlock::OnAwarded ( struct FCardInfoData* CardInfoOut, TArray< struct FCardInfoData >* ChosenCards )
{
	static UFunction* pFnOnAwarded = NULL;

	if ( ! pFnOnAwarded )
		pFnOnAwarded = (UFunction*) UObject::GObjObjects()->Data[ 105367 ];

	USFXGAWReinforcementInventoryUnlock_execOnAwarded_Parms OnAwarded_Parms;

	this->ProcessEvent ( pFnOnAwarded, &OnAwarded_Parms, NULL );

	if ( CardInfoOut )
		memcpy ( CardInfoOut, &OnAwarded_Parms.CardInfoOut, 0x68 );

	if ( ChosenCards )
		memcpy ( ChosenCards, &OnAwarded_Parms.ChosenCards, 0xC );

	return OnAwarded_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.SetCurrentValue
// [0x00020002] 
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void USFXGAWReinforcementInventoryUnlock::SetCurrentValue ( struct FName VarName, int Value )
{
	static UFunction* pFnSetCurrentValue = NULL;

	if ( ! pFnSetCurrentValue )
		pFnSetCurrentValue = (UFunction*) UObject::GObjObjects()->Data[ 107431 ];

	USFXGAWReinforcementInventoryUnlock_execSetCurrentValue_Parms SetCurrentValue_Parms;
	memcpy ( &SetCurrentValue_Parms.VarName, &VarName, 0x8 );
	SetCurrentValue_Parms.Value = Value;

	this->ProcessEvent ( pFnSetCurrentValue, &SetCurrentValue_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCurrentValue
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   VarName                        ( CPF_Parm )

int USFXGAWReinforcementInventoryUnlock::GetCurrentValue ( struct FName VarName )
{
	static UFunction* pFnGetCurrentValue = NULL;

	if ( ! pFnGetCurrentValue )
		pFnGetCurrentValue = (UFunction*) UObject::GObjObjects()->Data[ 105745 ];

	USFXGAWReinforcementInventoryUnlock_execGetCurrentValue_Parms GetCurrentValue_Parms;
	memcpy ( &GetCurrentValue_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnGetCurrentValue, &GetCurrentValue_Parms, NULL );

	return GetCurrentValue_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Initialize
// [0x00020002] 
// Parameters infos:

void USFXGAWReinforcementInventoryUnlock::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 105742 ];

	USFXGAWReinforcementInventoryUnlock_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.IsActive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

bool USFXGAWReinforcementInventoryUnlock::IsActive ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 105739 ];

	USFXGAWReinforcementInventoryUnlock_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.UniqueId = UniqueId;
	IsActive_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	return IsActive_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Deactivate
// [0x00020000] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementInventoryUnlock::Deactivate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnDeactivate = NULL;

	if ( ! pFnDeactivate )
		pFnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 105737 ];

	USFXGAWReinforcementInventoryUnlock_execDeactivate_Parms Deactivate_Parms;
	Deactivate_Parms.UniqueId = UniqueId;
	Deactivate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnDeactivate, &Deactivate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Activate
// [0x00020000] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementInventoryUnlock::Activate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 105733 ];

	USFXGAWReinforcementInventoryUnlock_execActivate_Parms Activate_Parms;
	Activate_Parms.UniqueId = UniqueId;
	Activate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.TrimTrailingZeroes_NoGear
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  KeepDecimal                    ( CPF_Parm )

struct FString USFXGAWReinforcementMatchConsumable_NonGameplay::TrimTrailingZeroes_NoGear ( struct FString S, unsigned long KeepDecimal )
{
	static UFunction* pFnTrimTrailingZeroes_NoGear = NULL;

	if ( ! pFnTrimTrailingZeroes_NoGear )
		pFnTrimTrailingZeroes_NoGear = (UFunction*) UObject::GObjObjects()->Data[ 109035 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execTrimTrailingZeroes_NoGear_Parms TrimTrailingZeroes_NoGear_Parms;
	memcpy ( &TrimTrailingZeroes_NoGear_Parms.S, &S, 0xC );
	TrimTrailingZeroes_NoGear_Parms.KeepDecimal = KeepDecimal;

	this->ProcessEvent ( pFnTrimTrailingZeroes_NoGear, &TrimTrailingZeroes_NoGear_Parms, NULL );

	return TrimTrailingZeroes_NoGear_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.FloatToString_NoGear
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// float                          F                              ( CPF_Parm )

struct FString USFXGAWReinforcementMatchConsumable_NonGameplay::FloatToString_NoGear ( float F )
{
	static UFunction* pFnFloatToString_NoGear = NULL;

	if ( ! pFnFloatToString_NoGear )
		pFnFloatToString_NoGear = (UFunction*) UObject::GObjObjects()->Data[ 109048 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execFloatToString_NoGear_Parms FloatToString_NoGear_Parms;
	FloatToString_NoGear_Parms.F = F;

	this->ProcessEvent ( pFnFloatToString_NoGear, &FloatToString_NoGear_Parms, NULL );

	return FloatToString_NoGear_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.FloatToPercentString_NoGear
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// float                          F                              ( CPF_Parm )

struct FString USFXGAWReinforcementMatchConsumable_NonGameplay::FloatToPercentString_NoGear ( float F )
{
	static UFunction* pFnFloatToPercentString_NoGear = NULL;

	if ( ! pFnFloatToPercentString_NoGear )
		pFnFloatToPercentString_NoGear = (UFunction*) UObject::GObjObjects()->Data[ 109053 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execFloatToPercentString_NoGear_Parms FloatToPercentString_NoGear_Parms;
	FloatToPercentString_NoGear_Parms.F = F;

	this->ProcessEvent ( pFnFloatToPercentString_NoGear, &FloatToPercentString_NoGear_Parms, NULL );

	return FloatToPercentString_NoGear_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.FindDescriptionTokens_NoGear
// [0x00020002] 
// Parameters infos:
// struct FDescriptionTokens      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 CardUniqueName                 ( CPF_Parm | CPF_NeedCtorLink )

struct FDescriptionTokens USFXGAWReinforcementMatchConsumable_NonGameplay::FindDescriptionTokens_NoGear ( struct FString CardUniqueName )
{
	static UFunction* pFnFindDescriptionTokens_NoGear = NULL;

	if ( ! pFnFindDescriptionTokens_NoGear )
		pFnFindDescriptionTokens_NoGear = (UFunction*) UObject::GObjObjects()->Data[ 109056 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execFindDescriptionTokens_NoGear_Parms FindDescriptionTokens_NoGear_Parms;
	memcpy ( &FindDescriptionTokens_NoGear_Parms.CardUniqueName, &CardUniqueName, 0xC );

	this->ProcessEvent ( pFnFindDescriptionTokens_NoGear, &FindDescriptionTokens_NoGear_Parms, NULL );

	return FindDescriptionTokens_NoGear_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.PrepareCustomTokensForDescription
// [0x00020002] 
// Parameters infos:
// struct FString                 CardUniqueName                 ( CPF_Parm | CPF_NeedCtorLink )

void USFXGAWReinforcementMatchConsumable_NonGameplay::PrepareCustomTokensForDescription ( struct FString CardUniqueName )
{
	static UFunction* pFnPrepareCustomTokensForDescription = NULL;

	if ( ! pFnPrepareCustomTokensForDescription )
		pFnPrepareCustomTokensForDescription = (UFunction*) UObject::GObjObjects()->Data[ 109059 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execPrepareCustomTokensForDescription_Parms PrepareCustomTokensForDescription_Parms;
	memcpy ( &PrepareCustomTokensForDescription_Parms.CardUniqueName, &CardUniqueName, 0xC );

	this->ProcessEvent ( pFnPrepareCustomTokensForDescription, &PrepareCustomTokensForDescription_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.OnAwarded
// [0x00424002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           CardInfoOut                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FCardInfoData > ChosenCards                    ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXGAWReinforcementMatchConsumable_NonGameplay::OnAwarded ( struct FCardInfoData* CardInfoOut, TArray< struct FCardInfoData >* ChosenCards )
{
	static UFunction* pFnOnAwarded = NULL;

	if ( ! pFnOnAwarded )
		pFnOnAwarded = (UFunction*) UObject::GObjObjects()->Data[ 109026 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execOnAwarded_Parms OnAwarded_Parms;

	this->ProcessEvent ( pFnOnAwarded, &OnAwarded_Parms, NULL );

	if ( CardInfoOut )
		memcpy ( CardInfoOut, &OnAwarded_Parms.CardInfoOut, 0x68 );

	if ( ChosenCards )
		memcpy ( ChosenCards, &OnAwarded_Parms.ChosenCards, 0xC );

	return OnAwarded_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.GetPlayerVariableNameFromCard
// [0x00420002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           Card                           ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FName USFXGAWReinforcementMatchConsumable_NonGameplay::GetPlayerVariableNameFromCard ( struct FCardInfoData* Card )
{
	static UFunction* pFnGetPlayerVariableNameFromCard = NULL;

	if ( ! pFnGetPlayerVariableNameFromCard )
		pFnGetPlayerVariableNameFromCard = (UFunction*) UObject::GObjObjects()->Data[ 109022 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execGetPlayerVariableNameFromCard_Parms GetPlayerVariableNameFromCard_Parms;

	this->ProcessEvent ( pFnGetPlayerVariableNameFromCard, &GetPlayerVariableNameFromCard_Parms, NULL );

	if ( Card )
		memcpy ( Card, &GetPlayerVariableNameFromCard_Parms.Card, 0x68 );

	return GetPlayerVariableNameFromCard_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.GetPlayerVariableName
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

struct FName USFXGAWReinforcementMatchConsumable_NonGameplay::GetPlayerVariableName ( int idx )
{
	static UFunction* pFnGetPlayerVariableName = NULL;

	if ( ! pFnGetPlayerVariableName )
		pFnGetPlayerVariableName = (UFunction*) UObject::GObjObjects()->Data[ 109018 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execGetPlayerVariableName_Parms GetPlayerVariableName_Parms;
	GetPlayerVariableName_Parms.idx = idx;

	this->ProcessEvent ( pFnGetPlayerVariableName, &GetPlayerVariableName_Parms, NULL );

	return GetPlayerVariableName_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.GetSlotTypeForCategory
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Category                       ( CPF_Parm )

int USFXGAWReinforcementMatchConsumable_NonGameplay::GetSlotTypeForCategory ( int Category )
{
	static UFunction* pFnGetSlotTypeForCategory = NULL;

	if ( ! pFnGetSlotTypeForCategory )
		pFnGetSlotTypeForCategory = (UFunction*) UObject::GObjObjects()->Data[ 109015 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execGetSlotTypeForCategory_Parms GetSlotTypeForCategory_Parms;
	GetSlotTypeForCategory_Parms.Category = Category;

	this->ProcessEvent ( pFnGetSlotTypeForCategory, &GetSlotTypeForCategory_Parms, NULL );

	return GetSlotTypeForCategory_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.Deactivate
// [0x00020002] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementMatchConsumable_NonGameplay::Deactivate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnDeactivate = NULL;

	if ( ! pFnDeactivate )
		pFnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 109010 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execDeactivate_Parms Deactivate_Parms;
	Deactivate_Parms.UniqueId = UniqueId;
	Deactivate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnDeactivate, &Deactivate_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.Activate
// [0x00020002] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementMatchConsumable_NonGameplay::Activate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 109005 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execActivate_Parms Activate_Parms;
	Activate_Parms.UniqueId = UniqueId;
	Activate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.IsActive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

bool USFXGAWReinforcementMatchConsumable_NonGameplay::IsActive ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 108999 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.UniqueId = UniqueId;
	IsActive_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	return IsActive_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.ContainsCard
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

bool USFXGAWReinforcementMatchConsumable_NonGameplay::ContainsCard ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnContainsCard = NULL;

	if ( ! pFnContainsCard )
		pFnContainsCard = (UFunction*) UObject::GObjObjects()->Data[ 107731 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execContainsCard_Parms ContainsCard_Parms;
	ContainsCard_Parms.UniqueId = UniqueId;
	ContainsCard_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnContainsCard, &ContainsCard_Parms, NULL );

	return ContainsCard_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.FindCardIndexFromID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

int USFXGAWReinforcementMatchConsumable_NonGameplay::FindCardIndexFromID ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnFindCardIndexFromID = NULL;

	if ( ! pFnFindCardIndexFromID )
		pFnFindCardIndexFromID = (UFunction*) UObject::GObjObjects()->Data[ 108991 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execFindCardIndexFromID_Parms FindCardIndexFromID_Parms;
	FindCardIndexFromID_Parms.UniqueId = UniqueId;
	FindCardIndexFromID_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnFindCardIndexFromID, &FindCardIndexFromID_Parms, NULL );

	return FindCardIndexFromID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgawreinforcementmatchconsumable.GetPRI
// [0x00020002] 
// Parameters infos:
// class Asfxpri*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class Asfxpri* USFXGAWReinforcementMatchConsumable_NonGameplay::GetPRI ( )
{
	static UFunction* pFnGetPRI = NULL;

	if ( ! pFnGetPRI )
		pFnGetPRI = (UFunction*) UObject::GObjObjects()->Data[ 108985 ];

	USFXGAWReinforcementMatchConsumable_NonGameplay_execGetPRI_Parms GetPRI_Parms;

	this->ProcessEvent ( pFnGetPRI, &GetPRI_Parms, NULL );

	return GetPRI_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.ConsumeNonGameplayConsumable
// [0x00022002] 
// Parameters infos:
// struct FName                   UniqueName                     ( CPF_Parm )
// int                            VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementPermanentUpgrade::ConsumeNonGameplayConsumable ( struct FName UniqueName, int VersionIdx )
{
	static UFunction* pFnConsumeNonGameplayConsumable = NULL;

	if ( ! pFnConsumeNonGameplayConsumable )
		pFnConsumeNonGameplayConsumable = (UFunction*) UObject::GObjObjects()->Data[ 105410 ];

	USFXGAWReinforcementPermanentUpgrade_execConsumeNonGameplayConsumable_Parms ConsumeNonGameplayConsumable_Parms;
	memcpy ( &ConsumeNonGameplayConsumable_Parms.UniqueName, &UniqueName, 0x8 );
	ConsumeNonGameplayConsumable_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnConsumeNonGameplayConsumable, &ConsumeNonGameplayConsumable_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GenerateCardUniqueID
// [0x00020002] 
// Parameters infos:
// int                            idx                            ( CPF_Parm )

void USFXGAWReinforcementPermanentUpgrade::GenerateCardUniqueID ( int idx )
{
	static UFunction* pFnGenerateCardUniqueID = NULL;

	if ( ! pFnGenerateCardUniqueID )
		pFnGenerateCardUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 105406 ];

	USFXGAWReinforcementPermanentUpgrade_execGenerateCardUniqueID_Parms GenerateCardUniqueID_Parms;
	GenerateCardUniqueID_Parms.idx = idx;

	this->ProcessEvent ( pFnGenerateCardUniqueID, &GenerateCardUniqueID_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCardUniqueID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

int USFXGAWReinforcementPermanentUpgrade::GetCardUniqueID ( int idx )
{
	static UFunction* pFnGetCardUniqueID = NULL;

	if ( ! pFnGetCardUniqueID )
		pFnGetCardUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 105394 ];

	USFXGAWReinforcementPermanentUpgrade_execGetCardUniqueID_Parms GetCardUniqueID_Parms;
	GetCardUniqueID_Parms.idx = idx;

	this->ProcessEvent ( pFnGetCardUniqueID, &GetCardUniqueID_Parms, NULL );

	return GetCardUniqueID_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetPlayerVariableNameFromCard
// [0x00420002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           Card                           ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FName USFXGAWReinforcementPermanentUpgrade::GetPlayerVariableNameFromCard ( struct FCardInfoData* Card )
{
	static UFunction* pFnGetPlayerVariableNameFromCard = NULL;

	if ( ! pFnGetPlayerVariableNameFromCard )
		pFnGetPlayerVariableNameFromCard = (UFunction*) UObject::GObjObjects()->Data[ 105390 ];

	USFXGAWReinforcementPermanentUpgrade_execGetPlayerVariableNameFromCard_Parms GetPlayerVariableNameFromCard_Parms;

	this->ProcessEvent ( pFnGetPlayerVariableNameFromCard, &GetPlayerVariableNameFromCard_Parms, NULL );

	if ( Card )
		memcpy ( Card, &GetPlayerVariableNameFromCard_Parms.Card, 0x68 );

	return GetPlayerVariableNameFromCard_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetPlayerVariableName
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

struct FName USFXGAWReinforcementPermanentUpgrade::GetPlayerVariableName ( int idx )
{
	static UFunction* pFnGetPlayerVariableName = NULL;

	if ( ! pFnGetPlayerVariableName )
		pFnGetPlayerVariableName = (UFunction*) UObject::GObjObjects()->Data[ 105384 ];

	USFXGAWReinforcementPermanentUpgrade_execGetPlayerVariableName_Parms GetPlayerVariableName_Parms;
	GetPlayerVariableName_Parms.idx = idx;

	this->ProcessEvent ( pFnGetPlayerVariableName, &GetPlayerVariableName_Parms, NULL );

	return GetPlayerVariableName_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCurrentCount
// [0x00024002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SearchUniqueID                 ( CPF_Parm )
// int                            VersionIdx                     ( CPF_OptionalParm | CPF_Parm )

int USFXGAWReinforcementPermanentUpgrade::GetCurrentCount ( int SearchUniqueID, int VersionIdx )
{
	static UFunction* pFnGetCurrentCount = NULL;

	if ( ! pFnGetCurrentCount )
		pFnGetCurrentCount = (UFunction*) UObject::GObjObjects()->Data[ 105381 ];

	USFXGAWReinforcementPermanentUpgrade_execGetCurrentCount_Parms GetCurrentCount_Parms;
	GetCurrentCount_Parms.SearchUniqueID = SearchUniqueID;
	GetCurrentCount_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnGetCurrentCount, &GetCurrentCount_Parms, NULL );

	return GetCurrentCount_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.OnAwarded
// [0x00424002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           CardInfoOut                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FCardInfoData > ChosenCards                    ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXGAWReinforcementPermanentUpgrade::OnAwarded ( struct FCardInfoData* CardInfoOut, TArray< struct FCardInfoData >* ChosenCards )
{
	static UFunction* pFnOnAwarded = NULL;

	if ( ! pFnOnAwarded )
		pFnOnAwarded = (UFunction*) UObject::GObjObjects()->Data[ 105367 ];

	USFXGAWReinforcementPermanentUpgrade_execOnAwarded_Parms OnAwarded_Parms;

	this->ProcessEvent ( pFnOnAwarded, &OnAwarded_Parms, NULL );

	if ( CardInfoOut )
		memcpy ( CardInfoOut, &OnAwarded_Parms.CardInfoOut, 0x68 );

	if ( ChosenCards )
		memcpy ( ChosenCards, &OnAwarded_Parms.ChosenCards, 0xC );

	return OnAwarded_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.SetCurrentValue
// [0x00020002] 
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void USFXGAWReinforcementPermanentUpgrade::SetCurrentValue ( struct FName VarName, int Value )
{
	static UFunction* pFnSetCurrentValue = NULL;

	if ( ! pFnSetCurrentValue )
		pFnSetCurrentValue = (UFunction*) UObject::GObjObjects()->Data[ 107431 ];

	USFXGAWReinforcementPermanentUpgrade_execSetCurrentValue_Parms SetCurrentValue_Parms;
	memcpy ( &SetCurrentValue_Parms.VarName, &VarName, 0x8 );
	SetCurrentValue_Parms.Value = Value;

	this->ProcessEvent ( pFnSetCurrentValue, &SetCurrentValue_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCurrentValue
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   VarName                        ( CPF_Parm )

int USFXGAWReinforcementPermanentUpgrade::GetCurrentValue ( struct FName VarName )
{
	static UFunction* pFnGetCurrentValue = NULL;

	if ( ! pFnGetCurrentValue )
		pFnGetCurrentValue = (UFunction*) UObject::GObjObjects()->Data[ 105745 ];

	USFXGAWReinforcementPermanentUpgrade_execGetCurrentValue_Parms GetCurrentValue_Parms;
	memcpy ( &GetCurrentValue_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnGetCurrentValue, &GetCurrentValue_Parms, NULL );

	return GetCurrentValue_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Initialize
// [0x00020002] 
// Parameters infos:

void USFXGAWReinforcementPermanentUpgrade::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 105742 ];

	USFXGAWReinforcementPermanentUpgrade_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.IsActive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

bool USFXGAWReinforcementPermanentUpgrade::IsActive ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 105739 ];

	USFXGAWReinforcementPermanentUpgrade_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.UniqueId = UniqueId;
	IsActive_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	return IsActive_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Deactivate
// [0x00020000] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementPermanentUpgrade::Deactivate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnDeactivate = NULL;

	if ( ! pFnDeactivate )
		pFnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 105737 ];

	USFXGAWReinforcementPermanentUpgrade_execDeactivate_Parms Deactivate_Parms;
	Deactivate_Parms.UniqueId = UniqueId;
	Deactivate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnDeactivate, &Deactivate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Activate
// [0x00020000] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementPermanentUpgrade::Activate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 105733 ];

	USFXGAWReinforcementPermanentUpgrade_execActivate_Parms Activate_Parms;
	Activate_Parms.UniqueId = UniqueId;
	Activate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.ConsumeNonGameplayConsumable
// [0x00022002] 
// Parameters infos:
// struct FName                   UniqueName                     ( CPF_Parm )
// int                            VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementCredits::ConsumeNonGameplayConsumable ( struct FName UniqueName, int VersionIdx )
{
	static UFunction* pFnConsumeNonGameplayConsumable = NULL;

	if ( ! pFnConsumeNonGameplayConsumable )
		pFnConsumeNonGameplayConsumable = (UFunction*) UObject::GObjObjects()->Data[ 105410 ];

	USFXGAWReinforcementCredits_execConsumeNonGameplayConsumable_Parms ConsumeNonGameplayConsumable_Parms;
	memcpy ( &ConsumeNonGameplayConsumable_Parms.UniqueName, &UniqueName, 0x8 );
	ConsumeNonGameplayConsumable_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnConsumeNonGameplayConsumable, &ConsumeNonGameplayConsumable_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GenerateCardUniqueID
// [0x00020002] 
// Parameters infos:
// int                            idx                            ( CPF_Parm )

void USFXGAWReinforcementCredits::GenerateCardUniqueID ( int idx )
{
	static UFunction* pFnGenerateCardUniqueID = NULL;

	if ( ! pFnGenerateCardUniqueID )
		pFnGenerateCardUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 105406 ];

	USFXGAWReinforcementCredits_execGenerateCardUniqueID_Parms GenerateCardUniqueID_Parms;
	GenerateCardUniqueID_Parms.idx = idx;

	this->ProcessEvent ( pFnGenerateCardUniqueID, &GenerateCardUniqueID_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCardUniqueID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

int USFXGAWReinforcementCredits::GetCardUniqueID ( int idx )
{
	static UFunction* pFnGetCardUniqueID = NULL;

	if ( ! pFnGetCardUniqueID )
		pFnGetCardUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 105394 ];

	USFXGAWReinforcementCredits_execGetCardUniqueID_Parms GetCardUniqueID_Parms;
	GetCardUniqueID_Parms.idx = idx;

	this->ProcessEvent ( pFnGetCardUniqueID, &GetCardUniqueID_Parms, NULL );

	return GetCardUniqueID_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetPlayerVariableNameFromCard
// [0x00420002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           Card                           ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FName USFXGAWReinforcementCredits::GetPlayerVariableNameFromCard ( struct FCardInfoData* Card )
{
	static UFunction* pFnGetPlayerVariableNameFromCard = NULL;

	if ( ! pFnGetPlayerVariableNameFromCard )
		pFnGetPlayerVariableNameFromCard = (UFunction*) UObject::GObjObjects()->Data[ 105390 ];

	USFXGAWReinforcementCredits_execGetPlayerVariableNameFromCard_Parms GetPlayerVariableNameFromCard_Parms;

	this->ProcessEvent ( pFnGetPlayerVariableNameFromCard, &GetPlayerVariableNameFromCard_Parms, NULL );

	if ( Card )
		memcpy ( Card, &GetPlayerVariableNameFromCard_Parms.Card, 0x68 );

	return GetPlayerVariableNameFromCard_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetPlayerVariableName
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

struct FName USFXGAWReinforcementCredits::GetPlayerVariableName ( int idx )
{
	static UFunction* pFnGetPlayerVariableName = NULL;

	if ( ! pFnGetPlayerVariableName )
		pFnGetPlayerVariableName = (UFunction*) UObject::GObjObjects()->Data[ 105384 ];

	USFXGAWReinforcementCredits_execGetPlayerVariableName_Parms GetPlayerVariableName_Parms;
	GetPlayerVariableName_Parms.idx = idx;

	this->ProcessEvent ( pFnGetPlayerVariableName, &GetPlayerVariableName_Parms, NULL );

	return GetPlayerVariableName_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCurrentCount
// [0x00024002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SearchUniqueID                 ( CPF_Parm )
// int                            VersionIdx                     ( CPF_OptionalParm | CPF_Parm )

int USFXGAWReinforcementCredits::GetCurrentCount ( int SearchUniqueID, int VersionIdx )
{
	static UFunction* pFnGetCurrentCount = NULL;

	if ( ! pFnGetCurrentCount )
		pFnGetCurrentCount = (UFunction*) UObject::GObjObjects()->Data[ 105381 ];

	USFXGAWReinforcementCredits_execGetCurrentCount_Parms GetCurrentCount_Parms;
	GetCurrentCount_Parms.SearchUniqueID = SearchUniqueID;
	GetCurrentCount_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnGetCurrentCount, &GetCurrentCount_Parms, NULL );

	return GetCurrentCount_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.OnAwarded
// [0x00424002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           CardInfoOut                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FCardInfoData > ChosenCards                    ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXGAWReinforcementCredits::OnAwarded ( struct FCardInfoData* CardInfoOut, TArray< struct FCardInfoData >* ChosenCards )
{
	static UFunction* pFnOnAwarded = NULL;

	if ( ! pFnOnAwarded )
		pFnOnAwarded = (UFunction*) UObject::GObjObjects()->Data[ 105367 ];

	USFXGAWReinforcementCredits_execOnAwarded_Parms OnAwarded_Parms;

	this->ProcessEvent ( pFnOnAwarded, &OnAwarded_Parms, NULL );

	if ( CardInfoOut )
		memcpy ( CardInfoOut, &OnAwarded_Parms.CardInfoOut, 0x68 );

	if ( ChosenCards )
		memcpy ( ChosenCards, &OnAwarded_Parms.ChosenCards, 0xC );

	return OnAwarded_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.SetCurrentValue
// [0x00020002] 
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void USFXGAWReinforcementCredits::SetCurrentValue ( struct FName VarName, int Value )
{
	static UFunction* pFnSetCurrentValue = NULL;

	if ( ! pFnSetCurrentValue )
		pFnSetCurrentValue = (UFunction*) UObject::GObjObjects()->Data[ 107431 ];

	USFXGAWReinforcementCredits_execSetCurrentValue_Parms SetCurrentValue_Parms;
	memcpy ( &SetCurrentValue_Parms.VarName, &VarName, 0x8 );
	SetCurrentValue_Parms.Value = Value;

	this->ProcessEvent ( pFnSetCurrentValue, &SetCurrentValue_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCurrentValue
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   VarName                        ( CPF_Parm )

int USFXGAWReinforcementCredits::GetCurrentValue ( struct FName VarName )
{
	static UFunction* pFnGetCurrentValue = NULL;

	if ( ! pFnGetCurrentValue )
		pFnGetCurrentValue = (UFunction*) UObject::GObjObjects()->Data[ 105745 ];

	USFXGAWReinforcementCredits_execGetCurrentValue_Parms GetCurrentValue_Parms;
	memcpy ( &GetCurrentValue_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnGetCurrentValue, &GetCurrentValue_Parms, NULL );

	return GetCurrentValue_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Initialize
// [0x00020002] 
// Parameters infos:

void USFXGAWReinforcementCredits::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 105742 ];

	USFXGAWReinforcementCredits_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.IsActive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

bool USFXGAWReinforcementCredits::IsActive ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 105739 ];

	USFXGAWReinforcementCredits_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.UniqueId = UniqueId;
	IsActive_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	return IsActive_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Deactivate
// [0x00020000] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementCredits::Deactivate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnDeactivate = NULL;

	if ( ! pFnDeactivate )
		pFnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 105737 ];

	USFXGAWReinforcementCredits_execDeactivate_Parms Deactivate_Parms;
	Deactivate_Parms.UniqueId = UniqueId;
	Deactivate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnDeactivate, &Deactivate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Activate
// [0x00020000] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementCredits::Activate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 105733 ];

	USFXGAWReinforcementCredits_execActivate_Parms Activate_Parms;
	Activate_Parms.UniqueId = UniqueId;
	Activate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.ConsumeNonGameplayConsumable
// [0x00022002] 
// Parameters infos:
// struct FName                   UniqueName                     ( CPF_Parm )
// int                            VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementUnsaved::ConsumeNonGameplayConsumable ( struct FName UniqueName, int VersionIdx )
{
	static UFunction* pFnConsumeNonGameplayConsumable = NULL;

	if ( ! pFnConsumeNonGameplayConsumable )
		pFnConsumeNonGameplayConsumable = (UFunction*) UObject::GObjObjects()->Data[ 105410 ];

	USFXGAWReinforcementUnsaved_execConsumeNonGameplayConsumable_Parms ConsumeNonGameplayConsumable_Parms;
	memcpy ( &ConsumeNonGameplayConsumable_Parms.UniqueName, &UniqueName, 0x8 );
	ConsumeNonGameplayConsumable_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnConsumeNonGameplayConsumable, &ConsumeNonGameplayConsumable_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GenerateCardUniqueID
// [0x00020002] 
// Parameters infos:
// int                            idx                            ( CPF_Parm )

void USFXGAWReinforcementUnsaved::GenerateCardUniqueID ( int idx )
{
	static UFunction* pFnGenerateCardUniqueID = NULL;

	if ( ! pFnGenerateCardUniqueID )
		pFnGenerateCardUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 105406 ];

	USFXGAWReinforcementUnsaved_execGenerateCardUniqueID_Parms GenerateCardUniqueID_Parms;
	GenerateCardUniqueID_Parms.idx = idx;

	this->ProcessEvent ( pFnGenerateCardUniqueID, &GenerateCardUniqueID_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCardUniqueID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

int USFXGAWReinforcementUnsaved::GetCardUniqueID ( int idx )
{
	static UFunction* pFnGetCardUniqueID = NULL;

	if ( ! pFnGetCardUniqueID )
		pFnGetCardUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 105394 ];

	USFXGAWReinforcementUnsaved_execGetCardUniqueID_Parms GetCardUniqueID_Parms;
	GetCardUniqueID_Parms.idx = idx;

	this->ProcessEvent ( pFnGetCardUniqueID, &GetCardUniqueID_Parms, NULL );

	return GetCardUniqueID_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetPlayerVariableNameFromCard
// [0x00420002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           Card                           ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FName USFXGAWReinforcementUnsaved::GetPlayerVariableNameFromCard ( struct FCardInfoData* Card )
{
	static UFunction* pFnGetPlayerVariableNameFromCard = NULL;

	if ( ! pFnGetPlayerVariableNameFromCard )
		pFnGetPlayerVariableNameFromCard = (UFunction*) UObject::GObjObjects()->Data[ 105390 ];

	USFXGAWReinforcementUnsaved_execGetPlayerVariableNameFromCard_Parms GetPlayerVariableNameFromCard_Parms;

	this->ProcessEvent ( pFnGetPlayerVariableNameFromCard, &GetPlayerVariableNameFromCard_Parms, NULL );

	if ( Card )
		memcpy ( Card, &GetPlayerVariableNameFromCard_Parms.Card, 0x68 );

	return GetPlayerVariableNameFromCard_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetPlayerVariableName
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

struct FName USFXGAWReinforcementUnsaved::GetPlayerVariableName ( int idx )
{
	static UFunction* pFnGetPlayerVariableName = NULL;

	if ( ! pFnGetPlayerVariableName )
		pFnGetPlayerVariableName = (UFunction*) UObject::GObjObjects()->Data[ 105384 ];

	USFXGAWReinforcementUnsaved_execGetPlayerVariableName_Parms GetPlayerVariableName_Parms;
	GetPlayerVariableName_Parms.idx = idx;

	this->ProcessEvent ( pFnGetPlayerVariableName, &GetPlayerVariableName_Parms, NULL );

	return GetPlayerVariableName_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCurrentCount
// [0x00024002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SearchUniqueID                 ( CPF_Parm )
// int                            VersionIdx                     ( CPF_OptionalParm | CPF_Parm )

int USFXGAWReinforcementUnsaved::GetCurrentCount ( int SearchUniqueID, int VersionIdx )
{
	static UFunction* pFnGetCurrentCount = NULL;

	if ( ! pFnGetCurrentCount )
		pFnGetCurrentCount = (UFunction*) UObject::GObjObjects()->Data[ 105381 ];

	USFXGAWReinforcementUnsaved_execGetCurrentCount_Parms GetCurrentCount_Parms;
	GetCurrentCount_Parms.SearchUniqueID = SearchUniqueID;
	GetCurrentCount_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnGetCurrentCount, &GetCurrentCount_Parms, NULL );

	return GetCurrentCount_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.OnAwarded
// [0x00424002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           CardInfoOut                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FCardInfoData > ChosenCards                    ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXGAWReinforcementUnsaved::OnAwarded ( struct FCardInfoData* CardInfoOut, TArray< struct FCardInfoData >* ChosenCards )
{
	static UFunction* pFnOnAwarded = NULL;

	if ( ! pFnOnAwarded )
		pFnOnAwarded = (UFunction*) UObject::GObjObjects()->Data[ 105367 ];

	USFXGAWReinforcementUnsaved_execOnAwarded_Parms OnAwarded_Parms;

	this->ProcessEvent ( pFnOnAwarded, &OnAwarded_Parms, NULL );

	if ( CardInfoOut )
		memcpy ( CardInfoOut, &OnAwarded_Parms.CardInfoOut, 0x68 );

	if ( ChosenCards )
		memcpy ( ChosenCards, &OnAwarded_Parms.ChosenCards, 0xC );

	return OnAwarded_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.SetCurrentValue
// [0x00020002] 
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void USFXGAWReinforcementUnsaved::SetCurrentValue ( struct FName VarName, int Value )
{
	static UFunction* pFnSetCurrentValue = NULL;

	if ( ! pFnSetCurrentValue )
		pFnSetCurrentValue = (UFunction*) UObject::GObjObjects()->Data[ 107431 ];

	USFXGAWReinforcementUnsaved_execSetCurrentValue_Parms SetCurrentValue_Parms;
	memcpy ( &SetCurrentValue_Parms.VarName, &VarName, 0x8 );
	SetCurrentValue_Parms.Value = Value;

	this->ProcessEvent ( pFnSetCurrentValue, &SetCurrentValue_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.GetCurrentValue
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   VarName                        ( CPF_Parm )

int USFXGAWReinforcementUnsaved::GetCurrentValue ( struct FName VarName )
{
	static UFunction* pFnGetCurrentValue = NULL;

	if ( ! pFnGetCurrentValue )
		pFnGetCurrentValue = (UFunction*) UObject::GObjObjects()->Data[ 105745 ];

	USFXGAWReinforcementUnsaved_execGetCurrentValue_Parms GetCurrentValue_Parms;
	memcpy ( &GetCurrentValue_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnGetCurrentValue, &GetCurrentValue_Parms, NULL );

	return GetCurrentValue_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Initialize
// [0x00020002] 
// Parameters infos:

void USFXGAWReinforcementUnsaved::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 105742 ];

	USFXGAWReinforcementUnsaved_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.IsActive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

bool USFXGAWReinforcementUnsaved::IsActive ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 105739 ];

	USFXGAWReinforcementUnsaved_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.UniqueId = UniqueId;
	IsActive_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	return IsActive_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Deactivate
// [0x00020000] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementUnsaved::Deactivate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnDeactivate = NULL;

	if ( ! pFnDeactivate )
		pFnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 105737 ];

	USFXGAWReinforcementUnsaved_execDeactivate_Parms Deactivate_Parms;
	Deactivate_Parms.UniqueId = UniqueId;
	Deactivate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnDeactivate, &Deactivate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementBase.Activate
// [0x00020000] 
// Parameters infos:
// int                            UniqueId                       ( CPF_Parm )
// float                          VersionIdx                     ( CPF_Parm )

void USFXGAWReinforcementUnsaved::Activate ( int UniqueId, float VersionIdx )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 105733 ];

	USFXGAWReinforcementUnsaved_execActivate_Parms Activate_Parms;
	Activate_Parms.UniqueId = UniqueId;
	Activate_Parms.VersionIdx = VersionIdx;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGAWReinforcementKitUnlock.OnAwarded
// [0x00C24002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCardInfoData           CardInfoOut                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FCardInfoData > ChosenCards                    ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXGAWReinforcementKitUnlock::OnAwarded ( struct FCardInfoData* CardInfoOut, TArray< struct FCardInfoData >* ChosenCards )
{
	static UFunction* pFnOnAwarded = NULL;

	if ( ! pFnOnAwarded )
		pFnOnAwarded = (UFunction*) UObject::GObjObjects()->Data[ 108974 ];

	USFXGAWReinforcementKitUnlock_execOnAwarded_Parms OnAwarded_Parms;

	this->ProcessEvent ( pFnOnAwarded, &OnAwarded_Parms, NULL );

	if ( CardInfoOut )
		memcpy ( CardInfoOut, &OnAwarded_Parms.CardInfoOut, 0x68 );

	if ( ChosenCards )
		memcpy ( ChosenCards, &OnAwarded_Parms.ChosenCards, 0xC );

	return OnAwarded_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.SetEmblem
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nEmblemID                      ( CPF_Parm )

void Usfxcheatmanagernonnativemp::SetEmblem ( int nEmblemID )
{
	static UFunction* pFnSetEmblem = NULL;

	if ( ! pFnSetEmblem )
		pFnSetEmblem = (UFunction*) UObject::GObjObjects()->Data[ 108143 ];

	Usfxcheatmanagernonnativemp_execSetEmblem_Parms SetEmblem_Parms;
	SetEmblem_Parms.nEmblemID = nEmblemID;

	this->ProcessEvent ( pFnSetEmblem, &SetEmblem_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.KickServer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::KickServer ( )
{
	static UFunction* pFnKickServer = NULL;

	if ( ! pFnKickServer )
		pFnKickServer = (UFunction*) UObject::GObjObjects()->Data[ 108144 ];

	Usfxcheatmanagernonnativemp_execKickServer_Parms KickServer_Parms;

	this->ProcessEvent ( pFnKickServer, &KickServer_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.EndCurrentWave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::EndCurrentWave ( )
{
	static UFunction* pFnEndCurrentWave = NULL;

	if ( ! pFnEndCurrentWave )
		pFnEndCurrentWave = (UFunction*) UObject::GObjObjects()->Data[ 108142 ];

	Usfxcheatmanagernonnativemp_execEndCurrentWave_Parms EndCurrentWave_Parms;

	this->ProcessEvent ( pFnEndCurrentWave, &EndCurrentWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.ToggleEndlessWave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::ToggleEndlessWave ( )
{
	static UFunction* pFnToggleEndlessWave = NULL;

	if ( ! pFnToggleEndlessWave )
		pFnToggleEndlessWave = (UFunction*) UObject::GObjObjects()->Data[ 108139 ];

	Usfxcheatmanagernonnativemp_execToggleEndlessWave_Parms ToggleEndlessWave_Parms;

	this->ProcessEvent ( pFnToggleEndlessWave, &ToggleEndlessWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.ProfileMPGame
// [0x00020002] 
// Parameters infos:

void Usfxcheatmanagernonnativemp::ProfileMPGame ( )
{
	static UFunction* pFnProfileMPGame = NULL;

	if ( ! pFnProfileMPGame )
		pFnProfileMPGame = (UFunction*) UObject::GObjObjects()->Data[ 108110 ];

	Usfxcheatmanagernonnativemp_execProfileMPGame_Parms ProfileMPGame_Parms;

	this->ProcessEvent ( pFnProfileMPGame, &ProfileMPGame_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.PlayObjectiveLine
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            ObjectiveIndex                 ( CPF_Parm )
// int                            LineIndex                      ( CPF_Parm )

void Usfxcheatmanagernonnativemp::PlayObjectiveLine ( struct FString EventName, int ObjectiveIndex, int LineIndex )
{
	static UFunction* pFnPlayObjectiveLine = NULL;

	if ( ! pFnPlayObjectiveLine )
		pFnPlayObjectiveLine = (UFunction*) UObject::GObjObjects()->Data[ 108097 ];

	Usfxcheatmanagernonnativemp_execPlayObjectiveLine_Parms PlayObjectiveLine_Parms;
	memcpy ( &PlayObjectiveLine_Parms.EventName, &EventName, 0xC );
	PlayObjectiveLine_Parms.ObjectiveIndex = ObjectiveIndex;
	PlayObjectiveLine_Parms.LineIndex = LineIndex;

	this->ProcessEvent ( pFnPlayObjectiveLine, &PlayObjectiveLine_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.PlayHordeLine
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            Index                          ( CPF_Parm )

void Usfxcheatmanagernonnativemp::PlayHordeLine ( struct FString EventName, int Index )
{
	static UFunction* pFnPlayHordeLine = NULL;

	if ( ! pFnPlayHordeLine )
		pFnPlayHordeLine = (UFunction*) UObject::GObjObjects()->Data[ 108091 ];

	Usfxcheatmanagernonnativemp_execPlayHordeLine_Parms PlayHordeLine_Parms;
	memcpy ( &PlayHordeLine_Parms.EventName, &EventName, 0xC );
	PlayHordeLine_Parms.Index = Index;

	this->ProcessEvent ( pFnPlayHordeLine, &PlayHordeLine_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.SkipWave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::SkipWave ( )
{
	static UFunction* pFnSkipWave = NULL;

	if ( ! pFnSkipWave )
		pFnSkipWave = (UFunction*) UObject::GObjObjects()->Data[ 108090 ];

	Usfxcheatmanagernonnativemp_execSkipWave_Parms SkipWave_Parms;

	this->ProcessEvent ( pFnSkipWave, &SkipWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.RestartWithFaction
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Faction                        ( CPF_Parm | CPF_NeedCtorLink )

void Usfxcheatmanagernonnativemp::RestartWithFaction ( struct FString Faction )
{
	static UFunction* pFnRestartWithFaction = NULL;

	if ( ! pFnRestartWithFaction )
		pFnRestartWithFaction = (UFunction*) UObject::GObjObjects()->Data[ 108084 ];

	Usfxcheatmanagernonnativemp_execRestartWithFaction_Parms RestartWithFaction_Parms;
	memcpy ( &RestartWithFaction_Parms.Faction, &Faction, 0xC );

	this->ProcessEvent ( pFnRestartWithFaction, &RestartWithFaction_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.RestartFromBeginning
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::RestartFromBeginning ( )
{
	static UFunction* pFnRestartFromBeginning = NULL;

	if ( ! pFnRestartFromBeginning )
		pFnRestartFromBeginning = (UFunction*) UObject::GObjObjects()->Data[ 108083 ];

	Usfxcheatmanagernonnativemp_execRestartFromBeginning_Parms RestartFromBeginning_Parms;

	this->ProcessEvent ( pFnRestartFromBeginning, &RestartFromBeginning_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.RestartFromCheckpoint
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::RestartFromCheckpoint ( )
{
	static UFunction* pFnRestartFromCheckpoint = NULL;

	if ( ! pFnRestartFromCheckpoint )
		pFnRestartFromCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 108081 ];

	Usfxcheatmanagernonnativemp_execRestartFromCheckpoint_Parms RestartFromCheckpoint_Parms;

	this->ProcessEvent ( pFnRestartFromCheckpoint, &RestartFromCheckpoint_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.RestartFromWave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nWave                          ( CPF_Parm )

void Usfxcheatmanagernonnativemp::RestartFromWave ( int nWave )
{
	static UFunction* pFnRestartFromWave = NULL;

	if ( ! pFnRestartFromWave )
		pFnRestartFromWave = (UFunction*) UObject::GObjObjects()->Data[ 108078 ];

	Usfxcheatmanagernonnativemp_execRestartFromWave_Parms RestartFromWave_Parms;
	RestartFromWave_Parms.nWave = nWave;

	this->ProcessEvent ( pFnRestartFromWave, &RestartFromWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.ShowAllMPCards
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::ShowAllMPCards ( )
{
	static UFunction* pFnShowAllMPCards = NULL;

	if ( ! pFnShowAllMPCards )
		pFnShowAllMPCards = (UFunction*) UObject::GObjObjects()->Data[ 108071 ];

	Usfxcheatmanagernonnativemp_execShowAllMPCards_Parms ShowAllMPCards_Parms;

	this->ProcessEvent ( pFnShowAllMPCards, &ShowAllMPCards_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.TestPurchaseEntitlement
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::TestPurchaseEntitlement ( )
{
	static UFunction* pFnTestPurchaseEntitlement = NULL;

	if ( ! pFnTestPurchaseEntitlement )
		pFnTestPurchaseEntitlement = (UFunction*) UObject::GObjObjects()->Data[ 108068 ];

	Usfxcheatmanagernonnativemp_execTestPurchaseEntitlement_Parms TestPurchaseEntitlement_Parms;

	this->ProcessEvent ( pFnTestPurchaseEntitlement, &TestPurchaseEntitlement_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.TestConsumptionError
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// int                            nCriticalLocation              ( CPF_Parm )

void Usfxcheatmanagernonnativemp::TestConsumptionError ( int nCriticalLocation )
{
	static UFunction* pFnTestConsumptionError = NULL;

	if ( ! pFnTestConsumptionError )
		pFnTestConsumptionError = (UFunction*) UObject::GObjObjects()->Data[ 108064 ];

	Usfxcheatmanagernonnativemp_execTestConsumptionError_Parms TestConsumptionError_Parms;
	TestConsumptionError_Parms.nCriticalLocation = nCriticalLocation;

	this->ProcessEvent ( pFnTestConsumptionError, &TestConsumptionError_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.TestPurchaseFromPlatform
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxcheatmanagernonnativemp::TestPurchaseFromPlatform ( int nID )
{
	static UFunction* pFnTestPurchaseFromPlatform = NULL;

	if ( ! pFnTestPurchaseFromPlatform )
		pFnTestPurchaseFromPlatform = (UFunction*) UObject::GObjObjects()->Data[ 108060 ];

	Usfxcheatmanagernonnativemp_execTestPurchaseFromPlatform_Parms TestPurchaseFromPlatform_Parms;
	TestPurchaseFromPlatform_Parms.nID = nID;

	this->ProcessEvent ( pFnTestPurchaseFromPlatform, &TestPurchaseFromPlatform_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.UnlockAllMPCards
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::UnlockAllMPCards ( )
{
	static UFunction* pFnUnlockAllMPCards = NULL;

	if ( ! pFnUnlockAllMPCards )
		pFnUnlockAllMPCards = (UFunction*) UObject::GObjObjects()->Data[ 108054 ];

	Usfxcheatmanagernonnativemp_execUnlockAllMPCards_Parms UnlockAllMPCards_Parms;

	this->ProcessEvent ( pFnUnlockAllMPCards, &UnlockAllMPCards_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.ReplicationDebugCam
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::ReplicationDebugCam ( )
{
	static UFunction* pFnReplicationDebugCam = NULL;

	if ( ! pFnReplicationDebugCam )
		pFnReplicationDebugCam = (UFunction*) UObject::GObjObjects()->Data[ 108050 ];

	Usfxcheatmanagernonnativemp_execReplicationDebugCam_Parms ReplicationDebugCam_Parms;

	this->ProcessEvent ( pFnReplicationDebugCam, &ReplicationDebugCam_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.TestSquads
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::TestSquads ( )
{
	static UFunction* pFnTestSquads = NULL;

	if ( ! pFnTestSquads )
		pFnTestSquads = (UFunction*) UObject::GObjObjects()->Data[ 108045 ];

	Usfxcheatmanagernonnativemp_execTestSquads_Parms TestSquads_Parms;

	this->ProcessEvent ( pFnTestSquads, &TestSquads_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.TestHostile
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::TestHostile ( )
{
	static UFunction* pFnTestHostile = NULL;

	if ( ! pFnTestHostile )
		pFnTestHostile = (UFunction*) UObject::GObjObjects()->Data[ 108032 ];

	Usfxcheatmanagernonnativemp_execTestHostile_Parms TestHostile_Parms;

	this->ProcessEvent ( pFnTestHostile, &TestHostile_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.GiveMPConsumables
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// int                            Quantity                       ( CPF_Parm )

void Usfxcheatmanagernonnativemp::GiveMPConsumables ( int Quantity )
{
	static UFunction* pFnGiveMPConsumables = NULL;

	if ( ! pFnGiveMPConsumables )
		pFnGiveMPConsumables = (UFunction*) UObject::GObjObjects()->Data[ 108030 ];

	Usfxcheatmanagernonnativemp_execGiveMPConsumables_Parms GiveMPConsumables_Parms;
	GiveMPConsumables_Parms.Quantity = Quantity;

	this->ProcessEvent ( pFnGiveMPConsumables, &GiveMPConsumables_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.GiveShieldConsumable
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// int                            Quantity                       ( CPF_Parm )

void Usfxcheatmanagernonnativemp::GiveShieldConsumable ( int Quantity )
{
	static UFunction* pFnGiveShieldConsumable = NULL;

	if ( ! pFnGiveShieldConsumable )
		pFnGiveShieldConsumable = (UFunction*) UObject::GObjObjects()->Data[ 108026 ];

	Usfxcheatmanagernonnativemp_execGiveShieldConsumable_Parms GiveShieldConsumable_Parms;
	GiveShieldConsumable_Parms.Quantity = Quantity;

	this->ProcessEvent ( pFnGiveShieldConsumable, &GiveShieldConsumable_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.GiveRocketConsumable
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// int                            Quantity                       ( CPF_Parm )

void Usfxcheatmanagernonnativemp::GiveRocketConsumable ( int Quantity )
{
	static UFunction* pFnGiveRocketConsumable = NULL;

	if ( ! pFnGiveRocketConsumable )
		pFnGiveRocketConsumable = (UFunction*) UObject::GObjObjects()->Data[ 108022 ];

	Usfxcheatmanagernonnativemp_execGiveRocketConsumable_Parms GiveRocketConsumable_Parms;
	GiveRocketConsumable_Parms.Quantity = Quantity;

	this->ProcessEvent ( pFnGiveRocketConsumable, &GiveRocketConsumable_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.GiveReviveConsumable
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// int                            Quantity                       ( CPF_Parm )

void Usfxcheatmanagernonnativemp::GiveReviveConsumable ( int Quantity )
{
	static UFunction* pFnGiveReviveConsumable = NULL;

	if ( ! pFnGiveReviveConsumable )
		pFnGiveReviveConsumable = (UFunction*) UObject::GObjObjects()->Data[ 108018 ];

	Usfxcheatmanagernonnativemp_execGiveReviveConsumable_Parms GiveReviveConsumable_Parms;
	GiveReviveConsumable_Parms.Quantity = Quantity;

	this->ProcessEvent ( pFnGiveReviveConsumable, &GiveReviveConsumable_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.GiveAmmoConsumable
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// int                            Quantity                       ( CPF_Parm )

void Usfxcheatmanagernonnativemp::GiveAmmoConsumable ( int Quantity )
{
	static UFunction* pFnGiveAmmoConsumable = NULL;

	if ( ! pFnGiveAmmoConsumable )
		pFnGiveAmmoConsumable = (UFunction*) UObject::GObjObjects()->Data[ 108014 ];

	Usfxcheatmanagernonnativemp_execGiveAmmoConsumable_Parms GiveAmmoConsumable_Parms;
	GiveAmmoConsumable_Parms.Quantity = Quantity;

	this->ProcessEvent ( pFnGiveAmmoConsumable, &GiveAmmoConsumable_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.GiveAllMatchConsumables
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::GiveAllMatchConsumables ( )
{
	static UFunction* pFnGiveAllMatchConsumables = NULL;

	if ( ! pFnGiveAllMatchConsumables )
		pFnGiveAllMatchConsumables = (UFunction*) UObject::GObjObjects()->Data[ 108004 ];

	Usfxcheatmanagernonnativemp_execGiveAllMatchConsumables_Parms GiveAllMatchConsumables_Parms;

	this->ProcessEvent ( pFnGiveAllMatchConsumables, &GiveAllMatchConsumables_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.DebugMatchConsumables
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::DebugMatchConsumables ( )
{
	static UFunction* pFnDebugMatchConsumables = NULL;

	if ( ! pFnDebugMatchConsumables )
		pFnDebugMatchConsumables = (UFunction*) UObject::GObjObjects()->Data[ 107998 ];

	Usfxcheatmanagernonnativemp_execDebugMatchConsumables_Parms DebugMatchConsumables_Parms;

	this->ProcessEvent ( pFnDebugMatchConsumables, &DebugMatchConsumables_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.LoadDeck
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::LoadDeck ( )
{
	static UFunction* pFnLoadDeck = NULL;

	if ( ! pFnLoadDeck )
		pFnLoadDeck = (UFunction*) UObject::GObjObjects()->Data[ 107995 ];

	Usfxcheatmanagernonnativemp_execLoadDeck_Parms LoadDeck_Parms;

	this->ProcessEvent ( pFnLoadDeck, &LoadDeck_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.CheatCardPack
// [0x00024203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// struct FString                 PackName                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void Usfxcheatmanagernonnativemp::CheatCardPack ( struct FString PackName )
{
	static UFunction* pFnCheatCardPack = NULL;

	if ( ! pFnCheatCardPack )
		pFnCheatCardPack = (UFunction*) UObject::GObjObjects()->Data[ 107989 ];

	Usfxcheatmanagernonnativemp_execCheatCardPack_Parms CheatCardPack_Parms;
	memcpy ( &CheatCardPack_Parms.PackName, &PackName, 0xC );

	this->ProcessEvent ( pFnCheatCardPack, &CheatCardPack_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.CreditsCardPack
// [0x00024203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// struct FString                 PackName                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void Usfxcheatmanagernonnativemp::CreditsCardPack ( struct FString PackName )
{
	static UFunction* pFnCreditsCardPack = NULL;

	if ( ! pFnCreditsCardPack )
		pFnCreditsCardPack = (UFunction*) UObject::GObjObjects()->Data[ 107979 ];

	Usfxcheatmanagernonnativemp_execCreditsCardPack_Parms CreditsCardPack_Parms;
	memcpy ( &CreditsCardPack_Parms.PackName, &PackName, 0xC );

	this->ProcessEvent ( pFnCreditsCardPack, &CreditsCardPack_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.ProfileDeck
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void Usfxcheatmanagernonnativemp::ProfileDeck ( )
{
	static UFunction* pFnProfileDeck = NULL;

	if ( ! pFnProfileDeck )
		pFnProfileDeck = (UFunction*) UObject::GObjObjects()->Data[ 107969 ];

	Usfxcheatmanagernonnativemp_execProfileDeck_Parms ProfileDeck_Parms;

	this->ProcessEvent ( pFnProfileDeck, &ProfileDeck_Parms, NULL );
};

// Function sfxgamempcontent.sfxcheatmanagernonnativemp.SetKit
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 KitName                        ( CPF_Parm | CPF_NeedCtorLink )

void Usfxcheatmanagernonnativemp::SetKit ( struct FString KitName )
{
	static UFunction* pFnSetKit = NULL;

	if ( ! pFnSetKit )
		pFnSetKit = (UFunction*) UObject::GObjObjects()->Data[ 107965 ];

	Usfxcheatmanagernonnativemp_execSetKit_Parms SetKit_Parms;
	memcpy ( &SetKit_Parms.KitName, &KitName, 0xC );

	this->ProcessEvent ( pFnSetKit, &SetKit_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.GetPlayerChallengeTitle
// [0x00020102] 
// Parameters infos:
// void*                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

void* Asfxprimp::GetPlayerChallengeTitle ( )
{
	static UFunction* pFnGetPlayerChallengeTitle = NULL;

	if ( ! pFnGetPlayerChallengeTitle )
		pFnGetPlayerChallengeTitle = (UFunction*) UObject::GObjObjects()->Data[ 112943 ];

	Asfxprimp_execGetPlayerChallengeTitle_Parms GetPlayerChallengeTitle_Parms;

	this->ProcessEvent ( pFnGetPlayerChallengeTitle, &GetPlayerChallengeTitle_Parms, NULL );

	return GetPlayerChallengeTitle_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.GetCurrentEmblemData
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// struct FEmblemDisplayInfo      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FEmblemDisplayInfo Asfxprimp::GetCurrentEmblemData ( )
{
	static UFunction* pFnGetCurrentEmblemData = NULL;

	if ( ! pFnGetCurrentEmblemData )
		pFnGetCurrentEmblemData = (UFunction*) UObject::GObjObjects()->Data[ 112950 ];

	Asfxprimp_execGetCurrentEmblemData_Parms GetCurrentEmblemData_Parms;

	this->ProcessEvent ( pFnGetCurrentEmblemData, &GetCurrentEmblemData_Parms, NULL );

	return GetCurrentEmblemData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.GetEmblemData
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// struct FEmblemDisplayInfo      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            EmblemID                       ( CPF_Parm )

struct FEmblemDisplayInfo Asfxprimp::GetEmblemData ( int EmblemID )
{
	static UFunction* pFnGetEmblemData = NULL;

	if ( ! pFnGetEmblemData )
		pFnGetEmblemData = (UFunction*) UObject::GObjObjects()->Data[ 110304 ];

	Asfxprimp_execGetEmblemData_Parms GetEmblemData_Parms;
	GetEmblemData_Parms.EmblemID = EmblemID;

	this->ProcessEvent ( pFnGetEmblemData, &GetEmblemData_Parms, NULL );

	return GetEmblemData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.SendTelemetryForWeapons
// [0x00020102] 
// Parameters infos:

void Asfxprimp::SendTelemetryForWeapons ( )
{
	static UFunction* pFnSendTelemetryForWeapons = NULL;

	if ( ! pFnSendTelemetryForWeapons )
		pFnSendTelemetryForWeapons = (UFunction*) UObject::GObjObjects()->Data[ 112932 ];

	Asfxprimp_execSendTelemetryForWeapons_Parms SendTelemetryForWeapons_Parms;

	this->ProcessEvent ( pFnSendTelemetryForWeapons, &SendTelemetryForWeapons_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.GetStoreIsOpen
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxprimp::GetStoreIsOpen ( )
{
	static UFunction* pFnGetStoreIsOpen = NULL;

	if ( ! pFnGetStoreIsOpen )
		pFnGetStoreIsOpen = (UFunction*) UObject::GObjObjects()->Data[ 109308 ];

	Asfxprimp_execGetStoreIsOpen_Parms GetStoreIsOpen_Parms;

	this->ProcessEvent ( pFnGetStoreIsOpen, &GetStoreIsOpen_Parms, NULL );

	return GetStoreIsOpen_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.ServerSetStoreIsOpen
// [0x002200C2] 
// Parameters infos:
// unsigned long                  NewStoreIsOpen                 ( CPF_Parm )

void Asfxprimp::ServerSetStoreIsOpen ( unsigned long NewStoreIsOpen )
{
	static UFunction* pFnServerSetStoreIsOpen = NULL;

	if ( ! pFnServerSetStoreIsOpen )
		pFnServerSetStoreIsOpen = (UFunction*) UObject::GObjObjects()->Data[ 112956 ];

	Asfxprimp_execServerSetStoreIsOpen_Parms ServerSetStoreIsOpen_Parms;
	ServerSetStoreIsOpen_Parms.NewStoreIsOpen = NewStoreIsOpen;

	this->ProcessEvent ( pFnServerSetStoreIsOpen, &ServerSetStoreIsOpen_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.SetStoreIsOpen
// [0x00020102] 
// Parameters infos:
// unsigned long                  NewStoreIsOpen                 ( CPF_Parm )

void Asfxprimp::SetStoreIsOpen ( unsigned long NewStoreIsOpen )
{
	static UFunction* pFnSetStoreIsOpen = NULL;

	if ( ! pFnSetStoreIsOpen )
		pFnSetStoreIsOpen = (UFunction*) UObject::GObjObjects()->Data[ 112957 ];

	Asfxprimp_execSetStoreIsOpen_Parms SetStoreIsOpen_Parms;
	SetStoreIsOpen_Parms.NewStoreIsOpen = NewStoreIsOpen;

	this->ProcessEvent ( pFnSetStoreIsOpen, &SetStoreIsOpen_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.ServerSetReadyToTransitionToLobby
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bReady                         ( CPF_Parm )

void Asfxprimp::ServerSetReadyToTransitionToLobby ( unsigned long bReady )
{
	static UFunction* pFnServerSetReadyToTransitionToLobby = NULL;

	if ( ! pFnServerSetReadyToTransitionToLobby )
		pFnServerSetReadyToTransitionToLobby = (UFunction*) UObject::GObjObjects()->Data[ 112930 ];

	Asfxprimp_execServerSetReadyToTransitionToLobby_Parms ServerSetReadyToTransitionToLobby_Parms;
	ServerSetReadyToTransitionToLobby_Parms.bReady = bReady;

	this->ProcessEvent ( pFnServerSetReadyToTransitionToLobby, &ServerSetReadyToTransitionToLobby_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.ServerSetKickVote
// [0x002200C2] 
// Parameters infos:
// struct FUniqueNetId            KickVote                       ( CPF_Parm )

void Asfxprimp::ServerSetKickVote ( struct FUniqueNetId KickVote )
{
	static UFunction* pFnServerSetKickVote = NULL;

	if ( ! pFnServerSetKickVote )
		pFnServerSetKickVote = (UFunction*) UObject::GObjObjects()->Data[ 112928 ];

	Asfxprimp_execServerSetKickVote_Parms ServerSetKickVote_Parms;
	memcpy ( &ServerSetKickVote_Parms.KickVote, &KickVote, 0x8 );

	this->ProcessEvent ( pFnServerSetKickVote, &ServerSetKickVote_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.SetKickVote
// [0x00020102] 
// Parameters infos:
// struct FUniqueNetId            KickVote                       ( CPF_Parm )

void Asfxprimp::SetKickVote ( struct FUniqueNetId KickVote )
{
	static UFunction* pFnSetKickVote = NULL;

	if ( ! pFnSetKickVote )
		pFnSetKickVote = (UFunction*) UObject::GObjObjects()->Data[ 112926 ];

	Asfxprimp_execSetKickVote_Parms SetKickVote_Parms;
	memcpy ( &SetKickVote_Parms.KickVote, &KickVote, 0x8 );

	this->ProcessEvent ( pFnSetKickVote, &SetKickVote_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.ServerSetMapArray
// [0x002200C2] 
// Parameters infos:
// unsigned char                  MapArray                       ( CPF_Parm )

void Asfxprimp::ServerSetMapArray ( unsigned char* MapArray )
{
	static UFunction* pFnServerSetMapArray = NULL;

	if ( ! pFnServerSetMapArray )
		pFnServerSetMapArray = (UFunction*) UObject::GObjObjects()->Data[ 112923 ];

	Asfxprimp_execServerSetMapArray_Parms ServerSetMapArray_Parms;
	memcpy ( &ServerSetMapArray_Parms.MapArray, &MapArray, 0x1E );

	this->ProcessEvent ( pFnServerSetMapArray, &ServerSetMapArray_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.OnPlayerMedalsChanged
// [0x00024102] 
// Parameters infos:
// unsigned long                  bDisplay                       ( CPF_OptionalParm | CPF_Parm )

void Asfxprimp::OnPlayerMedalsChanged ( unsigned long bDisplay )
{
	static UFunction* pFnOnPlayerMedalsChanged = NULL;

	if ( ! pFnOnPlayerMedalsChanged )
		pFnOnPlayerMedalsChanged = (UFunction*) UObject::GObjObjects()->Data[ 112916 ];

	Asfxprimp_execOnPlayerMedalsChanged_Parms OnPlayerMedalsChanged_Parms;
	OnPlayerMedalsChanged_Parms.bDisplay = bDisplay;

	this->ProcessEvent ( pFnOnPlayerMedalsChanged, &OnPlayerMedalsChanged_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.AddPlayerMedal
// [0x00024002] 
// Parameters infos:
// int                            Medal                          ( CPF_Parm )
// int                            ReplaceMedal                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDisplay                       ( CPF_OptionalParm | CPF_Parm )

void Asfxprimp::AddPlayerMedal ( int Medal, int ReplaceMedal, unsigned long bDisplay )
{
	static UFunction* pFnAddPlayerMedal = NULL;

	if ( ! pFnAddPlayerMedal )
		pFnAddPlayerMedal = (UFunction*) UObject::GObjObjects()->Data[ 112911 ];

	Asfxprimp_execAddPlayerMedal_Parms AddPlayerMedal_Parms;
	AddPlayerMedal_Parms.Medal = Medal;
	AddPlayerMedal_Parms.ReplaceMedal = ReplaceMedal;
	AddPlayerMedal_Parms.bDisplay = bDisplay;

	this->ProcessEvent ( pFnAddPlayerMedal, &AddPlayerMedal_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.DisplayPlayerMedal
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            nMedal                         ( CPF_Parm )

void Asfxprimp::DisplayPlayerMedal ( int nMedal )
{
	static UFunction* pFnDisplayPlayerMedal = NULL;

	if ( ! pFnDisplayPlayerMedal )
		pFnDisplayPlayerMedal = (UFunction*) UObject::GObjObjects()->Data[ 112903 ];

	Asfxprimp_execDisplayPlayerMedal_Parms DisplayPlayerMedal_Parms;
	DisplayPlayerMedal_Parms.nMedal = nMedal;

	this->ProcessEvent ( pFnDisplayPlayerMedal, &DisplayPlayerMedal_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.ApplyMatchConsumableGameEffects
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class ASFXPawn_Player*         pPawn                          ( CPF_Parm )

void Asfxprimp::ApplyMatchConsumableGameEffects ( class ASFXPawn_Player* pPawn )
{
	static UFunction* pFnApplyMatchConsumableGameEffects = NULL;

	if ( ! pFnApplyMatchConsumableGameEffects )
		pFnApplyMatchConsumableGameEffects = (UFunction*) UObject::GObjObjects()->Data[ 111933 ];

	Asfxprimp_execApplyMatchConsumableGameEffects_Parms ApplyMatchConsumableGameEffects_Parms;
	ApplyMatchConsumableGameEffects_Parms.pPawn = pPawn;

	this->ProcessEvent ( pFnApplyMatchConsumableGameEffects, &ApplyMatchConsumableGameEffects_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.VerifyPawnPowers
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXPawn_Player*         Pawn                           ( CPF_Parm )

bool Asfxprimp::VerifyPawnPowers ( class ASFXPawn_Player* Pawn )
{
	static UFunction* pFnVerifyPawnPowers = NULL;

	if ( ! pFnVerifyPawnPowers )
		pFnVerifyPawnPowers = (UFunction*) UObject::GObjObjects()->Data[ 111966 ];

	Asfxprimp_execVerifyPawnPowers_Parms VerifyPawnPowers_Parms;
	VerifyPawnPowers_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnVerifyPawnPowers, &VerifyPawnPowers_Parms, NULL );

	return VerifyPawnPowers_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.IsMatchConsumableActive
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UniqueConsumableID             ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

bool Asfxprimp::IsMatchConsumableActive ( int UniqueConsumableID, float Value )
{
	static UFunction* pFnIsMatchConsumableActive = NULL;

	if ( ! pFnIsMatchConsumableActive )
		pFnIsMatchConsumableActive = (UFunction*) UObject::GObjObjects()->Data[ 112886 ];

	Asfxprimp_execIsMatchConsumableActive_Parms IsMatchConsumableActive_Parms;
	IsMatchConsumableActive_Parms.UniqueConsumableID = UniqueConsumableID;
	IsMatchConsumableActive_Parms.Value = Value;

	this->ProcessEvent ( pFnIsMatchConsumableActive, &IsMatchConsumableActive_Parms, NULL );

	return IsMatchConsumableActive_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.ClearActiveMatchConsumables
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void Asfxprimp::ClearActiveMatchConsumables ( )
{
	static UFunction* pFnClearActiveMatchConsumables = NULL;

	if ( ! pFnClearActiveMatchConsumables )
		pFnClearActiveMatchConsumables = (UFunction*) UObject::GObjObjects()->Data[ 109145 ];

	Asfxprimp_execClearActiveMatchConsumables_Parms ClearActiveMatchConsumables_Parms;

	this->ProcessEvent ( pFnClearActiveMatchConsumables, &ClearActiveMatchConsumables_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.GetAppearanceData
// [0x00420102] 
// Parameters infos:
// int                            Tint1ID                        ( CPF_Parm | CPF_OutParm )
// int                            Tint2ID                        ( CPF_Parm | CPF_OutParm )
// int                            PatternID                      ( CPF_Parm | CPF_OutParm )
// int                            PatternColorID                 ( CPF_Parm | CPF_OutParm )
// int                            PhongID                        ( CPF_Parm | CPF_OutParm )
// int                            EmissiveID                     ( CPF_Parm | CPF_OutParm )
// int                            SkinToneID                     ( CPF_Parm | CPF_OutParm )

void Asfxprimp::GetAppearanceData ( int* Tint1ID, int* Tint2ID, int* PatternID, int* PatternColorID, int* PhongID, int* EmissiveID, int* SkinToneID )
{
	static UFunction* pFnGetAppearanceData = NULL;

	if ( ! pFnGetAppearanceData )
		pFnGetAppearanceData = (UFunction*) UObject::GObjObjects()->Data[ 112876 ];

	Asfxprimp_execGetAppearanceData_Parms GetAppearanceData_Parms;

	this->ProcessEvent ( pFnGetAppearanceData, &GetAppearanceData_Parms, NULL );

	if ( Tint1ID )
		*Tint1ID = GetAppearanceData_Parms.Tint1ID;

	if ( Tint2ID )
		*Tint2ID = GetAppearanceData_Parms.Tint2ID;

	if ( PatternID )
		*PatternID = GetAppearanceData_Parms.PatternID;

	if ( PatternColorID )
		*PatternColorID = GetAppearanceData_Parms.PatternColorID;

	if ( PhongID )
		*PhongID = GetAppearanceData_Parms.PhongID;

	if ( EmissiveID )
		*EmissiveID = GetAppearanceData_Parms.EmissiveID;

	if ( SkinToneID )
		*SkinToneID = GetAppearanceData_Parms.SkinToneID;
};

// Function sfxgamempcontent.sfxprimp.GetCharacterData_Patch
// [0x00420102] 
// Parameters infos:
// int                            NumClassPromotions             ( CPF_Parm | CPF_OutParm )
// int                            EmblemID                       ( CPF_Parm | CPF_OutParm )
// int                            ChallengePoints                ( CPF_Parm | CPF_OutParm )

void Asfxprimp::GetCharacterData_Patch ( int* NumClassPromotions, int* EmblemID, int* ChallengePoints )
{
	static UFunction* pFnGetCharacterData_Patch = NULL;

	if ( ! pFnGetCharacterData_Patch )
		pFnGetCharacterData_Patch = (UFunction*) UObject::GObjObjects()->Data[ 112884 ];

	Asfxprimp_execGetCharacterData_Patch_Parms GetCharacterData_Patch_Parms;

	this->ProcessEvent ( pFnGetCharacterData_Patch, &GetCharacterData_Patch_Parms, NULL );

	if ( NumClassPromotions )
		*NumClassPromotions = GetCharacterData_Patch_Parms.NumClassPromotions;

	if ( EmblemID )
		*EmblemID = GetCharacterData_Patch_Parms.EmblemID;

	if ( ChallengePoints )
		*ChallengePoints = GetCharacterData_Patch_Parms.ChallengePoints;
};

// Function sfxgamempcontent.sfxprimp.SetCharacterData_Patch
// [0x00020102] 
// Parameters infos:
// int                            NumClassPromotions             ( CPF_Parm )
// int                            EmblemID                       ( CPF_Parm )
// int                            ChallengePoints                ( CPF_Parm )

void Asfxprimp::SetCharacterData_Patch ( int NumClassPromotions, int EmblemID, int ChallengePoints )
{
	static UFunction* pFnSetCharacterData_Patch = NULL;

	if ( ! pFnSetCharacterData_Patch )
		pFnSetCharacterData_Patch = (UFunction*) UObject::GObjObjects()->Data[ 112960 ];

	Asfxprimp_execSetCharacterData_Patch_Parms SetCharacterData_Patch_Parms;
	SetCharacterData_Patch_Parms.NumClassPromotions = NumClassPromotions;
	SetCharacterData_Patch_Parms.EmblemID = EmblemID;
	SetCharacterData_Patch_Parms.ChallengePoints = ChallengePoints;

	this->ProcessEvent ( pFnSetCharacterData_Patch, &SetCharacterData_Patch_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.GetCharacterData
// [0x00420102] 
// Parameters infos:
// struct FString                 CharacterName                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FName                   CharacterKit                   ( CPF_Parm | CPF_OutParm )
// void*                          ClassPrettyName                ( CPF_Parm | CPF_OutParm )
// int                            Level                          ( CPF_Parm | CPF_OutParm )
// float                          XP                             ( CPF_Parm | CPF_OutParm )
// int                            n7Rating                       ( CPF_Parm | CPF_OutParm )

void Asfxprimp::GetCharacterData ( struct FString* CharacterName, struct FName* CharacterKit, void** ClassPrettyName, int* Level, float* XP, int* n7Rating )
{
	static UFunction* pFnGetCharacterData = NULL;

	if ( ! pFnGetCharacterData )
		pFnGetCharacterData = (UFunction*) UObject::GObjObjects()->Data[ 112869 ];

	Asfxprimp_execGetCharacterData_Parms GetCharacterData_Parms;

	this->ProcessEvent ( pFnGetCharacterData, &GetCharacterData_Parms, NULL );

	if ( CharacterName )
		memcpy ( CharacterName, &GetCharacterData_Parms.CharacterName, 0xC );

	if ( CharacterKit )
		memcpy ( CharacterKit, &GetCharacterData_Parms.CharacterKit, 0x8 );

	if ( ClassPrettyName )
		*ClassPrettyName = GetCharacterData_Parms.ClassPrettyName;

	if ( Level )
		*Level = GetCharacterData_Parms.Level;

	if ( XP )
		*XP = GetCharacterData_Parms.XP;

	if ( n7Rating )
		*n7Rating = GetCharacterData_Parms.n7Rating;
};

// Function sfxgamempcontent.sfxprimp.SetCharacterData
// [0x00020102] 
// Parameters infos:
// struct FString                 CharacterName                  ( CPF_Parm | CPF_NeedCtorLink )
// struct FName                   CharacterKit                   ( CPF_Parm )
// void*                          ClassPrettyName                ( CPF_Parm )
// int                            Level                          ( CPF_Parm )
// float                          XP                             ( CPF_Parm )
// int                            n7Rating                       ( CPF_Parm )

void Asfxprimp::SetCharacterData ( struct FString CharacterName, struct FName CharacterKit, void* ClassPrettyName, int Level, float XP, int n7Rating )
{
	static UFunction* pFnSetCharacterData = NULL;

	if ( ! pFnSetCharacterData )
		pFnSetCharacterData = (UFunction*) UObject::GObjObjects()->Data[ 112862 ];

	Asfxprimp_execSetCharacterData_Parms SetCharacterData_Parms;
	memcpy ( &SetCharacterData_Parms.CharacterName, &CharacterName, 0xC );
	memcpy ( &SetCharacterData_Parms.CharacterKit, &CharacterKit, 0x8 );
	SetCharacterData_Parms.ClassPrettyName = ClassPrettyName;
	SetCharacterData_Parms.Level = Level;
	SetCharacterData_Parms.XP = XP;
	SetCharacterData_Parms.n7Rating = n7Rating;

	this->ProcessEvent ( pFnSetCharacterData, &SetCharacterData_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.SetAppearanceData
// [0x00020102] 
// Parameters infos:
// int                            Tint1ID                        ( CPF_Parm )
// int                            Tint2ID                        ( CPF_Parm )
// int                            PatternID                      ( CPF_Parm )
// int                            PatternColorID                 ( CPF_Parm )
// int                            PhongID                        ( CPF_Parm )
// int                            EmissiveID                     ( CPF_Parm )
// int                            SkinToneID                     ( CPF_Parm )

void Asfxprimp::SetAppearanceData ( int Tint1ID, int Tint2ID, int PatternID, int PatternColorID, int PhongID, int EmissiveID, int SkinToneID )
{
	static UFunction* pFnSetAppearanceData = NULL;

	if ( ! pFnSetAppearanceData )
		pFnSetAppearanceData = (UFunction*) UObject::GObjObjects()->Data[ 112854 ];

	Asfxprimp_execSetAppearanceData_Parms SetAppearanceData_Parms;
	SetAppearanceData_Parms.Tint1ID = Tint1ID;
	SetAppearanceData_Parms.Tint2ID = Tint2ID;
	SetAppearanceData_Parms.PatternID = PatternID;
	SetAppearanceData_Parms.PatternColorID = PatternColorID;
	SetAppearanceData_Parms.PhongID = PhongID;
	SetAppearanceData_Parms.EmissiveID = EmissiveID;
	SetAppearanceData_Parms.SkinToneID = SkinToneID;

	this->ProcessEvent ( pFnSetAppearanceData, &SetAppearanceData_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.SetCharacterName
// [0x00020102] 
// Parameters infos:
// struct FString                 CharacterName                  ( CPF_Parm | CPF_NeedCtorLink )

void Asfxprimp::SetCharacterName ( struct FString CharacterName )
{
	static UFunction* pFnSetCharacterName = NULL;

	if ( ! pFnSetCharacterName )
		pFnSetCharacterName = (UFunction*) UObject::GObjObjects()->Data[ 112852 ];

	Asfxprimp_execSetCharacterName_Parms SetCharacterName_Parms;
	memcpy ( &SetCharacterName_Parms.CharacterName, &CharacterName, 0xC );

	this->ProcessEvent ( pFnSetCharacterName, &SetCharacterName_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.GetCharacterKit
// [0x00020102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName Asfxprimp::GetCharacterKit ( )
{
	static UFunction* pFnGetCharacterKit = NULL;

	if ( ! pFnGetCharacterKit )
		pFnGetCharacterKit = (UFunction*) UObject::GObjObjects()->Data[ 108547 ];

	Asfxprimp_execGetCharacterKit_Parms GetCharacterKit_Parms;

	this->ProcessEvent ( pFnGetCharacterKit, &GetCharacterKit_Parms, NULL );

	return GetCharacterKit_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.SetCharacterKit
// [0x00020102] 
// Parameters infos:
// struct FName                   CharacterKit                   ( CPF_Parm )

void Asfxprimp::SetCharacterKit ( struct FName CharacterKit )
{
	static UFunction* pFnSetCharacterKit = NULL;

	if ( ! pFnSetCharacterKit )
		pFnSetCharacterKit = (UFunction*) UObject::GObjObjects()->Data[ 112848 ];

	Asfxprimp_execSetCharacterKit_Parms SetCharacterKit_Parms;
	memcpy ( &SetCharacterKit_Parms.CharacterKit, &CharacterKit, 0x8 );

	this->ProcessEvent ( pFnSetCharacterKit, &SetCharacterKit_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.GetPower
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PowerIndex                     ( CPF_Parm )
// struct FName                   PowerClassPath                 ( CPF_Parm | CPF_OutParm )
// int                            EvolvedChoices                 ( CPF_Parm | CPF_OutParm )
// int                            CurrentRank                    ( CPF_Parm | CPF_OutParm )

bool Asfxprimp::GetPower ( int PowerIndex, struct FName* PowerClassPath, int* EvolvedChoices, int* CurrentRank )
{
	static UFunction* pFnGetPower = NULL;

	if ( ! pFnGetPower )
		pFnGetPower = (UFunction*) UObject::GObjObjects()->Data[ 111968 ];

	Asfxprimp_execGetPower_Parms GetPower_Parms;
	GetPower_Parms.PowerIndex = PowerIndex;

	this->ProcessEvent ( pFnGetPower, &GetPower_Parms, NULL );

	if ( PowerClassPath )
		memcpy ( PowerClassPath, &GetPower_Parms.PowerClassPath, 0x8 );

	if ( EvolvedChoices )
		memcpy ( EvolvedChoices, &GetPower_Parms.EvolvedChoices, 0x18 );

	if ( CurrentRank )
		*CurrentRank = GetPower_Parms.CurrentRank;

	return GetPower_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.SetPower
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PowerIndex                     ( CPF_Parm )
// struct FName                   PowerClassPath                 ( CPF_Parm )
// int                            EvolvedChoices                 ( CPF_Parm )
// int                            CurrentRank                    ( CPF_Parm )

bool Asfxprimp::SetPower ( int PowerIndex, struct FName PowerClassPath, int* EvolvedChoices, int CurrentRank )
{
	static UFunction* pFnSetPower = NULL;

	if ( ! pFnSetPower )
		pFnSetPower = (UFunction*) UObject::GObjObjects()->Data[ 112836 ];

	Asfxprimp_execSetPower_Parms SetPower_Parms;
	SetPower_Parms.PowerIndex = PowerIndex;
	memcpy ( &SetPower_Parms.PowerClassPath, &PowerClassPath, 0x8 );
	memcpy ( &SetPower_Parms.EvolvedChoices, &EvolvedChoices, 0x18 );
	SetPower_Parms.CurrentRank = CurrentRank;

	this->ProcessEvent ( pFnSetPower, &SetPower_Parms, NULL );

	return SetPower_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.ClearPowerData
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void Asfxprimp::ClearPowerData ( )
{
	static UFunction* pFnClearPowerData = NULL;

	if ( ! pFnClearPowerData )
		pFnClearPowerData = (UFunction*) UObject::GObjObjects()->Data[ 112711 ];

	Asfxprimp_execClearPowerData_Parms ClearPowerData_Parms;

	this->ProcessEvent ( pFnClearPowerData, &ClearPowerData_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.GetWeaponMod
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            WeaponIndex                    ( CPF_Parm )
// int                            ModIndex                       ( CPF_Parm )
// struct FName                   WeaponModClassPath             ( CPF_Parm | CPF_OutParm )
// int                            WeaponModLevel                 ( CPF_Parm | CPF_OutParm )

bool Asfxprimp::GetWeaponMod ( int WeaponIndex, int ModIndex, struct FName* WeaponModClassPath, int* WeaponModLevel )
{
	static UFunction* pFnGetWeaponMod = NULL;

	if ( ! pFnGetWeaponMod )
		pFnGetWeaponMod = (UFunction*) UObject::GObjObjects()->Data[ 110051 ];

	Asfxprimp_execGetWeaponMod_Parms GetWeaponMod_Parms;
	GetWeaponMod_Parms.WeaponIndex = WeaponIndex;
	GetWeaponMod_Parms.ModIndex = ModIndex;

	this->ProcessEvent ( pFnGetWeaponMod, &GetWeaponMod_Parms, NULL );

	if ( WeaponModClassPath )
		memcpy ( WeaponModClassPath, &GetWeaponMod_Parms.WeaponModClassPath, 0x8 );

	if ( WeaponModLevel )
		*WeaponModLevel = GetWeaponMod_Parms.WeaponModLevel;

	return GetWeaponMod_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.SetWeaponMod
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            WeaponIndex                    ( CPF_Parm )
// int                            ModIndex                       ( CPF_Parm )
// struct FName                   WeaponModClassPath             ( CPF_Parm )
// int                            WeaponModLevel                 ( CPF_Parm )

bool Asfxprimp::SetWeaponMod ( int WeaponIndex, int ModIndex, struct FName WeaponModClassPath, int WeaponModLevel )
{
	static UFunction* pFnSetWeaponMod = NULL;

	if ( ! pFnSetWeaponMod )
		pFnSetWeaponMod = (UFunction*) UObject::GObjObjects()->Data[ 112826 ];

	Asfxprimp_execSetWeaponMod_Parms SetWeaponMod_Parms;
	SetWeaponMod_Parms.WeaponIndex = WeaponIndex;
	SetWeaponMod_Parms.ModIndex = ModIndex;
	memcpy ( &SetWeaponMod_Parms.WeaponModClassPath, &WeaponModClassPath, 0x8 );
	SetWeaponMod_Parms.WeaponModLevel = WeaponModLevel;

	this->ProcessEvent ( pFnSetWeaponMod, &SetWeaponMod_Parms, NULL );

	return SetWeaponMod_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.GetWeaponLevel
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WeaponClassPath                ( CPF_Parm )

int Asfxprimp::GetWeaponLevel ( struct FName WeaponClassPath )
{
	static UFunction* pFnGetWeaponLevel = NULL;

	if ( ! pFnGetWeaponLevel )
		pFnGetWeaponLevel = (UFunction*) UObject::GObjObjects()->Data[ 110049 ];

	Asfxprimp_execGetWeaponLevel_Parms GetWeaponLevel_Parms;
	memcpy ( &GetWeaponLevel_Parms.WeaponClassPath, &WeaponClassPath, 0x8 );

	this->ProcessEvent ( pFnGetWeaponLevel, &GetWeaponLevel_Parms, NULL );

	return GetWeaponLevel_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.GetWeapon
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            WeaponIndex                    ( CPF_Parm )
// struct FName                   WeaponClassPath                ( CPF_Parm | CPF_OutParm )

bool Asfxprimp::GetWeapon ( int WeaponIndex, struct FName* WeaponClassPath )
{
	static UFunction* pFnGetWeapon = NULL;

	if ( ! pFnGetWeapon )
		pFnGetWeapon = (UFunction*) UObject::GObjObjects()->Data[ 110047 ];

	Asfxprimp_execGetWeapon_Parms GetWeapon_Parms;
	GetWeapon_Parms.WeaponIndex = WeaponIndex;

	this->ProcessEvent ( pFnGetWeapon, &GetWeapon_Parms, NULL );

	if ( WeaponClassPath )
		memcpy ( WeaponClassPath, &GetWeapon_Parms.WeaponClassPath, 0x8 );

	return GetWeapon_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.SetWeapon
// [0x00020102] 
// Parameters infos:
// int                            WeaponIndex                    ( CPF_Parm )
// struct FName                   WeaponClassPath                ( CPF_Parm )
// int                            WeaponLevel                    ( CPF_Parm )

void Asfxprimp::SetWeapon ( int WeaponIndex, struct FName WeaponClassPath, int WeaponLevel )
{
	static UFunction* pFnSetWeapon = NULL;

	if ( ! pFnSetWeapon )
		pFnSetWeapon = (UFunction*) UObject::GObjObjects()->Data[ 112816 ];

	Asfxprimp_execSetWeapon_Parms SetWeapon_Parms;
	SetWeapon_Parms.WeaponIndex = WeaponIndex;
	memcpy ( &SetWeapon_Parms.WeaponClassPath, &WeaponClassPath, 0x8 );
	SetWeapon_Parms.WeaponLevel = WeaponLevel;

	this->ProcessEvent ( pFnSetWeapon, &SetWeapon_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.ClearWeaponData
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void Asfxprimp::ClearWeaponData ( )
{
	static UFunction* pFnClearWeaponData = NULL;

	if ( ! pFnClearWeaponData )
		pFnClearWeaponData = (UFunction*) UObject::GObjObjects()->Data[ 112718 ];

	Asfxprimp_execClearWeaponData_Parms ClearWeaponData_Parms;

	this->ProcessEvent ( pFnClearWeaponData, &ClearWeaponData_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.GetAsyncLoadingStatus
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char Asfxprimp::GetAsyncLoadingStatus ( )
{
	static UFunction* pFnGetAsyncLoadingStatus = NULL;

	if ( ! pFnGetAsyncLoadingStatus )
		pFnGetAsyncLoadingStatus = (UFunction*) UObject::GObjObjects()->Data[ 108575 ];

	Asfxprimp_execGetAsyncLoadingStatus_Parms GetAsyncLoadingStatus_Parms;

	this->ProcessEvent ( pFnGetAsyncLoadingStatus, &GetAsyncLoadingStatus_Parms, NULL );

	return GetAsyncLoadingStatus_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.GetPawnArchetype
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Asfxprimp::GetPawnArchetype ( )
{
	static UFunction* pFnGetPawnArchetype = NULL;

	if ( ! pFnGetPawnArchetype )
		pFnGetPawnArchetype = (UFunction*) UObject::GObjObjects()->Data[ 108544 ];

	Asfxprimp_execGetPawnArchetype_Parms GetPawnArchetype_Parms;

	this->ProcessEvent ( pFnGetPawnArchetype, &GetPawnArchetype_Parms, NULL );

	return GetPawnArchetype_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.GetAPawn
// [0x00020102] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APawn* Asfxprimp::GetAPawn ( )
{
	static UFunction* pFnGetAPawn = NULL;

	if ( ! pFnGetAPawn )
		pFnGetAPawn = (UFunction*) UObject::GObjObjects()->Data[ 112797 ];

	Asfxprimp_execGetAPawn_Parms GetAPawn_Parms;

	this->ProcessEvent ( pFnGetAPawn, &GetAPawn_Parms, NULL );

	return GetAPawn_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.NotifyPawnCharacterChanged
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void Asfxprimp::NotifyPawnCharacterChanged ( )
{
	static UFunction* pFnNotifyPawnCharacterChanged = NULL;

	if ( ! pFnNotifyPawnCharacterChanged )
		pFnNotifyPawnCharacterChanged = (UFunction*) UObject::GObjObjects()->Data[ 112677 ];

	Asfxprimp_execNotifyPawnCharacterChanged_Parms NotifyPawnCharacterChanged_Parms;

	this->ProcessEvent ( pFnNotifyPawnCharacterChanged, &NotifyPawnCharacterChanged_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.OnCharacterChanged
// [0x00020102] 
// Parameters infos:

void Asfxprimp::OnCharacterChanged ( )
{
	static UFunction* pFnOnCharacterChanged = NULL;

	if ( ! pFnOnCharacterChanged )
		pFnOnCharacterChanged = (UFunction*) UObject::GObjObjects()->Data[ 112796 ];

	Asfxprimp_execOnCharacterChanged_Parms OnCharacterChanged_Parms;

	this->ProcessEvent ( pFnOnCharacterChanged, &OnCharacterChanged_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.SendCharacterDataToServer
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bCharacter                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bWeapon                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPower                         ( CPF_OptionalParm | CPF_Parm )

void Asfxprimp::SendCharacterDataToServer ( unsigned long bCharacter, unsigned long bWeapon, unsigned long bPower )
{
	static UFunction* pFnSendCharacterDataToServer = NULL;

	if ( ! pFnSendCharacterDataToServer )
		pFnSendCharacterDataToServer = (UFunction*) UObject::GObjObjects()->Data[ 107968 ];

	Asfxprimp_execSendCharacterDataToServer_Parms SendCharacterDataToServer_Parms;
	SendCharacterDataToServer_Parms.bCharacter = bCharacter;
	SendCharacterDataToServer_Parms.bWeapon = bWeapon;
	SendCharacterDataToServer_Parms.bPower = bPower;

	this->ProcessEvent ( pFnSendCharacterDataToServer, &SendCharacterDataToServer_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.UnregisterPlayerFromSession
// [0x00020100] 
// Parameters infos:

void Asfxprimp::UnregisterPlayerFromSession ( )
{
	static UFunction* pFnUnregisterPlayerFromSession = NULL;

	if ( ! pFnUnregisterPlayerFromSession )
		pFnUnregisterPlayerFromSession = (UFunction*) UObject::GObjObjects()->Data[ 112792 ];

	Asfxprimp_execUnregisterPlayerFromSession_Parms UnregisterPlayerFromSession_Parms;

	this->ProcessEvent ( pFnUnregisterPlayerFromSession, &UnregisterPlayerFromSession_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.CopyProperties
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void Asfxprimp::CopyProperties ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnCopyProperties = NULL;

	if ( ! pFnCopyProperties )
		pFnCopyProperties = (UFunction*) UObject::GObjObjects()->Data[ 112788 ];

	Asfxprimp_execCopyProperties_Parms CopyProperties_Parms;
	CopyProperties_Parms.PRI = PRI;

	this->ProcessEvent ( pFnCopyProperties, &CopyProperties_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.PRITotalPointSort
// [0x00120002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class Asfxprimp*               A                              ( CPF_Parm )
// class Asfxprimp*               B                              ( CPF_Parm )

int Asfxprimp::PRITotalPointSort ( class Asfxprimp* A, class Asfxprimp* B )
{
	static UFunction* pFnPRITotalPointSort = NULL;

	if ( ! pFnPRITotalPointSort )
		pFnPRITotalPointSort = (UFunction*) UObject::GObjObjects()->Data[ 112784 ];

	Asfxprimp_execPRITotalPointSort_Parms PRITotalPointSort_Parms;
	PRITotalPointSort_Parms.A = A;
	PRITotalPointSort_Parms.B = B;

	this->ProcessEvent ( pFnPRITotalPointSort, &PRITotalPointSort_Parms, NULL );

	return PRITotalPointSort_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.EndOfMatchScreenFinished
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void Asfxprimp::EndOfMatchScreenFinished ( )
{
	static UFunction* pFnEndOfMatchScreenFinished = NULL;

	if ( ! pFnEndOfMatchScreenFinished )
		pFnEndOfMatchScreenFinished = (UFunction*) UObject::GObjObjects()->Data[ 112783 ];

	Asfxprimp_execEndOfMatchScreenFinished_Parms EndOfMatchScreenFinished_Parms;

	this->ProcessEvent ( pFnEndOfMatchScreenFinished, &EndOfMatchScreenFinished_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.OnUpdatedRankingsComplete
// [0x00020102] 
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Asfxprimp::OnUpdatedRankingsComplete ( int nResult )
{
	static UFunction* pFnOnUpdatedRankingsComplete = NULL;

	if ( ! pFnOnUpdatedRankingsComplete )
		pFnOnUpdatedRankingsComplete = (UFunction*) UObject::GObjObjects()->Data[ 112779 ];

	Asfxprimp_execOnUpdatedRankingsComplete_Parms OnUpdatedRankingsComplete_Parms;
	OnUpdatedRankingsComplete_Parms.nResult = nResult;

	this->ProcessEvent ( pFnOnUpdatedRankingsComplete, &OnUpdatedRankingsComplete_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.OnSaveRecordsComplete
// [0x00020102] 
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Asfxprimp::OnSaveRecordsComplete ( int nResult )
{
	static UFunction* pFnOnSaveRecordsComplete = NULL;

	if ( ! pFnOnSaveRecordsComplete )
		pFnOnSaveRecordsComplete = (UFunction*) UObject::GObjObjects()->Data[ 112777 ];

	Asfxprimp_execOnSaveRecordsComplete_Parms OnSaveRecordsComplete_Parms;
	OnSaveRecordsComplete_Parms.nResult = nResult;

	this->ProcessEvent ( pFnOnSaveRecordsComplete, &OnSaveRecordsComplete_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.GatherMatchResults
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bMatchWin                      ( CPF_Parm )
// int                            ExtractedPlayers               ( CPF_Parm )

void Asfxprimp::GatherMatchResults ( unsigned long bMatchWin, int* ExtractedPlayers )
{
	static UFunction* pFnGatherMatchResults = NULL;

	if ( ! pFnGatherMatchResults )
		pFnGatherMatchResults = (UFunction*) UObject::GObjObjects()->Data[ 112751 ];

	Asfxprimp_execGatherMatchResults_Parms GatherMatchResults_Parms;
	GatherMatchResults_Parms.bMatchWin = bMatchWin;
	memcpy ( &GatherMatchResults_Parms.ExtractedPlayers, &ExtractedPlayers, 0x10 );

	this->ProcessEvent ( pFnGatherMatchResults, &GatherMatchResults_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.GetZoneIncreases
// [0x00422003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bRandomMap                     ( CPF_Parm )
// int                            Wave                           ( CPF_Parm )
// int                            Map                            ( CPF_Parm )
// float                          ZoneIncrease                   ( CPF_Parm | CPF_OutParm )
// float                          OverallIncrease                ( CPF_Parm | CPF_OutParm )

void Asfxprimp::GetZoneIncreases ( unsigned long bRandomMap, int Wave, int Map, float* ZoneIncrease, float* OverallIncrease )
{
	static UFunction* pFnGetZoneIncreases = NULL;

	if ( ! pFnGetZoneIncreases )
		pFnGetZoneIncreases = (UFunction*) UObject::GObjObjects()->Data[ 110272 ];

	Asfxprimp_execGetZoneIncreases_Parms GetZoneIncreases_Parms;
	GetZoneIncreases_Parms.bRandomMap = bRandomMap;
	GetZoneIncreases_Parms.Wave = Wave;
	GetZoneIncreases_Parms.Map = Map;

	this->ProcessEvent ( pFnGetZoneIncreases, &GetZoneIncreases_Parms, NULL );

	if ( ZoneIncrease )
		*ZoneIncrease = GetZoneIncreases_Parms.ZoneIncrease;

	if ( OverallIncrease )
		*OverallIncrease = GetZoneIncreases_Parms.OverallIncrease;
};

// Function sfxgamempcontent.sfxprimp.GrantCredits
// [0x010201C2] 
// Parameters infos:
// int                            nCredits                       ( CPF_Parm )

void Asfxprimp::GrantCredits ( int nCredits )
{
	static UFunction* pFnGrantCredits = NULL;

	if ( ! pFnGrantCredits )
		pFnGrantCredits = (UFunction*) UObject::GObjObjects()->Data[ 112736 ];

	Asfxprimp_execGrantCredits_Parms GrantCredits_Parms;
	GrantCredits_Parms.nCredits = nCredits;

	this->ProcessEvent ( pFnGrantCredits, &GrantCredits_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.GrantXP
// [0x010201C2] 
// Parameters infos:
// float                          fXP                            ( CPF_Parm )

void Asfxprimp::GrantXP ( float fXP )
{
	static UFunction* pFnGrantXP = NULL;

	if ( ! pFnGrantXP )
		pFnGrantXP = (UFunction*) UObject::GObjObjects()->Data[ 112730 ];

	Asfxprimp_execGrantXP_Parms GrantXP_Parms;
	GrantXP_Parms.fXP = fXP;

	this->ProcessEvent ( pFnGrantXP, &GrantXP_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.SetReadyToPlay
// [0x002200C2] 
// Parameters infos:
// unsigned long                  NewReadyState                  ( CPF_Parm )

void Asfxprimp::SetReadyToPlay ( unsigned long NewReadyState )
{
	static UFunction* pFnSetReadyToPlay = NULL;

	if ( ! pFnSetReadyToPlay )
		pFnSetReadyToPlay = (UFunction*) UObject::GObjObjects()->Data[ 112725 ];

	Asfxprimp_execSetReadyToPlay_Parms SetReadyToPlay_Parms;
	SetReadyToPlay_Parms.NewReadyState = NewReadyState;

	this->ProcessEvent ( pFnSetReadyToPlay, &SetReadyToPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.ServerSetReadyInLobby
// [0x002200C2] 
// Parameters infos:
// unsigned long                  NewReadyState                  ( CPF_Parm )

void Asfxprimp::ServerSetReadyInLobby ( unsigned long NewReadyState )
{
	static UFunction* pFnServerSetReadyInLobby = NULL;

	if ( ! pFnServerSetReadyInLobby )
		pFnServerSetReadyInLobby = (UFunction*) UObject::GObjObjects()->Data[ 112723 ];

	Asfxprimp_execServerSetReadyInLobby_Parms ServerSetReadyInLobby_Parms;
	ServerSetReadyInLobby_Parms.NewReadyState = NewReadyState;

	this->ProcessEvent ( pFnServerSetReadyInLobby, &ServerSetReadyInLobby_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.SetReadyInLobby
// [0x00020102] 
// Parameters infos:
// unsigned long                  NewReadyState                  ( CPF_Parm )

void Asfxprimp::SetReadyInLobby ( unsigned long NewReadyState )
{
	static UFunction* pFnSetReadyInLobby = NULL;

	if ( ! pFnSetReadyInLobby )
		pFnSetReadyInLobby = (UFunction*) UObject::GObjObjects()->Data[ 112721 ];

	Asfxprimp_execSetReadyInLobby_Parms SetReadyInLobby_Parms;
	SetReadyInLobby_Parms.NewReadyState = NewReadyState;

	this->ProcessEvent ( pFnSetReadyInLobby, &SetReadyInLobby_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.CanSetReadyInLobby
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxprimp::CanSetReadyInLobby ( )
{
	static UFunction* pFnCanSetReadyInLobby = NULL;

	if ( ! pFnCanSetReadyInLobby )
		pFnCanSetReadyInLobby = (UFunction*) UObject::GObjObjects()->Data[ 112719 ];

	Asfxprimp_execCanSetReadyInLobby_Parms CanSetReadyInLobby_Parms;

	this->ProcessEvent ( pFnCanSetReadyInLobby, &CanSetReadyInLobby_Parms, NULL );

	return CanSetReadyInLobby_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.IsReadyInLobby
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxprimp::IsReadyInLobby ( )
{
	static UFunction* pFnIsReadyInLobby = NULL;

	if ( ! pFnIsReadyInLobby )
		pFnIsReadyInLobby = (UFunction*) UObject::GObjObjects()->Data[ 111104 ];

	Asfxprimp_execIsReadyInLobby_Parms IsReadyInLobby_Parms;

	this->ProcessEvent ( pFnIsReadyInLobby, &IsReadyInLobby_Parms, NULL );

	return IsReadyInLobby_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.LoadWeaponDataFromSave
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class Usfxmpcharacterrecord*   Character                      ( CPF_Parm )

void Asfxprimp::LoadWeaponDataFromSave ( class Usfxmpcharacterrecord* Character )
{
	static UFunction* pFnLoadWeaponDataFromSave = NULL;

	if ( ! pFnLoadWeaponDataFromSave )
		pFnLoadWeaponDataFromSave = (UFunction*) UObject::GObjObjects()->Data[ 112241 ];

	Asfxprimp_execLoadWeaponDataFromSave_Parms LoadWeaponDataFromSave_Parms;
	LoadWeaponDataFromSave_Parms.Character = Character;

	this->ProcessEvent ( pFnLoadWeaponDataFromSave, &LoadWeaponDataFromSave_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.LoadPowerDataFromSave
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class Usfxmpcharacterrecord*   Character                      ( CPF_Parm )

void Asfxprimp::LoadPowerDataFromSave ( class Usfxmpcharacterrecord* Character )
{
	static UFunction* pFnLoadPowerDataFromSave = NULL;

	if ( ! pFnLoadPowerDataFromSave )
		pFnLoadPowerDataFromSave = (UFunction*) UObject::GObjObjects()->Data[ 112232 ];

	Asfxprimp_execLoadPowerDataFromSave_Parms LoadPowerDataFromSave_Parms;
	LoadPowerDataFromSave_Parms.Character = Character;

	this->ProcessEvent ( pFnLoadPowerDataFromSave, &LoadPowerDataFromSave_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.LoadDataFromSave
// [0x00020102] 
// Parameters infos:
// class Usfxmpcharacterrecord*   Character                      ( CPF_Parm )

void Asfxprimp::LoadDataFromSave ( class Usfxmpcharacterrecord* Character )
{
	static UFunction* pFnLoadDataFromSave = NULL;

	if ( ! pFnLoadDataFromSave )
		pFnLoadDataFromSave = (UFunction*) UObject::GObjObjects()->Data[ 112701 ];

	Asfxprimp_execLoadDataFromSave_Parms LoadDataFromSave_Parms;
	LoadDataFromSave_Parms.Character = Character;

	this->ProcessEvent ( pFnLoadDataFromSave, &LoadDataFromSave_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.ShouldBroadCastWelcomeMessage
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bExiting                       ( CPF_OptionalParm | CPF_Parm )

bool Asfxprimp::ShouldBroadCastWelcomeMessage ( unsigned long bExiting )
{
	static UFunction* pFnShouldBroadCastWelcomeMessage = NULL;

	if ( ! pFnShouldBroadCastWelcomeMessage )
		pFnShouldBroadCastWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 112698 ];

	Asfxprimp_execShouldBroadCastWelcomeMessage_Parms ShouldBroadCastWelcomeMessage_Parms;
	ShouldBroadCastWelcomeMessage_Parms.bExiting = bExiting;

	this->ProcessEvent ( pFnShouldBroadCastWelcomeMessage, &ShouldBroadCastWelcomeMessage_Parms, NULL );

	return ShouldBroadCastWelcomeMessage_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.ServerSetPowerSelection
// [0x002200C2] 
// Parameters infos:
// struct FMPPowerData            Data                           ( CPF_Parm )

void Asfxprimp::ServerSetPowerSelection ( struct FMPPowerData* Data )
{
	static UFunction* pFnServerSetPowerSelection = NULL;

	if ( ! pFnServerSetPowerSelection )
		pFnServerSetPowerSelection = (UFunction*) UObject::GObjObjects()->Data[ 112695 ];

	Asfxprimp_execServerSetPowerSelection_Parms ServerSetPowerSelection_Parms;
	memcpy ( &ServerSetPowerSelection_Parms.Data, &Data, 0xD8 );

	this->ProcessEvent ( pFnServerSetPowerSelection, &ServerSetPowerSelection_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.ServerSetWeaponSelection
// [0x002200C2] 
// Parameters infos:
// struct FMPWeaponData           Data                           ( CPF_Parm )

void Asfxprimp::ServerSetWeaponSelection ( struct FMPWeaponData* Data )
{
	static UFunction* pFnServerSetWeaponSelection = NULL;

	if ( ! pFnServerSetWeaponSelection )
		pFnServerSetWeaponSelection = (UFunction*) UObject::GObjObjects()->Data[ 112692 ];

	Asfxprimp_execServerSetWeaponSelection_Parms ServerSetWeaponSelection_Parms;
	memcpy ( &ServerSetWeaponSelection_Parms.Data, &Data, 0x38 );

	this->ProcessEvent ( pFnServerSetWeaponSelection, &ServerSetWeaponSelection_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.ServerSetCharacterSelection
// [0x002200C2] 
// Parameters infos:
// struct FMPCharacterData        Data                           ( CPF_Parm | CPF_NeedCtorLink )

void Asfxprimp::ServerSetCharacterSelection ( struct FMPCharacterData Data )
{
	static UFunction* pFnServerSetCharacterSelection = NULL;

	if ( ! pFnServerSetCharacterSelection )
		pFnServerSetCharacterSelection = (UFunction*) UObject::GObjObjects()->Data[ 112689 ];

	Asfxprimp_execServerSetCharacterSelection_Parms ServerSetCharacterSelection_Parms;
	memcpy ( &ServerSetCharacterSelection_Parms.Data, &Data, 0x48 );

	this->ProcessEvent ( pFnServerSetCharacterSelection, &ServerSetCharacterSelection_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.ServerSetComputerName
// [0x002200C2] 
// Parameters infos:
// struct FString                 sComputerName                  ( CPF_Parm | CPF_NeedCtorLink )

void Asfxprimp::ServerSetComputerName ( struct FString sComputerName )
{
	static UFunction* pFnServerSetComputerName = NULL;

	if ( ! pFnServerSetComputerName )
		pFnServerSetComputerName = (UFunction*) UObject::GObjObjects()->Data[ 112687 ];

	Asfxprimp_execServerSetComputerName_Parms ServerSetComputerName_Parms;
	memcpy ( &ServerSetComputerName_Parms.sComputerName, &sComputerName, 0xC );

	this->ProcessEvent ( pFnServerSetComputerName, &ServerSetComputerName_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.SetComputerName
// [0x00020102] 
// Parameters infos:
// struct FString                 sComputerName                  ( CPF_Parm | CPF_NeedCtorLink )

void Asfxprimp::SetComputerName ( struct FString sComputerName )
{
	static UFunction* pFnSetComputerName = NULL;

	if ( ! pFnSetComputerName )
		pFnSetComputerName = (UFunction*) UObject::GObjObjects()->Data[ 112685 ];

	Asfxprimp_execSetComputerName_Parms SetComputerName_Parms;
	memcpy ( &SetComputerName_Parms.sComputerName, &sComputerName, 0xC );

	this->ProcessEvent ( pFnSetComputerName, &SetComputerName_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.TriggerNewScoreTag
// [0x00020102] 
// Parameters infos:
// int                            Amount                         ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void Asfxprimp::TriggerNewScoreTag ( int Amount, struct FString Message )
{
	static UFunction* pFnTriggerNewScoreTag = NULL;

	if ( ! pFnTriggerNewScoreTag )
		pFnTriggerNewScoreTag = (UFunction*) UObject::GObjObjects()->Data[ 112680 ];

	Asfxprimp_execTriggerNewScoreTag_Parms TriggerNewScoreTag_Parms;
	TriggerNewScoreTag_Parms.Amount = Amount;
	memcpy ( &TriggerNewScoreTag_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnTriggerNewScoreTag, &TriggerNewScoreTag_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.IsAI
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxprimp::IsAI ( )
{
	static UFunction* pFnIsAI = NULL;

	if ( ! pFnIsAI )
		pFnIsAI = (UFunction*) UObject::GObjObjects()->Data[ 112678 ];

	Asfxprimp_execIsAI_Parms IsAI_Parms;

	this->ProcessEvent ( pFnIsAI, &IsAI_Parms, NULL );

	return IsAI_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.IsPlayer
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxprimp::IsPlayer ( )
{
	static UFunction* pFnIsPlayer = NULL;

	if ( ! pFnIsPlayer )
		pFnIsPlayer = (UFunction*) UObject::GObjObjects()->Data[ 109137 ];

	Asfxprimp_execIsPlayer_Parms IsPlayer_Parms;

	this->ProcessEvent ( pFnIsPlayer, &IsPlayer_Parms, NULL );

	return IsPlayer_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.SetPawn
// [0x00020102] 
// Parameters infos:
// class Asfxpawn*                P                              ( CPF_Parm )

void Asfxprimp::SetPawn ( class Asfxpawn* P )
{
	static UFunction* pFnSetPawn = NULL;

	if ( ! pFnSetPawn )
		pFnSetPawn = (UFunction*) UObject::GObjObjects()->Data[ 112675 ];

	Asfxprimp_execSetPawn_Parms SetPawn_Parms;
	SetPawn_Parms.P = P;

	this->ProcessEvent ( pFnSetPawn, &SetPawn_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void Asfxprimp::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 112670 ];

	Asfxprimp_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.ServerSetReplicationReady
// [0x002200C2] 
// Parameters infos:

void Asfxprimp::ServerSetReplicationReady ( )
{
	static UFunction* pFnServerSetReplicationReady = NULL;

	if ( ! pFnServerSetReplicationReady )
		pFnServerSetReplicationReady = (UFunction*) UObject::GObjObjects()->Data[ 112669 ];

	Asfxprimp_execServerSetReplicationReady_Parms ServerSetReplicationReady_Parms;

	this->ProcessEvent ( pFnServerSetReplicationReady, &ServerSetReplicationReady_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.SetReplicationReady
// [0x00020102] 
// Parameters infos:

void Asfxprimp::SetReplicationReady ( )
{
	static UFunction* pFnSetReplicationReady = NULL;

	if ( ! pFnSetReplicationReady )
		pFnSetReplicationReady = (UFunction*) UObject::GObjObjects()->Data[ 112668 ];

	Asfxprimp_execSetReplicationReady_Parms SetReplicationReady_Parms;

	this->ProcessEvent ( pFnSetReplicationReady, &SetReplicationReady_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.GetLobbyFlow
// [0x00020102] 
// Parameters infos:
// class Asfxlobbyflow*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class Asfxlobbyflow* Asfxprimp::GetLobbyFlow ( )
{
	static UFunction* pFnGetLobbyFlow = NULL;

	if ( ! pFnGetLobbyFlow )
		pFnGetLobbyFlow = (UFunction*) UObject::GObjObjects()->Data[ 112665 ];

	Asfxprimp_execGetLobbyFlow_Parms GetLobbyFlow_Parms;

	this->ProcessEvent ( pFnGetLobbyFlow, &GetLobbyFlow_Parms, NULL );

	return GetLobbyFlow_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxprimp.BuildLocalMapArray
// [0x00020102] 
// Parameters infos:
// TArray< struct FMPMapInfo >    AvailableMaps                  ( CPF_Parm | CPF_NeedCtorLink )

void Asfxprimp::BuildLocalMapArray ( TArray< struct FMPMapInfo > AvailableMaps )
{
	static UFunction* pFnBuildLocalMapArray = NULL;

	if ( ! pFnBuildLocalMapArray )
		pFnBuildLocalMapArray = (UFunction*) UObject::GObjObjects()->Data[ 112660 ];

	Asfxprimp_execBuildLocalMapArray_Parms BuildLocalMapArray_Parms;
	memcpy ( &BuildLocalMapArray_Parms.AvailableMaps, &AvailableMaps, 0xC );

	this->ProcessEvent ( pFnBuildLocalMapArray, &BuildLocalMapArray_Parms, NULL );
};

// Function sfxgamempcontent.sfxprimp.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxprimp::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 112659 ];

	Asfxprimp_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.StartAutoBots
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXWave_Horde::StartAutoBots ( )
{
	static UFunction* pFnStartAutoBots = NULL;

	if ( ! pFnStartAutoBots )
		pFnStartAutoBots = (UFunction*) UObject::GObjObjects()->Data[ 113152 ];

	USFXWave_Horde_execStartAutoBots_Parms StartAutoBots_Parms;

	this->ProcessEvent ( pFnStartAutoBots, &StartAutoBots_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.GetScoreBudget
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXWave_Horde::GetScoreBudget ( )
{
	static UFunction* pFnGetScoreBudget = NULL;

	if ( ! pFnGetScoreBudget )
		pFnGetScoreBudget = (UFunction*) UObject::GObjObjects()->Data[ 113316 ];

	USFXWave_Horde_execGetScoreBudget_Parms GetScoreBudget_Parms;

	this->ProcessEvent ( pFnGetScoreBudget, &GetScoreBudget_Parms, NULL );

	return GetScoreBudget_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.CalculateSpawnedEnemyCost
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWave_Horde::CalculateSpawnedEnemyCost ( )
{
	static UFunction* pFnCalculateSpawnedEnemyCost = NULL;

	if ( ! pFnCalculateSpawnedEnemyCost )
		pFnCalculateSpawnedEnemyCost = (UFunction*) UObject::GObjObjects()->Data[ 113312 ];

	USFXWave_Horde_execCalculateSpawnedEnemyCost_Parms CalculateSpawnedEnemyCost_Parms;

	this->ProcessEvent ( pFnCalculateSpawnedEnemyCost, &CalculateSpawnedEnemyCost_Parms, NULL );

	return CalculateSpawnedEnemyCost_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.PawnRevived
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void USFXWave_Horde::PawnRevived ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnRevived = NULL;

	if ( ! pFnPawnRevived )
		pFnPawnRevived = (UFunction*) UObject::GObjObjects()->Data[ 113308 ];

	USFXWave_Horde_execPawnRevived_Parms PawnRevived_Parms;
	PawnRevived_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnRevived, &PawnRevived_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.GetEnemySpawnInfoForEnemyType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FEnemySpawnInfo         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   EnemyType                      ( CPF_Parm )

struct FEnemySpawnInfo USFXWave_Horde::GetEnemySpawnInfoForEnemyType ( struct FName EnemyType )
{
	static UFunction* pFnGetEnemySpawnInfoForEnemyType = NULL;

	if ( ! pFnGetEnemySpawnInfoForEnemyType )
		pFnGetEnemySpawnInfoForEnemyType = (UFunction*) UObject::GObjObjects()->Data[ 113151 ];

	USFXWave_Horde_execGetEnemySpawnInfoForEnemyType_Parms GetEnemySpawnInfoForEnemyType_Parms;
	memcpy ( &GetEnemySpawnInfoForEnemyType_Parms.EnemyType, &EnemyType, 0x8 );

	this->ProcessEvent ( pFnGetEnemySpawnInfoForEnemyType, &GetEnemySpawnInfoForEnemyType_Parms, NULL );

	return GetEnemySpawnInfoForEnemyType_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.StopSpawningNewEnemies
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXWave_Horde::StopSpawningNewEnemies ( )
{
	static UFunction* pFnStopSpawningNewEnemies = NULL;

	if ( ! pFnStopSpawningNewEnemies )
		pFnStopSpawningNewEnemies = (UFunction*) UObject::GObjObjects()->Data[ 113304 ];

	USFXWave_Horde_execStopSpawningNewEnemies_Parms StopSpawningNewEnemies_Parms;

	this->ProcessEvent ( pFnStopSpawningNewEnemies, &StopSpawningNewEnemies_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.SetEndlessWaves
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  Endless                        ( CPF_Parm )

void USFXWave_Horde::SetEndlessWaves ( unsigned long Endless )
{
	static UFunction* pFnSetEndlessWaves = NULL;

	if ( ! pFnSetEndlessWaves )
		pFnSetEndlessWaves = (UFunction*) UObject::GObjObjects()->Data[ 108141 ];

	USFXWave_Horde_execSetEndlessWaves_Parms SetEndlessWaves_Parms;
	SetEndlessWaves_Parms.Endless = Endless;

	this->ProcessEvent ( pFnSetEndlessWaves, &SetEndlessWaves_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.EnemyBudgetRemaining
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde::EnemyBudgetRemaining ( )
{
	static UFunction* pFnEnemyBudgetRemaining = NULL;

	if ( ! pFnEnemyBudgetRemaining )
		pFnEnemyBudgetRemaining = (UFunction*) UObject::GObjObjects()->Data[ 113251 ];

	USFXWave_Horde_execEnemyBudgetRemaining_Parms EnemyBudgetRemaining_Parms;

	this->ProcessEvent ( pFnEnemyBudgetRemaining, &EnemyBudgetRemaining_Parms, NULL );

	return EnemyBudgetRemaining_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.GetCreatureWaveCost
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

int USFXWave_Horde::GetCreatureWaveCost ( class APawn* P )
{
	static UFunction* pFnGetCreatureWaveCost = NULL;

	if ( ! pFnGetCreatureWaveCost )
		pFnGetCreatureWaveCost = (UFunction*) UObject::GObjObjects()->Data[ 113298 ];

	USFXWave_Horde_execGetCreatureWaveCost_Parms GetCreatureWaveCost_Parms;
	GetCreatureWaveCost_Parms.P = P;

	this->ProcessEvent ( pFnGetCreatureWaveCost, &GetCreatureWaveCost_Parms, NULL );

	return GetCreatureWaveCost_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.TriggerWaveEndEvent
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void USFXWave_Horde::TriggerWaveEndEvent ( int Wave )
{
	static UFunction* pFnTriggerWaveEndEvent = NULL;

	if ( ! pFnTriggerWaveEndEvent )
		pFnTriggerWaveEndEvent = (UFunction*) UObject::GObjObjects()->Data[ 113290 ];

	USFXWave_Horde_execTriggerWaveEndEvent_Parms TriggerWaveEndEvent_Parms;
	TriggerWaveEndEvent_Parms.Wave = Wave;

	this->ProcessEvent ( pFnTriggerWaveEndEvent, &TriggerWaveEndEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.TriggerEnemyKilledEvent
// [0x00020002] 
// Parameters infos:
// class APawn*                   Killed                         ( CPF_Parm )
// class APawn*                   Killer                         ( CPF_Parm )

void USFXWave_Horde::TriggerEnemyKilledEvent ( class APawn* Killed, class APawn* Killer )
{
	static UFunction* pFnTriggerEnemyKilledEvent = NULL;

	if ( ! pFnTriggerEnemyKilledEvent )
		pFnTriggerEnemyKilledEvent = (UFunction*) UObject::GObjObjects()->Data[ 113282 ];

	USFXWave_Horde_execTriggerEnemyKilledEvent_Parms TriggerEnemyKilledEvent_Parms;
	TriggerEnemyKilledEvent_Parms.Killed = Killed;
	TriggerEnemyKilledEvent_Parms.Killer = Killer;

	this->ProcessEvent ( pFnTriggerEnemyKilledEvent, &TriggerEnemyKilledEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.TriggerWaveStartEvent
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void USFXWave_Horde::TriggerWaveStartEvent ( int Wave )
{
	static UFunction* pFnTriggerWaveStartEvent = NULL;

	if ( ! pFnTriggerWaveStartEvent )
		pFnTriggerWaveStartEvent = (UFunction*) UObject::GObjObjects()->Data[ 113274 ];

	USFXWave_Horde_execTriggerWaveStartEvent_Parms TriggerWaveStartEvent_Parms;
	TriggerWaveStartEvent_Parms.Wave = Wave;

	this->ProcessEvent ( pFnTriggerWaveStartEvent, &TriggerWaveStartEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.ShouldSpawnSquad
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde::ShouldSpawnSquad ( )
{
	static UFunction* pFnShouldSpawnSquad = NULL;

	if ( ! pFnShouldSpawnSquad )
		pFnShouldSpawnSquad = (UFunction*) UObject::GObjObjects()->Data[ 113253 ];

	USFXWave_Horde_execShouldSpawnSquad_Parms ShouldSpawnSquad_Parms;

	this->ProcessEvent ( pFnShouldSpawnSquad, &ShouldSpawnSquad_Parms, NULL );

	return ShouldSpawnSquad_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.GetPlayerCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWave_Horde::GetPlayerCount ( )
{
	static UFunction* pFnGetPlayerCount = NULL;

	if ( ! pFnGetPlayerCount )
		pFnGetPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 113267 ];

	USFXWave_Horde_execGetPlayerCount_Parms GetPlayerCount_Parms;

	this->ProcessEvent ( pFnGetPlayerCount, &GetPlayerCount_Parms, NULL );

	return GetPlayerCount_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.PawnDied
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )
// class ABioPawn*                Killer                         ( CPF_OptionalParm | CPF_Parm )

void USFXWave_Horde::PawnDied ( class ABioPawn* Pawn, class ABioPawn* Killer )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 113261 ];

	USFXWave_Horde_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.Pawn = Pawn;
	PawnDied_Parms.Killer = Killer;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.ActivateEnemyObjectiveMarkers
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde::ActivateEnemyObjectiveMarkers ( )
{
	static UFunction* pFnActivateEnemyObjectiveMarkers = NULL;

	if ( ! pFnActivateEnemyObjectiveMarkers )
		pFnActivateEnemyObjectiveMarkers = (UFunction*) UObject::GObjObjects()->Data[ 113258 ];

	USFXWave_Horde_execActivateEnemyObjectiveMarkers_Parms ActivateEnemyObjectiveMarkers_Parms;

	this->ProcessEvent ( pFnActivateEnemyObjectiveMarkers, &ActivateEnemyObjectiveMarkers_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.UpdateObjectiveStatus
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde::UpdateObjectiveStatus ( )
{
	static UFunction* pFnUpdateObjectiveStatus = NULL;

	if ( ! pFnUpdateObjectiveStatus )
		pFnUpdateObjectiveStatus = (UFunction*) UObject::GObjObjects()->Data[ 113254 ];

	USFXWave_Horde_execUpdateObjectiveStatus_Parms UpdateObjectiveStatus_Parms;

	this->ProcessEvent ( pFnUpdateObjectiveStatus, &UpdateObjectiveStatus_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.SpawnHorde
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde::SpawnHorde ( )
{
	static UFunction* pFnSpawnHorde = NULL;

	if ( ! pFnSpawnHorde )
		pFnSpawnHorde = (UFunction*) UObject::GObjObjects()->Data[ 113249 ];

	USFXWave_Horde_execSpawnHorde_Parms SpawnHorde_Parms;

	this->ProcessEvent ( pFnSpawnHorde, &SpawnHorde_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.SpawnEnemy
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void USFXWave_Horde::SpawnEnemy ( int Index )
{
	static UFunction* pFnSpawnEnemy = NULL;

	if ( ! pFnSpawnEnemy )
		pFnSpawnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 113242 ];

	USFXWave_Horde_execSpawnEnemy_Parms SpawnEnemy_Parms;
	SpawnEnemy_Parms.Index = Index;

	this->ProcessEvent ( pFnSpawnEnemy, &SpawnEnemy_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.AreRemainingEnemiesOnMyTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde::AreRemainingEnemiesOnMyTeam ( )
{
	static UFunction* pFnAreRemainingEnemiesOnMyTeam = NULL;

	if ( ! pFnAreRemainingEnemiesOnMyTeam )
		pFnAreRemainingEnemiesOnMyTeam = (UFunction*) UObject::GObjObjects()->Data[ 113239 ];

	USFXWave_Horde_execAreRemainingEnemiesOnMyTeam_Parms AreRemainingEnemiesOnMyTeam_Parms;

	this->ProcessEvent ( pFnAreRemainingEnemiesOnMyTeam, &AreRemainingEnemiesOnMyTeam_Parms, NULL );

	return AreRemainingEnemiesOnMyTeam_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.ChooseEnemyToSpawn
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWave_Horde::ChooseEnemyToSpawn ( )
{
	static UFunction* pFnChooseEnemyToSpawn = NULL;

	if ( ! pFnChooseEnemyToSpawn )
		pFnChooseEnemyToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 113228 ];

	USFXWave_Horde_execChooseEnemyToSpawn_Parms ChooseEnemyToSpawn_Parms;

	this->ProcessEvent ( pFnChooseEnemyToSpawn, &ChooseEnemyToSpawn_Parms, NULL );

	return ChooseEnemyToSpawn_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.ChooseSquadToSpawn
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde::ChooseSquadToSpawn ( )
{
	static UFunction* pFnChooseSquadToSpawn = NULL;

	if ( ! pFnChooseSquadToSpawn )
		pFnChooseSquadToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 113223 ];

	USFXWave_Horde_execChooseSquadToSpawn_Parms ChooseSquadToSpawn_Parms;

	this->ProcessEvent ( pFnChooseSquadToSpawn, &ChooseSquadToSpawn_Parms, NULL );

	return ChooseSquadToSpawn_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.CanEnemyUseSpawnPoint
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EnemyClass                     ( CPF_Parm )
// float                          EnemyRadius                    ( CPF_Parm )
// float                          EnemyHeight                    ( CPF_Parm )
// class ANavigationPoint*        NavPoint                       ( CPF_Parm )

bool USFXWave_Horde::CanEnemyUseSpawnPoint ( class UClass* EnemyClass, float EnemyRadius, float EnemyHeight, class ANavigationPoint* NavPoint )
{
	static UFunction* pFnCanEnemyUseSpawnPoint = NULL;

	if ( ! pFnCanEnemyUseSpawnPoint )
		pFnCanEnemyUseSpawnPoint = (UFunction*) UObject::GObjObjects()->Data[ 113203 ];

	USFXWave_Horde_execCanEnemyUseSpawnPoint_Parms CanEnemyUseSpawnPoint_Parms;
	CanEnemyUseSpawnPoint_Parms.EnemyClass = EnemyClass;
	CanEnemyUseSpawnPoint_Parms.EnemyRadius = EnemyRadius;
	CanEnemyUseSpawnPoint_Parms.EnemyHeight = EnemyHeight;
	CanEnemyUseSpawnPoint_Parms.NavPoint = NavPoint;

	this->ProcessEvent ( pFnCanEnemyUseSpawnPoint, &CanEnemyUseSpawnPoint_Parms, NULL );

	return CanEnemyUseSpawnPoint_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.RateEnemyStart
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        NavPoint                       ( CPF_Parm )
// float                          EnemyRadius                    ( CPF_Parm )
// float                          EnemyHeight                    ( CPF_Parm )
// class UClass*                  EnemyClass                     ( CPF_Parm )
// unsigned long                  bDoTraceCheck                  ( CPF_Parm )

float USFXWave_Horde::RateEnemyStart ( class ANavigationPoint* NavPoint, float EnemyRadius, float EnemyHeight, class UClass* EnemyClass, unsigned long bDoTraceCheck )
{
	static UFunction* pFnRateEnemyStart = NULL;

	if ( ! pFnRateEnemyStart )
		pFnRateEnemyStart = (UFunction*) UObject::GObjObjects()->Data[ 113186 ];

	USFXWave_Horde_execRateEnemyStart_Parms RateEnemyStart_Parms;
	RateEnemyStart_Parms.NavPoint = NavPoint;
	RateEnemyStart_Parms.EnemyRadius = EnemyRadius;
	RateEnemyStart_Parms.EnemyHeight = EnemyHeight;
	RateEnemyStart_Parms.EnemyClass = EnemyClass;
	RateEnemyStart_Parms.bDoTraceCheck = bDoTraceCheck;

	this->ProcessEvent ( pFnRateEnemyStart, &RateEnemyStart_Parms, NULL );

	return RateEnemyStart_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.ChooseEnemyStart
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EnemyClass                     ( CPF_Parm )

class ANavigationPoint* USFXWave_Horde::ChooseEnemyStart ( class UClass* EnemyClass )
{
	static UFunction* pFnChooseEnemyStart = NULL;

	if ( ! pFnChooseEnemyStart )
		pFnChooseEnemyStart = (UFunction*) UObject::GObjObjects()->Data[ 113171 ];

	USFXWave_Horde_execChooseEnemyStart_Parms ChooseEnemyStart_Parms;
	ChooseEnemyStart_Parms.EnemyClass = EnemyClass;

	this->ProcessEvent ( pFnChooseEnemyStart, &ChooseEnemyStart_Parms, NULL );

	return ChooseEnemyStart_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.FinishWave
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde::FinishWave ( )
{
	static UFunction* pFnFinishWave = NULL;

	if ( ! pFnFinishWave )
		pFnFinishWave = (UFunction*) UObject::GObjObjects()->Data[ 113168 ];

	USFXWave_Horde_execFinishWave_Parms FinishWave_Parms;

	this->ProcessEvent ( pFnFinishWave, &FinishWave_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.BeginWave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde::BeginWave ( )
{
	static UFunction* pFnBeginWave = NULL;

	if ( ! pFnBeginWave )
		pFnBeginWave = (UFunction*) UObject::GObjObjects()->Data[ 113159 ];

	USFXWave_Horde_execBeginWave_Parms BeginWave_Parms;

	this->ProcessEvent ( pFnBeginWave, &BeginWave_Parms, NULL );

	return BeginWave_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.GetEnemyArray
// [0x00420002] 
// Parameters infos:
// TArray< struct FEnemyWaveInfo > EnemyArray                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXWave_Horde::GetEnemyArray ( TArray< struct FEnemyWaveInfo >* EnemyArray )
{
	static UFunction* pFnGetEnemyArray = NULL;

	if ( ! pFnGetEnemyArray )
		pFnGetEnemyArray = (UFunction*) UObject::GObjObjects()->Data[ 113153 ];

	USFXWave_Horde_execGetEnemyArray_Parms GetEnemyArray_Parms;

	this->ProcessEvent ( pFnGetEnemyArray, &GetEnemyArray_Parms, NULL );

	if ( EnemyArray )
		memcpy ( EnemyArray, &GetEnemyArray_Parms.EnemyArray, 0xC );
};

// Function sfxgamempcontent.SFXWave_Horde.InitializeWave
// [0x00020002] 
// Parameters infos:
// class ASFXWaveManager*         OwnerManager                   ( CPF_Parm )

void USFXWave_Horde::InitializeWave ( class ASFXWaveManager* OwnerManager )
{
	static UFunction* pFnInitializeWave = NULL;

	if ( ! pFnInitializeWave )
		pFnInitializeWave = (UFunction*) UObject::GObjObjects()->Data[ 113141 ];

	USFXWave_Horde_execInitializeWave_Parms InitializeWave_Parms;
	InitializeWave_Parms.OwnerManager = OwnerManager;

	this->ProcessEvent ( pFnInitializeWave, &InitializeWave_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.NotifyCombatZoneRemoved
// [0x00020002] 
// Parameters infos:

void ASFXSquadCombatMP::NotifyCombatZoneRemoved ( )
{
	static UFunction* pFnNotifyCombatZoneRemoved = NULL;

	if ( ! pFnNotifyCombatZoneRemoved )
		pFnNotifyCombatZoneRemoved = (UFunction*) UObject::GObjObjects()->Data[ 42251 ];

	ASFXSquadCombatMP_execNotifyCombatZoneRemoved_Parms NotifyCombatZoneRemoved_Parms;

	this->ProcessEvent ( pFnNotifyCombatZoneRemoved, &NotifyCombatZoneRemoved_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.NotifyCombatZoneAdded
// [0x00020002] 
// Parameters infos:

void ASFXSquadCombatMP::NotifyCombatZoneAdded ( )
{
	static UFunction* pFnNotifyCombatZoneAdded = NULL;

	if ( ! pFnNotifyCombatZoneAdded )
		pFnNotifyCombatZoneAdded = (UFunction*) UObject::GObjObjects()->Data[ 42248 ];

	ASFXSquadCombatMP_execNotifyCombatZoneAdded_Parms NotifyCombatZoneAdded_Parms;

	this->ProcessEvent ( pFnNotifyCombatZoneAdded, &NotifyCombatZoneAdded_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.DisableSquad
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXSquadCombatMP::eventDisableSquad ( )
{
	static UFunction* pFnDisableSquad = NULL;

	if ( ! pFnDisableSquad )
		pFnDisableSquad = (UFunction*) UObject::GObjObjects()->Data[ 42245 ];

	ASFXSquadCombatMP_eventDisableSquad_Parms DisableSquad_Parms;

	this->ProcessEvent ( pFnDisableSquad, &DisableSquad_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.EnableSquad
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXSquadCombatMP::eventEnableSquad ( )
{
	static UFunction* pFnEnableSquad = NULL;

	if ( ! pFnEnableSquad )
		pFnEnableSquad = (UFunction*) UObject::GObjObjects()->Data[ 42242 ];

	ASFXSquadCombatMP_eventEnableSquad_Parms EnableSquad_Parms;

	this->ProcessEvent ( pFnEnableSquad, &EnableSquad_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.MakeHackable
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ABioBaseSquad*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ABioBaseSquad* ASFXSquadCombatMP::MakeHackable ( )
{
	static UFunction* pFnMakeHackable = NULL;

	if ( ! pFnMakeHackable )
		pFnMakeHackable = (UFunction*) UObject::GObjObjects()->Data[ 42240 ];

	ASFXSquadCombatMP_execMakeHackable_Parms MakeHackable_Parms;

	pFnMakeHackable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeHackable, &MakeHackable_Parms, NULL );

	pFnMakeHackable->FunctionFlags |= 0x400;

	return MakeHackable_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.MemberRemoved
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )

void ASFXSquadCombatMP::eventMemberRemoved ( class APawn* oPawn )
{
	static UFunction* pFnMemberRemoved = NULL;

	if ( ! pFnMemberRemoved )
		pFnMemberRemoved = (UFunction*) UObject::GObjObjects()->Data[ 42237 ];

	ASFXSquadCombatMP_eventMemberRemoved_Parms MemberRemoved_Parms;
	MemberRemoved_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnMemberRemoved, &MemberRemoved_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.RemoveDyingMember
// [0x00020002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )

void ASFXSquadCombatMP::RemoveDyingMember ( class APawn* oPawn )
{
	static UFunction* pFnRemoveDyingMember = NULL;

	if ( ! pFnRemoveDyingMember )
		pFnRemoveDyingMember = (UFunction*) UObject::GObjObjects()->Data[ 42235 ];

	ASFXSquadCombatMP_execRemoveDyingMember_Parms RemoveDyingMember_Parms;
	RemoveDyingMember_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnRemoveDyingMember, &RemoveDyingMember_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.AddMember
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Pawn                           ( CPF_Parm )
// unsigned long                  bCheckPlaypens                 ( CPF_OptionalParm | CPF_Parm )

int ASFXSquadCombatMP::eventAddMember ( class APawn* Pawn, unsigned long bCheckPlaypens )
{
	static UFunction* pFnAddMember = NULL;

	if ( ! pFnAddMember )
		pFnAddMember = (UFunction*) UObject::GObjObjects()->Data[ 42225 ];

	ASFXSquadCombatMP_eventAddMember_Parms AddMember_Parms;
	AddMember_Parms.Pawn = Pawn;
	AddMember_Parms.bCheckPlaypens = bCheckPlaypens;

	this->ProcessEvent ( pFnAddMember, &AddMember_Parms, NULL );

	return AddMember_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   member                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )

bool ASFXSquadCombatMP::Died ( class APawn* member, class AController* Killer )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 42219 ];

	ASFXSquadCombatMP_execDied_Parms Died_Parms;
	Died_Parms.member = member;
	Died_Parms.Killer = Killer;

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.NotifyPlaypenChanged
// [0x00020002] 
// Parameters infos:

void ASFXSquadCombatMP::NotifyPlaypenChanged ( )
{
	static UFunction* pFnNotifyPlaypenChanged = NULL;

	if ( ! pFnNotifyPlaypenChanged )
		pFnNotifyPlaypenChanged = (UFunction*) UObject::GObjObjects()->Data[ 42215 ];

	ASFXSquadCombatMP_execNotifyPlaypenChanged_Parms NotifyPlaypenChanged_Parms;

	this->ProcessEvent ( pFnNotifyPlaypenChanged, &NotifyPlaypenChanged_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.NotifyNoEnemiesPerceived
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ASFXSquadCombatMP::eventNotifyNoEnemiesPerceived ( )
{
	static UFunction* pFnNotifyNoEnemiesPerceived = NULL;

	if ( ! pFnNotifyNoEnemiesPerceived )
		pFnNotifyNoEnemiesPerceived = (UFunction*) UObject::GObjObjects()->Data[ 42214 ];

	ASFXSquadCombatMP_eventNotifyNoEnemiesPerceived_Parms NotifyNoEnemiesPerceived_Parms;

	this->ProcessEvent ( pFnNotifyNoEnemiesPerceived, &NotifyNoEnemiesPerceived_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.NotifyEnemyPerceived
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ASFXSquadCombatMP::eventNotifyEnemyPerceived ( )
{
	static UFunction* pFnNotifyEnemyPerceived = NULL;

	if ( ! pFnNotifyEnemyPerceived )
		pFnNotifyEnemyPerceived = (UFunction*) UObject::GObjObjects()->Data[ 42213 ];

	ASFXSquadCombatMP_eventNotifyEnemyPerceived_Parms NotifyEnemyPerceived_Parms;

	this->ProcessEvent ( pFnNotifyEnemyPerceived, &NotifyEnemyPerceived_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.GetClosestCombatZoneOrigin
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Position                       ( CPF_Parm )
// struct FVector                 Origin                         ( CPF_Parm | CPF_OutParm )

bool ASFXSquadCombatMP::GetClosestCombatZoneOrigin ( struct FVector Position, struct FVector* Origin )
{
	static UFunction* pFnGetClosestCombatZoneOrigin = NULL;

	if ( ! pFnGetClosestCombatZoneOrigin )
		pFnGetClosestCombatZoneOrigin = (UFunction*) UObject::GObjObjects()->Data[ 42209 ];

	ASFXSquadCombatMP_execGetClosestCombatZoneOrigin_Parms GetClosestCombatZoneOrigin_Parms;
	memcpy ( &GetClosestCombatZoneOrigin_Parms.Position, &Position, 0xC );

	pFnGetClosestCombatZoneOrigin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClosestCombatZoneOrigin, &GetClosestCombatZoneOrigin_Parms, NULL );

	pFnGetClosestCombatZoneOrigin->FunctionFlags |= 0x400;

	if ( Origin )
		memcpy ( Origin, &GetClosestCombatZoneOrigin_Parms.Origin, 0xC );

	return GetClosestCombatZoneOrigin_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.IsPositionInCombatZone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Position                       ( CPF_Parm )

bool ASFXSquadCombatMP::IsPositionInCombatZone ( struct FVector Position )
{
	static UFunction* pFnIsPositionInCombatZone = NULL;

	if ( ! pFnIsPositionInCombatZone )
		pFnIsPositionInCombatZone = (UFunction*) UObject::GObjObjects()->Data[ 42206 ];

	ASFXSquadCombatMP_execIsPositionInCombatZone_Parms IsPositionInCombatZone_Parms;
	memcpy ( &IsPositionInCombatZone_Parms.Position, &Position, 0xC );

	pFnIsPositionInCombatZone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPositionInCombatZone, &IsPositionInCombatZone_Parms, NULL );

	pFnIsPositionInCombatZone->FunctionFlags |= 0x400;

	return IsPositionInCombatZone_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.IsCoverInCombatZone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACoverSlotMarker*        SlotMarker                     ( CPF_Parm )

bool ASFXSquadCombatMP::IsCoverInCombatZone ( class ACoverSlotMarker* SlotMarker )
{
	static UFunction* pFnIsCoverInCombatZone = NULL;

	if ( ! pFnIsCoverInCombatZone )
		pFnIsCoverInCombatZone = (UFunction*) UObject::GObjObjects()->Data[ 42203 ];

	ASFXSquadCombatMP_execIsCoverInCombatZone_Parms IsCoverInCombatZone_Parms;
	IsCoverInCombatZone_Parms.SlotMarker = SlotMarker;

	pFnIsCoverInCombatZone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCoverInCombatZone, &IsCoverInCombatZone_Parms, NULL );

	pFnIsCoverInCombatZone->FunctionFlags |= 0x400;

	return IsCoverInCombatZone_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.HasCombatZone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXCombatZone*          CombatZone                     ( CPF_Parm )

bool ASFXSquadCombatMP::HasCombatZone ( class ASFXCombatZone* CombatZone )
{
	static UFunction* pFnHasCombatZone = NULL;

	if ( ! pFnHasCombatZone )
		pFnHasCombatZone = (UFunction*) UObject::GObjObjects()->Data[ 42200 ];

	ASFXSquadCombatMP_execHasCombatZone_Parms HasCombatZone_Parms;
	HasCombatZone_Parms.CombatZone = CombatZone;

	pFnHasCombatZone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasCombatZone, &HasCombatZone_Parms, NULL );

	pFnHasCombatZone->FunctionFlags |= 0x400;

	return HasCombatZone_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.RemoveCombatZone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ASFXCombatZone*          CombatZone                     ( CPF_Parm )

void ASFXSquadCombatMP::RemoveCombatZone ( class ASFXCombatZone* CombatZone )
{
	static UFunction* pFnRemoveCombatZone = NULL;

	if ( ! pFnRemoveCombatZone )
		pFnRemoveCombatZone = (UFunction*) UObject::GObjObjects()->Data[ 42198 ];

	ASFXSquadCombatMP_execRemoveCombatZone_Parms RemoveCombatZone_Parms;
	RemoveCombatZone_Parms.CombatZone = CombatZone;

	pFnRemoveCombatZone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveCombatZone, &RemoveCombatZone_Parms, NULL );

	pFnRemoveCombatZone->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseSquad.AddCombatZone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ASFXCombatZone*          CombatZone                     ( CPF_Parm )

void ASFXSquadCombatMP::AddCombatZone ( class ASFXCombatZone* CombatZone )
{
	static UFunction* pFnAddCombatZone = NULL;

	if ( ! pFnAddCombatZone )
		pFnAddCombatZone = (UFunction*) UObject::GObjObjects()->Data[ 42196 ];

	ASFXSquadCombatMP_execAddCombatZone_Parms AddCombatZone_Parms;
	AddCombatZone_Parms.CombatZone = CombatZone;

	pFnAddCombatZone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddCombatZone, &AddCombatZone_Parms, NULL );

	pFnAddCombatZone->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseSquad.GetPlaypenReturnPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oPawn                          ( CPF_Parm )

class AActor* ASFXSquadCombatMP::GetPlaypenReturnPoint ( class APawn* oPawn )
{
	static UFunction* pFnGetPlaypenReturnPoint = NULL;

	if ( ! pFnGetPlaypenReturnPoint )
		pFnGetPlaypenReturnPoint = (UFunction*) UObject::GObjObjects()->Data[ 42193 ];

	ASFXSquadCombatMP_execGetPlaypenReturnPoint_Parms GetPlaypenReturnPoint_Parms;
	GetPlaypenReturnPoint_Parms.oPawn = oPawn;

	pFnGetPlaypenReturnPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlaypenReturnPoint, &GetPlaypenReturnPoint_Parms, NULL );

	pFnGetPlaypenReturnPoint->FunctionFlags |= 0x400;

	return GetPlaypenReturnPoint_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.GetPlaypenNavOrigin
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oPawn                          ( CPF_OptionalParm | CPF_Parm )

class AActor* ASFXSquadCombatMP::GetPlaypenNavOrigin ( class APawn* oPawn )
{
	static UFunction* pFnGetPlaypenNavOrigin = NULL;

	if ( ! pFnGetPlaypenNavOrigin )
		pFnGetPlaypenNavOrigin = (UFunction*) UObject::GObjObjects()->Data[ 42190 ];

	ASFXSquadCombatMP_execGetPlaypenNavOrigin_Parms GetPlaypenNavOrigin_Parms;
	GetPlaypenNavOrigin_Parms.oPawn = oPawn;

	pFnGetPlaypenNavOrigin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlaypenNavOrigin, &GetPlaypenNavOrigin_Parms, NULL );

	pFnGetPlaypenNavOrigin->FunctionFlags |= 0x400;

	return GetPlaypenNavOrigin_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.UpdatePlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASFXSquadCombatMP::UpdatePlaypen ( )
{
	static UFunction* pFnUpdatePlaypen = NULL;

	if ( ! pFnUpdatePlaypen )
		pFnUpdatePlaypen = (UFunction*) UObject::GObjObjects()->Data[ 42189 ];

	ASFXSquadCombatMP_execUpdatePlaypen_Parms UpdatePlaypen_Parms;

	pFnUpdatePlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdatePlaypen, &UpdatePlaypen_Parms, NULL );

	pFnUpdatePlaypen->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseSquad.IsVolumeInPlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPlaypenVolume*       Volume                         ( CPF_Parm )

bool ASFXSquadCombatMP::IsVolumeInPlaypen ( class ABioPlaypenVolume* Volume )
{
	static UFunction* pFnIsVolumeInPlaypen = NULL;

	if ( ! pFnIsVolumeInPlaypen )
		pFnIsVolumeInPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 42186 ];

	ASFXSquadCombatMP_execIsVolumeInPlaypen_Parms IsVolumeInPlaypen_Parms;
	IsVolumeInPlaypen_Parms.Volume = Volume;

	pFnIsVolumeInPlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsVolumeInPlaypen, &IsVolumeInPlaypen_Parms, NULL );

	pFnIsVolumeInPlaypen->FunctionFlags |= 0x400;

	return IsVolumeInPlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.RemoveVolumeFromPlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPlaypenVolume*       Volume                         ( CPF_Parm )

void ASFXSquadCombatMP::RemoveVolumeFromPlaypen ( class ABioPlaypenVolume* Volume )
{
	static UFunction* pFnRemoveVolumeFromPlaypen = NULL;

	if ( ! pFnRemoveVolumeFromPlaypen )
		pFnRemoveVolumeFromPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 42184 ];

	ASFXSquadCombatMP_execRemoveVolumeFromPlaypen_Parms RemoveVolumeFromPlaypen_Parms;
	RemoveVolumeFromPlaypen_Parms.Volume = Volume;

	pFnRemoveVolumeFromPlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveVolumeFromPlaypen, &RemoveVolumeFromPlaypen_Parms, NULL );

	pFnRemoveVolumeFromPlaypen->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseSquad.AddVolumeToPlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPlaypenVolume*       Volume                         ( CPF_Parm )

void ASFXSquadCombatMP::AddVolumeToPlaypen ( class ABioPlaypenVolume* Volume )
{
	static UFunction* pFnAddVolumeToPlaypen = NULL;

	if ( ! pFnAddVolumeToPlaypen )
		pFnAddVolumeToPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 42182 ];

	ASFXSquadCombatMP_execAddVolumeToPlaypen_Parms AddVolumeToPlaypen_Parms;
	AddVolumeToPlaypen_Parms.Volume = Volume;

	pFnAddVolumeToPlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddVolumeToPlaypen, &AddVolumeToPlaypen_Parms, NULL );

	pFnAddVolumeToPlaypen->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseSquad.HasPlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXSquadCombatMP::HasPlaypen ( )
{
	static UFunction* pFnHasPlaypen = NULL;

	if ( ! pFnHasPlaypen )
		pFnHasPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 42180 ];

	ASFXSquadCombatMP_execHasPlaypen_Parms HasPlaypen_Parms;

	pFnHasPlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasPlaypen, &HasPlaypen_Parms, NULL );

	pFnHasPlaypen->FunctionFlags |= 0x400;

	return HasPlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.IsActorInSubtractivePlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool ASFXSquadCombatMP::IsActorInSubtractivePlaypen ( class AActor* oActor )
{
	static UFunction* pFnIsActorInSubtractivePlaypen = NULL;

	if ( ! pFnIsActorInSubtractivePlaypen )
		pFnIsActorInSubtractivePlaypen = (UFunction*) UObject::GObjObjects()->Data[ 42177 ];

	ASFXSquadCombatMP_execIsActorInSubtractivePlaypen_Parms IsActorInSubtractivePlaypen_Parms;
	IsActorInSubtractivePlaypen_Parms.oActor = oActor;

	pFnIsActorInSubtractivePlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActorInSubtractivePlaypen, &IsActorInSubtractivePlaypen_Parms, NULL );

	pFnIsActorInSubtractivePlaypen->FunctionFlags |= 0x400;

	return IsActorInSubtractivePlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.IsActorInPlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool ASFXSquadCombatMP::IsActorInPlaypen ( class AActor* oActor )
{
	static UFunction* pFnIsActorInPlaypen = NULL;

	if ( ! pFnIsActorInPlaypen )
		pFnIsActorInPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 42174 ];

	ASFXSquadCombatMP_execIsActorInPlaypen_Parms IsActorInPlaypen_Parms;
	IsActorInPlaypen_Parms.oActor = oActor;

	pFnIsActorInPlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActorInPlaypen, &IsActorInPlaypen_Parms, NULL );

	pFnIsActorInPlaypen->FunctionFlags |= 0x400;

	return IsActorInPlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.IsPositionInSubtractivePlaypen
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vLocation                      ( CPF_Const | CPF_Parm | CPF_OutParm )

bool ASFXSquadCombatMP::IsPositionInSubtractivePlaypen ( struct FVector* vLocation )
{
	static UFunction* pFnIsPositionInSubtractivePlaypen = NULL;

	if ( ! pFnIsPositionInSubtractivePlaypen )
		pFnIsPositionInSubtractivePlaypen = (UFunction*) UObject::GObjObjects()->Data[ 42171 ];

	ASFXSquadCombatMP_execIsPositionInSubtractivePlaypen_Parms IsPositionInSubtractivePlaypen_Parms;

	pFnIsPositionInSubtractivePlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPositionInSubtractivePlaypen, &IsPositionInSubtractivePlaypen_Parms, NULL );

	pFnIsPositionInSubtractivePlaypen->FunctionFlags |= 0x400;

	if ( vLocation )
		memcpy ( vLocation, &IsPositionInSubtractivePlaypen_Parms.vLocation, 0xC );

	return IsPositionInSubtractivePlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.IsPositionInPlaypen
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vLocation                      ( CPF_Const | CPF_Parm | CPF_OutParm )

bool ASFXSquadCombatMP::IsPositionInPlaypen ( struct FVector* vLocation )
{
	static UFunction* pFnIsPositionInPlaypen = NULL;

	if ( ! pFnIsPositionInPlaypen )
		pFnIsPositionInPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 42168 ];

	ASFXSquadCombatMP_execIsPositionInPlaypen_Parms IsPositionInPlaypen_Parms;

	pFnIsPositionInPlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPositionInPlaypen, &IsPositionInPlaypen_Parms, NULL );

	pFnIsPositionInPlaypen->FunctionFlags |= 0x400;

	if ( vLocation )
		memcpy ( vLocation, &IsPositionInPlaypen_Parms.vLocation, 0xC );

	return IsPositionInPlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.SquadMembers
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ABioAiController*        oController                    ( CPF_Parm | CPF_OutParm )

void ASFXSquadCombatMP::SquadMembers ( class ABioAiController** oController )
{
	static UFunction* pFnSquadMembers = NULL;

	if ( ! pFnSquadMembers )
		pFnSquadMembers = (UFunction*) UObject::GObjObjects()->Data[ 41481 ];

	ASFXSquadCombatMP_execSquadMembers_Parms SquadMembers_Parms;

	pFnSquadMembers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSquadMembers, &SquadMembers_Parms, NULL );

	pFnSquadMembers->FunctionFlags |= 0x400;

	if ( oController )
		*oController = SquadMembers_Parms.oController;
};

// Function SFXGame.BioBaseSquad.SetMemberMoveIndicator
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )
// class ABioTacticalMoveToIndicator* oIndicator                     ( CPF_Parm )

void ASFXSquadCombatMP::SetMemberMoveIndicator ( int nIndex, class ABioTacticalMoveToIndicator* oIndicator )
{
	static UFunction* pFnSetMemberMoveIndicator = NULL;

	if ( ! pFnSetMemberMoveIndicator )
		pFnSetMemberMoveIndicator = (UFunction*) UObject::GObjObjects()->Data[ 42164 ];

	ASFXSquadCombatMP_execSetMemberMoveIndicator_Parms SetMemberMoveIndicator_Parms;
	SetMemberMoveIndicator_Parms.nIndex = nIndex;
	SetMemberMoveIndicator_Parms.oIndicator = oIndicator;

	pFnSetMemberMoveIndicator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMemberMoveIndicator, &SetMemberMoveIndicator_Parms, NULL );

	pFnSetMemberMoveIndicator->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseSquad.GetMemberMoveIndicator
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioTacticalMoveToIndicator* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

class ABioTacticalMoveToIndicator* ASFXSquadCombatMP::GetMemberMoveIndicator ( int nIndex )
{
	static UFunction* pFnGetMemberMoveIndicator = NULL;

	if ( ! pFnGetMemberMoveIndicator )
		pFnGetMemberMoveIndicator = (UFunction*) UObject::GObjObjects()->Data[ 42161 ];

	ASFXSquadCombatMP_execGetMemberMoveIndicator_Parms GetMemberMoveIndicator_Parms;
	GetMemberMoveIndicator_Parms.nIndex = nIndex;

	pFnGetMemberMoveIndicator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMemberMoveIndicator, &GetMemberMoveIndicator_Parms, NULL );

	pFnGetMemberMoveIndicator->FunctionFlags |= 0x400;

	return GetMemberMoveIndicator_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.RemoveMember
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   pPawn                          ( CPF_Parm )

bool ASFXSquadCombatMP::RemoveMember ( class APawn* pPawn )
{
	static UFunction* pFnRemoveMember = NULL;

	if ( ! pFnRemoveMember )
		pFnRemoveMember = (UFunction*) UObject::GObjObjects()->Data[ 42158 ];

	ASFXSquadCombatMP_execRemoveMember_Parms RemoveMember_Parms;
	RemoveMember_Parms.pPawn = pPawn;

	pFnRemoveMember->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveMember, &RemoveMember_Parms, NULL );

	pFnRemoveMember->FunctionFlags |= 0x400;

	return RemoveMember_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXPlayerSquadMP.AddMember
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Pawn                           ( CPF_Parm )
// unsigned long                  bCheckPlaypens                 ( CPF_OptionalParm | CPF_Parm )

int ASFXPlayerSquadMP::eventAddMember ( class APawn* Pawn, unsigned long bCheckPlaypens )
{
	static UFunction* pFnAddMember = NULL;

	if ( ! pFnAddMember )
		pFnAddMember = (UFunction*) UObject::GObjObjects()->Data[ 112463 ];

	ASFXPlayerSquadMP_eventAddMember_Parms AddMember_Parms;
	AddMember_Parms.Pawn = Pawn;
	AddMember_Parms.bCheckPlaypens = bCheckPlaypens;

	this->ProcessEvent ( pFnAddMember, &AddMember_Parms, NULL );

	return AddMember_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXPlayerSquadMP.RemoveDyingMember
// [0x00020000] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )

void ASFXPlayerSquadMP::RemoveDyingMember ( class APawn* oPawn )
{
	static UFunction* pFnRemoveDyingMember = NULL;

	if ( ! pFnRemoveDyingMember )
		pFnRemoveDyingMember = (UFunction*) UObject::GObjObjects()->Data[ 112461 ];

	ASFXPlayerSquadMP_execRemoveDyingMember_Parms RemoveDyingMember_Parms;
	RemoveDyingMember_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnRemoveDyingMember, &RemoveDyingMember_Parms, NULL );
};

// Function sfxgamempcontent.SFXPlayerSquadMP.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXPlayerSquadMP::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 112460 ];

	ASFXPlayerSquadMP_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.Internal_ResetPlayerController
// [0x00020002] 
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )

void Asfxplayercontrollermp::Internal_ResetPlayerController ( struct FVector NewLocation )
{
	static UFunction* pFnInternal_ResetPlayerController = NULL;

	if ( ! pFnInternal_ResetPlayerController )
		pFnInternal_ResetPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 112429 ];

	Asfxplayercontrollermp_execInternal_ResetPlayerController_Parms Internal_ResetPlayerController_Parms;
	memcpy ( &Internal_ResetPlayerController_Parms.NewLocation, &NewLocation, 0xC );

	this->ProcessEvent ( pFnInternal_ResetPlayerController, &Internal_ResetPlayerController_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.SwitchWeapon
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ASFXWeapon_NativeBase*   oWpn                           ( CPF_Parm )

void Asfxplayercontrollermp::eventSwitchWeapon ( class ASFXWeapon_NativeBase* oWpn )
{
	static UFunction* pFnSwitchWeapon = NULL;

	if ( ! pFnSwitchWeapon )
		pFnSwitchWeapon = (UFunction*) UObject::GObjObjects()->Data[ 112430 ];

	Asfxplayercontrollermp_eventSwitchWeapon_Parms SwitchWeapon_Parms;
	SwitchWeapon_Parms.oWpn = oWpn;

	this->ProcessEvent ( pFnSwitchWeapon, &SwitchWeapon_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.AFK
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Asfxplayercontrollermp::AFK ( )
{
	static UFunction* pFnAFK = NULL;

	if ( ! pFnAFK )
		pFnAFK = (UFunction*) UObject::GObjObjects()->Data[ 112433 ];

	Asfxplayercontrollermp_execAFK_Parms AFK_Parms;

	this->ProcessEvent ( pFnAFK, &AFK_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.SetAFKLastActionTime
// [0x00020002] 
// Parameters infos:
// unsigned long                  isMovementCheck                ( CPF_Parm )

void Asfxplayercontrollermp::SetAFKLastActionTime ( unsigned long isMovementCheck )
{
	static UFunction* pFnSetAFKLastActionTime = NULL;

	if ( ! pFnSetAFKLastActionTime )
		pFnSetAFKLastActionTime = (UFunction*) UObject::GObjObjects()->Data[ 112437 ];

	Asfxplayercontrollermp_execSetAFKLastActionTime_Parms SetAFKLastActionTime_Parms;
	SetAFKLastActionTime_Parms.isMovementCheck = isMovementCheck;

	this->ProcessEvent ( pFnSetAFKLastActionTime, &SetAFKLastActionTime_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.DoAFKTick
// [0x00020002] 
// Parameters infos:

void Asfxplayercontrollermp::DoAFKTick ( )
{
	static UFunction* pFnDoAFKTick = NULL;

	if ( ! pFnDoAFKTick )
		pFnDoAFKTick = (UFunction*) UObject::GObjObjects()->Data[ 112438 ];

	Asfxplayercontrollermp_execDoAFKTick_Parms DoAFKTick_Parms;

	this->ProcessEvent ( pFnDoAFKTick, &DoAFKTick_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.BackToMainMenu
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void Asfxplayercontrollermp::BackToMainMenu ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnBackToMainMenu = NULL;

	if ( ! pFnBackToMainMenu )
		pFnBackToMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 112416 ];

	Asfxplayercontrollermp_execBackToMainMenu_Parms BackToMainMenu_Parms;
	BackToMainMenu_Parms.bAPressed = bAPressed;
	BackToMainMenu_Parms.Context = Context;

	this->ProcessEvent ( pFnBackToMainMenu, &BackToMainMenu_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.CheckIfConnectedFailsafe
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxplayercontrollermp::CheckIfConnectedFailsafe ( )
{
	static UFunction* pFnCheckIfConnectedFailsafe = NULL;

	if ( ! pFnCheckIfConnectedFailsafe )
		pFnCheckIfConnectedFailsafe = (UFunction*) UObject::GObjObjects()->Data[ 110278 ];

	Asfxplayercontrollermp_execCheckIfConnectedFailsafe_Parms CheckIfConnectedFailsafe_Parms;

	this->ProcessEvent ( pFnCheckIfConnectedFailsafe, &CheckIfConnectedFailsafe_Parms, NULL );

	return CheckIfConnectedFailsafe_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxplayercontrollermp.QuickLoad
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void Asfxplayercontrollermp::QuickLoad ( )
{
	static UFunction* pFnQuickLoad = NULL;

	if ( ! pFnQuickLoad )
		pFnQuickLoad = (UFunction*) UObject::GObjObjects()->Data[ 112410 ];

	Asfxplayercontrollermp_execQuickLoad_Parms QuickLoad_Parms;

	this->ProcessEvent ( pFnQuickLoad, &QuickLoad_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ClientShowExtractionCredits
// [0x010201C2] 
// Parameters infos:
// float                          Credits                        ( CPF_Parm )

void Asfxplayercontrollermp::ClientShowExtractionCredits ( float Credits )
{
	static UFunction* pFnClientShowExtractionCredits = NULL;

	if ( ! pFnClientShowExtractionCredits )
		pFnClientShowExtractionCredits = (UFunction*) UObject::GObjObjects()->Data[ 112411 ];

	Asfxplayercontrollermp_execClientShowExtractionCredits_Parms ClientShowExtractionCredits_Parms;
	ClientShowExtractionCredits_Parms.Credits = Credits;

	this->ProcessEvent ( pFnClientShowExtractionCredits, &ClientShowExtractionCredits_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ClientPlaySimpleDialogLine
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// void*                          DialogLineSr                   ( CPF_Parm )
// class AActor*                  DialogPlayerOwner              ( CPF_Parm )

void Asfxplayercontrollermp::eventClientPlaySimpleDialogLine ( void* DialogLineSr, class AActor* DialogPlayerOwner )
{
	static UFunction* pFnClientPlaySimpleDialogLine = NULL;

	if ( ! pFnClientPlaySimpleDialogLine )
		pFnClientPlaySimpleDialogLine = (UFunction*) UObject::GObjObjects()->Data[ 112404 ];

	Asfxplayercontrollermp_eventClientPlaySimpleDialogLine_Parms ClientPlaySimpleDialogLine_Parms;
	ClientPlaySimpleDialogLine_Parms.DialogLineSr = DialogLineSr;
	ClientPlaySimpleDialogLine_Parms.DialogPlayerOwner = DialogPlayerOwner;

	this->ProcessEvent ( pFnClientPlaySimpleDialogLine, &ClientPlaySimpleDialogLine_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.InternalSawNewEnemy
// [0x00420002] 
// Parameters infos:
// class ABioPawn*                EnemyPawn                      ( CPF_Const | CPF_Parm | CPF_OutParm )

void Asfxplayercontrollermp::InternalSawNewEnemy ( class ABioPawn** EnemyPawn )
{
	static UFunction* pFnInternalSawNewEnemy = NULL;

	if ( ! pFnInternalSawNewEnemy )
		pFnInternalSawNewEnemy = (UFunction*) UObject::GObjObjects()->Data[ 112398 ];

	Asfxplayercontrollermp_execInternalSawNewEnemy_Parms InternalSawNewEnemy_Parms;

	this->ProcessEvent ( pFnInternalSawNewEnemy, &InternalSawNewEnemy_Parms, NULL );

	if ( EnemyPawn )
		*EnemyPawn = InternalSawNewEnemy_Parms.EnemyPawn;
};

// Function sfxgamempcontent.sfxplayercontrollermp.ServerWaveCoordinatorJoinInProgress
// [0x002200C2] 
// Parameters infos:
// class Asfxwavecoordinator_hordeoperation* Coordinator                    ( CPF_Parm )

void Asfxplayercontrollermp::ServerWaveCoordinatorJoinInProgress ( class Asfxwavecoordinator_hordeoperation* Coordinator )
{
	static UFunction* pFnServerWaveCoordinatorJoinInProgress = NULL;

	if ( ! pFnServerWaveCoordinatorJoinInProgress )
		pFnServerWaveCoordinatorJoinInProgress = (UFunction*) UObject::GObjObjects()->Data[ 112396 ];

	Asfxplayercontrollermp_execServerWaveCoordinatorJoinInProgress_Parms ServerWaveCoordinatorJoinInProgress_Parms;
	ServerWaveCoordinatorJoinInProgress_Parms.Coordinator = Coordinator;

	this->ProcessEvent ( pFnServerWaveCoordinatorJoinInProgress, &ServerWaveCoordinatorJoinInProgress_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.SetPause
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bPause                         ( CPF_Parm )
// struct FScriptDelegate         CanUnpauseDelegate             ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool Asfxplayercontrollermp::SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate )
{
	static UFunction* pFnSetPause = NULL;

	if ( ! pFnSetPause )
		pFnSetPause = (UFunction*) UObject::GObjObjects()->Data[ 112392 ];

	Asfxplayercontrollermp_execSetPause_Parms SetPause_Parms;
	SetPause_Parms.bPause = bPause;
	memcpy ( &SetPause_Parms.CanUnpauseDelegate, &CanUnpauseDelegate, 0xC );

	this->ProcessEvent ( pFnSetPause, &SetPause_Parms, NULL );

	return SetPause_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxplayercontrollermp.ClientKickPlayer
// [0x010201C2] 
// Parameters infos:
// struct FUniqueNetId            kickedPlayer                   ( CPF_Parm )

void Asfxplayercontrollermp::ClientKickPlayer ( struct FUniqueNetId kickedPlayer )
{
	static UFunction* pFnClientKickPlayer = NULL;

	if ( ! pFnClientKickPlayer )
		pFnClientKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 112390 ];

	Asfxplayercontrollermp_execClientKickPlayer_Parms ClientKickPlayer_Parms;
	memcpy ( &ClientKickPlayer_Parms.kickedPlayer, &kickedPlayer, 0x8 );

	this->ProcessEvent ( pFnClientKickPlayer, &ClientKickPlayer_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.KickPlayer
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            kickedPlayer                   ( CPF_Parm )

void Asfxplayercontrollermp::KickPlayer ( struct FUniqueNetId kickedPlayer )
{
	static UFunction* pFnKickPlayer = NULL;

	if ( ! pFnKickPlayer )
		pFnKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 112387 ];

	Asfxplayercontrollermp_execKickPlayer_Parms KickPlayer_Parms;
	memcpy ( &KickPlayer_Parms.kickedPlayer, &kickedPlayer, 0x8 );

	this->ProcessEvent ( pFnKickPlayer, &KickPlayer_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.MPBotsClearUsed
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::MPBotsClearUsed ( )
{
	static UFunction* pFnMPBotsClearUsed = NULL;

	if ( ! pFnMPBotsClearUsed )
		pFnMPBotsClearUsed = (UFunction*) UObject::GObjObjects()->Data[ 112386 ];

	Asfxplayercontrollermp_execMPBotsClearUsed_Parms MPBotsClearUsed_Parms;

	this->ProcessEvent ( pFnMPBotsClearUsed, &MPBotsClearUsed_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.OnControllerChanged
// [0x00020002] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bIsConnected                   ( CPF_Parm )

void Asfxplayercontrollermp::OnControllerChanged ( int ControllerId, unsigned long bIsConnected )
{
	static UFunction* pFnOnControllerChanged = NULL;

	if ( ! pFnOnControllerChanged )
		pFnOnControllerChanged = (UFunction*) UObject::GObjObjects()->Data[ 112383 ];

	Asfxplayercontrollermp_execOnControllerChanged_Parms OnControllerChanged_Parms;
	OnControllerChanged_Parms.ControllerId = ControllerId;
	OnControllerChanged_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnOnControllerChanged, &OnControllerChanged_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.TeamMessage
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_Parm )
// float                          MsgLifeTime                    ( CPF_OptionalParm | CPF_Parm )

void Asfxplayercontrollermp::eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime )
{
	static UFunction* pFnTeamMessage = NULL;

	if ( ! pFnTeamMessage )
		pFnTeamMessage = (UFunction*) UObject::GObjObjects()->Data[ 112378 ];

	Asfxplayercontrollermp_eventTeamMessage_Parms TeamMessage_Parms;
	TeamMessage_Parms.PRI = PRI;
	memcpy ( &TeamMessage_Parms.S, &S, 0xC );
	memcpy ( &TeamMessage_Parms.Type, &Type, 0x8 );
	TeamMessage_Parms.MsgLifeTime = MsgLifeTime;

	this->ProcessEvent ( pFnTeamMessage, &TeamMessage_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.VoicePushToTalkEnd
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Asfxplayercontrollermp::VoicePushToTalkEnd ( )
{
	static UFunction* pFnVoicePushToTalkEnd = NULL;

	if ( ! pFnVoicePushToTalkEnd )
		pFnVoicePushToTalkEnd = (UFunction*) UObject::GObjObjects()->Data[ 112377 ];

	Asfxplayercontrollermp_execVoicePushToTalkEnd_Parms VoicePushToTalkEnd_Parms;

	this->ProcessEvent ( pFnVoicePushToTalkEnd, &VoicePushToTalkEnd_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.VoicePushToTalkStart
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Asfxplayercontrollermp::VoicePushToTalkStart ( )
{
	static UFunction* pFnVoicePushToTalkStart = NULL;

	if ( ! pFnVoicePushToTalkStart )
		pFnVoicePushToTalkStart = (UFunction*) UObject::GObjObjects()->Data[ 112376 ];

	Asfxplayercontrollermp_execVoicePushToTalkStart_Parms VoicePushToTalkStart_Parms;

	this->ProcessEvent ( pFnVoicePushToTalkStart, &VoicePushToTalkStart_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.BioTalk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Asfxplayercontrollermp::BioTalk ( )
{
	static UFunction* pFnBioTalk = NULL;

	if ( ! pFnBioTalk )
		pFnBioTalk = (UFunction*) UObject::GObjObjects()->Data[ 112374 ];

	Asfxplayercontrollermp_execBioTalk_Parms BioTalk_Parms;

	this->ProcessEvent ( pFnBioTalk, &BioTalk_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.CheckThatGameCanContinue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Asfxplayercontrollermp::eventCheckThatGameCanContinue ( )
{
	static UFunction* pFnCheckThatGameCanContinue = NULL;

	if ( ! pFnCheckThatGameCanContinue )
		pFnCheckThatGameCanContinue = (UFunction*) UObject::GObjObjects()->Data[ 112373 ];

	Asfxplayercontrollermp_eventCheckThatGameCanContinue_Parms CheckThatGameCanContinue_Parms;

	this->ProcessEvent ( pFnCheckThatGameCanContinue, &CheckThatGameCanContinue_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.PulsePowerDisplay
// [0x00020002] 
// Parameters infos:

void Asfxplayercontrollermp::PulsePowerDisplay ( )
{
	static UFunction* pFnPulsePowerDisplay = NULL;

	if ( ! pFnPulsePowerDisplay )
		pFnPulsePowerDisplay = (UFunction*) UObject::GObjObjects()->Data[ 112371 ];

	Asfxplayercontrollermp_execPulsePowerDisplay_Parms PulsePowerDisplay_Parms;

	this->ProcessEvent ( pFnPulsePowerDisplay, &PulsePowerDisplay_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.GetRemainingCountdownTime
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Asfxplayercontrollermp::GetRemainingCountdownTime ( )
{
	static UFunction* pFnGetRemainingCountdownTime = NULL;

	if ( ! pFnGetRemainingCountdownTime )
		pFnGetRemainingCountdownTime = (UFunction*) UObject::GObjObjects()->Data[ 112367 ];

	Asfxplayercontrollermp_execGetRemainingCountdownTime_Parms GetRemainingCountdownTime_Parms;

	this->ProcessEvent ( pFnGetRemainingCountdownTime, &GetRemainingCountdownTime_Parms, NULL );

	return GetRemainingCountdownTime_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxplayercontrollermp.CancelCountdownTimer
// [0x010201C2] 
// Parameters infos:

void Asfxplayercontrollermp::CancelCountdownTimer ( )
{
	static UFunction* pFnCancelCountdownTimer = NULL;

	if ( ! pFnCancelCountdownTimer )
		pFnCancelCountdownTimer = (UFunction*) UObject::GObjObjects()->Data[ 112365 ];

	Asfxplayercontrollermp_execCancelCountdownTimer_Parms CancelCountdownTimer_Parms;

	this->ProcessEvent ( pFnCancelCountdownTimer, &CancelCountdownTimer_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.BeginCountdownTimer
// [0x00020102] 
// Parameters infos:
// float                          CountdownTime                  ( CPF_Parm )
// float                          CountdownWarningTime           ( CPF_Parm )

void Asfxplayercontrollermp::BeginCountdownTimer ( float CountdownTime, float CountdownWarningTime )
{
	static UFunction* pFnBeginCountdownTimer = NULL;

	if ( ! pFnBeginCountdownTimer )
		pFnBeginCountdownTimer = (UFunction*) UObject::GObjObjects()->Data[ 112360 ];

	Asfxplayercontrollermp_execBeginCountdownTimer_Parms BeginCountdownTimer_Parms;
	BeginCountdownTimer_Parms.CountdownTime = CountdownTime;
	BeginCountdownTimer_Parms.CountdownWarningTime = CountdownWarningTime;

	this->ProcessEvent ( pFnBeginCountdownTimer, &BeginCountdownTimer_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.RefreshLobbyStatusBars
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxplayercontrollermp::RefreshLobbyStatusBars ( )
{
	static UFunction* pFnRefreshLobbyStatusBars = NULL;

	if ( ! pFnRefreshLobbyStatusBars )
		pFnRefreshLobbyStatusBars = (UFunction*) UObject::GObjObjects()->Data[ 111468 ];

	Asfxplayercontrollermp_execRefreshLobbyStatusBars_Parms RefreshLobbyStatusBars_Parms;

	this->ProcessEvent ( pFnRefreshLobbyStatusBars, &RefreshLobbyStatusBars_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.HideLobbyStatusBars
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxplayercontrollermp::HideLobbyStatusBars ( )
{
	static UFunction* pFnHideLobbyStatusBars = NULL;

	if ( ! pFnHideLobbyStatusBars )
		pFnHideLobbyStatusBars = (UFunction*) UObject::GObjObjects()->Data[ 111467 ];

	Asfxplayercontrollermp_execHideLobbyStatusBars_Parms HideLobbyStatusBars_Parms;

	this->ProcessEvent ( pFnHideLobbyStatusBars, &HideLobbyStatusBars_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowLobbyStatusBars
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxplayercontrollermp::ShowLobbyStatusBars ( )
{
	static UFunction* pFnShowLobbyStatusBars = NULL;

	if ( ! pFnShowLobbyStatusBars )
		pFnShowLobbyStatusBars = (UFunction*) UObject::GObjObjects()->Data[ 111465 ];

	Asfxplayercontrollermp_execShowLobbyStatusBars_Parms ShowLobbyStatusBars_Parms;

	this->ProcessEvent ( pFnShowLobbyStatusBars, &ShowLobbyStatusBars_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowStoreScreenFromPromotion
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// int                            PromotionalStoreID             ( CPF_OptionalParm | CPF_Parm )

void Asfxplayercontrollermp::ShowStoreScreenFromPromotion ( int PromotionalStoreID )
{
	static UFunction* pFnShowStoreScreenFromPromotion = NULL;

	if ( ! pFnShowStoreScreenFromPromotion )
		pFnShowStoreScreenFromPromotion = (UFunction*) UObject::GObjObjects()->Data[ 111471 ];

	Asfxplayercontrollermp_execShowStoreScreenFromPromotion_Parms ShowStoreScreenFromPromotion_Parms;
	ShowStoreScreenFromPromotion_Parms.PromotionalStoreID = PromotionalStoreID;

	this->ProcessEvent ( pFnShowStoreScreenFromPromotion, &ShowStoreScreenFromPromotion_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowPromotionScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxplayercontrollermp::ShowPromotionScreen ( )
{
	static UFunction* pFnShowPromotionScreen = NULL;

	if ( ! pFnShowPromotionScreen )
		pFnShowPromotionScreen = (UFunction*) UObject::GObjObjects()->Data[ 111469 ];

	Asfxplayercontrollermp_execShowPromotionScreen_Parms ShowPromotionScreen_Parms;

	this->ProcessEvent ( pFnShowPromotionScreen, &ShowPromotionScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.DisplayDebugScore
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::DisplayDebugScore ( )
{
	static UFunction* pFnDisplayDebugScore = NULL;

	if ( ! pFnDisplayDebugScore )
		pFnDisplayDebugScore = (UFunction*) UObject::GObjObjects()->Data[ 112347 ];

	Asfxplayercontrollermp_execDisplayDebugScore_Parms DisplayDebugScore_Parms;

	this->ProcessEvent ( pFnDisplayDebugScore, &DisplayDebugScore_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.HideInGameConsumableUI
// [0x00020002] 
// Parameters infos:

void Asfxplayercontrollermp::HideInGameConsumableUI ( )
{
	static UFunction* pFnHideInGameConsumableUI = NULL;

	if ( ! pFnHideInGameConsumableUI )
		pFnHideInGameConsumableUI = (UFunction*) UObject::GObjObjects()->Data[ 112345 ];

	Asfxplayercontrollermp_execHideInGameConsumableUI_Parms HideInGameConsumableUI_Parms;

	this->ProcessEvent ( pFnHideInGameConsumableUI, &HideInGameConsumableUI_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.UpdateInGameConsumableUI
// [0x00020002] 
// Parameters infos:

void Asfxplayercontrollermp::UpdateInGameConsumableUI ( )
{
	static UFunction* pFnUpdateInGameConsumableUI = NULL;

	if ( ! pFnUpdateInGameConsumableUI )
		pFnUpdateInGameConsumableUI = (UFunction*) UObject::GObjObjects()->Data[ 112343 ];

	Asfxplayercontrollermp_execUpdateInGameConsumableUI_Parms UpdateInGameConsumableUI_Parms;

	this->ProcessEvent ( pFnUpdateInGameConsumableUI, &UpdateInGameConsumableUI_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.GetMPHUD
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USFXGUI_MPHUD*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXGUI_MPHUD* Asfxplayercontrollermp::GetMPHUD ( )
{
	static UFunction* pFnGetMPHUD = NULL;

	if ( ! pFnGetMPHUD )
		pFnGetMPHUD = (UFunction*) UObject::GObjObjects()->Data[ 112013 ];

	Asfxplayercontrollermp_execGetMPHUD_Parms GetMPHUD_Parms;

	this->ProcessEvent ( pFnGetMPHUD, &GetMPHUD_Parms, NULL );

	return GetMPHUD_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowEndOfMatchUI
// [0x010201C2] 
// Parameters infos:
// int                            WaveNumber                     ( CPF_Parm )

void Asfxplayercontrollermp::ShowEndOfMatchUI ( int WaveNumber )
{
	static UFunction* pFnShowEndOfMatchUI = NULL;

	if ( ! pFnShowEndOfMatchUI )
		pFnShowEndOfMatchUI = (UFunction*) UObject::GObjObjects()->Data[ 112339 ];

	Asfxplayercontrollermp_execShowEndOfMatchUI_Parms ShowEndOfMatchUI_Parms;
	ShowEndOfMatchUI_Parms.WaveNumber = WaveNumber;

	this->ProcessEvent ( pFnShowEndOfMatchUI, &ShowEndOfMatchUI_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.SetObjectiveCircleText
// [0x00020102] 
// Parameters infos:
// struct FString                 s1                             ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 s2                             ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 s3                             ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 s4                             ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void Asfxplayercontrollermp::SetObjectiveCircleText ( struct FString s1, struct FString s2, struct FString s3, struct FString s4 )
{
	static UFunction* pFnSetObjectiveCircleText = NULL;

	if ( ! pFnSetObjectiveCircleText )
		pFnSetObjectiveCircleText = (UFunction*) UObject::GObjObjects()->Data[ 112333 ];

	Asfxplayercontrollermp_execSetObjectiveCircleText_Parms SetObjectiveCircleText_Parms;
	memcpy ( &SetObjectiveCircleText_Parms.s1, &s1, 0xC );
	memcpy ( &SetObjectiveCircleText_Parms.s2, &s2, 0xC );
	memcpy ( &SetObjectiveCircleText_Parms.s3, &s3, 0xC );
	memcpy ( &SetObjectiveCircleText_Parms.s4, &s4, 0xC );

	this->ProcessEvent ( pFnSetObjectiveCircleText, &SetObjectiveCircleText_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.SetObjectiveCircleProgress
// [0x00020102] 
// Parameters infos:
// int                            nNumComplete                   ( CPF_Parm )

void Asfxplayercontrollermp::SetObjectiveCircleProgress ( int nNumComplete )
{
	static UFunction* pFnSetObjectiveCircleProgress = NULL;

	if ( ! pFnSetObjectiveCircleProgress )
		pFnSetObjectiveCircleProgress = (UFunction*) UObject::GObjObjects()->Data[ 112330 ];

	Asfxplayercontrollermp_execSetObjectiveCircleProgress_Parms SetObjectiveCircleProgress_Parms;
	SetObjectiveCircleProgress_Parms.nNumComplete = nNumComplete;

	this->ProcessEvent ( pFnSetObjectiveCircleProgress, &SetObjectiveCircleProgress_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.SetScoreHudObjectiveProgress
// [0x00024102] 
// Parameters infos:
// float                          Progress                       ( CPF_Parm )
// unsigned long                  bBoostAnim                     ( CPF_OptionalParm | CPF_Parm )

void Asfxplayercontrollermp::SetScoreHudObjectiveProgress ( float Progress, unsigned long bBoostAnim )
{
	static UFunction* pFnSetScoreHudObjectiveProgress = NULL;

	if ( ! pFnSetScoreHudObjectiveProgress )
		pFnSetScoreHudObjectiveProgress = (UFunction*) UObject::GObjObjects()->Data[ 112326 ];

	Asfxplayercontrollermp_execSetScoreHudObjectiveProgress_Parms SetScoreHudObjectiveProgress_Parms;
	SetScoreHudObjectiveProgress_Parms.Progress = Progress;
	SetScoreHudObjectiveProgress_Parms.bBoostAnim = bBoostAnim;

	this->ProcessEvent ( pFnSetScoreHudObjectiveProgress, &SetScoreHudObjectiveProgress_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.SetScoreHudObjectiveText
// [0x00020102] 
// Parameters infos:
// void*                          ObjectiveText                  ( CPF_Parm )

void Asfxplayercontrollermp::SetScoreHudObjectiveText ( void* ObjectiveText )
{
	static UFunction* pFnSetScoreHudObjectiveText = NULL;

	if ( ! pFnSetScoreHudObjectiveText )
		pFnSetScoreHudObjectiveText = (UFunction*) UObject::GObjObjects()->Data[ 112323 ];

	Asfxplayercontrollermp_execSetScoreHudObjectiveText_Parms SetScoreHudObjectiveText_Parms;
	SetScoreHudObjectiveText_Parms.ObjectiveText = ObjectiveText;

	this->ProcessEvent ( pFnSetScoreHudObjectiveText, &SetScoreHudObjectiveText_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.OnGameConnectionLost
// [0x00020002] 
// Parameters infos:

void Asfxplayercontrollermp::OnGameConnectionLost ( )
{
	static UFunction* pFnOnGameConnectionLost = NULL;

	if ( ! pFnOnGameConnectionLost )
		pFnOnGameConnectionLost = (UFunction*) UObject::GObjObjects()->Data[ 112322 ];

	Asfxplayercontrollermp_execOnGameConnectionLost_Parms OnGameConnectionLost_Parms;

	this->ProcessEvent ( pFnOnGameConnectionLost, &OnGameConnectionLost_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.SetRichPresence
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Asfxplayercontrollermp::eventSetRichPresence ( )
{
	static UFunction* pFnSetRichPresence = NULL;

	if ( ! pFnSetRichPresence )
		pFnSetRichPresence = (UFunction*) UObject::GObjObjects()->Data[ 112306 ];

	Asfxplayercontrollermp_eventSetRichPresence_Parms SetRichPresence_Parms;

	this->ProcessEvent ( pFnSetRichPresence, &SetRichPresence_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ClientWriteOnlinePlayerScores
// [0x010201C0] 
// Parameters infos:
// int                            LeaderboardId                  ( CPF_Parm )

void Asfxplayercontrollermp::ClientWriteOnlinePlayerScores ( int LeaderboardId )
{
	static UFunction* pFnClientWriteOnlinePlayerScores = NULL;

	if ( ! pFnClientWriteOnlinePlayerScores )
		pFnClientWriteOnlinePlayerScores = (UFunction*) UObject::GObjObjects()->Data[ 112304 ];

	Asfxplayercontrollermp_execClientWriteOnlinePlayerScores_Parms ClientWriteOnlinePlayerScores_Parms;
	ClientWriteOnlinePlayerScores_Parms.LeaderboardId = LeaderboardId;

	this->ProcessEvent ( pFnClientWriteOnlinePlayerScores, &ClientWriteOnlinePlayerScores_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ServerSuicide
// [0x002200C2] 
// Parameters infos:

void Asfxplayercontrollermp::ServerSuicide ( )
{
	static UFunction* pFnServerSuicide = NULL;

	if ( ! pFnServerSuicide )
		pFnServerSuicide = (UFunction*) UObject::GObjObjects()->Data[ 112303 ];

	Asfxplayercontrollermp_execServerSuicide_Parms ServerSuicide_Parms;

	this->ProcessEvent ( pFnServerSuicide, &ServerSuicide_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.Spectate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Asfxplayercontrollermp::Spectate ( )
{
	static UFunction* pFnSpectate = NULL;

	if ( ! pFnSpectate )
		pFnSpectate = (UFunction*) UObject::GObjObjects()->Data[ 112302 ];

	Asfxplayercontrollermp_execSpectate_Parms Spectate_Parms;

	this->ProcessEvent ( pFnSpectate, &Spectate_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ViewPrevPlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Asfxplayercontrollermp::ViewPrevPlayer ( )
{
	static UFunction* pFnViewPrevPlayer = NULL;

	if ( ! pFnViewPrevPlayer )
		pFnViewPrevPlayer = (UFunction*) UObject::GObjObjects()->Data[ 112301 ];

	Asfxplayercontrollermp_execViewPrevPlayer_Parms ViewPrevPlayer_Parms;

	this->ProcessEvent ( pFnViewPrevPlayer, &ViewPrevPlayer_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ViewNextPlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Asfxplayercontrollermp::ViewNextPlayer ( )
{
	static UFunction* pFnViewNextPlayer = NULL;

	if ( ! pFnViewNextPlayer )
		pFnViewNextPlayer = (UFunction*) UObject::GObjObjects()->Data[ 112300 ];

	Asfxplayercontrollermp_execViewNextPlayer_Parms ViewNextPlayer_Parms;

	this->ProcessEvent ( pFnViewNextPlayer, &ViewNextPlayer_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.UpdateMPMapsCompleted
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   MapName                        ( CPF_Parm )
// unsigned long                  bIsGoldMap                     ( CPF_Parm )

void Asfxplayercontrollermp::eventUpdateMPMapsCompleted ( struct FName MapName, unsigned long bIsGoldMap )
{
	static UFunction* pFnUpdateMPMapsCompleted = NULL;

	if ( ! pFnUpdateMPMapsCompleted )
		pFnUpdateMPMapsCompleted = (UFunction*) UObject::GObjObjects()->Data[ 112257 ];

	Asfxplayercontrollermp_eventUpdateMPMapsCompleted_Parms UpdateMPMapsCompleted_Parms;
	memcpy ( &UpdateMPMapsCompleted_Parms.MapName, &MapName, 0x8 );
	UpdateMPMapsCompleted_Parms.bIsGoldMap = bIsGoldMap;

	this->ProcessEvent ( pFnUpdateMPMapsCompleted, &UpdateMPMapsCompleted_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ClientWriteLeaderboardStats
// [0x010201C2] 
// Parameters infos:
// class UClass*                  OnlineStatsWriteClass          ( CPF_Parm )

void Asfxplayercontrollermp::ClientWriteLeaderboardStats ( class UClass* OnlineStatsWriteClass )
{
	static UFunction* pFnClientWriteLeaderboardStats = NULL;

	if ( ! pFnClientWriteLeaderboardStats )
		pFnClientWriteLeaderboardStats = (UFunction*) UObject::GObjObjects()->Data[ 112250 ];

	Asfxplayercontrollermp_execClientWriteLeaderboardStats_Parms ClientWriteLeaderboardStats_Parms;
	ClientWriteLeaderboardStats_Parms.OnlineStatsWriteClass = OnlineStatsWriteClass;

	this->ProcessEvent ( pFnClientWriteLeaderboardStats, &ClientWriteLeaderboardStats_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.PawnNeedsCleanup
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxplayercontrollermp::PawnNeedsCleanup ( )
{
	static UFunction* pFnPawnNeedsCleanup = NULL;

	if ( ! pFnPawnNeedsCleanup )
		pFnPawnNeedsCleanup = (UFunction*) UObject::GObjObjects()->Data[ 108570 ];

	Asfxplayercontrollermp_execPawnNeedsCleanup_Parms PawnNeedsCleanup_Parms;

	this->ProcessEvent ( pFnPawnNeedsCleanup, &PawnNeedsCleanup_Parms, NULL );

	return PawnNeedsCleanup_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxplayercontrollermp.HideMatchResultsScreen
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::HideMatchResultsScreen ( )
{
	static UFunction* pFnHideMatchResultsScreen = NULL;

	if ( ! pFnHideMatchResultsScreen )
		pFnHideMatchResultsScreen = (UFunction*) UObject::GObjObjects()->Data[ 112246 ];

	Asfxplayercontrollermp_execHideMatchResultsScreen_Parms HideMatchResultsScreen_Parms;

	this->ProcessEvent ( pFnHideMatchResultsScreen, &HideMatchResultsScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowMatchResultsScreen
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::ShowMatchResultsScreen ( )
{
	static UFunction* pFnShowMatchResultsScreen = NULL;

	if ( ! pFnShowMatchResultsScreen )
		pFnShowMatchResultsScreen = (UFunction*) UObject::GObjObjects()->Data[ 112244 ];

	Asfxplayercontrollermp_execShowMatchResultsScreen_Parms ShowMatchResultsScreen_Parms;

	this->ProcessEvent ( pFnShowMatchResultsScreen, &ShowMatchResultsScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowMPEndOfMatchScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxplayercontrollermp::ShowMPEndOfMatchScreen ( )
{
	static UFunction* pFnShowMPEndOfMatchScreen = NULL;

	if ( ! pFnShowMPEndOfMatchScreen )
		pFnShowMPEndOfMatchScreen = (UFunction*) UObject::GObjObjects()->Data[ 112242 ];

	Asfxplayercontrollermp_execShowMPEndOfMatchScreen_Parms ShowMPEndOfMatchScreen_Parms;

	this->ProcessEvent ( pFnShowMPEndOfMatchScreen, &ShowMPEndOfMatchScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.FinishedWeaponSelectionUI
// [0x00020002] 
// Parameters infos:

void Asfxplayercontrollermp::FinishedWeaponSelectionUI ( )
{
	static UFunction* pFnFinishedWeaponSelectionUI = NULL;

	if ( ! pFnFinishedWeaponSelectionUI )
		pFnFinishedWeaponSelectionUI = (UFunction*) UObject::GObjObjects()->Data[ 112237 ];

	Asfxplayercontrollermp_execFinishedWeaponSelectionUI_Parms FinishedWeaponSelectionUI_Parms;

	this->ProcessEvent ( pFnFinishedWeaponSelectionUI, &FinishedWeaponSelectionUI_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.FinishedMPStoreUI
// [0x00020002] 
// Parameters infos:

void Asfxplayercontrollermp::FinishedMPStoreUI ( )
{
	static UFunction* pFnFinishedMPStoreUI = NULL;

	if ( ! pFnFinishedMPStoreUI )
		pFnFinishedMPStoreUI = (UFunction*) UObject::GObjObjects()->Data[ 112233 ];

	Asfxplayercontrollermp_execFinishedMPStoreUI_Parms FinishedMPStoreUI_Parms;

	this->ProcessEvent ( pFnFinishedMPStoreUI, &FinishedMPStoreUI_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.FinishedLevelUpUI
// [0x00020002] 
// Parameters infos:

void Asfxplayercontrollermp::FinishedLevelUpUI ( )
{
	static UFunction* pFnFinishedLevelUpUI = NULL;

	if ( ! pFnFinishedLevelUpUI )
		pFnFinishedLevelUpUI = (UFunction*) UObject::GObjObjects()->Data[ 112227 ];

	Asfxplayercontrollermp_execFinishedLevelUpUI_Parms FinishedLevelUpUI_Parms;

	this->ProcessEvent ( pFnFinishedLevelUpUI, &FinishedLevelUpUI_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowWeaponSelectionUI
// [0x00024002] 
// Parameters infos:
// struct FScriptDelegate         OnFinishedDelegate             ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void Asfxplayercontrollermp::ShowWeaponSelectionUI ( struct FScriptDelegate OnFinishedDelegate )
{
	static UFunction* pFnShowWeaponSelectionUI = NULL;

	if ( ! pFnShowWeaponSelectionUI )
		pFnShowWeaponSelectionUI = (UFunction*) UObject::GObjObjects()->Data[ 112223 ];

	Asfxplayercontrollermp_execShowWeaponSelectionUI_Parms ShowWeaponSelectionUI_Parms;
	memcpy ( &ShowWeaponSelectionUI_Parms.OnFinishedDelegate, &OnFinishedDelegate, 0xC );

	this->ProcessEvent ( pFnShowWeaponSelectionUI, &ShowWeaponSelectionUI_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowMPStoreUI
// [0x00024002] 
// Parameters infos:
// int                            PromotionalStoreID             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bProcessPurchases              ( CPF_OptionalParm | CPF_Parm )

void Asfxplayercontrollermp::ShowMPStoreUI ( int PromotionalStoreID, unsigned long bProcessPurchases )
{
	static UFunction* pFnShowMPStoreUI = NULL;

	if ( ! pFnShowMPStoreUI )
		pFnShowMPStoreUI = (UFunction*) UObject::GObjObjects()->Data[ 112218 ];

	Asfxplayercontrollermp_execShowMPStoreUI_Parms ShowMPStoreUI_Parms;
	ShowMPStoreUI_Parms.PromotionalStoreID = PromotionalStoreID;
	ShowMPStoreUI_Parms.bProcessPurchases = bProcessPurchases;

	this->ProcessEvent ( pFnShowMPStoreUI, &ShowMPStoreUI_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.PlayerHasCreditsToSpend
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxplayercontrollermp::PlayerHasCreditsToSpend ( )
{
	static UFunction* pFnPlayerHasCreditsToSpend = NULL;

	if ( ! pFnPlayerHasCreditsToSpend )
		pFnPlayerHasCreditsToSpend = (UFunction*) UObject::GObjObjects()->Data[ 110086 ];

	Asfxplayercontrollermp_execPlayerHasCreditsToSpend_Parms PlayerHasCreditsToSpend_Parms;

	this->ProcessEvent ( pFnPlayerHasCreditsToSpend, &PlayerHasCreditsToSpend_Parms, NULL );

	return PlayerHasCreditsToSpend_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxplayercontrollermp.SpawnLevelUpScreen
// [0x00024002] 
// Parameters infos:
// struct FScriptDelegate         onClosedDelegate               ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void Asfxplayercontrollermp::SpawnLevelUpScreen ( struct FScriptDelegate onClosedDelegate )
{
	static UFunction* pFnSpawnLevelUpScreen = NULL;

	if ( ! pFnSpawnLevelUpScreen )
		pFnSpawnLevelUpScreen = (UFunction*) UObject::GObjObjects()->Data[ 112212 ];

	Asfxplayercontrollermp_execSpawnLevelUpScreen_Parms SpawnLevelUpScreen_Parms;
	memcpy ( &SpawnLevelUpScreen_Parms.onClosedDelegate, &onClosedDelegate, 0xC );

	this->ProcessEvent ( pFnSpawnLevelUpScreen, &SpawnLevelUpScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowLevelUpUI
// [0x00024002] 
// Parameters infos:
// struct FScriptDelegate         onClosedDelegate               ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void Asfxplayercontrollermp::ShowLevelUpUI ( struct FScriptDelegate onClosedDelegate )
{
	static UFunction* pFnShowLevelUpUI = NULL;

	if ( ! pFnShowLevelUpUI )
		pFnShowLevelUpUI = (UFunction*) UObject::GObjObjects()->Data[ 112210 ];

	Asfxplayercontrollermp_execShowLevelUpUI_Parms ShowLevelUpUI_Parms;
	memcpy ( &ShowLevelUpUI_Parms.onClosedDelegate, &onClosedDelegate, 0xC );

	this->ProcessEvent ( pFnShowLevelUpUI, &ShowLevelUpUI_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.PlayerHasTalentPointsToSpend
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxplayercontrollermp::PlayerHasTalentPointsToSpend ( )
{
	static UFunction* pFnPlayerHasTalentPointsToSpend = NULL;

	if ( ! pFnPlayerHasTalentPointsToSpend )
		pFnPlayerHasTalentPointsToSpend = (UFunction*) UObject::GObjObjects()->Data[ 110082 ];

	Asfxplayercontrollermp_execPlayerHasTalentPointsToSpend_Parms PlayerHasTalentPointsToSpend_Parms;

	this->ProcessEvent ( pFnPlayerHasTalentPointsToSpend, &PlayerHasTalentPointsToSpend_Parms, NULL );

	return PlayerHasTalentPointsToSpend_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowReinforcementsRevealScreeen
// [0x00024102] 
// Parameters infos:
// struct FScriptDelegate         onClosedDelegate               ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void Asfxplayercontrollermp::ShowReinforcementsRevealScreeen ( struct FScriptDelegate onClosedDelegate )
{
	static UFunction* pFnShowReinforcementsRevealScreeen = NULL;

	if ( ! pFnShowReinforcementsRevealScreeen )
		pFnShowReinforcementsRevealScreeen = (UFunction*) UObject::GObjObjects()->Data[ 112203 ];

	Asfxplayercontrollermp_execShowReinforcementsRevealScreeen_Parms ShowReinforcementsRevealScreeen_Parms;
	memcpy ( &ShowReinforcementsRevealScreeen_Parms.onClosedDelegate, &onClosedDelegate, 0xC );

	this->ProcessEvent ( pFnShowReinforcementsRevealScreeen, &ShowReinforcementsRevealScreeen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowMatchConsumablesScreen
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::ShowMatchConsumablesScreen ( )
{
	static UFunction* pFnShowMatchConsumablesScreen = NULL;

	if ( ! pFnShowMatchConsumablesScreen )
		pFnShowMatchConsumablesScreen = (UFunction*) UObject::GObjObjects()->Data[ 112201 ];

	Asfxplayercontrollermp_execShowMatchConsumablesScreen_Parms ShowMatchConsumablesScreen_Parms;

	this->ProcessEvent ( pFnShowMatchConsumablesScreen, &ShowMatchConsumablesScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowMPAppearanceScreen
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::ShowMPAppearanceScreen ( )
{
	static UFunction* pFnShowMPAppearanceScreen = NULL;

	if ( ! pFnShowMPAppearanceScreen )
		pFnShowMPAppearanceScreen = (UFunction*) UObject::GObjObjects()->Data[ 112199 ];

	Asfxplayercontrollermp_execShowMPAppearanceScreen_Parms ShowMPAppearanceScreen_Parms;

	this->ProcessEvent ( pFnShowMPAppearanceScreen, &ShowMPAppearanceScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.HideMPSelectKitScreen
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::HideMPSelectKitScreen ( )
{
	static UFunction* pFnHideMPSelectKitScreen = NULL;

	if ( ! pFnHideMPSelectKitScreen )
		pFnHideMPSelectKitScreen = (UFunction*) UObject::GObjObjects()->Data[ 112197 ];

	Asfxplayercontrollermp_execHideMPSelectKitScreen_Parms HideMPSelectKitScreen_Parms;

	this->ProcessEvent ( pFnHideMPSelectKitScreen, &HideMPSelectKitScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowMPSelectKitScreen
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::ShowMPSelectKitScreen ( )
{
	static UFunction* pFnShowMPSelectKitScreen = NULL;

	if ( ! pFnShowMPSelectKitScreen )
		pFnShowMPSelectKitScreen = (UFunction*) UObject::GObjObjects()->Data[ 112195 ];

	Asfxplayercontrollermp_execShowMPSelectKitScreen_Parms ShowMPSelectKitScreen_Parms;

	this->ProcessEvent ( pFnShowMPSelectKitScreen, &ShowMPSelectKitScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.HideMatchSettingsScreen
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::HideMatchSettingsScreen ( )
{
	static UFunction* pFnHideMatchSettingsScreen = NULL;

	if ( ! pFnHideMatchSettingsScreen )
		pFnHideMatchSettingsScreen = (UFunction*) UObject::GObjObjects()->Data[ 112192 ];

	Asfxplayercontrollermp_execHideMatchSettingsScreen_Parms HideMatchSettingsScreen_Parms;

	this->ProcessEvent ( pFnHideMatchSettingsScreen, &HideMatchSettingsScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowMatchSettingsScreen
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::ShowMatchSettingsScreen ( )
{
	static UFunction* pFnShowMatchSettingsScreen = NULL;

	if ( ! pFnShowMatchSettingsScreen )
		pFnShowMatchSettingsScreen = (UFunction*) UObject::GObjObjects()->Data[ 112189 ];

	Asfxplayercontrollermp_execShowMatchSettingsScreen_Parms ShowMatchSettingsScreen_Parms;

	this->ProcessEvent ( pFnShowMatchSettingsScreen, &ShowMatchSettingsScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.HideCustomMatchScreen
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::HideCustomMatchScreen ( )
{
	static UFunction* pFnHideCustomMatchScreen = NULL;

	if ( ! pFnHideCustomMatchScreen )
		pFnHideCustomMatchScreen = (UFunction*) UObject::GObjObjects()->Data[ 112186 ];

	Asfxplayercontrollermp_execHideCustomMatchScreen_Parms HideCustomMatchScreen_Parms;

	this->ProcessEvent ( pFnHideCustomMatchScreen, &HideCustomMatchScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowCustomMatchScreen
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::ShowCustomMatchScreen ( )
{
	static UFunction* pFnShowCustomMatchScreen = NULL;

	if ( ! pFnShowCustomMatchScreen )
		pFnShowCustomMatchScreen = (UFunction*) UObject::GObjObjects()->Data[ 112183 ];

	Asfxplayercontrollermp_execShowCustomMatchScreen_Parms ShowCustomMatchScreen_Parms;

	this->ProcessEvent ( pFnShowCustomMatchScreen, &ShowCustomMatchScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.RefreshLobbyScreen
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::RefreshLobbyScreen ( )
{
	static UFunction* pFnRefreshLobbyScreen = NULL;

	if ( ! pFnRefreshLobbyScreen )
		pFnRefreshLobbyScreen = (UFunction*) UObject::GObjObjects()->Data[ 112180 ];

	Asfxplayercontrollermp_execRefreshLobbyScreen_Parms RefreshLobbyScreen_Parms;

	this->ProcessEvent ( pFnRefreshLobbyScreen, &RefreshLobbyScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.HideLobbyScreen
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::HideLobbyScreen ( )
{
	static UFunction* pFnHideLobbyScreen = NULL;

	if ( ! pFnHideLobbyScreen )
		pFnHideLobbyScreen = (UFunction*) UObject::GObjObjects()->Data[ 112178 ];

	Asfxplayercontrollermp_execHideLobbyScreen_Parms HideLobbyScreen_Parms;

	this->ProcessEvent ( pFnHideLobbyScreen, &HideLobbyScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowLobbyScreen
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::ShowLobbyScreen ( )
{
	static UFunction* pFnShowLobbyScreen = NULL;

	if ( ! pFnShowLobbyScreen )
		pFnShowLobbyScreen = (UFunction*) UObject::GObjObjects()->Data[ 112176 ];

	Asfxplayercontrollermp_execShowLobbyScreen_Parms ShowLobbyScreen_Parms;

	this->ProcessEvent ( pFnShowLobbyScreen, &ShowLobbyScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.GamePlayEndedState
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxplayercontrollermp::GamePlayEndedState ( )
{
	static UFunction* pFnGamePlayEndedState = NULL;

	if ( ! pFnGamePlayEndedState )
		pFnGamePlayEndedState = (UFunction*) UObject::GObjObjects()->Data[ 112174 ];

	Asfxplayercontrollermp_execGamePlayEndedState_Parms GamePlayEndedState_Parms;

	this->ProcessEvent ( pFnGamePlayEndedState, &GamePlayEndedState_Parms, NULL );

	return GamePlayEndedState_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxplayercontrollermp.PlayerTick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void Asfxplayercontrollermp::eventPlayerTick ( float DeltaTime )
{
	static UFunction* pFnPlayerTick = NULL;

	if ( ! pFnPlayerTick )
		pFnPlayerTick = (UFunction*) UObject::GObjObjects()->Data[ 112163 ];

	Asfxplayercontrollermp_eventPlayerTick_Parms PlayerTick_Parms;
	PlayerTick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerTick, &PlayerTick_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.EnterStartState
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::EnterStartState ( )
{
	static UFunction* pFnEnterStartState = NULL;

	if ( ! pFnEnterStartState )
		pFnEnterStartState = (UFunction*) UObject::GObjObjects()->Data[ 112154 ];

	Asfxplayercontrollermp_execEnterStartState_Parms EnterStartState_Parms;

	this->ProcessEvent ( pFnEnterStartState, &EnterStartState_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.StopLoadingMovie
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Asfxplayercontrollermp::StopLoadingMovie ( )
{
	static UFunction* pFnStopLoadingMovie = NULL;

	if ( ! pFnStopLoadingMovie )
		pFnStopLoadingMovie = (UFunction*) UObject::GObjObjects()->Data[ 112151 ];

	Asfxplayercontrollermp_execStopLoadingMovie_Parms StopLoadingMovie_Parms;

	this->ProcessEvent ( pFnStopLoadingMovie, &StopLoadingMovie_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.PreClientTravel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 PendingURL                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bIsSeamlessTravel              ( CPF_Parm )

void Asfxplayercontrollermp::eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel )
{
	static UFunction* pFnPreClientTravel = NULL;

	if ( ! pFnPreClientTravel )
		pFnPreClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 112145 ];

	Asfxplayercontrollermp_eventPreClientTravel_Parms PreClientTravel_Parms;
	memcpy ( &PreClientTravel_Parms.PendingURL, &PendingURL, 0xC );
	PreClientTravel_Parms.TravelType = TravelType;
	PreClientTravel_Parms.bIsSeamlessTravel = bIsSeamlessTravel;

	this->ProcessEvent ( pFnPreClientTravel, &PreClientTravel_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.CleanupPawn
// [0x00020002] 
// Parameters infos:

void Asfxplayercontrollermp::CleanupPawn ( )
{
	static UFunction* pFnCleanupPawn = NULL;

	if ( ! pFnCleanupPawn )
		pFnCleanupPawn = (UFunction*) UObject::GObjObjects()->Data[ 112143 ];

	Asfxplayercontrollermp_execCleanupPawn_Parms CleanupPawn_Parms;

	this->ProcessEvent ( pFnCleanupPawn, &CleanupPawn_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.Pause
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void Asfxplayercontrollermp::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 112142 ];

	Asfxplayercontrollermp_execPause_Parms Pause_Parms;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.CreateLobbyFlow
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::CreateLobbyFlow ( )
{
	static UFunction* pFnCreateLobbyFlow = NULL;

	if ( ! pFnCreateLobbyFlow )
		pFnCreateLobbyFlow = (UFunction*) UObject::GObjObjects()->Data[ 112141 ];

	Asfxplayercontrollermp_execCreateLobbyFlow_Parms CreateLobbyFlow_Parms;

	this->ProcessEvent ( pFnCreateLobbyFlow, &CreateLobbyFlow_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.OnWaveFinished
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::OnWaveFinished ( )
{
	static UFunction* pFnOnWaveFinished = NULL;

	if ( ! pFnOnWaveFinished )
		pFnOnWaveFinished = (UFunction*) UObject::GObjObjects()->Data[ 112138 ];

	Asfxplayercontrollermp_execOnWaveFinished_Parms OnWaveFinished_Parms;

	this->ProcessEvent ( pFnOnWaveFinished, &OnWaveFinished_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.TickSaveGame
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::TickSaveGame ( )
{
	static UFunction* pFnTickSaveGame = NULL;

	if ( ! pFnTickSaveGame )
		pFnTickSaveGame = (UFunction*) UObject::GObjObjects()->Data[ 112136 ];

	Asfxplayercontrollermp_execTickSaveGame_Parms TickSaveGame_Parms;

	this->ProcessEvent ( pFnTickSaveGame, &TickSaveGame_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ResetSaveTimer
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::ResetSaveTimer ( )
{
	static UFunction* pFnResetSaveTimer = NULL;

	if ( ! pFnResetSaveTimer )
		pFnResetSaveTimer = (UFunction*) UObject::GObjObjects()->Data[ 112134 ];

	Asfxplayercontrollermp_execResetSaveTimer_Parms ResetSaveTimer_Parms;

	this->ProcessEvent ( pFnResetSaveTimer, &ResetSaveTimer_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ExitConformation_Callback
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Asfxplayercontrollermp::ExitConformation_Callback ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnExitConformation_Callback = NULL;

	if ( ! pFnExitConformation_Callback )
		pFnExitConformation_Callback = (UFunction*) UObject::GObjObjects()->Data[ 112131 ];

	Asfxplayercontrollermp_execExitConformation_Callback_Parms ExitConformation_Callback_Parms;
	ExitConformation_Callback_Parms.bAPressed = bAPressed;
	ExitConformation_Callback_Parms.nContext = nContext;

	this->ProcessEvent ( pFnExitConformation_Callback, &ExitConformation_Callback_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowExitConfirmation
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxplayercontrollermp::ShowExitConfirmation ( )
{
	static UFunction* pFnShowExitConfirmation = NULL;

	if ( ! pFnShowExitConfirmation )
		pFnShowExitConfirmation = (UFunction*) UObject::GObjObjects()->Data[ 112125 ];

	Asfxplayercontrollermp_execShowExitConfirmation_Parms ShowExitConfirmation_Parms;

	this->ProcessEvent ( pFnShowExitConfirmation, &ShowExitConfirmation_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.PleaseWait_Callback
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Asfxplayercontrollermp::PleaseWait_Callback ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnPleaseWait_Callback = NULL;

	if ( ! pFnPleaseWait_Callback )
		pFnPleaseWait_Callback = (UFunction*) UObject::GObjObjects()->Data[ 112122 ];

	Asfxplayercontrollermp_execPleaseWait_Callback_Parms PleaseWait_Callback_Parms;
	PleaseWait_Callback_Parms.bAPressed = bAPressed;
	PleaseWait_Callback_Parms.nContext = nContext;

	this->ProcessEvent ( pFnPleaseWait_Callback, &PleaseWait_Callback_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowLoadingWidget
// [0x00020002] 
// Parameters infos:

void Asfxplayercontrollermp::ShowLoadingWidget ( )
{
	static UFunction* pFnShowLoadingWidget = NULL;

	if ( ! pFnShowLoadingWidget )
		pFnShowLoadingWidget = (UFunction*) UObject::GObjObjects()->Data[ 112121 ];

	Asfxplayercontrollermp_execShowLoadingWidget_Parms ShowLoadingWidget_Parms;

	this->ProcessEvent ( pFnShowLoadingWidget, &ShowLoadingWidget_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ShowPleaseWaitMessage
// [0x00020002] 
// Parameters infos:
// unsigned char                  WaitMessage                    ( CPF_Parm )

void Asfxplayercontrollermp::ShowPleaseWaitMessage ( unsigned char WaitMessage )
{
	static UFunction* pFnShowPleaseWaitMessage = NULL;

	if ( ! pFnShowPleaseWaitMessage )
		pFnShowPleaseWaitMessage = (UFunction*) UObject::GObjObjects()->Data[ 112111 ];

	Asfxplayercontrollermp_execShowPleaseWaitMessage_Parms ShowPleaseWaitMessage_Parms;
	ShowPleaseWaitMessage_Parms.WaitMessage = WaitMessage;

	this->ProcessEvent ( pFnShowPleaseWaitMessage, &ShowPleaseWaitMessage_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.LoadingScreenTimedOut
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  WaitMessage                    ( CPF_Parm )

bool Asfxplayercontrollermp::LoadingScreenTimedOut ( unsigned char WaitMessage )
{
	static UFunction* pFnLoadingScreenTimedOut = NULL;

	if ( ! pFnLoadingScreenTimedOut )
		pFnLoadingScreenTimedOut = (UFunction*) UObject::GObjObjects()->Data[ 112106 ];

	Asfxplayercontrollermp_execLoadingScreenTimedOut_Parms LoadingScreenTimedOut_Parms;
	LoadingScreenTimedOut_Parms.WaitMessage = WaitMessage;

	this->ProcessEvent ( pFnLoadingScreenTimedOut, &LoadingScreenTimedOut_Parms, NULL );

	return LoadingScreenTimedOut_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxplayercontrollermp.UpdateLocalProfileSettingsCache
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Asfxplayercontrollermp::eventUpdateLocalProfileSettingsCache ( )
{
	static UFunction* pFnUpdateLocalProfileSettingsCache = NULL;

	if ( ! pFnUpdateLocalProfileSettingsCache )
		pFnUpdateLocalProfileSettingsCache = (UFunction*) UObject::GObjObjects()->Data[ 112103 ];

	Asfxplayercontrollermp_eventUpdateLocalProfileSettingsCache_Parms UpdateLocalProfileSettingsCache_Parms;

	this->ProcessEvent ( pFnUpdateLocalProfileSettingsCache, &UpdateLocalProfileSettingsCache_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.DeferredCheckLocalPlayer
// [0x00020102] 
// Parameters infos:

void Asfxplayercontrollermp::DeferredCheckLocalPlayer ( )
{
	static UFunction* pFnDeferredCheckLocalPlayer = NULL;

	if ( ! pFnDeferredCheckLocalPlayer )
		pFnDeferredCheckLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 112105 ];

	Asfxplayercontrollermp_execDeferredCheckLocalPlayer_Parms DeferredCheckLocalPlayer_Parms;

	this->ProcessEvent ( pFnDeferredCheckLocalPlayer, &DeferredCheckLocalPlayer_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void Asfxplayercontrollermp::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 112102 ];

	Asfxplayercontrollermp_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.CanSave
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Reason                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Asfxplayercontrollermp::eventCanSave ( struct FString* Reason )
{
	static UFunction* pFnCanSave = NULL;

	if ( ! pFnCanSave )
		pFnCanSave = (UFunction*) UObject::GObjObjects()->Data[ 112099 ];

	Asfxplayercontrollermp_eventCanSave_Parms CanSave_Parms;

	this->ProcessEvent ( pFnCanSave, &CanSave_Parms, NULL );

	if ( Reason )
		memcpy ( Reason, &CanSave_Parms.Reason, 0xC );

	return CanSave_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxplayercontrollermp.CastPower
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void Asfxplayercontrollermp::CastPower ( int nIndex )
{
	static UFunction* pFnCastPower = NULL;

	if ( ! pFnCastPower )
		pFnCastPower = (UFunction*) UObject::GObjObjects()->Data[ 112097 ];

	Asfxplayercontrollermp_execCastPower_Parms CastPower_Parms;
	CastPower_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnCastPower, &CastPower_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.DebugSwapController
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void Asfxplayercontrollermp::DebugSwapController ( )
{
	static UFunction* pFnDebugSwapController = NULL;

	if ( ! pFnDebugSwapController )
		pFnDebugSwapController = (UFunction*) UObject::GObjObjects()->Data[ 112096 ];

	Asfxplayercontrollermp_execDebugSwapController_Parms DebugSwapController_Parms;

	this->ProcessEvent ( pFnDebugSwapController, &DebugSwapController_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void Asfxplayercontrollermp::eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 112093 ];

	Asfxplayercontrollermp_eventPossess_Parms Possess_Parms;
	Possess_Parms.inPawn = inPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void Asfxplayercontrollermp::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 112092 ];

	Asfxplayercontrollermp_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.ReceivedPlayer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void Asfxplayercontrollermp::eventReceivedPlayer ( )
{
	static UFunction* pFnReceivedPlayer = NULL;

	if ( ! pFnReceivedPlayer )
		pFnReceivedPlayer = (UFunction*) UObject::GObjObjects()->Data[ 112090 ];

	Asfxplayercontrollermp_eventReceivedPlayer_Parms ReceivedPlayer_Parms;

	this->ProcessEvent ( pFnReceivedPlayer, &ReceivedPlayer_Parms, NULL );
};

// Function sfxgamempcontent.sfxplayercontrollermp.OnWeaponSelectFinishedDelegate
// [0x00120000] 
// Parameters infos:

void Asfxplayercontrollermp::OnWeaponSelectFinishedDelegate ( )
{
	static UFunction* pFnOnWeaponSelectFinishedDelegate = NULL;

	if ( ! pFnOnWeaponSelectFinishedDelegate )
		pFnOnWeaponSelectFinishedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 112089 ];

	Asfxplayercontrollermp_execOnWeaponSelectFinishedDelegate_Parms OnWeaponSelectFinishedDelegate_Parms;

	this->ProcessEvent ( pFnOnWeaponSelectFinishedDelegate, &OnWeaponSelectFinishedDelegate_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.HealthFailsafe
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxpawn_playermp::HealthFailsafe ( )
{
	static UFunction* pFnHealthFailsafe = NULL;

	if ( ! pFnHealthFailsafe )
		pFnHealthFailsafe = (UFunction*) UObject::GObjObjects()->Data[ 112047 ];

	Asfxpawn_playermp_execHealthFailsafe_Parms HealthFailsafe_Parms;

	this->ProcessEvent ( pFnHealthFailsafe, &HealthFailsafe_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.RagdollFailsafe
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::RagdollFailsafe ( )
{
	static UFunction* pFnRagdollFailsafe = NULL;

	if ( ! pFnRagdollFailsafe )
		pFnRagdollFailsafe = (UFunction*) UObject::GObjObjects()->Data[ 112045 ];

	Asfxpawn_playermp_execRagdollFailsafe_Parms RagdollFailsafe_Parms;

	this->ProcessEvent ( pFnRagdollFailsafe, &RagdollFailsafe_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ResetSyncMovementFailsafeInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxpawn_playermp::ResetSyncMovementFailsafeInfo ( )
{
	static UFunction* pFnResetSyncMovementFailsafeInfo = NULL;

	if ( ! pFnResetSyncMovementFailsafeInfo )
		pFnResetSyncMovementFailsafeInfo = (UFunction*) UObject::GObjObjects()->Data[ 112046 ];

	Asfxpawn_playermp_execResetSyncMovementFailsafeInfo_Parms ResetSyncMovementFailsafeInfo_Parms;

	this->ProcessEvent ( pFnResetSyncMovementFailsafeInfo, &ResetSyncMovementFailsafeInfo_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ProcessSyncMovementFailsafe
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxpawn_playermp::ProcessSyncMovementFailsafe ( )
{
	static UFunction* pFnProcessSyncMovementFailsafe = NULL;

	if ( ! pFnProcessSyncMovementFailsafe )
		pFnProcessSyncMovementFailsafe = (UFunction*) UObject::GObjObjects()->Data[ 112059 ];

	Asfxpawn_playermp_execProcessSyncMovementFailsafe_Parms ProcessSyncMovementFailsafe_Parms;

	this->ProcessEvent ( pFnProcessSyncMovementFailsafe, &ProcessSyncMovementFailsafe_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void Asfxpawn_playermp::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 112060 ];

	Asfxpawn_playermp_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CanDoCustomAction
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            CAction                        ( CPF_Parm )
// class APawn*                   Sync                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )
// int                            PowerCustomAction              ( CPF_OptionalParm | CPF_Parm )

bool Asfxpawn_playermp::eventCanDoCustomAction ( int CAction, class APawn* Sync, unsigned long bForced, int PowerCustomAction )
{
	static UFunction* pFnCanDoCustomAction = NULL;

	if ( ! pFnCanDoCustomAction )
		pFnCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 112039 ];

	Asfxpawn_playermp_eventCanDoCustomAction_Parms CanDoCustomAction_Parms;
	CanDoCustomAction_Parms.CAction = CAction;
	CanDoCustomAction_Parms.Sync = Sync;
	CanDoCustomAction_Parms.bForced = bForced;
	CanDoCustomAction_Parms.PowerCustomAction = PowerCustomAction;

	this->ProcessEvent ( pFnCanDoCustomAction, &CanDoCustomAction_Parms, NULL );

	return CanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.ShouldShowHUDGrenadeCounter
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxpawn_playermp::ShouldShowHUDGrenadeCounter ( )
{
	static UFunction* pFnShouldShowHUDGrenadeCounter = NULL;

	if ( ! pFnShouldShowHUDGrenadeCounter )
		pFnShouldShowHUDGrenadeCounter = (UFunction*) UObject::GObjObjects()->Data[ 112037 ];

	Asfxpawn_playermp_execShouldShowHUDGrenadeCounter_Parms ShouldShowHUDGrenadeCounter_Parms;

	this->ProcessEvent ( pFnShouldShowHUDGrenadeCounter, &ShouldShowHUDGrenadeCounter_Parms, NULL );

	return ShouldShowHUDGrenadeCounter_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.UpdateGameEffects
// [0x00020100] 
// Parameters infos:

void Asfxpawn_playermp::UpdateGameEffects ( )
{
	static UFunction* pFnUpdateGameEffects = NULL;

	if ( ! pFnUpdateGameEffects )
		pFnUpdateGameEffects = (UFunction*) UObject::GObjObjects()->Data[ 112036 ];

	Asfxpawn_playermp_execUpdateGameEffects_Parms UpdateGameEffects_Parms;

	this->ProcessEvent ( pFnUpdateGameEffects, &UpdateGameEffects_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.GetUIAppearanceTag
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName Asfxpawn_playermp::GetUIAppearanceTag ( )
{
	static UFunction* pFnGetUIAppearanceTag = NULL;

	if ( ! pFnGetUIAppearanceTag )
		pFnGetUIAppearanceTag = (UFunction*) UObject::GObjObjects()->Data[ 112034 ];

	Asfxpawn_playermp_execGetUIAppearanceTag_Parms GetUIAppearanceTag_Parms;

	this->ProcessEvent ( pFnGetUIAppearanceTag, &GetUIAppearanceTag_Parms, NULL );

	return GetUIAppearanceTag_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.Destroyed
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 112027 ];

	Asfxpawn_playermp_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void Asfxpawn_playermp::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 112020 ];

	Asfxpawn_playermp_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.SetExecutioner
// [0x00020002] 
// Parameters infos:
// class APawn*                   Killer                         ( CPF_Parm )

void Asfxpawn_playermp::SetExecutioner ( class APawn* Killer )
{
	static UFunction* pFnSetExecutioner = NULL;

	if ( ! pFnSetExecutioner )
		pFnSetExecutioner = (UFunction*) UObject::GObjObjects()->Data[ 112018 ];

	Asfxpawn_playermp_execSetExecutioner_Parms SetExecutioner_Parms;
	SetExecutioner_Parms.Killer = Killer;

	this->ProcessEvent ( pFnSetExecutioner, &SetExecutioner_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.AttemptKillingBlow
// [0x00020002] 
// Parameters infos:
// class APawn*                   Killer                         ( CPF_Parm )

void Asfxpawn_playermp::AttemptKillingBlow ( class APawn* Killer )
{
	static UFunction* pFnAttemptKillingBlow = NULL;

	if ( ! pFnAttemptKillingBlow )
		pFnAttemptKillingBlow = (UFunction*) UObject::GObjObjects()->Data[ 112015 ];

	Asfxpawn_playermp_execAttemptKillingBlow_Parms AttemptKillingBlow_Parms;
	AttemptKillingBlow_Parms.Killer = Killer;

	this->ProcessEvent ( pFnAttemptKillingBlow, &AttemptKillingBlow_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.UpdateMappedPowerDisplay
// [0x00020002] 
// Parameters infos:

void Asfxpawn_playermp::UpdateMappedPowerDisplay ( )
{
	static UFunction* pFnUpdateMappedPowerDisplay = NULL;

	if ( ! pFnUpdateMappedPowerDisplay )
		pFnUpdateMappedPowerDisplay = (UFunction*) UObject::GObjObjects()->Data[ 112011 ];

	Asfxpawn_playermp_execUpdateMappedPowerDisplay_Parms UpdateMappedPowerDisplay_Parms;

	this->ProcessEvent ( pFnUpdateMappedPowerDisplay, &UpdateMappedPowerDisplay_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CanPlayDeathEffect
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxpawn_playermp::CanPlayDeathEffect ( )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 112009 ];

	Asfxpawn_playermp_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.UseReviveConsumablePower
// [0x00020002] 
// Parameters infos:

void Asfxpawn_playermp::UseReviveConsumablePower ( )
{
	static UFunction* pFnUseReviveConsumablePower = NULL;

	if ( ! pFnUseReviveConsumablePower )
		pFnUseReviveConsumablePower = (UFunction*) UObject::GObjObjects()->Data[ 112006 ];

	Asfxpawn_playermp_execUseReviveConsumablePower_Parms UseReviveConsumablePower_Parms;

	this->ProcessEvent ( pFnUseReviveConsumablePower, &UseReviveConsumablePower_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.AutoMapPC
// [0x00020002] 
// Parameters infos:

void Asfxpawn_playermp::AutoMapPC ( )
{
	static UFunction* pFnAutoMapPC = NULL;

	if ( ! pFnAutoMapPC )
		pFnAutoMapPC = (UFunction*) UObject::GObjObjects()->Data[ 111997 ];

	Asfxpawn_playermp_execAutoMapPC_Parms AutoMapPC_Parms;

	this->ProcessEvent ( pFnAutoMapPC, &AutoMapPC_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.AutoMapXbox
// [0x00020002] 
// Parameters infos:

void Asfxpawn_playermp::AutoMapXbox ( )
{
	static UFunction* pFnAutoMapXbox = NULL;

	if ( ! pFnAutoMapXbox )
		pFnAutoMapXbox = (UFunction*) UObject::GObjObjects()->Data[ 111995 ];

	Asfxpawn_playermp_execAutoMapXbox_Parms AutoMapXbox_Parms;

	this->ProcessEvent ( pFnAutoMapXbox, &AutoMapXbox_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ShouldTossWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              ChkWeapon                      ( CPF_Parm )
// class ASFXWeapon*              NewWeapon                      ( CPF_Parm )

bool Asfxpawn_playermp::ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon )
{
	static UFunction* pFnShouldTossWeapon = NULL;

	if ( ! pFnShouldTossWeapon )
		pFnShouldTossWeapon = (UFunction*) UObject::GObjObjects()->Data[ 111991 ];

	Asfxpawn_playermp_execShouldTossWeapon_Parms ShouldTossWeapon_Parms;
	ShouldTossWeapon_Parms.ChkWeapon = ChkWeapon;
	ShouldTossWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnShouldTossWeapon, &ShouldTossWeapon_Parms, NULL );

	return ShouldTossWeapon_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.InCombat
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxpawn_playermp::InCombat ( )
{
	static UFunction* pFnInCombat = NULL;

	if ( ! pFnInCombat )
		pFnInCombat = (UFunction*) UObject::GObjObjects()->Data[ 111989 ];

	Asfxpawn_playermp_execInCombat_Parms InCombat_Parms;

	this->ProcessEvent ( pFnInCombat, &InCombat_Parms, NULL );

	return InCombat_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool Asfxpawn_playermp::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 111983 ];

	Asfxpawn_playermp_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void Asfxpawn_playermp::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 111980 ];

	Asfxpawn_playermp_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.LoadWeaponModData
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::LoadWeaponModData ( )
{
	static UFunction* pFnLoadWeaponModData = NULL;

	if ( ! pFnLoadWeaponModData )
		pFnLoadWeaponModData = (UFunction*) UObject::GObjObjects()->Data[ 111970 ];

	Asfxpawn_playermp_execLoadWeaponModData_Parms LoadWeaponModData_Parms;

	this->ProcessEvent ( pFnLoadWeaponModData, &LoadWeaponModData_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.LoadPowerData
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::LoadPowerData ( )
{
	static UFunction* pFnLoadPowerData = NULL;

	if ( ! pFnLoadPowerData )
		pFnLoadPowerData = (UFunction*) UObject::GObjObjects()->Data[ 111955 ];

	Asfxpawn_playermp_execLoadPowerData_Parms LoadPowerData_Parms;

	this->ProcessEvent ( pFnLoadPowerData, &LoadPowerData_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.IsTestFrameworkSetupComplete
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxpawn_playermp::IsTestFrameworkSetupComplete ( )
{
	static UFunction* pFnIsTestFrameworkSetupComplete = NULL;

	if ( ! pFnIsTestFrameworkSetupComplete )
		pFnIsTestFrameworkSetupComplete = (UFunction*) UObject::GObjObjects()->Data[ 111953 ];

	Asfxpawn_playermp_execIsTestFrameworkSetupComplete_Parms IsTestFrameworkSetupComplete_Parms;

	this->ProcessEvent ( pFnIsTestFrameworkSetupComplete, &IsTestFrameworkSetupComplete_Parms, NULL );

	return IsTestFrameworkSetupComplete_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.LoadWeapons
// [0x00020002] 
// Parameters infos:

void Asfxpawn_playermp::LoadWeapons ( )
{
	static UFunction* pFnLoadWeapons = NULL;

	if ( ! pFnLoadWeapons )
		pFnLoadWeapons = (UFunction*) UObject::GObjObjects()->Data[ 111945 ];

	Asfxpawn_playermp_execLoadWeapons_Parms LoadWeapons_Parms;

	this->ProcessEvent ( pFnLoadWeapons, &LoadWeapons_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CreateWeapons
// [0x00024002] 
// Parameters infos:
// class USFXLoadoutData*         ChkLoadout                     ( CPF_Parm )
// unsigned long                  bForceFromEngineLoadout        ( CPF_OptionalParm | CPF_Parm )

void Asfxpawn_playermp::CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout )
{
	static UFunction* pFnCreateWeapons = NULL;

	if ( ! pFnCreateWeapons )
		pFnCreateWeapons = (UFunction*) UObject::GObjObjects()->Data[ 111942 ];

	Asfxpawn_playermp_execCreateWeapons_Parms CreateWeapons_Parms;
	CreateWeapons_Parms.ChkLoadout = ChkLoadout;
	CreateWeapons_Parms.bForceFromEngineLoadout = bForceFromEngineLoadout;

	this->ProcessEvent ( pFnCreateWeapons, &CreateWeapons_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.GetFullName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Asfxpawn_playermp::GetFullName ( )
{
	static UFunction* pFnGetFullName = NULL;

	if ( ! pFnGetFullName )
		pFnGetFullName = (UFunction*) UObject::GObjObjects()->Data[ 111940 ];

	Asfxpawn_playermp_execGetFullName_Parms GetFullName_Parms;

	this->ProcessEvent ( pFnGetFullName, &GetFullName_Parms, NULL );

	return GetFullName_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.DeferredSetRichPresence
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::DeferredSetRichPresence ( )
{
	static UFunction* pFnDeferredSetRichPresence = NULL;

	if ( ! pFnDeferredSetRichPresence )
		pFnDeferredSetRichPresence = (UFunction*) UObject::GObjObjects()->Data[ 111939 ];

	Asfxpawn_playermp_execDeferredSetRichPresence_Parms DeferredSetRichPresence_Parms;

	this->ProcessEvent ( pFnDeferredSetRichPresence, &DeferredSetRichPresence_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.StopLoadingMovie
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::StopLoadingMovie ( )
{
	static UFunction* pFnStopLoadingMovie = NULL;

	if ( ! pFnStopLoadingMovie )
		pFnStopLoadingMovie = (UFunction*) UObject::GObjObjects()->Data[ 111937 ];

	Asfxpawn_playermp_execStopLoadingMovie_Parms StopLoadingMovie_Parms;

	this->ProcessEvent ( pFnStopLoadingMovie, &StopLoadingMovie_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.DeferredPostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::DeferredPostBeginPlay ( )
{
	static UFunction* pFnDeferredPostBeginPlay = NULL;

	if ( ! pFnDeferredPostBeginPlay )
		pFnDeferredPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 111904 ];

	Asfxpawn_playermp_execDeferredPostBeginPlay_Parms DeferredPostBeginPlay_Parms;

	this->ProcessEvent ( pFnDeferredPostBeginPlay, &DeferredPostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 111902 ];

	Asfxpawn_playermp_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ServerPermaDeath
// [0x002200C2] 
// Parameters infos:

void Asfxpawn_playermp::ServerPermaDeath ( )
{
	static UFunction* pFnServerPermaDeath = NULL;

	if ( ! pFnServerPermaDeath )
		pFnServerPermaDeath = (UFunction*) UObject::GObjObjects()->Data[ 111899 ];

	Asfxpawn_playermp_execServerPermaDeath_Parms ServerPermaDeath_Parms;

	this->ProcessEvent ( pFnServerPermaDeath, &ServerPermaDeath_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PermaDeath
// [0x00020002] 
// Parameters infos:

void Asfxpawn_playermp::PermaDeath ( )
{
	static UFunction* pFnPermaDeath = NULL;

	if ( ! pFnPermaDeath )
		pFnPermaDeath = (UFunction*) UObject::GObjObjects()->Data[ 111897 ];

	Asfxpawn_playermp_execPermaDeath_Parms PermaDeath_Parms;

	this->ProcessEvent ( pFnPermaDeath, &PermaDeath_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.StartSpectatorCam
// [0x00020002] 
// Parameters infos:

void Asfxpawn_playermp::StartSpectatorCam ( )
{
	static UFunction* pFnStartSpectatorCam = NULL;

	if ( ! pFnStartSpectatorCam )
		pFnStartSpectatorCam = (UFunction*) UObject::GObjObjects()->Data[ 111895 ];

	Asfxpawn_playermp_execStartSpectatorCam_Parms StartSpectatorCam_Parms;

	this->ProcessEvent ( pFnStartSpectatorCam, &StartSpectatorCam_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PermaDeadChanged
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::PermaDeadChanged ( )
{
	static UFunction* pFnPermaDeadChanged = NULL;

	if ( ! pFnPermaDeadChanged )
		pFnPermaDeadChanged = (UFunction*) UObject::GObjObjects()->Data[ 111891 ];

	Asfxpawn_playermp_execPermaDeadChanged_Parms PermaDeadChanged_Parms;

	this->ProcessEvent ( pFnPermaDeadChanged, &PermaDeadChanged_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.Resurrect
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          PercentOfHealthRegained        ( CPF_Parm )
// unsigned long                  bIsInstantaneous               ( CPF_Parm )

bool Asfxpawn_playermp::eventResurrect ( float PercentOfHealthRegained, unsigned long bIsInstantaneous )
{
	static UFunction* pFnResurrect = NULL;

	if ( ! pFnResurrect )
		pFnResurrect = (UFunction*) UObject::GObjObjects()->Data[ 111887 ];

	Asfxpawn_playermp_eventResurrect_Parms Resurrect_Parms;
	Resurrect_Parms.PercentOfHealthRegained = PercentOfHealthRegained;
	Resurrect_Parms.bIsInstantaneous = bIsInstantaneous;

	this->ProcessEvent ( pFnResurrect, &Resurrect_Parms, NULL );

	return Resurrect_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.PreClientTravel
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::PreClientTravel ( )
{
	static UFunction* pFnPreClientTravel = NULL;

	if ( ! pFnPreClientTravel )
		pFnPreClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 111884 ];

	Asfxpawn_playermp_execPreClientTravel_Parms PreClientTravel_Parms;

	this->ProcessEvent ( pFnPreClientTravel, &PreClientTravel_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.IsReadyForExecution
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class Asfxpawn*                Killer                         ( CPF_Parm )

bool Asfxpawn_playermp::IsReadyForExecution ( class Asfxpawn* Killer )
{
	static UFunction* pFnIsReadyForExecution = NULL;

	if ( ! pFnIsReadyForExecution )
		pFnIsReadyForExecution = (UFunction*) UObject::GObjObjects()->Data[ 111880 ];

	Asfxpawn_playermp_execIsReadyForExecution_Parms IsReadyForExecution_Parms;
	IsReadyForExecution_Parms.Killer = Killer;

	this->ProcessEvent ( pFnIsReadyForExecution, &IsReadyForExecution_Parms, NULL );

	return IsReadyForExecution_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.IsDeadUpdated
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::IsDeadUpdated ( )
{
	static UFunction* pFnIsDeadUpdated = NULL;

	if ( ! pFnIsDeadUpdated )
		pFnIsDeadUpdated = (UFunction*) UObject::GObjObjects()->Data[ 111850 ];

	Asfxpawn_playermp_execIsDeadUpdated_Parms IsDeadUpdated_Parms;

	this->ProcessEvent ( pFnIsDeadUpdated, &IsDeadUpdated_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.StartRevive
// [0x00020102] 
// Parameters infos:
// class ASFXPawn_PlayerParty*    TargetPawn                     ( CPF_Parm )

void Asfxpawn_playermp::StartRevive ( class ASFXPawn_PlayerParty* TargetPawn )
{
	static UFunction* pFnStartRevive = NULL;

	if ( ! pFnStartRevive )
		pFnStartRevive = (UFunction*) UObject::GObjObjects()->Data[ 111848 ];

	Asfxpawn_playermp_execStartRevive_Parms StartRevive_Parms;
	StartRevive_Parms.TargetPawn = TargetPawn;

	this->ProcessEvent ( pFnStartRevive, &StartRevive_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.FinalizeProcessFellOutOfWorld
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::FinalizeProcessFellOutOfWorld ( )
{
	static UFunction* pFnFinalizeProcessFellOutOfWorld = NULL;

	if ( ! pFnFinalizeProcessFellOutOfWorld )
		pFnFinalizeProcessFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 111846 ];

	Asfxpawn_playermp_execFinalizeProcessFellOutOfWorld_Parms FinalizeProcessFellOutOfWorld_Parms;

	this->ProcessEvent ( pFnFinalizeProcessFellOutOfWorld, &FinalizeProcessFellOutOfWorld_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ServerFellOutOfWorldImpl
// [0x002200C2] 
// Parameters infos:

void Asfxpawn_playermp::ServerFellOutOfWorldImpl ( )
{
	static UFunction* pFnServerFellOutOfWorldImpl = NULL;

	if ( ! pFnServerFellOutOfWorldImpl )
		pFnServerFellOutOfWorldImpl = (UFunction*) UObject::GObjObjects()->Data[ 111847 ];

	Asfxpawn_playermp_execServerFellOutOfWorldImpl_Parms ServerFellOutOfWorldImpl_Parms;

	this->ProcessEvent ( pFnServerFellOutOfWorldImpl, &ServerFellOutOfWorldImpl_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.FellOutOfWorldImpl
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void Asfxpawn_playermp::eventFellOutOfWorldImpl ( )
{
	static UFunction* pFnFellOutOfWorldImpl = NULL;

	if ( ! pFnFellOutOfWorldImpl )
		pFnFellOutOfWorldImpl = (UFunction*) UObject::GObjObjects()->Data[ 111844 ];

	Asfxpawn_playermp_eventFellOutOfWorldImpl_Parms FellOutOfWorldImpl_Parms;

	this->ProcessEvent ( pFnFellOutOfWorldImpl, &FellOutOfWorldImpl_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.BioBaseRemovedFromWorld
// [0x00020100] 
// Parameters infos:

void Asfxpawn_playermp::BioBaseRemovedFromWorld ( )
{
	static UFunction* pFnBioBaseRemovedFromWorld = NULL;

	if ( ! pFnBioBaseRemovedFromWorld )
		pFnBioBaseRemovedFromWorld = (UFunction*) UObject::GObjObjects()->Data[ 111843 ];

	Asfxpawn_playermp_execBioBaseRemovedFromWorld_Parms BioBaseRemovedFromWorld_Parms;

	this->ProcessEvent ( pFnBioBaseRemovedFromWorld, &BioBaseRemovedFromWorld_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.OutsideWorldBounds
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::OutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = (UFunction*) UObject::GObjObjects()->Data[ 111842 ];

	Asfxpawn_playermp_execOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.FellOutOfWorld
// [0x00020102] 
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void Asfxpawn_playermp::FellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 111840 ];

	Asfxpawn_playermp_execFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ApplyCustomizationToActor
// [0x00024002] 
// Parameters infos:
// class AActor*                  InTarget                       ( CPF_Parm )
// class USFXCustomizationInstance* InSettings                     ( CPF_OptionalParm | CPF_Parm )
// int                            UIWorldConfigFlags             ( CPF_OptionalParm | CPF_Parm )

void Asfxpawn_playermp::ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags )
{
	static UFunction* pFnApplyCustomizationToActor = NULL;

	if ( ! pFnApplyCustomizationToActor )
		pFnApplyCustomizationToActor = (UFunction*) UObject::GObjObjects()->Data[ 111836 ];

	Asfxpawn_playermp_execApplyCustomizationToActor_Parms ApplyCustomizationToActor_Parms;
	ApplyCustomizationToActor_Parms.InTarget = InTarget;
	ApplyCustomizationToActor_Parms.InSettings = InSettings;
	ApplyCustomizationToActor_Parms.UIWorldConfigFlags = UIWorldConfigFlags;

	this->ProcessEvent ( pFnApplyCustomizationToActor, &ApplyCustomizationToActor_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.GetMPAppearanceVariables
// [0x00420102] 
// Parameters infos:
// int                            Tint1                          ( CPF_Parm | CPF_OutParm )
// int                            Tint2                          ( CPF_Parm | CPF_OutParm )
// int                            Pattern                        ( CPF_Parm | CPF_OutParm )
// int                            PatternColor                   ( CPF_Parm | CPF_OutParm )
// int                            Phong                          ( CPF_Parm | CPF_OutParm )
// int                            Emissive                       ( CPF_Parm | CPF_OutParm )
// int                            SkinTone                       ( CPF_Parm | CPF_OutParm )

void Asfxpawn_playermp::GetMPAppearanceVariables ( int* Tint1, int* Tint2, int* Pattern, int* PatternColor, int* Phong, int* Emissive, int* SkinTone )
{
	static UFunction* pFnGetMPAppearanceVariables = NULL;

	if ( ! pFnGetMPAppearanceVariables )
		pFnGetMPAppearanceVariables = (UFunction*) UObject::GObjObjects()->Data[ 111828 ];

	Asfxpawn_playermp_execGetMPAppearanceVariables_Parms GetMPAppearanceVariables_Parms;

	this->ProcessEvent ( pFnGetMPAppearanceVariables, &GetMPAppearanceVariables_Parms, NULL );

	if ( Tint1 )
		*Tint1 = GetMPAppearanceVariables_Parms.Tint1;

	if ( Tint2 )
		*Tint2 = GetMPAppearanceVariables_Parms.Tint2;

	if ( Pattern )
		*Pattern = GetMPAppearanceVariables_Parms.Pattern;

	if ( PatternColor )
		*PatternColor = GetMPAppearanceVariables_Parms.PatternColor;

	if ( Phong )
		*Phong = GetMPAppearanceVariables_Parms.Phong;

	if ( Emissive )
		*Emissive = GetMPAppearanceVariables_Parms.Emissive;

	if ( SkinTone )
		*SkinTone = GetMPAppearanceVariables_Parms.SkinTone;
};

// Function sfxgamempcontent.sfxpawn_playermp.SetMPAppearanceVariables
// [0x00020102] 
// Parameters infos:
// int                            Tint1                          ( CPF_Parm )
// int                            Tint2                          ( CPF_Parm )
// int                            Pattern                        ( CPF_Parm )
// int                            PatternColor                   ( CPF_Parm )
// int                            Phong                          ( CPF_Parm )
// int                            Emissive                       ( CPF_Parm )
// int                            SkinTone                       ( CPF_Parm )

void Asfxpawn_playermp::SetMPAppearanceVariables ( int Tint1, int Tint2, int Pattern, int PatternColor, int Phong, int Emissive, int SkinTone )
{
	static UFunction* pFnSetMPAppearanceVariables = NULL;

	if ( ! pFnSetMPAppearanceVariables )
		pFnSetMPAppearanceVariables = (UFunction*) UObject::GObjObjects()->Data[ 111820 ];

	Asfxpawn_playermp_execSetMPAppearanceVariables_Parms SetMPAppearanceVariables_Parms;
	SetMPAppearanceVariables_Parms.Tint1 = Tint1;
	SetMPAppearanceVariables_Parms.Tint2 = Tint2;
	SetMPAppearanceVariables_Parms.Pattern = Pattern;
	SetMPAppearanceVariables_Parms.PatternColor = PatternColor;
	SetMPAppearanceVariables_Parms.Phong = Phong;
	SetMPAppearanceVariables_Parms.Emissive = Emissive;
	SetMPAppearanceVariables_Parms.SkinTone = SkinTone;

	this->ProcessEvent ( pFnSetMPAppearanceVariables, &SetMPAppearanceVariables_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.UpdateAppearance
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::UpdateAppearance ( )
{
	static UFunction* pFnUpdateAppearance = NULL;

	if ( ! pFnUpdateAppearance )
		pFnUpdateAppearance = (UFunction*) UObject::GObjObjects()->Data[ 111819 ];

	Asfxpawn_playermp_execUpdateAppearance_Parms UpdateAppearance_Parms;

	this->ProcessEvent ( pFnUpdateAppearance, &UpdateAppearance_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CopyPawnAppearance
// [0x00020102] 
// Parameters infos:
// class ABioPawn*                SourcePawn                     ( CPF_Parm )

void Asfxpawn_playermp::CopyPawnAppearance ( class ABioPawn* SourcePawn )
{
	static UFunction* pFnCopyPawnAppearance = NULL;

	if ( ! pFnCopyPawnAppearance )
		pFnCopyPawnAppearance = (UFunction*) UObject::GObjObjects()->Data[ 111809 ];

	Asfxpawn_playermp_execCopyPawnAppearance_Parms CopyPawnAppearance_Parms;
	CopyPawnAppearance_Parms.SourcePawn = SourcePawn;

	this->ProcessEvent ( pFnCopyPawnAppearance, &CopyPawnAppearance_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CheckEnterCombat
// [0x00020000] 
// Parameters infos:

void Asfxpawn_playermp::CheckEnterCombat ( )
{
	static UFunction* pFnCheckEnterCombat = NULL;

	if ( ! pFnCheckEnterCombat )
		pFnCheckEnterCombat = (UFunction*) UObject::GObjObjects()->Data[ 111808 ];

	Asfxpawn_playermp_execCheckEnterCombat_Parms CheckEnterCombat_Parms;

	this->ProcessEvent ( pFnCheckEnterCombat, &CheckEnterCombat_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PlayerRevivedMessage
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::PlayerRevivedMessage ( )
{
	static UFunction* pFnPlayerRevivedMessage = NULL;

	if ( ! pFnPlayerRevivedMessage )
		pFnPlayerRevivedMessage = (UFunction*) UObject::GObjObjects()->Data[ 111805 ];

	Asfxpawn_playermp_execPlayerRevivedMessage_Parms PlayerRevivedMessage_Parms;

	this->ProcessEvent ( pFnPlayerRevivedMessage, &PlayerRevivedMessage_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PlayerKilledMessage
// [0x00020102] 
// Parameters infos:

void Asfxpawn_playermp::PlayerKilledMessage ( )
{
	static UFunction* pFnPlayerKilledMessage = NULL;

	if ( ! pFnPlayerKilledMessage )
		pFnPlayerKilledMessage = (UFunction*) UObject::GObjObjects()->Data[ 111800 ];

	Asfxpawn_playermp_execPlayerKilledMessage_Parms PlayerKilledMessage_Parms;

	this->ProcessEvent ( pFnPlayerKilledMessage, &PlayerKilledMessage_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void Asfxpawn_playermp::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 111798 ];

	Asfxpawn_playermp_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.GetActorGameName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Asfxpawn_playermp::GetActorGameName ( )
{
	static UFunction* pFnGetActorGameName = NULL;

	if ( ! pFnGetActorGameName )
		pFnGetActorGameName = (UFunction*) UObject::GObjObjects()->Data[ 111795 ];

	Asfxpawn_playermp_execGetActorGameName_Parms GetActorGameName_Parms;

	this->ProcessEvent ( pFnGetActorGameName, &GetActorGameName_Parms, NULL );

	return GetActorGameName_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.GetObjectiveScoreBudget
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Asfxwavecoordinator_hordeoperation::GetObjectiveScoreBudget ( )
{
	static UFunction* pFnGetObjectiveScoreBudget = NULL;

	if ( ! pFnGetObjectiveScoreBudget )
		pFnGetObjectiveScoreBudget = (UFunction*) UObject::GObjObjects()->Data[ 113471 ];

	Asfxwavecoordinator_hordeoperation_execGetObjectiveScoreBudget_Parms GetObjectiveScoreBudget_Parms;

	this->ProcessEvent ( pFnGetObjectiveScoreBudget, &GetObjectiveScoreBudget_Parms, NULL );

	return GetObjectiveScoreBudget_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.GetObjectiveCreditBudget
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Asfxwavecoordinator_hordeoperation::GetObjectiveCreditBudget ( )
{
	static UFunction* pFnGetObjectiveCreditBudget = NULL;

	if ( ! pFnGetObjectiveCreditBudget )
		pFnGetObjectiveCreditBudget = (UFunction*) UObject::GObjObjects()->Data[ 113468 ];

	Asfxwavecoordinator_hordeoperation_execGetObjectiveCreditBudget_Parms GetObjectiveCreditBudget_Parms;

	this->ProcessEvent ( pFnGetObjectiveCreditBudget, &GetObjectiveCreditBudget_Parms, NULL );

	return GetObjectiveCreditBudget_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.GetEnemyScoreBudget
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Asfxwavecoordinator_hordeoperation::GetEnemyScoreBudget ( )
{
	static UFunction* pFnGetEnemyScoreBudget = NULL;

	if ( ! pFnGetEnemyScoreBudget )
		pFnGetEnemyScoreBudget = (UFunction*) UObject::GObjObjects()->Data[ 113463 ];

	Asfxwavecoordinator_hordeoperation_execGetEnemyScoreBudget_Parms GetEnemyScoreBudget_Parms;

	this->ProcessEvent ( pFnGetEnemyScoreBudget, &GetEnemyScoreBudget_Parms, NULL );

	return GetEnemyScoreBudget_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.PlayPlayerAcknowledgment
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// float                          DelayTime                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  PlayObjectiveBegin             ( CPF_OptionalParm | CPF_Parm )

void Asfxwavecoordinator_hordeoperation::PlayPlayerAcknowledgment ( float DelayTime, unsigned long PlayObjectiveBegin )
{
	static UFunction* pFnPlayPlayerAcknowledgment = NULL;

	if ( ! pFnPlayPlayerAcknowledgment )
		pFnPlayPlayerAcknowledgment = (UFunction*) UObject::GObjObjects()->Data[ 111780 ];

	Asfxwavecoordinator_hordeoperation_execPlayPlayerAcknowledgment_Parms PlayPlayerAcknowledgment_Parms;
	PlayPlayerAcknowledgment_Parms.DelayTime = DelayTime;
	PlayPlayerAcknowledgment_Parms.PlayObjectiveBegin = PlayObjectiveBegin;

	this->ProcessEvent ( pFnPlayPlayerAcknowledgment, &PlayPlayerAcknowledgment_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.PlayAssassinationVOEvent
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   EventName                      ( CPF_Parm )

float Asfxwavecoordinator_hordeoperation::PlayAssassinationVOEvent ( struct FName EventName )
{
	static UFunction* pFnPlayAssassinationVOEvent = NULL;

	if ( ! pFnPlayAssassinationVOEvent )
		pFnPlayAssassinationVOEvent = (UFunction*) UObject::GObjObjects()->Data[ 108386 ];

	Asfxwavecoordinator_hordeoperation_execPlayAssassinationVOEvent_Parms PlayAssassinationVOEvent_Parms;
	memcpy ( &PlayAssassinationVOEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnPlayAssassinationVOEvent, &PlayAssassinationVOEvent_Parms, NULL );

	return PlayAssassinationVOEvent_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.PlayHordeWaveDoneVO
// [0x00080002] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::PlayHordeWaveDoneVO ( )
{
	static UFunction* pFnPlayHordeWaveDoneVO = NULL;

	if ( ! pFnPlayHordeWaveDoneVO )
		pFnPlayHordeWaveDoneVO = (UFunction*) UObject::GObjObjects()->Data[ 113456 ];

	Asfxwavecoordinator_hordeoperation_execPlayHordeWaveDoneVO_Parms PlayHordeWaveDoneVO_Parms;

	this->ProcessEvent ( pFnPlayHordeWaveDoneVO, &PlayHordeWaveDoneVO_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.PlayHalfWavesDoneVO
// [0x00080002] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::PlayHalfWavesDoneVO ( )
{
	static UFunction* pFnPlayHalfWavesDoneVO = NULL;

	if ( ! pFnPlayHalfWavesDoneVO )
		pFnPlayHalfWavesDoneVO = (UFunction*) UObject::GObjObjects()->Data[ 113455 ];

	Asfxwavecoordinator_hordeoperation_execPlayHalfWavesDoneVO_Parms PlayHalfWavesDoneVO_Parms;

	this->ProcessEvent ( pFnPlayHalfWavesDoneVO, &PlayHalfWavesDoneVO_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.PlayEndWaveCongratulationsVO
// [0x00080002] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::PlayEndWaveCongratulationsVO ( )
{
	static UFunction* pFnPlayEndWaveCongratulationsVO = NULL;

	if ( ! pFnPlayEndWaveCongratulationsVO )
		pFnPlayEndWaveCongratulationsVO = (UFunction*) UObject::GObjObjects()->Data[ 113451 ];

	Asfxwavecoordinator_hordeoperation_execPlayEndWaveCongratulationsVO_Parms PlayEndWaveCongratulationsVO_Parms;

	this->ProcessEvent ( pFnPlayEndWaveCongratulationsVO, &PlayEndWaveCongratulationsVO_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.OnSingleEnemyRemaining
// [0x00020002] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::OnSingleEnemyRemaining ( )
{
	static UFunction* pFnOnSingleEnemyRemaining = NULL;

	if ( ! pFnOnSingleEnemyRemaining )
		pFnOnSingleEnemyRemaining = (UFunction*) UObject::GObjObjects()->Data[ 113447 ];

	Asfxwavecoordinator_hordeoperation_execOnSingleEnemyRemaining_Parms OnSingleEnemyRemaining_Parms;

	this->ProcessEvent ( pFnOnSingleEnemyRemaining, &OnSingleEnemyRemaining_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.PlayHordeGameStartedVO
// [0x00080002] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::PlayHordeGameStartedVO ( )
{
	static UFunction* pFnPlayHordeGameStartedVO = NULL;

	if ( ! pFnPlayHordeGameStartedVO )
		pFnPlayHordeGameStartedVO = (UFunction*) UObject::GObjObjects()->Data[ 113446 ];

	Asfxwavecoordinator_hordeoperation_execPlayHordeGameStartedVO_Parms PlayHordeGameStartedVO_Parms;

	this->ProcessEvent ( pFnPlayHordeGameStartedVO, &PlayHordeGameStartedVO_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.PlayInstructionVO
// [0x00080002] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::PlayInstructionVO ( )
{
	static UFunction* pFnPlayInstructionVO = NULL;

	if ( ! pFnPlayInstructionVO )
		pFnPlayInstructionVO = (UFunction*) UObject::GObjObjects()->Data[ 113445 ];

	Asfxwavecoordinator_hordeoperation_execPlayInstructionVO_Parms PlayInstructionVO_Parms;

	this->ProcessEvent ( pFnPlayInstructionVO, &PlayInstructionVO_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.PlayManDownVO
// [0x00080002] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::PlayManDownVO ( )
{
	static UFunction* pFnPlayManDownVO = NULL;

	if ( ! pFnPlayManDownVO )
		pFnPlayManDownVO = (UFunction*) UObject::GObjObjects()->Data[ 113442 ];

	Asfxwavecoordinator_hordeoperation_execPlayManDownVO_Parms PlayManDownVO_Parms;

	this->ProcessEvent ( pFnPlayManDownVO, &PlayManDownVO_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.PawnDowned
// [0x00020102] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void Asfxwavecoordinator_hordeoperation::PawnDowned ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnDowned = NULL;

	if ( ! pFnPawnDowned )
		pFnPawnDowned = (UFunction*) UObject::GObjObjects()->Data[ 113440 ];

	Asfxwavecoordinator_hordeoperation_execPawnDowned_Parms PawnDowned_Parms;
	PawnDowned_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnDowned, &PawnDowned_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.ClientHandleJoinInProgress
// [0x00020102] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::ClientHandleJoinInProgress ( )
{
	static UFunction* pFnClientHandleJoinInProgress = NULL;

	if ( ! pFnClientHandleJoinInProgress )
		pFnClientHandleJoinInProgress = (UFunction*) UObject::GObjObjects()->Data[ 113439 ];

	Asfxwavecoordinator_hordeoperation_execClientHandleJoinInProgress_Parms ClientHandleJoinInProgress_Parms;

	this->ProcessEvent ( pFnClientHandleJoinInProgress, &ClientHandleJoinInProgress_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.SyncClientMatchTimer
// [0x00020102] 
// Parameters infos:
// float                          OperationTime                  ( CPF_Parm )

void Asfxwavecoordinator_hordeoperation::SyncClientMatchTimer ( float OperationTime )
{
	static UFunction* pFnSyncClientMatchTimer = NULL;

	if ( ! pFnSyncClientMatchTimer )
		pFnSyncClientMatchTimer = (UFunction*) UObject::GObjObjects()->Data[ 113437 ];

	Asfxwavecoordinator_hordeoperation_execSyncClientMatchTimer_Parms SyncClientMatchTimer_Parms;
	SyncClientMatchTimer_Parms.OperationTime = OperationTime;

	this->ProcessEvent ( pFnSyncClientMatchTimer, &SyncClientMatchTimer_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.RecoverFromWaveEventInfo
// [0x00020102] 
// Parameters infos:
// unsigned long                  bStartNewWaveNow               ( CPF_Parm )
// struct FWaveEventInfo          NewWaveEventInfo               ( CPF_Parm )

void Asfxwavecoordinator_hordeoperation::RecoverFromWaveEventInfo ( unsigned long bStartNewWaveNow, struct FWaveEventInfo NewWaveEventInfo )
{
	static UFunction* pFnRecoverFromWaveEventInfo = NULL;

	if ( ! pFnRecoverFromWaveEventInfo )
		pFnRecoverFromWaveEventInfo = (UFunction*) UObject::GObjObjects()->Data[ 113434 ];

	Asfxwavecoordinator_hordeoperation_execRecoverFromWaveEventInfo_Parms RecoverFromWaveEventInfo_Parms;
	RecoverFromWaveEventInfo_Parms.bStartNewWaveNow = bStartNewWaveNow;
	memcpy ( &RecoverFromWaveEventInfo_Parms.NewWaveEventInfo, &NewWaveEventInfo, 0x20 );

	this->ProcessEvent ( pFnRecoverFromWaveEventInfo, &RecoverFromWaveEventInfo_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.HandleHostMigration
// [0x00020002] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::HandleHostMigration ( )
{
	static UFunction* pFnHandleHostMigration = NULL;

	if ( ! pFnHandleHostMigration )
		pFnHandleHostMigration = (UFunction*) UObject::GObjObjects()->Data[ 113433 ];

	Asfxwavecoordinator_hordeoperation_execHandleHostMigration_Parms HandleHostMigration_Parms;

	this->ProcessEvent ( pFnHandleHostMigration, &HandleHostMigration_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.HandleJoinInProgress
// [0x00020002] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::HandleJoinInProgress ( )
{
	static UFunction* pFnHandleJoinInProgress = NULL;

	if ( ! pFnHandleJoinInProgress )
		pFnHandleJoinInProgress = (UFunction*) UObject::GObjObjects()->Data[ 113432 ];

	Asfxwavecoordinator_hordeoperation_execHandleJoinInProgress_Parms HandleJoinInProgress_Parms;

	this->ProcessEvent ( pFnHandleJoinInProgress, &HandleJoinInProgress_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.SyncWithServer
// [0x00020102] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::SyncWithServer ( )
{
	static UFunction* pFnSyncWithServer = NULL;

	if ( ! pFnSyncWithServer )
		pFnSyncWithServer = (UFunction*) UObject::GObjObjects()->Data[ 113431 ];

	Asfxwavecoordinator_hordeoperation_execSyncWithServer_Parms SyncWithServer_Parms;

	this->ProcessEvent ( pFnSyncWithServer, &SyncWithServer_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.ReplicateWaveEventInfo
// [0x00020002] 
// Parameters infos:
// unsigned char                  NewEvent                       ( CPF_Parm )

void Asfxwavecoordinator_hordeoperation::ReplicateWaveEventInfo ( unsigned char NewEvent )
{
	static UFunction* pFnReplicateWaveEventInfo = NULL;

	if ( ! pFnReplicateWaveEventInfo )
		pFnReplicateWaveEventInfo = (UFunction*) UObject::GObjObjects()->Data[ 113429 ];

	Asfxwavecoordinator_hordeoperation_execReplicateWaveEventInfo_Parms ReplicateWaveEventInfo_Parms;
	ReplicateWaveEventInfo_Parms.NewEvent = NewEvent;

	this->ProcessEvent ( pFnReplicateWaveEventInfo, &ReplicateWaveEventInfo_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.ReplicatedWaveEventUpdated
// [0x00020102] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::ReplicatedWaveEventUpdated ( )
{
	static UFunction* pFnReplicatedWaveEventUpdated = NULL;

	if ( ! pFnReplicatedWaveEventUpdated )
		pFnReplicatedWaveEventUpdated = (UFunction*) UObject::GObjObjects()->Data[ 113427 ];

	Asfxwavecoordinator_hordeoperation_execReplicatedWaveEventUpdated_Parms ReplicatedWaveEventUpdated_Parms;

	this->ProcessEvent ( pFnReplicatedWaveEventUpdated, &ReplicatedWaveEventUpdated_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.DisplayDebugCountdown
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::DisplayDebugCountdown ( )
{
	static UFunction* pFnDisplayDebugCountdown = NULL;

	if ( ! pFnDisplayDebugCountdown )
		pFnDisplayDebugCountdown = (UFunction*) UObject::GObjObjects()->Data[ 113413 ];

	Asfxwavecoordinator_hordeoperation_execDisplayDebugCountdown_Parms DisplayDebugCountdown_Parms;

	this->ProcessEvent ( pFnDisplayDebugCountdown, &DisplayDebugCountdown_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.GetCreditScaling
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Asfxwavecoordinator_hordeoperation::GetCreditScaling ( )
{
	static UFunction* pFnGetCreditScaling = NULL;

	if ( ! pFnGetCreditScaling )
		pFnGetCreditScaling = (UFunction*) UObject::GObjObjects()->Data[ 108353 ];

	Asfxwavecoordinator_hordeoperation_execGetCreditScaling_Parms GetCreditScaling_Parms;

	this->ProcessEvent ( pFnGetCreditScaling, &GetCreditScaling_Parms, NULL );

	return GetCreditScaling_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.IsSpecifiedWaveAnOperation
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            WaveNumber                     ( CPF_Parm )

bool Asfxwavecoordinator_hordeoperation::IsSpecifiedWaveAnOperation ( int WaveNumber )
{
	static UFunction* pFnIsSpecifiedWaveAnOperation = NULL;

	if ( ! pFnIsSpecifiedWaveAnOperation )
		pFnIsSpecifiedWaveAnOperation = (UFunction*) UObject::GObjObjects()->Data[ 113420 ];

	Asfxwavecoordinator_hordeoperation_execIsSpecifiedWaveAnOperation_Parms IsSpecifiedWaveAnOperation_Parms;
	IsSpecifiedWaveAnOperation_Parms.WaveNumber = WaveNumber;

	this->ProcessEvent ( pFnIsSpecifiedWaveAnOperation, &IsSpecifiedWaveAnOperation_Parms, NULL );

	return IsSpecifiedWaveAnOperation_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.IsCurrentWaveAnOperation
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxwavecoordinator_hordeoperation::IsCurrentWaveAnOperation ( )
{
	static UFunction* pFnIsCurrentWaveAnOperation = NULL;

	if ( ! pFnIsCurrentWaveAnOperation )
		pFnIsCurrentWaveAnOperation = (UFunction*) UObject::GObjObjects()->Data[ 113376 ];

	Asfxwavecoordinator_hordeoperation_execIsCurrentWaveAnOperation_Parms IsCurrentWaveAnOperation_Parms;

	this->ProcessEvent ( pFnIsCurrentWaveAnOperation, &IsCurrentWaveAnOperation_Parms, NULL );

	return IsCurrentWaveAnOperation_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.GetFriendlyCurrentWaveNumber
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Asfxwavecoordinator_hordeoperation::GetFriendlyCurrentWaveNumber ( )
{
	static UFunction* pFnGetFriendlyCurrentWaveNumber = NULL;

	if ( ! pFnGetFriendlyCurrentWaveNumber )
		pFnGetFriendlyCurrentWaveNumber = (UFunction*) UObject::GObjObjects()->Data[ 108126 ];

	Asfxwavecoordinator_hordeoperation_execGetFriendlyCurrentWaveNumber_Parms GetFriendlyCurrentWaveNumber_Parms;

	this->ProcessEvent ( pFnGetFriendlyCurrentWaveNumber, &GetFriendlyCurrentWaveNumber_Parms, NULL );

	return GetFriendlyCurrentWaveNumber_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.EndOfWave
// [0x00020102] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::EndOfWave ( )
{
	static UFunction* pFnEndOfWave = NULL;

	if ( ! pFnEndOfWave )
		pFnEndOfWave = (UFunction*) UObject::GObjObjects()->Data[ 113414 ];

	Asfxwavecoordinator_hordeoperation_execEndOfWave_Parms EndOfWave_Parms;

	this->ProcessEvent ( pFnEndOfWave, &EndOfWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.OnAllWavesFinished
// [0x00080102] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::OnAllWavesFinished ( )
{
	static UFunction* pFnOnAllWavesFinished = NULL;

	if ( ! pFnOnAllWavesFinished )
		pFnOnAllWavesFinished = (UFunction*) UObject::GObjObjects()->Data[ 113407 ];

	Asfxwavecoordinator_hordeoperation_execOnAllWavesFinished_Parms OnAllWavesFinished_Parms;

	this->ProcessEvent ( pFnOnAllWavesFinished, &OnAllWavesFinished_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.OnAllWavesFinishedLoading
// [0x00080102] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::OnAllWavesFinishedLoading ( )
{
	static UFunction* pFnOnAllWavesFinishedLoading = NULL;

	if ( ! pFnOnAllWavesFinishedLoading )
		pFnOnAllWavesFinishedLoading = (UFunction*) UObject::GObjObjects()->Data[ 113402 ];

	Asfxwavecoordinator_hordeoperation_execOnAllWavesFinishedLoading_Parms OnAllWavesFinishedLoading_Parms;

	this->ProcessEvent ( pFnOnAllWavesFinishedLoading, &OnAllWavesFinishedLoading_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.StartNewWave
// [0x00080102] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::StartNewWave ( )
{
	static UFunction* pFnStartNewWave = NULL;

	if ( ! pFnStartNewWave )
		pFnStartNewWave = (UFunction*) UObject::GObjObjects()->Data[ 113386 ];

	Asfxwavecoordinator_hordeoperation_execStartNewWave_Parms StartNewWave_Parms;

	this->ProcessEvent ( pFnStartNewWave, &StartNewWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.UpdateCurrentWaveNumber
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// int                            NewWaveNumber                  ( CPF_Parm )

void Asfxwavecoordinator_hordeoperation::UpdateCurrentWaveNumber ( int NewWaveNumber )
{
	static UFunction* pFnUpdateCurrentWaveNumber = NULL;

	if ( ! pFnUpdateCurrentWaveNumber )
		pFnUpdateCurrentWaveNumber = (UFunction*) UObject::GObjObjects()->Data[ 113352 ];

	Asfxwavecoordinator_hordeoperation_execUpdateCurrentWaveNumber_Parms UpdateCurrentWaveNumber_Parms;
	UpdateCurrentWaveNumber_Parms.NewWaveNumber = NewWaveNumber;

	this->ProcessEvent ( pFnUpdateCurrentWaveNumber, &UpdateCurrentWaveNumber_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.AdvanceToNextWave
// [0x00080002] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::AdvanceToNextWave ( )
{
	static UFunction* pFnAdvanceToNextWave = NULL;

	if ( ! pFnAdvanceToNextWave )
		pFnAdvanceToNextWave = (UFunction*) UObject::GObjObjects()->Data[ 113377 ];

	Asfxwavecoordinator_hordeoperation_execAdvanceToNextWave_Parms AdvanceToNextWave_Parms;

	this->ProcessEvent ( pFnAdvanceToNextWave, &AdvanceToNextWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.OnWaveFinished
// [0x00020102] 
// Parameters infos:
// class Usfxwave*                Wave                           ( CPF_Parm )

void Asfxwavecoordinator_hordeoperation::OnWaveFinished ( class Usfxwave* Wave )
{
	static UFunction* pFnOnWaveFinished = NULL;

	if ( ! pFnOnWaveFinished )
		pFnOnWaveFinished = (UFunction*) UObject::GObjObjects()->Data[ 113364 ];

	Asfxwavecoordinator_hordeoperation_execOnWaveFinished_Parms OnWaveFinished_Parms;
	OnWaveFinished_Parms.Wave = Wave;

	this->ProcessEvent ( pFnOnWaveFinished, &OnWaveFinished_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.GenerateOperationWaveList
// [0x00020102] 
// Parameters infos:
// class UClass*                  NewOperationWaveType           ( CPF_Parm )

void Asfxwavecoordinator_hordeoperation::GenerateOperationWaveList ( class UClass* NewOperationWaveType )
{
	static UFunction* pFnGenerateOperationWaveList = NULL;

	if ( ! pFnGenerateOperationWaveList )
		pFnGenerateOperationWaveList = (UFunction*) UObject::GObjObjects()->Data[ 113362 ];

	Asfxwavecoordinator_hordeoperation_execGenerateOperationWaveList_Parms GenerateOperationWaveList_Parms;
	GenerateOperationWaveList_Parms.NewOperationWaveType = NewOperationWaveType;

	this->ProcessEvent ( pFnGenerateOperationWaveList, &GenerateOperationWaveList_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.GenerateHordeWaveList
// [0x00020102] 
// Parameters infos:
// class UClass*                  NewHordeWaveType               ( CPF_Parm )

void Asfxwavecoordinator_hordeoperation::GenerateHordeWaveList ( class UClass* NewHordeWaveType )
{
	static UFunction* pFnGenerateHordeWaveList = NULL;

	if ( ! pFnGenerateHordeWaveList )
		pFnGenerateHordeWaveList = (UFunction*) UObject::GObjObjects()->Data[ 113360 ];

	Asfxwavecoordinator_hordeoperation_execGenerateHordeWaveList_Parms GenerateHordeWaveList_Parms;
	GenerateHordeWaveList_Parms.NewHordeWaveType = NewHordeWaveType;

	this->ProcessEvent ( pFnGenerateHordeWaveList, &GenerateHordeWaveList_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.GoToWave
// [0x00020002] 
// Parameters infos:
// int                            nWave                          ( CPF_Parm )

void Asfxwavecoordinator_hordeoperation::GoToWave ( int nWave )
{
	static UFunction* pFnGoToWave = NULL;

	if ( ! pFnGoToWave )
		pFnGoToWave = (UFunction*) UObject::GObjObjects()->Data[ 113358 ];

	Asfxwavecoordinator_hordeoperation_execGoToWave_Parms GoToWave_Parms;
	GoToWave_Parms.nWave = nWave;

	this->ProcessEvent ( pFnGoToWave, &GoToWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.GetPercentOfWavesCompleted
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Asfxwavecoordinator_hordeoperation::GetPercentOfWavesCompleted ( )
{
	static UFunction* pFnGetPercentOfWavesCompleted = NULL;

	if ( ! pFnGetPercentOfWavesCompleted )
		pFnGetPercentOfWavesCompleted = (UFunction*) UObject::GObjObjects()->Data[ 113355 ];

	Asfxwavecoordinator_hordeoperation_execGetPercentOfWavesCompleted_Parms GetPercentOfWavesCompleted_Parms;

	this->ProcessEvent ( pFnGetPercentOfWavesCompleted, &GetPercentOfWavesCompleted_Parms, NULL );

	return GetPercentOfWavesCompleted_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.EndWaves
// [0x00020002] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::EndWaves ( )
{
	static UFunction* pFnEndWaves = NULL;

	if ( ! pFnEndWaves )
		pFnEndWaves = (UFunction*) UObject::GObjObjects()->Data[ 113354 ];

	Asfxwavecoordinator_hordeoperation_execEndWaves_Parms EndWaves_Parms;

	this->ProcessEvent ( pFnEndWaves, &EndWaves_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.StartWaves
// [0x00020102] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::StartWaves ( )
{
	static UFunction* pFnStartWaves = NULL;

	if ( ! pFnStartWaves )
		pFnStartWaves = (UFunction*) UObject::GObjObjects()->Data[ 113345 ];

	Asfxwavecoordinator_hordeoperation_execStartWaves_Parms StartWaves_Parms;

	this->ProcessEvent ( pFnStartWaves, &StartWaves_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 113341 ];

	Asfxwavecoordinator_hordeoperation_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.PreBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxwavecoordinator_hordeoperation::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 113339 ];

	Asfxwavecoordinator_hordeoperation_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavecoordinator_hordeoperation.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void Asfxwavecoordinator_hordeoperation::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 113337 ];

	Asfxwavecoordinator_hordeoperation_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.GetCreditsReward
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Usfxwave_operation::GetCreditsReward ( )
{
	static UFunction* pFnGetCreditsReward = NULL;

	if ( ! pFnGetCreditsReward )
		pFnGetCreditsReward = (UFunction*) UObject::GObjObjects()->Data[ 108350 ];

	Usfxwave_operation_execGetCreditsReward_Parms GetCreditsReward_Parms;

	this->ProcessEvent ( pFnGetCreditsReward, &GetCreditsReward_Parms, NULL );

	return GetCreditsReward_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwave_operation.GetCreditBudget
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Usfxwave_operation::GetCreditBudget ( )
{
	static UFunction* pFnGetCreditBudget = NULL;

	if ( ! pFnGetCreditBudget )
		pFnGetCreditBudget = (UFunction*) UObject::GObjObjects()->Data[ 108348 ];

	Usfxwave_operation_execGetCreditBudget_Parms GetCreditBudget_Parms;

	this->ProcessEvent ( pFnGetCreditBudget, &GetCreditBudget_Parms, NULL );

	return GetCreditBudget_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwave_operation.DistributeObjectiveScore
// [0x00020002] 
// Parameters infos:

void Usfxwave_operation::DistributeObjectiveScore ( )
{
	static UFunction* pFnDistributeObjectiveScore = NULL;

	if ( ! pFnDistributeObjectiveScore )
		pFnDistributeObjectiveScore = (UFunction*) UObject::GObjObjects()->Data[ 108333 ];

	Usfxwave_operation_execDistributeObjectiveScore_Parms DistributeObjectiveScore_Parms;

	this->ProcessEvent ( pFnDistributeObjectiveScore, &DistributeObjectiveScore_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.CountdownTimerExpired
// [0x00020002] 
// Parameters infos:

void Usfxwave_operation::CountdownTimerExpired ( )
{
	static UFunction* pFnCountdownTimerExpired = NULL;

	if ( ! pFnCountdownTimerExpired )
		pFnCountdownTimerExpired = (UFunction*) UObject::GObjObjects()->Data[ 108331 ];

	Usfxwave_operation_execCountdownTimerExpired_Parms CountdownTimerExpired_Parms;

	this->ProcessEvent ( pFnCountdownTimerExpired, &CountdownTimerExpired_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.CancelCountdownTimer
// [0x00020002] 
// Parameters infos:

void Usfxwave_operation::CancelCountdownTimer ( )
{
	static UFunction* pFnCancelCountdownTimer = NULL;

	if ( ! pFnCancelCountdownTimer )
		pFnCancelCountdownTimer = (UFunction*) UObject::GObjObjects()->Data[ 108329 ];

	Usfxwave_operation_execCancelCountdownTimer_Parms CancelCountdownTimer_Parms;

	this->ProcessEvent ( pFnCancelCountdownTimer, &CancelCountdownTimer_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.LocalPlayerTimeWarningHint
// [0x00020002] 
// Parameters infos:

void Usfxwave_operation::LocalPlayerTimeWarningHint ( )
{
	static UFunction* pFnLocalPlayerTimeWarningHint = NULL;

	if ( ! pFnLocalPlayerTimeWarningHint )
		pFnLocalPlayerTimeWarningHint = (UFunction*) UObject::GObjObjects()->Data[ 108326 ];

	Usfxwave_operation_execLocalPlayerTimeWarningHint_Parms LocalPlayerTimeWarningHint_Parms;

	this->ProcessEvent ( pFnLocalPlayerTimeWarningHint, &LocalPlayerTimeWarningHint_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.SetTimeLimit
// [0x00020002] 
// Parameters infos:
// float                          TimeLimit                      ( CPF_Parm )

void Usfxwave_operation::SetTimeLimit ( float TimeLimit )
{
	static UFunction* pFnSetTimeLimit = NULL;

	if ( ! pFnSetTimeLimit )
		pFnSetTimeLimit = (UFunction*) UObject::GObjObjects()->Data[ 108322 ];

	Usfxwave_operation_execSetTimeLimit_Parms SetTimeLimit_Parms;
	SetTimeLimit_Parms.TimeLimit = TimeLimit;

	this->ProcessEvent ( pFnSetTimeLimit, &SetTimeLimit_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.BeginWaveTimeLimit
// [0x00020002] 
// Parameters infos:

void Usfxwave_operation::BeginWaveTimeLimit ( )
{
	static UFunction* pFnBeginWaveTimeLimit = NULL;

	if ( ! pFnBeginWaveTimeLimit )
		pFnBeginWaveTimeLimit = (UFunction*) UObject::GObjObjects()->Data[ 108318 ];

	Usfxwave_operation_execBeginWaveTimeLimit_Parms BeginWaveTimeLimit_Parms;

	this->ProcessEvent ( pFnBeginWaveTimeLimit, &BeginWaveTimeLimit_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.DeactivateObjectiveCombatZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  ObjectiveActor                 ( CPF_Parm )

void Usfxwave_operation::DeactivateObjectiveCombatZone ( class AActor* ObjectiveActor )
{
	static UFunction* pFnDeactivateObjectiveCombatZone = NULL;

	if ( ! pFnDeactivateObjectiveCombatZone )
		pFnDeactivateObjectiveCombatZone = (UFunction*) UObject::GObjObjects()->Data[ 108313 ];

	Usfxwave_operation_execDeactivateObjectiveCombatZone_Parms DeactivateObjectiveCombatZone_Parms;
	DeactivateObjectiveCombatZone_Parms.ObjectiveActor = ObjectiveActor;

	this->ProcessEvent ( pFnDeactivateObjectiveCombatZone, &DeactivateObjectiveCombatZone_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.ActivateObjectiveCombatZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  ObjectiveActor                 ( CPF_Parm )

void Usfxwave_operation::ActivateObjectiveCombatZone ( class AActor* ObjectiveActor )
{
	static UFunction* pFnActivateObjectiveCombatZone = NULL;

	if ( ! pFnActivateObjectiveCombatZone )
		pFnActivateObjectiveCombatZone = (UFunction*) UObject::GObjObjects()->Data[ 108307 ];

	Usfxwave_operation_execActivateObjectiveCombatZone_Parms ActivateObjectiveCombatZone_Parms;
	ActivateObjectiveCombatZone_Parms.ObjectiveActor = ObjectiveActor;

	this->ProcessEvent ( pFnActivateObjectiveCombatZone, &ActivateObjectiveCombatZone_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.PawnDestroyed
// [0x00020102] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void Usfxwave_operation::PawnDestroyed ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnDestroyed = NULL;

	if ( ! pFnPawnDestroyed )
		pFnPawnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 108312 ];

	Usfxwave_operation_execPawnDestroyed_Parms PawnDestroyed_Parms;
	PawnDestroyed_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnDestroyed, &PawnDestroyed_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.PawnRevived
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void Usfxwave_operation::PawnRevived ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnRevived = NULL;

	if ( ! pFnPawnRevived )
		pFnPawnRevived = (UFunction*) UObject::GObjObjects()->Data[ 108303 ];

	Usfxwave_operation_execPawnRevived_Parms PawnRevived_Parms;
	PawnRevived_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnRevived, &PawnRevived_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.PawnDowned
// [0x00020102] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void Usfxwave_operation::PawnDowned ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnDowned = NULL;

	if ( ! pFnPawnDowned )
		pFnPawnDowned = (UFunction*) UObject::GObjObjects()->Data[ 108299 ];

	Usfxwave_operation_execPawnDowned_Parms PawnDowned_Parms;
	PawnDowned_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnDowned, &PawnDowned_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.DetermineObjectivesToSpawn
// [0x00020002] 
// Parameters infos:

void Usfxwave_operation::DetermineObjectivesToSpawn ( )
{
	static UFunction* pFnDetermineObjectivesToSpawn = NULL;

	if ( ! pFnDetermineObjectivesToSpawn )
		pFnDetermineObjectivesToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 108283 ];

	Usfxwave_operation_execDetermineObjectivesToSpawn_Parms DetermineObjectivesToSpawn_Parms;

	this->ProcessEvent ( pFnDetermineObjectivesToSpawn, &DetermineObjectivesToSpawn_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.RateEnemyStart
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        NavPoint                       ( CPF_Parm )

float Usfxwave_operation::RateEnemyStart ( class ANavigationPoint* NavPoint )
{
	static UFunction* pFnRateEnemyStart = NULL;

	if ( ! pFnRateEnemyStart )
		pFnRateEnemyStart = (UFunction*) UObject::GObjObjects()->Data[ 108269 ];

	Usfxwave_operation_execRateEnemyStart_Parms RateEnemyStart_Parms;
	RateEnemyStart_Parms.NavPoint = NavPoint;

	this->ProcessEvent ( pFnRateEnemyStart, &RateEnemyStart_Parms, NULL );

	return RateEnemyStart_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwave_operation.DelayedFinishWave
// [0x00020002] 
// Parameters infos:

void Usfxwave_operation::DelayedFinishWave ( )
{
	static UFunction* pFnDelayedFinishWave = NULL;

	if ( ! pFnDelayedFinishWave )
		pFnDelayedFinishWave = (UFunction*) UObject::GObjObjects()->Data[ 108267 ];

	Usfxwave_operation_execDelayedFinishWave_Parms DelayedFinishWave_Parms;

	this->ProcessEvent ( pFnDelayedFinishWave, &DelayedFinishWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.FinishWave
// [0x00020002] 
// Parameters infos:

void Usfxwave_operation::FinishWave ( )
{
	static UFunction* pFnFinishWave = NULL;

	if ( ! pFnFinishWave )
		pFnFinishWave = (UFunction*) UObject::GObjObjects()->Data[ 108262 ];

	Usfxwave_operation_execFinishWave_Parms FinishWave_Parms;

	this->ProcessEvent ( pFnFinishWave, &FinishWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.ShowBeginWaveMessage
// [0x00020002] 
// Parameters infos:

void Usfxwave_operation::ShowBeginWaveMessage ( )
{
	static UFunction* pFnShowBeginWaveMessage = NULL;

	if ( ! pFnShowBeginWaveMessage )
		pFnShowBeginWaveMessage = (UFunction*) UObject::GObjObjects()->Data[ 108260 ];

	Usfxwave_operation_execShowBeginWaveMessage_Parms ShowBeginWaveMessage_Parms;

	this->ProcessEvent ( pFnShowBeginWaveMessage, &ShowBeginWaveMessage_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.BeginWave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxwave_operation::BeginWave ( )
{
	static UFunction* pFnBeginWave = NULL;

	if ( ! pFnBeginWave )
		pFnBeginWave = (UFunction*) UObject::GObjObjects()->Data[ 108216 ];

	Usfxwave_operation_execBeginWave_Parms BeginWave_Parms;

	this->ProcessEvent ( pFnBeginWave, &BeginWave_Parms, NULL );

	return BeginWave_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwave_operation.ObjectiveSpawnSort
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXOperation_ObjectiveSpawnPoint* A                              ( CPF_Parm )
// class ASFXOperation_ObjectiveSpawnPoint* B                              ( CPF_Parm )

int Usfxwave_operation::ObjectiveSpawnSort ( class ASFXOperation_ObjectiveSpawnPoint* A, class ASFXOperation_ObjectiveSpawnPoint* B )
{
	static UFunction* pFnObjectiveSpawnSort = NULL;

	if ( ! pFnObjectiveSpawnSort )
		pFnObjectiveSpawnSort = (UFunction*) UObject::GObjObjects()->Data[ 108212 ];

	Usfxwave_operation_execObjectiveSpawnSort_Parms ObjectiveSpawnSort_Parms;
	ObjectiveSpawnSort_Parms.A = A;
	ObjectiveSpawnSort_Parms.B = B;

	this->ProcessEvent ( pFnObjectiveSpawnSort, &ObjectiveSpawnSort_Parms, NULL );

	return ObjectiveSpawnSort_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwave_operation.InitializeWave
// [0x00020002] 
// Parameters infos:
// class ASFXWaveManager*         OwnerManager                   ( CPF_Parm )

void Usfxwave_operation::InitializeWave ( class ASFXWaveManager* OwnerManager )
{
	static UFunction* pFnInitializeWave = NULL;

	if ( ! pFnInitializeWave )
		pFnInitializeWave = (UFunction*) UObject::GObjObjects()->Data[ 108207 ];

	Usfxwave_operation_execInitializeWave_Parms InitializeWave_Parms;
	InitializeWave_Parms.OwnerManager = OwnerManager;

	this->ProcessEvent ( pFnInitializeWave, &InitializeWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.PlayPlayerAcknowledgment
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// float                          DelayTime                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  PlayObjectiveBegin             ( CPF_OptionalParm | CPF_Parm )

void Asfxoperationobjective::PlayPlayerAcknowledgment ( float DelayTime, unsigned long PlayObjectiveBegin )
{
	static UFunction* pFnPlayPlayerAcknowledgment = NULL;

	if ( ! pFnPlayPlayerAcknowledgment )
		pFnPlayPlayerAcknowledgment = (UFunction*) UObject::GObjObjects()->Data[ 108417 ];

	Asfxoperationobjective_execPlayPlayerAcknowledgment_Parms PlayPlayerAcknowledgment_Parms;
	PlayPlayerAcknowledgment_Parms.DelayTime = DelayTime;
	PlayPlayerAcknowledgment_Parms.PlayObjectiveBegin = PlayObjectiveBegin;

	this->ProcessEvent ( pFnPlayPlayerAcknowledgment, &PlayPlayerAcknowledgment_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.FindOwningWave
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void Asfxoperationobjective::FindOwningWave ( )
{
	static UFunction* pFnFindOwningWave = NULL;

	if ( ! pFnFindOwningWave )
		pFnFindOwningWave = (UFunction*) UObject::GObjObjects()->Data[ 111733 ];

	Asfxoperationobjective_execFindOwningWave_Parms FindOwningWave_Parms;

	this->ProcessEvent ( pFnFindOwningWave, &FindOwningWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.SetOwningWave
// [0x00020102] 
// Parameters infos:
// class Usfxwave_operation*      NewOwner                       ( CPF_Parm )

void Asfxoperationobjective::SetOwningWave ( class Usfxwave_operation* NewOwner )
{
	static UFunction* pFnSetOwningWave = NULL;

	if ( ! pFnSetOwningWave )
		pFnSetOwningWave = (UFunction*) UObject::GObjObjects()->Data[ 111771 ];

	Asfxoperationobjective_execSetOwningWave_Parms SetOwningWave_Parms;
	SetOwningWave_Parms.NewOwner = NewOwner;

	this->ProcessEvent ( pFnSetOwningWave, &SetOwningWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.PawnDestroyed
// [0x00020000] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void Asfxoperationobjective::PawnDestroyed ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnDestroyed = NULL;

	if ( ! pFnPawnDestroyed )
		pFnPawnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 111773 ];

	Asfxoperationobjective_execPawnDestroyed_Parms PawnDestroyed_Parms;
	PawnDestroyed_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnDestroyed, &PawnDestroyed_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.PawnRevived
// [0x00020100] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void Asfxoperationobjective::PawnRevived ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnRevived = NULL;

	if ( ! pFnPawnRevived )
		pFnPawnRevived = (UFunction*) UObject::GObjObjects()->Data[ 111769 ];

	Asfxoperationobjective_execPawnRevived_Parms PawnRevived_Parms;
	PawnRevived_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnRevived, &PawnRevived_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.PawnDowned
// [0x00020100] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void Asfxoperationobjective::PawnDowned ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnDowned = NULL;

	if ( ! pFnPawnDowned )
		pFnPawnDowned = (UFunction*) UObject::GObjObjects()->Data[ 111767 ];

	Asfxoperationobjective_execPawnDowned_Parms PawnDowned_Parms;
	PawnDowned_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnDowned, &PawnDowned_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.Deactivate
// [0x00020102] 
// Parameters infos:

void Asfxoperationobjective::Deactivate ( )
{
	static UFunction* pFnDeactivate = NULL;

	if ( ! pFnDeactivate )
		pFnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 111765 ];

	Asfxoperationobjective_execDeactivate_Parms Deactivate_Parms;

	this->ProcessEvent ( pFnDeactivate, &Deactivate_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void Asfxoperationobjective::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 111764 ];

	Asfxoperationobjective_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.ActivateCombatZone
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void Asfxoperationobjective::ActivateCombatZone ( )
{
	static UFunction* pFnActivateCombatZone = NULL;

	if ( ! pFnActivateCombatZone )
		pFnActivateCombatZone = (UFunction*) UObject::GObjObjects()->Data[ 111762 ];

	Asfxoperationobjective_execActivateCombatZone_Parms ActivateCombatZone_Parms;

	this->ProcessEvent ( pFnActivateCombatZone, &ActivateCombatZone_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.ActivateObjective
// [0x00020102] 
// Parameters infos:

void Asfxoperationobjective::ActivateObjective ( )
{
	static UFunction* pFnActivateObjective = NULL;

	if ( ! pFnActivateObjective )
		pFnActivateObjective = (UFunction*) UObject::GObjObjects()->Data[ 111759 ];

	Asfxoperationobjective_execActivateObjective_Parms ActivateObjective_Parms;

	this->ProcessEvent ( pFnActivateObjective, &ActivateObjective_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.SetObjectiveMesh
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// struct FString                 MeshIdentifier                 ( CPF_Parm | CPF_NeedCtorLink )
// class UStaticMeshComponent*    MeshComp                       ( CPF_Parm | CPF_EditInline )

void Asfxoperationobjective::SetObjectiveMesh ( struct FString MeshIdentifier, class UStaticMeshComponent* MeshComp )
{
	static UFunction* pFnSetObjectiveMesh = NULL;

	if ( ! pFnSetObjectiveMesh )
		pFnSetObjectiveMesh = (UFunction*) UObject::GObjObjects()->Data[ 111742 ];

	Asfxoperationobjective_execSetObjectiveMesh_Parms SetObjectiveMesh_Parms;
	memcpy ( &SetObjectiveMesh_Parms.MeshIdentifier, &MeshIdentifier, 0xC );
	SetObjectiveMesh_Parms.MeshComp = MeshComp;

	this->ProcessEvent ( pFnSetObjectiveMesh, &SetObjectiveMesh_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.PlayMeshSpecificVOLine
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxoperationobjective::PlayMeshSpecificVOLine ( )
{
	static UFunction* pFnPlayMeshSpecificVOLine = NULL;

	if ( ! pFnPlayMeshSpecificVOLine )
		pFnPlayMeshSpecificVOLine = (UFunction*) UObject::GObjObjects()->Data[ 108426 ];

	Asfxoperationobjective_execPlayMeshSpecificVOLine_Parms PlayMeshSpecificVOLine_Parms;

	this->ProcessEvent ( pFnPlayMeshSpecificVOLine, &PlayMeshSpecificVOLine_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.ClientFindObjectiveData
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void Asfxoperationobjective::ClientFindObjectiveData ( )
{
	static UFunction* pFnClientFindObjectiveData = NULL;

	if ( ! pFnClientFindObjectiveData )
		pFnClientFindObjectiveData = (UFunction*) UObject::GObjObjects()->Data[ 111730 ];

	Asfxoperationobjective_execClientFindObjectiveData_Parms ClientFindObjectiveData_Parms;

	this->ProcessEvent ( pFnClientFindObjectiveData, &ClientFindObjectiveData_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.SetObjectiveData
// [0x00020002] 
// Parameters infos:
// class USFXOperation_ObjectiveData* ObjData                        ( CPF_Parm )

void Asfxoperationobjective::SetObjectiveData ( class USFXOperation_ObjectiveData* ObjData )
{
	static UFunction* pFnSetObjectiveData = NULL;

	if ( ! pFnSetObjectiveData )
		pFnSetObjectiveData = (UFunction*) UObject::GObjObjects()->Data[ 111738 ];

	Asfxoperationobjective_execSetObjectiveData_Parms SetObjectiveData_Parms;
	SetObjectiveData_Parms.ObjData = ObjData;

	this->ProcessEvent ( pFnSetObjectiveData, &SetObjectiveData_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.RepeatWaveInstructions
// [0x00020102] 
// Parameters infos:

void Asfxoperationobjective::RepeatWaveInstructions ( )
{
	static UFunction* pFnRepeatWaveInstructions = NULL;

	if ( ! pFnRepeatWaveInstructions )
		pFnRepeatWaveInstructions = (UFunction*) UObject::GObjObjects()->Data[ 111737 ];

	Asfxoperationobjective_execRepeatWaveInstructions_Parms RepeatWaveInstructions_Parms;

	this->ProcessEvent ( pFnRepeatWaveInstructions, &RepeatWaveInstructions_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.PlayWaveInstructions
// [0x00020002] 
// Parameters infos:

void Asfxoperationobjective::PlayWaveInstructions ( )
{
	static UFunction* pFnPlayWaveInstructions = NULL;

	if ( ! pFnPlayWaveInstructions )
		pFnPlayWaveInstructions = (UFunction*) UObject::GObjObjects()->Data[ 111736 ];

	Asfxoperationobjective_execPlayWaveInstructions_Parms PlayWaveInstructions_Parms;

	this->ProcessEvent ( pFnPlayWaveInstructions, &PlayWaveInstructions_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxoperationobjective::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 111731 ];

	Asfxoperationobjective_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxoperationobjective.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void Asfxoperationobjective::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 111727 ];

	Asfxoperationobjective_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXCustomizationInstance_PlayerMP.CustomizeMaterialInstance
// [0x00820002] 
// Parameters infos:
// class UMaterialInstanceConstant* MIC                            ( CPF_Parm )

void USFXCustomizationInstance_PlayerMP::CustomizeMaterialInstance ( class UMaterialInstanceConstant* MIC )
{
	static UFunction* pFnCustomizeMaterialInstance = NULL;

	if ( ! pFnCustomizeMaterialInstance )
		pFnCustomizeMaterialInstance = (UFunction*) UObject::GObjObjects()->Data[ 108156 ];

	USFXCustomizationInstance_PlayerMP_execCustomizeMaterialInstance_Parms CustomizeMaterialInstance_Parms;
	CustomizeMaterialInstance_Parms.MIC = MIC;

	this->ProcessEvent ( pFnCustomizeMaterialInstance, &CustomizeMaterialInstance_Parms, NULL );
};

// Function SFXGame.SFXDamageType.CalculateDamageMultiplier
// [0x00422002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

float USFXDamageType_ConsumableRocket::CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnCalculateDamageMultiplier = NULL;

	if ( ! pFnCalculateDamageMultiplier )
		pFnCalculateDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 44579 ];

	USFXDamageType_ConsumableRocket_execCalculateDamageMultiplier_Parms CalculateDamageMultiplier_Parms;

	this->ProcessEvent ( pFnCalculateDamageMultiplier, &CalculateDamageMultiplier_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &CalculateDamageMultiplier_Parms.DamageCalc, 0x60 );

	return CalculateDamageMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.ResetDamageCalc
// [0x00422002] 
// Parameters infos:
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

void USFXDamageType_ConsumableRocket::ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnResetDamageCalc = NULL;

	if ( ! pFnResetDamageCalc )
		pFnResetDamageCalc = (UFunction*) UObject::GObjObjects()->Data[ 44554 ];

	USFXDamageType_ConsumableRocket_execResetDamageCalc_Parms ResetDamageCalc_Parms;

	this->ProcessEvent ( pFnResetDamageCalc, &ResetDamageCalc_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &ResetDamageCalc_Parms.DamageCalc, 0x60 );
};

// Function SFXGame.SFXDamageType.CanPlayDeathEffect
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

bool USFXDamageType_ConsumableRocket::CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 44550 ];

	USFXDamageType_ConsumableRocket_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;
	CanPlayDeathEffect_Parms.Target = Target;
	CanPlayDeathEffect_Parms.Killer = Killer;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.CalculateDamageMultiplier
// [0x00422002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

float USFXDamageType_ConsumableRocketGib::CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnCalculateDamageMultiplier = NULL;

	if ( ! pFnCalculateDamageMultiplier )
		pFnCalculateDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 44579 ];

	USFXDamageType_ConsumableRocketGib_execCalculateDamageMultiplier_Parms CalculateDamageMultiplier_Parms;

	this->ProcessEvent ( pFnCalculateDamageMultiplier, &CalculateDamageMultiplier_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &CalculateDamageMultiplier_Parms.DamageCalc, 0x60 );

	return CalculateDamageMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.ResetDamageCalc
// [0x00422002] 
// Parameters infos:
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

void USFXDamageType_ConsumableRocketGib::ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnResetDamageCalc = NULL;

	if ( ! pFnResetDamageCalc )
		pFnResetDamageCalc = (UFunction*) UObject::GObjObjects()->Data[ 44554 ];

	USFXDamageType_ConsumableRocketGib_execResetDamageCalc_Parms ResetDamageCalc_Parms;

	this->ProcessEvent ( pFnResetDamageCalc, &ResetDamageCalc_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &ResetDamageCalc_Parms.DamageCalc, 0x60 );
};

// Function SFXGame.SFXDamageType.CanPlayDeathEffect
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

bool USFXDamageType_ConsumableRocketGib::CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 44550 ];

	USFXDamageType_ConsumableRocketGib_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;
	CanPlayDeathEffect_Parms.Target = Target;
	CanPlayDeathEffect_Parms.Killer = Killer;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXDifficultyHandlerMP.UpdateDifficultyScore
// [0x00020002] 
// Parameters infos:

void USFXDifficultyHandlerMP::UpdateDifficultyScore ( )
{
	static UFunction* pFnUpdateDifficultyScore = NULL;

	if ( ! pFnUpdateDifficultyScore )
		pFnUpdateDifficultyScore = (UFunction*) UObject::GObjObjects()->Data[ 108187 ];

	USFXDifficultyHandlerMP_execUpdateDifficultyScore_Parms UpdateDifficultyScore_Parms;

	this->ProcessEvent ( pFnUpdateDifficultyScore, &UpdateDifficultyScore_Parms, NULL );
};

// Function sfxgamempcontent.SFXDifficultyHandlerMP.Update
// [0x00020002] 
// Parameters infos:

void USFXDifficultyHandlerMP::Update ( )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 108186 ];

	USFXDifficultyHandlerMP_execUpdate_Parms Update_Parms;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp.AddPRI
// [0x00020102] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void Asfxgrimp::AddPRI ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnAddPRI = NULL;

	if ( ! pFnAddPRI )
		pFnAddPRI = (UFunction*) UObject::GObjObjects()->Data[ 109189 ];

	Asfxgrimp_execAddPRI_Parms AddPRI_Parms;
	AddPRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnAddPRI, &AddPRI_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp.GetTeamScore
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Asfxgrimp::GetTeamScore ( )
{
	static UFunction* pFnGetTeamScore = NULL;

	if ( ! pFnGetTeamScore )
		pFnGetTeamScore = (UFunction*) UObject::GObjObjects()->Data[ 109185 ];

	Asfxgrimp_execGetTeamScore_Parms GetTeamScore_Parms;

	this->ProcessEvent ( pFnGetTeamScore, &GetTeamScore_Parms, NULL );

	return GetTeamScore_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.RandomFactionChosen
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxgrimp::RandomFactionChosen ( )
{
	static UFunction* pFnRandomFactionChosen = NULL;

	if ( ! pFnRandomFactionChosen )
		pFnRandomFactionChosen = (UFunction*) UObject::GObjObjects()->Data[ 109183 ];

	Asfxgrimp_execRandomFactionChosen_Parms RandomFactionChosen_Parms;

	this->ProcessEvent ( pFnRandomFactionChosen, &RandomFactionChosen_Parms, NULL );

	return RandomFactionChosen_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.RandomMapChosen
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxgrimp::RandomMapChosen ( )
{
	static UFunction* pFnRandomMapChosen = NULL;

	if ( ! pFnRandomMapChosen )
		pFnRandomMapChosen = (UFunction*) UObject::GObjObjects()->Data[ 109181 ];

	Asfxgrimp_execRandomMapChosen_Parms RandomMapChosen_Parms;

	this->ProcessEvent ( pFnRandomMapChosen, &RandomMapChosen_Parms, NULL );

	return RandomMapChosen_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.OnMissionComplete
// [0x00020102] 
// Parameters infos:

void Asfxgrimp::OnMissionComplete ( )
{
	static UFunction* pFnOnMissionComplete = NULL;

	if ( ! pFnOnMissionComplete )
		pFnOnMissionComplete = (UFunction*) UObject::GObjObjects()->Data[ 109179 ];

	Asfxgrimp_execOnMissionComplete_Parms OnMissionComplete_Parms;

	this->ProcessEvent ( pFnOnMissionComplete, &OnMissionComplete_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp.GetChallengeTypeIndex
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Asfxgrimp::GetChallengeTypeIndex ( )
{
	static UFunction* pFnGetChallengeTypeIndex = NULL;

	if ( ! pFnGetChallengeTypeIndex )
		pFnGetChallengeTypeIndex = (UFunction*) UObject::GObjObjects()->Data[ 109176 ];

	Asfxgrimp_execGetChallengeTypeIndex_Parms GetChallengeTypeIndex_Parms;

	this->ProcessEvent ( pFnGetChallengeTypeIndex, &GetChallengeTypeIndex_Parms, NULL );

	return GetChallengeTypeIndex_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.GetMapID
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Asfxgrimp::GetMapID ( )
{
	static UFunction* pFnGetMapID = NULL;

	if ( ! pFnGetMapID )
		pFnGetMapID = (UFunction*) UObject::GObjObjects()->Data[ 109178 ];

	Asfxgrimp_execGetMapID_Parms GetMapID_Parms;

	this->ProcessEvent ( pFnGetMapID, &GetMapID_Parms, NULL );

	return GetMapID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.GetEnemyWaveTypeID
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Asfxgrimp::GetEnemyWaveTypeID ( )
{
	static UFunction* pFnGetEnemyWaveTypeID = NULL;

	if ( ! pFnGetEnemyWaveTypeID )
		pFnGetEnemyWaveTypeID = (UFunction*) UObject::GObjObjects()->Data[ 109174 ];

	Asfxgrimp_execGetEnemyWaveTypeID_Parms GetEnemyWaveTypeID_Parms;

	this->ProcessEvent ( pFnGetEnemyWaveTypeID, &GetEnemyWaveTypeID_Parms, NULL );

	return GetEnemyWaveTypeID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.CopyProperties
// [0x00020002] 
// Parameters infos:
// class ASFXGRI*                 OldGRI                         ( CPF_Parm )

void Asfxgrimp::CopyProperties ( class ASFXGRI* OldGRI )
{
	static UFunction* pFnCopyProperties = NULL;

	if ( ! pFnCopyProperties )
		pFnCopyProperties = (UFunction*) UObject::GObjObjects()->Data[ 109165 ];

	Asfxgrimp_execCopyProperties_Parms CopyProperties_Parms;
	CopyProperties_Parms.OldGRI = OldGRI;

	this->ProcessEvent ( pFnCopyProperties, &CopyProperties_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp.OnSquadMedalsChanged
// [0x00020102] 
// Parameters infos:

void Asfxgrimp::OnSquadMedalsChanged ( )
{
	static UFunction* pFnOnSquadMedalsChanged = NULL;

	if ( ! pFnOnSquadMedalsChanged )
		pFnOnSquadMedalsChanged = (UFunction*) UObject::GObjObjects()->Data[ 109162 ];

	Asfxgrimp_execOnSquadMedalsChanged_Parms OnSquadMedalsChanged_Parms;

	this->ProcessEvent ( pFnOnSquadMedalsChanged, &OnSquadMedalsChanged_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp.HasSquadMedal
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Medal                          ( CPF_Parm )

bool Asfxgrimp::HasSquadMedal ( int Medal )
{
	static UFunction* pFnHasSquadMedal = NULL;

	if ( ! pFnHasSquadMedal )
		pFnHasSquadMedal = (UFunction*) UObject::GObjObjects()->Data[ 109158 ];

	Asfxgrimp_execHasSquadMedal_Parms HasSquadMedal_Parms;
	HasSquadMedal_Parms.Medal = Medal;

	this->ProcessEvent ( pFnHasSquadMedal, &HasSquadMedal_Parms, NULL );

	return HasSquadMedal_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.AddSquadMedal
// [0x00024002] 
// Parameters infos:
// int                            Medal                          ( CPF_Parm )
// int                            ReplaceMedal                   ( CPF_OptionalParm | CPF_Parm )

void Asfxgrimp::AddSquadMedal ( int Medal, int ReplaceMedal )
{
	static UFunction* pFnAddSquadMedal = NULL;

	if ( ! pFnAddSquadMedal )
		pFnAddSquadMedal = (UFunction*) UObject::GObjObjects()->Data[ 109154 ];

	Asfxgrimp_execAddSquadMedal_Parms AddSquadMedal_Parms;
	AddSquadMedal_Parms.Medal = Medal;
	AddSquadMedal_Parms.ReplaceMedal = ReplaceMedal;

	this->ProcessEvent ( pFnAddSquadMedal, &AddSquadMedal_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp.IsGameOver
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxgrimp::IsGameOver ( )
{
	static UFunction* pFnIsGameOver = NULL;

	if ( ! pFnIsGameOver )
		pFnIsGameOver = (UFunction*) UObject::GObjObjects()->Data[ 109152 ];

	Asfxgrimp_execIsGameOver_Parms IsGameOver_Parms;

	this->ProcessEvent ( pFnIsGameOver, &IsGameOver_Parms, NULL );

	return IsGameOver_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.DisplaySquadMedal
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            nMedal                         ( CPF_Parm )

void Asfxgrimp::DisplaySquadMedal ( int nMedal )
{
	static UFunction* pFnDisplaySquadMedal = NULL;

	if ( ! pFnDisplaySquadMedal )
		pFnDisplaySquadMedal = (UFunction*) UObject::GObjObjects()->Data[ 109146 ];

	Asfxgrimp_execDisplaySquadMedal_Parms DisplaySquadMedal_Parms;
	DisplaySquadMedal_Parms.nMedal = nMedal;

	this->ProcessEvent ( pFnDisplaySquadMedal, &DisplaySquadMedal_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp.ClearMatchConsumableGameEffects
// [0x00020002] 
// Parameters infos:

void Asfxgrimp::ClearMatchConsumableGameEffects ( )
{
	static UFunction* pFnClearMatchConsumableGameEffects = NULL;

	if ( ! pFnClearMatchConsumableGameEffects )
		pFnClearMatchConsumableGameEffects = (UFunction*) UObject::GObjObjects()->Data[ 109141 ];

	Asfxgrimp_execClearMatchConsumableGameEffects_Parms ClearMatchConsumableGameEffects_Parms;

	this->ProcessEvent ( pFnClearMatchConsumableGameEffects, &ClearMatchConsumableGameEffects_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp.IsJoinInProgress
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxgrimp::IsJoinInProgress ( )
{
	static UFunction* pFnIsJoinInProgress = NULL;

	if ( ! pFnIsJoinInProgress )
		pFnIsJoinInProgress = (UFunction*) UObject::GObjObjects()->Data[ 109139 ];

	Asfxgrimp_execIsJoinInProgress_Parms IsJoinInProgress_Parms;

	this->ProcessEvent ( pFnIsJoinInProgress, &IsJoinInProgress_Parms, NULL );

	return IsJoinInProgress_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.GetActivePlayerIDs
// [0x00020002] 
// Parameters infos:
// TArray< int >                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< int > Asfxgrimp::GetActivePlayerIDs ( )
{
	static UFunction* pFnGetActivePlayerIDs = NULL;

	if ( ! pFnGetActivePlayerIDs )
		pFnGetActivePlayerIDs = (UFunction*) UObject::GObjObjects()->Data[ 109130 ];

	Asfxgrimp_execGetActivePlayerIDs_Parms GetActivePlayerIDs_Parms;

	this->ProcessEvent ( pFnGetActivePlayerIDs, &GetActivePlayerIDs_Parms, NULL );

	return GetActivePlayerIDs_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.GetEventTicker
// [0x00020102] 
// Parameters infos:
// class USFXMPEventTicker*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXMPEventTicker* Asfxgrimp::GetEventTicker ( )
{
	static UFunction* pFnGetEventTicker = NULL;

	if ( ! pFnGetEventTicker )
		pFnGetEventTicker = (UFunction*) UObject::GObjObjects()->Data[ 109127 ];

	Asfxgrimp_execGetEventTicker_Parms GetEventTicker_Parms;

	this->ProcessEvent ( pFnGetEventTicker, &GetEventTicker_Parms, NULL );

	return GetEventTicker_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.GetScoreManager
// [0x00020102] 
// Parameters infos:
// class Usfxscoremanager*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class Usfxscoremanager* Asfxgrimp::GetScoreManager ( )
{
	static UFunction* pFnGetScoreManager = NULL;

	if ( ! pFnGetScoreManager )
		pFnGetScoreManager = (UFunction*) UObject::GObjObjects()->Data[ 108643 ];

	Asfxgrimp_execGetScoreManager_Parms GetScoreManager_Parms;

	this->ProcessEvent ( pFnGetScoreManager, &GetScoreManager_Parms, NULL );

	return GetScoreManager_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.NumLivingPlayers
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Asfxgrimp::NumLivingPlayers ( )
{
	static UFunction* pFnNumLivingPlayers = NULL;

	if ( ! pFnNumLivingPlayers )
		pFnNumLivingPlayers = (UFunction*) UObject::GObjObjects()->Data[ 109121 ];

	Asfxgrimp_execNumLivingPlayers_Parms NumLivingPlayers_Parms;

	this->ProcessEvent ( pFnNumLivingPlayers, &NumLivingPlayers_Parms, NULL );

	return NumLivingPlayers_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.NextLivingPlayer
// [0x00020102] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APawn* Asfxgrimp::NextLivingPlayer ( )
{
	static UFunction* pFnNextLivingPlayer = NULL;

	if ( ! pFnNextLivingPlayer )
		pFnNextLivingPlayer = (UFunction*) UObject::GObjObjects()->Data[ 109113 ];

	Asfxgrimp_execNextLivingPlayer_Parms NextLivingPlayer_Parms;

	this->ProcessEvent ( pFnNextLivingPlayer, &NextLivingPlayer_Parms, NULL );

	return NextLivingPlayer_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp.DeferredGrantAccomplishments
// [0x00020102] 
// Parameters infos:

void Asfxgrimp::DeferredGrantAccomplishments ( )
{
	static UFunction* pFnDeferredGrantAccomplishments = NULL;

	if ( ! pFnDeferredGrantAccomplishments )
		pFnDeferredGrantAccomplishments = (UFunction*) UObject::GObjObjects()->Data[ 109111 ];

	Asfxgrimp_execDeferredGrantAccomplishments_Parms DeferredGrantAccomplishments_Parms;

	this->ProcessEvent ( pFnDeferredGrantAccomplishments, &DeferredGrantAccomplishments_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp.DeferredSetRichPresence
// [0x00020102] 
// Parameters infos:

void Asfxgrimp::DeferredSetRichPresence ( )
{
	static UFunction* pFnDeferredSetRichPresence = NULL;

	if ( ! pFnDeferredSetRichPresence )
		pFnDeferredSetRichPresence = (UFunction*) UObject::GObjObjects()->Data[ 109109 ];

	Asfxgrimp_execDeferredSetRichPresence_Parms DeferredSetRichPresence_Parms;

	this->ProcessEvent ( pFnDeferredSetRichPresence, &DeferredSetRichPresence_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp.OnGameStatusChanged
// [0x00020102] 
// Parameters infos:

void Asfxgrimp::OnGameStatusChanged ( )
{
	static UFunction* pFnOnGameStatusChanged = NULL;

	if ( ! pFnOnGameStatusChanged )
		pFnOnGameStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 109107 ];

	Asfxgrimp_execOnGameStatusChanged_Parms OnGameStatusChanged_Parms;

	this->ProcessEvent ( pFnOnGameStatusChanged, &OnGameStatusChanged_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp.SetGameStatus
// [0x00020002] 
// Parameters infos:
// unsigned char                  NewGameStatus                  ( CPF_Parm )

void Asfxgrimp::SetGameStatus ( unsigned char NewGameStatus )
{
	static UFunction* pFnSetGameStatus = NULL;

	if ( ! pFnSetGameStatus )
		pFnSetGameStatus = (UFunction*) UObject::GObjObjects()->Data[ 109105 ];

	Asfxgrimp_execSetGameStatus_Parms SetGameStatus_Parms;
	SetGameStatus_Parms.NewGameStatus = NewGameStatus;

	this->ProcessEvent ( pFnSetGameStatus, &SetGameStatus_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxgrimp::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 109098 ];

	Asfxgrimp_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void Asfxgrimp::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 109093 ];

	Asfxgrimp_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXWaveManager_Operation.ForceMatchTimerSync
// [0x00024002] 
// Parameters infos:
// int                            NewTime                        ( CPF_OptionalParm | CPF_Parm )

void ASFXWaveManager_Operation::ForceMatchTimerSync ( int NewTime )
{
	static UFunction* pFnForceMatchTimerSync = NULL;

	if ( ! pFnForceMatchTimerSync )
		pFnForceMatchTimerSync = (UFunction*) UObject::GObjObjects()->Data[ 113561 ];

	ASFXWaveManager_Operation_execForceMatchTimerSync_Parms ForceMatchTimerSync_Parms;
	ForceMatchTimerSync_Parms.NewTime = NewTime;

	this->ProcessEvent ( pFnForceMatchTimerSync, &ForceMatchTimerSync_Parms, NULL );
};

// Function sfxgamempcontent.SFXWaveManager_Operation.SyncClientMatchTimer
// [0x00024102] 
// Parameters infos:
// float                          OverrideTime                   ( CPF_Parm )
// class Usfxwave*                CurrentWave                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWaveManager_Operation::SyncClientMatchTimer ( float OverrideTime, class Usfxwave* CurrentWave )
{
	static UFunction* pFnSyncClientMatchTimer = NULL;

	if ( ! pFnSyncClientMatchTimer )
		pFnSyncClientMatchTimer = (UFunction*) UObject::GObjObjects()->Data[ 113558 ];

	ASFXWaveManager_Operation_execSyncClientMatchTimer_Parms SyncClientMatchTimer_Parms;
	SyncClientMatchTimer_Parms.OverrideTime = OverrideTime;
	SyncClientMatchTimer_Parms.CurrentWave = CurrentWave;

	this->ProcessEvent ( pFnSyncClientMatchTimer, &SyncClientMatchTimer_Parms, NULL );
};

// Function sfxgamempcontent.SFXWaveManager_Operation.MatchTimerSync
// [0x00020002] 
// Parameters infos:

void ASFXWaveManager_Operation::MatchTimerSync ( )
{
	static UFunction* pFnMatchTimerSync = NULL;

	if ( ! pFnMatchTimerSync )
		pFnMatchTimerSync = (UFunction*) UObject::GObjObjects()->Data[ 113557 ];

	ASFXWaveManager_Operation_execMatchTimerSync_Parms MatchTimerSync_Parms;

	this->ProcessEvent ( pFnMatchTimerSync, &MatchTimerSync_Parms, NULL );
};

// Function sfxgamempcontent.SFXWaveManager_Operation.GetWaveType
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 WaveType                       ( CPF_Parm | CPF_NeedCtorLink )

class UClass* ASFXWaveManager_Operation::GetWaveType ( struct FString WaveType )
{
	static UFunction* pFnGetWaveType = NULL;

	if ( ! pFnGetWaveType )
		pFnGetWaveType = (UFunction*) UObject::GObjObjects()->Data[ 113554 ];

	ASFXWaveManager_Operation_execGetWaveType_Parms GetWaveType_Parms;
	memcpy ( &GetWaveType_Parms.WaveType, &WaveType, 0xC );

	this->ProcessEvent ( pFnGetWaveType, &GetWaveType_Parms, NULL );

	return GetWaveType_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWaveManager_Operation.GetWaveIndex
// [0x00024002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            WaveIndex                      ( CPF_OptionalParm | CPF_Parm )
// struct FString                 WaveString                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

int ASFXWaveManager_Operation::GetWaveIndex ( int WaveIndex, struct FString WaveString )
{
	static UFunction* pFnGetWaveIndex = NULL;

	if ( ! pFnGetWaveIndex )
		pFnGetWaveIndex = (UFunction*) UObject::GObjObjects()->Data[ 113384 ];

	ASFXWaveManager_Operation_execGetWaveIndex_Parms GetWaveIndex_Parms;
	GetWaveIndex_Parms.WaveIndex = WaveIndex;
	memcpy ( &GetWaveIndex_Parms.WaveString, &WaveString, 0xC );

	this->ProcessEvent ( pFnGetWaveIndex, &GetWaveIndex_Parms, NULL );

	return GetWaveIndex_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWaveManager_Operation.SortObjectByName
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 A                              ( CPF_Parm )
// class UObject*                 B                              ( CPF_Parm )

int ASFXWaveManager_Operation::SortObjectByName ( class UObject* A, class UObject* B )
{
	static UFunction* pFnSortObjectByName = NULL;

	if ( ! pFnSortObjectByName )
		pFnSortObjectByName = (UFunction*) UObject::GObjObjects()->Data[ 113537 ];

	ASFXWaveManager_Operation_execSortObjectByName_Parms SortObjectByName_Parms;
	SortObjectByName_Parms.A = A;
	SortObjectByName_Parms.B = B;

	this->ProcessEvent ( pFnSortObjectByName, &SortObjectByName_Parms, NULL );

	return SortObjectByName_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWaveManager_Operation.GeneratePotentialWaveList
// [0x00024102] 
// Parameters infos:
// class UClass*                  SpecifiedWaveType              ( CPF_OptionalParm | CPF_Parm )

void ASFXWaveManager_Operation::GeneratePotentialWaveList ( class UClass* SpecifiedWaveType )
{
	static UFunction* pFnGeneratePotentialWaveList = NULL;

	if ( ! pFnGeneratePotentialWaveList )
		pFnGeneratePotentialWaveList = (UFunction*) UObject::GObjObjects()->Data[ 113519 ];

	ASFXWaveManager_Operation_execGeneratePotentialWaveList_Parms GeneratePotentialWaveList_Parms;
	GeneratePotentialWaveList_Parms.SpecifiedWaveType = SpecifiedWaveType;

	this->ProcessEvent ( pFnGeneratePotentialWaveList, &GeneratePotentialWaveList_Parms, NULL );
};

// Function sfxgamempcontent.SFXWaveManager_Operation.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASFXWaveManager_Operation::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 113517 ];

	ASFXWaveManager_Operation_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Annex.GetAnnexZoneLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class Asfxoperationobjective*  ObjectiveActor                 ( CPF_Parm )

struct FVector USFXEngagement_Annex::GetAnnexZoneLocation ( class Asfxoperationobjective* ObjectiveActor )
{
	static UFunction* pFnGetAnnexZoneLocation = NULL;

	if ( ! pFnGetAnnexZoneLocation )
		pFnGetAnnexZoneLocation = (UFunction*) UObject::GObjObjects()->Data[ 108376 ];

	USFXEngagement_Annex_execGetAnnexZoneLocation_Parms GetAnnexZoneLocation_Parms;
	GetAnnexZoneLocation_Parms.ObjectiveActor = ObjectiveActor;

	this->ProcessEvent ( pFnGetAnnexZoneLocation, &GetAnnexZoneLocation_Parms, NULL );

	return GetAnnexZoneLocation_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXEngagement_Annex.FinishWave
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Annex::FinishWave ( )
{
	static UFunction* pFnFinishWave = NULL;

	if ( ! pFnFinishWave )
		pFnFinishWave = (UFunction*) UObject::GObjObjects()->Data[ 108373 ];

	USFXEngagement_Annex_execFinishWave_Parms FinishWave_Parms;

	this->ProcessEvent ( pFnFinishWave, &FinishWave_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Annex.SetTimeLimit
// [0x00020002] 
// Parameters infos:
// float                          TimeLimit                      ( CPF_Parm )

void USFXEngagement_Annex::SetTimeLimit ( float TimeLimit )
{
	static UFunction* pFnSetTimeLimit = NULL;

	if ( ! pFnSetTimeLimit )
		pFnSetTimeLimit = (UFunction*) UObject::GObjObjects()->Data[ 108369 ];

	USFXEngagement_Annex_execSetTimeLimit_Parms SetTimeLimit_Parms;
	SetTimeLimit_Parms.TimeLimit = TimeLimit;

	this->ProcessEvent ( pFnSetTimeLimit, &SetTimeLimit_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Assassination.PlayWaveStartedInstructionsVO
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void USFXEngagement_Assassination::PlayWaveStartedInstructionsVO ( )
{
	static UFunction* pFnPlayWaveStartedInstructionsVO = NULL;

	if ( ! pFnPlayWaveStartedInstructionsVO )
		pFnPlayWaveStartedInstructionsVO = (UFunction*) UObject::GObjObjects()->Data[ 108415 ];

	USFXEngagement_Assassination_execPlayWaveStartedInstructionsVO_Parms PlayWaveStartedInstructionsVO_Parms;

	this->ProcessEvent ( pFnPlayWaveStartedInstructionsVO, &PlayWaveStartedInstructionsVO_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Assassination.PawnDied
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )
// class ABioPawn*                Killer                         ( CPF_OptionalParm | CPF_Parm )

void USFXEngagement_Assassination::PawnDied ( class ABioPawn* Pawn, class ABioPawn* Killer )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 108411 ];

	USFXEngagement_Assassination_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.Pawn = Pawn;
	PawnDied_Parms.Killer = Killer;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Assassination.PawnSpawned
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void USFXEngagement_Assassination::PawnSpawned ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnSpawned = NULL;

	if ( ! pFnPawnSpawned )
		pFnPawnSpawned = (UFunction*) UObject::GObjObjects()->Data[ 108407 ];

	USFXEngagement_Assassination_execPawnSpawned_Parms PawnSpawned_Parms;
	PawnSpawned_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnSpawned, &PawnSpawned_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Assassination.SetAssassinationTarget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void USFXEngagement_Assassination::SetAssassinationTarget ( class ABioPawn* Pawn )
{
	static UFunction* pFnSetAssassinationTarget = NULL;

	if ( ! pFnSetAssassinationTarget )
		pFnSetAssassinationTarget = (UFunction*) UObject::GObjObjects()->Data[ 108403 ];

	USFXEngagement_Assassination_execSetAssassinationTarget_Parms SetAssassinationTarget_Parms;
	SetAssassinationTarget_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnSetAssassinationTarget, &SetAssassinationTarget_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Assassination.GetAssassinationObjective
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ASFXObjective_AssassinationBase* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXObjective_AssassinationBase* USFXEngagement_Assassination::GetAssassinationObjective ( )
{
	static UFunction* pFnGetAssassinationObjective = NULL;

	if ( ! pFnGetAssassinationObjective )
		pFnGetAssassinationObjective = (UFunction*) UObject::GObjObjects()->Data[ 108392 ];

	USFXEngagement_Assassination_execGetAssassinationObjective_Parms GetAssassinationObjective_Parms;

	this->ProcessEvent ( pFnGetAssassinationObjective, &GetAssassinationObjective_Parms, NULL );

	return GetAssassinationObjective_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXEngagement_Assassination.ChooseAssassinationTarget
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXEngagement_Assassination::ChooseAssassinationTarget ( )
{
	static UFunction* pFnChooseAssassinationTarget = NULL;

	if ( ! pFnChooseAssassinationTarget )
		pFnChooseAssassinationTarget = (UFunction*) UObject::GObjObjects()->Data[ 108395 ];

	USFXEngagement_Assassination_execChooseAssassinationTarget_Parms ChooseAssassinationTarget_Parms;

	this->ProcessEvent ( pFnChooseAssassinationTarget, &ChooseAssassinationTarget_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Assassination.FinishWave
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Assassination::FinishWave ( )
{
	static UFunction* pFnFinishWave = NULL;

	if ( ! pFnFinishWave )
		pFnFinishWave = (UFunction*) UObject::GObjObjects()->Data[ 108389 ];

	USFXEngagement_Assassination_execFinishWave_Parms FinishWave_Parms;

	this->ProcessEvent ( pFnFinishWave, &FinishWave_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Assassination.BeginWave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXEngagement_Assassination::BeginWave ( )
{
	static UFunction* pFnBeginWave = NULL;

	if ( ! pFnBeginWave )
		pFnBeginWave = (UFunction*) UObject::GObjObjects()->Data[ 108384 ];

	USFXEngagement_Assassination_execBeginWave_Parms BeginWave_Parms;

	this->ProcessEvent ( pFnBeginWave, &BeginWave_Parms, NULL );

	return BeginWave_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXObjective_AssassinationBase.CurrentTargetDied
// [0x00020100] 
// Parameters infos:

void ASFXObjective_AssassinationBase::CurrentTargetDied ( )
{
	static UFunction* pFnCurrentTargetDied = NULL;

	if ( ! pFnCurrentTargetDied )
		pFnCurrentTargetDied = (UFunction*) UObject::GObjObjects()->Data[ 111788 ];

	ASFXObjective_AssassinationBase_execCurrentTargetDied_Parms CurrentTargetDied_Parms;

	this->ProcessEvent ( pFnCurrentTargetDied, &CurrentTargetDied_Parms, NULL );
};

// Function sfxgamempcontent.SFXObjective_AssassinationBase.SetCurrentTarget
// [0x00020100] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void ASFXObjective_AssassinationBase::SetCurrentTarget ( class ABioPawn* Pawn )
{
	static UFunction* pFnSetCurrentTarget = NULL;

	if ( ! pFnSetCurrentTarget )
		pFnSetCurrentTarget = (UFunction*) UObject::GObjObjects()->Data[ 111786 ];

	ASFXObjective_AssassinationBase_execSetCurrentTarget_Parms SetCurrentTarget_Parms;
	SetCurrentTarget_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnSetCurrentTarget, &SetCurrentTarget_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Disarm.FinishWave
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Disarm::FinishWave ( )
{
	static UFunction* pFnFinishWave = NULL;

	if ( ! pFnFinishWave )
		pFnFinishWave = (UFunction*) UObject::GObjObjects()->Data[ 108454 ];

	USFXEngagement_Disarm_execFinishWave_Parms FinishWave_Parms;

	this->ProcessEvent ( pFnFinishWave, &FinishWave_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Disarm.ActivateRandomBomb
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Disarm::ActivateRandomBomb ( )
{
	static UFunction* pFnActivateRandomBomb = NULL;

	if ( ! pFnActivateRandomBomb )
		pFnActivateRandomBomb = (UFunction*) UObject::GObjObjects()->Data[ 108451 ];

	USFXEngagement_Disarm_execActivateRandomBomb_Parms ActivateRandomBomb_Parms;

	this->ProcessEvent ( pFnActivateRandomBomb, &ActivateRandomBomb_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Disarm.ActivateNextBomb
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Disarm::ActivateNextBomb ( )
{
	static UFunction* pFnActivateNextBomb = NULL;

	if ( ! pFnActivateNextBomb )
		pFnActivateNextBomb = (UFunction*) UObject::GObjObjects()->Data[ 108449 ];

	USFXEngagement_Disarm_execActivateNextBomb_Parms ActivateNextBomb_Parms;

	this->ProcessEvent ( pFnActivateNextBomb, &ActivateNextBomb_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Disarm.OnBombDisarmed
// [0x00020002] 
// Parameters infos:
// class Asfxoperationobjective*  Bomb                           ( CPF_Parm )
// class ABioPawn*                oPawn                          ( CPF_Parm )

void USFXEngagement_Disarm::OnBombDisarmed ( class Asfxoperationobjective* Bomb, class ABioPawn* oPawn )
{
	static UFunction* pFnOnBombDisarmed = NULL;

	if ( ! pFnOnBombDisarmed )
		pFnOnBombDisarmed = (UFunction*) UObject::GObjObjects()->Data[ 108437 ];

	USFXEngagement_Disarm_execOnBombDisarmed_Parms OnBombDisarmed_Parms;
	OnBombDisarmed_Parms.Bomb = Bomb;
	OnBombDisarmed_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnOnBombDisarmed, &OnBombDisarmed_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Disarm.PlayTimeWarning
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXEngagement_Disarm::PlayTimeWarning ( )
{
	static UFunction* pFnPlayTimeWarning = NULL;

	if ( ! pFnPlayTimeWarning )
		pFnPlayTimeWarning = (UFunction*) UObject::GObjObjects()->Data[ 108436 ];

	USFXEngagement_Disarm_execPlayTimeWarning_Parms PlayTimeWarning_Parms;

	this->ProcessEvent ( pFnPlayTimeWarning, &PlayTimeWarning_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Disarm.PlayInstructionReminder
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXEngagement_Disarm::PlayInstructionReminder ( )
{
	static UFunction* pFnPlayInstructionReminder = NULL;

	if ( ! pFnPlayInstructionReminder )
		pFnPlayInstructionReminder = (UFunction*) UObject::GObjObjects()->Data[ 108435 ];

	USFXEngagement_Disarm_execPlayInstructionReminder_Parms PlayInstructionReminder_Parms;

	this->ProcessEvent ( pFnPlayInstructionReminder, &PlayInstructionReminder_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Disarm.PlayWaveInstructions
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXEngagement_Disarm::PlayWaveInstructions ( )
{
	static UFunction* pFnPlayWaveInstructions = NULL;

	if ( ! pFnPlayWaveInstructions )
		pFnPlayWaveInstructions = (UFunction*) UObject::GObjObjects()->Data[ 108434 ];

	USFXEngagement_Disarm_execPlayWaveInstructions_Parms PlayWaveInstructions_Parms;

	this->ProcessEvent ( pFnPlayWaveInstructions, &PlayWaveInstructions_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Disarm.PlayVOEvent
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   EventName                      ( CPF_Parm )

void USFXEngagement_Disarm::PlayVOEvent ( struct FName EventName )
{
	static UFunction* pFnPlayVOEvent = NULL;

	if ( ! pFnPlayVOEvent )
		pFnPlayVOEvent = (UFunction*) UObject::GObjObjects()->Data[ 108432 ];

	USFXEngagement_Disarm_execPlayVOEvent_Parms PlayVOEvent_Parms;
	memcpy ( &PlayVOEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnPlayVOEvent, &PlayVOEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Disarm.CancelCountdownTimer
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Disarm::CancelCountdownTimer ( )
{
	static UFunction* pFnCancelCountdownTimer = NULL;

	if ( ! pFnCancelCountdownTimer )
		pFnCancelCountdownTimer = (UFunction*) UObject::GObjObjects()->Data[ 108431 ];

	USFXEngagement_Disarm_execCancelCountdownTimer_Parms CancelCountdownTimer_Parms;

	this->ProcessEvent ( pFnCancelCountdownTimer, &CancelCountdownTimer_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Disarm.SetTimeLimit
// [0x00020002] 
// Parameters infos:
// float                          TimeLimit                      ( CPF_Parm )

void USFXEngagement_Disarm::SetTimeLimit ( float TimeLimit )
{
	static UFunction* pFnSetTimeLimit = NULL;

	if ( ! pFnSetTimeLimit )
		pFnSetTimeLimit = (UFunction*) UObject::GObjObjects()->Data[ 108429 ];

	USFXEngagement_Disarm_execSetTimeLimit_Parms SetTimeLimit_Parms;
	SetTimeLimit_Parms.TimeLimit = TimeLimit;

	this->ProcessEvent ( pFnSetTimeLimit, &SetTimeLimit_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Disarm.BeginWave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXEngagement_Disarm::BeginWave ( )
{
	static UFunction* pFnBeginWave = NULL;

	if ( ! pFnBeginWave )
		pFnBeginWave = (UFunction*) UObject::GObjObjects()->Data[ 108422 ];

	USFXEngagement_Disarm_execBeginWave_Parms BeginWave_Parms;

	this->ProcessEvent ( pFnBeginWave, &BeginWave_Parms, NULL );

	return BeginWave_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwave_operation.GetCreditsReward
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXEngagement_Extraction::GetCreditsReward ( )
{
	static UFunction* pFnGetCreditsReward = NULL;

	if ( ! pFnGetCreditsReward )
		pFnGetCreditsReward = (UFunction*) UObject::GObjObjects()->Data[ 108350 ];

	USFXEngagement_Extraction_execGetCreditsReward_Parms GetCreditsReward_Parms;

	this->ProcessEvent ( pFnGetCreditsReward, &GetCreditsReward_Parms, NULL );

	return GetCreditsReward_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwave_operation.GetCreditBudget
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXEngagement_Extraction::GetCreditBudget ( )
{
	static UFunction* pFnGetCreditBudget = NULL;

	if ( ! pFnGetCreditBudget )
		pFnGetCreditBudget = (UFunction*) UObject::GObjObjects()->Data[ 108348 ];

	USFXEngagement_Extraction_execGetCreditBudget_Parms GetCreditBudget_Parms;

	this->ProcessEvent ( pFnGetCreditBudget, &GetCreditBudget_Parms, NULL );

	return GetCreditBudget_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwave_operation.DistributeObjectiveScore
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Extraction::DistributeObjectiveScore ( )
{
	static UFunction* pFnDistributeObjectiveScore = NULL;

	if ( ! pFnDistributeObjectiveScore )
		pFnDistributeObjectiveScore = (UFunction*) UObject::GObjObjects()->Data[ 108333 ];

	USFXEngagement_Extraction_execDistributeObjectiveScore_Parms DistributeObjectiveScore_Parms;

	this->ProcessEvent ( pFnDistributeObjectiveScore, &DistributeObjectiveScore_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.CountdownTimerExpired
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Extraction::CountdownTimerExpired ( )
{
	static UFunction* pFnCountdownTimerExpired = NULL;

	if ( ! pFnCountdownTimerExpired )
		pFnCountdownTimerExpired = (UFunction*) UObject::GObjObjects()->Data[ 108331 ];

	USFXEngagement_Extraction_execCountdownTimerExpired_Parms CountdownTimerExpired_Parms;

	this->ProcessEvent ( pFnCountdownTimerExpired, &CountdownTimerExpired_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.CancelCountdownTimer
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Extraction::CancelCountdownTimer ( )
{
	static UFunction* pFnCancelCountdownTimer = NULL;

	if ( ! pFnCancelCountdownTimer )
		pFnCancelCountdownTimer = (UFunction*) UObject::GObjObjects()->Data[ 108329 ];

	USFXEngagement_Extraction_execCancelCountdownTimer_Parms CancelCountdownTimer_Parms;

	this->ProcessEvent ( pFnCancelCountdownTimer, &CancelCountdownTimer_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.LocalPlayerTimeWarningHint
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Extraction::LocalPlayerTimeWarningHint ( )
{
	static UFunction* pFnLocalPlayerTimeWarningHint = NULL;

	if ( ! pFnLocalPlayerTimeWarningHint )
		pFnLocalPlayerTimeWarningHint = (UFunction*) UObject::GObjObjects()->Data[ 108326 ];

	USFXEngagement_Extraction_execLocalPlayerTimeWarningHint_Parms LocalPlayerTimeWarningHint_Parms;

	this->ProcessEvent ( pFnLocalPlayerTimeWarningHint, &LocalPlayerTimeWarningHint_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.SetTimeLimit
// [0x00020002] 
// Parameters infos:
// float                          TimeLimit                      ( CPF_Parm )

void USFXEngagement_Extraction::SetTimeLimit ( float TimeLimit )
{
	static UFunction* pFnSetTimeLimit = NULL;

	if ( ! pFnSetTimeLimit )
		pFnSetTimeLimit = (UFunction*) UObject::GObjObjects()->Data[ 108322 ];

	USFXEngagement_Extraction_execSetTimeLimit_Parms SetTimeLimit_Parms;
	SetTimeLimit_Parms.TimeLimit = TimeLimit;

	this->ProcessEvent ( pFnSetTimeLimit, &SetTimeLimit_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.BeginWaveTimeLimit
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Extraction::BeginWaveTimeLimit ( )
{
	static UFunction* pFnBeginWaveTimeLimit = NULL;

	if ( ! pFnBeginWaveTimeLimit )
		pFnBeginWaveTimeLimit = (UFunction*) UObject::GObjObjects()->Data[ 108318 ];

	USFXEngagement_Extraction_execBeginWaveTimeLimit_Parms BeginWaveTimeLimit_Parms;

	this->ProcessEvent ( pFnBeginWaveTimeLimit, &BeginWaveTimeLimit_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.DeactivateObjectiveCombatZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  ObjectiveActor                 ( CPF_Parm )

void USFXEngagement_Extraction::DeactivateObjectiveCombatZone ( class AActor* ObjectiveActor )
{
	static UFunction* pFnDeactivateObjectiveCombatZone = NULL;

	if ( ! pFnDeactivateObjectiveCombatZone )
		pFnDeactivateObjectiveCombatZone = (UFunction*) UObject::GObjObjects()->Data[ 108313 ];

	USFXEngagement_Extraction_execDeactivateObjectiveCombatZone_Parms DeactivateObjectiveCombatZone_Parms;
	DeactivateObjectiveCombatZone_Parms.ObjectiveActor = ObjectiveActor;

	this->ProcessEvent ( pFnDeactivateObjectiveCombatZone, &DeactivateObjectiveCombatZone_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.ActivateObjectiveCombatZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  ObjectiveActor                 ( CPF_Parm )

void USFXEngagement_Extraction::ActivateObjectiveCombatZone ( class AActor* ObjectiveActor )
{
	static UFunction* pFnActivateObjectiveCombatZone = NULL;

	if ( ! pFnActivateObjectiveCombatZone )
		pFnActivateObjectiveCombatZone = (UFunction*) UObject::GObjObjects()->Data[ 108307 ];

	USFXEngagement_Extraction_execActivateObjectiveCombatZone_Parms ActivateObjectiveCombatZone_Parms;
	ActivateObjectiveCombatZone_Parms.ObjectiveActor = ObjectiveActor;

	this->ProcessEvent ( pFnActivateObjectiveCombatZone, &ActivateObjectiveCombatZone_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.PawnDestroyed
// [0x00020102] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void USFXEngagement_Extraction::PawnDestroyed ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnDestroyed = NULL;

	if ( ! pFnPawnDestroyed )
		pFnPawnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 108312 ];

	USFXEngagement_Extraction_execPawnDestroyed_Parms PawnDestroyed_Parms;
	PawnDestroyed_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnDestroyed, &PawnDestroyed_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.PawnRevived
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void USFXEngagement_Extraction::PawnRevived ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnRevived = NULL;

	if ( ! pFnPawnRevived )
		pFnPawnRevived = (UFunction*) UObject::GObjObjects()->Data[ 108303 ];

	USFXEngagement_Extraction_execPawnRevived_Parms PawnRevived_Parms;
	PawnRevived_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnRevived, &PawnRevived_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.PawnDowned
// [0x00020102] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void USFXEngagement_Extraction::PawnDowned ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnDowned = NULL;

	if ( ! pFnPawnDowned )
		pFnPawnDowned = (UFunction*) UObject::GObjObjects()->Data[ 108299 ];

	USFXEngagement_Extraction_execPawnDowned_Parms PawnDowned_Parms;
	PawnDowned_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnDowned, &PawnDowned_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.DetermineObjectivesToSpawn
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Extraction::DetermineObjectivesToSpawn ( )
{
	static UFunction* pFnDetermineObjectivesToSpawn = NULL;

	if ( ! pFnDetermineObjectivesToSpawn )
		pFnDetermineObjectivesToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 108283 ];

	USFXEngagement_Extraction_execDetermineObjectivesToSpawn_Parms DetermineObjectivesToSpawn_Parms;

	this->ProcessEvent ( pFnDetermineObjectivesToSpawn, &DetermineObjectivesToSpawn_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.RateEnemyStart
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        NavPoint                       ( CPF_Parm )

float USFXEngagement_Extraction::RateEnemyStart ( class ANavigationPoint* NavPoint )
{
	static UFunction* pFnRateEnemyStart = NULL;

	if ( ! pFnRateEnemyStart )
		pFnRateEnemyStart = (UFunction*) UObject::GObjObjects()->Data[ 108269 ];

	USFXEngagement_Extraction_execRateEnemyStart_Parms RateEnemyStart_Parms;
	RateEnemyStart_Parms.NavPoint = NavPoint;

	this->ProcessEvent ( pFnRateEnemyStart, &RateEnemyStart_Parms, NULL );

	return RateEnemyStart_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwave_operation.DelayedFinishWave
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Extraction::DelayedFinishWave ( )
{
	static UFunction* pFnDelayedFinishWave = NULL;

	if ( ! pFnDelayedFinishWave )
		pFnDelayedFinishWave = (UFunction*) UObject::GObjObjects()->Data[ 108267 ];

	USFXEngagement_Extraction_execDelayedFinishWave_Parms DelayedFinishWave_Parms;

	this->ProcessEvent ( pFnDelayedFinishWave, &DelayedFinishWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.FinishWave
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Extraction::FinishWave ( )
{
	static UFunction* pFnFinishWave = NULL;

	if ( ! pFnFinishWave )
		pFnFinishWave = (UFunction*) UObject::GObjObjects()->Data[ 108262 ];

	USFXEngagement_Extraction_execFinishWave_Parms FinishWave_Parms;

	this->ProcessEvent ( pFnFinishWave, &FinishWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.ShowBeginWaveMessage
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Extraction::ShowBeginWaveMessage ( )
{
	static UFunction* pFnShowBeginWaveMessage = NULL;

	if ( ! pFnShowBeginWaveMessage )
		pFnShowBeginWaveMessage = (UFunction*) UObject::GObjObjects()->Data[ 108260 ];

	USFXEngagement_Extraction_execShowBeginWaveMessage_Parms ShowBeginWaveMessage_Parms;

	this->ProcessEvent ( pFnShowBeginWaveMessage, &ShowBeginWaveMessage_Parms, NULL );
};

// Function sfxgamempcontent.sfxwave_operation.BeginWave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXEngagement_Extraction::BeginWave ( )
{
	static UFunction* pFnBeginWave = NULL;

	if ( ! pFnBeginWave )
		pFnBeginWave = (UFunction*) UObject::GObjObjects()->Data[ 108216 ];

	USFXEngagement_Extraction_execBeginWave_Parms BeginWave_Parms;

	this->ProcessEvent ( pFnBeginWave, &BeginWave_Parms, NULL );

	return BeginWave_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwave_operation.ObjectiveSpawnSort
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXOperation_ObjectiveSpawnPoint* A                              ( CPF_Parm )
// class ASFXOperation_ObjectiveSpawnPoint* B                              ( CPF_Parm )

int USFXEngagement_Extraction::ObjectiveSpawnSort ( class ASFXOperation_ObjectiveSpawnPoint* A, class ASFXOperation_ObjectiveSpawnPoint* B )
{
	static UFunction* pFnObjectiveSpawnSort = NULL;

	if ( ! pFnObjectiveSpawnSort )
		pFnObjectiveSpawnSort = (UFunction*) UObject::GObjObjects()->Data[ 108212 ];

	USFXEngagement_Extraction_execObjectiveSpawnSort_Parms ObjectiveSpawnSort_Parms;
	ObjectiveSpawnSort_Parms.A = A;
	ObjectiveSpawnSort_Parms.B = B;

	this->ProcessEvent ( pFnObjectiveSpawnSort, &ObjectiveSpawnSort_Parms, NULL );

	return ObjectiveSpawnSort_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwave_operation.InitializeWave
// [0x00020002] 
// Parameters infos:
// class ASFXWaveManager*         OwnerManager                   ( CPF_Parm )

void USFXEngagement_Extraction::InitializeWave ( class ASFXWaveManager* OwnerManager )
{
	static UFunction* pFnInitializeWave = NULL;

	if ( ! pFnInitializeWave )
		pFnInitializeWave = (UFunction*) UObject::GObjObjects()->Data[ 108207 ];

	USFXEngagement_Extraction_execInitializeWave_Parms InitializeWave_Parms;
	InitializeWave_Parms.OwnerManager = OwnerManager;

	this->ProcessEvent ( pFnInitializeWave, &InitializeWave_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Retrieve.PickupDroppedOff
// [0x00020002] 
// Parameters infos:
// class ASFXPawn_Player*         Player                         ( CPF_Parm )
// class Asfxoperationobjective*  Pickup                         ( CPF_Parm )

void USFXEngagement_Retrieve::PickupDroppedOff ( class ASFXPawn_Player* Player, class Asfxoperationobjective* Pickup )
{
	static UFunction* pFnPickupDroppedOff = NULL;

	if ( ! pFnPickupDroppedOff )
		pFnPickupDroppedOff = (UFunction*) UObject::GObjObjects()->Data[ 108483 ];

	USFXEngagement_Retrieve_execPickupDroppedOff_Parms PickupDroppedOff_Parms;
	PickupDroppedOff_Parms.Player = Player;
	PickupDroppedOff_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnPickupDroppedOff, &PickupDroppedOff_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Retrieve.PlayerDroppedObject
// [0x00020002] 
// Parameters infos:
// class ASFXPawn_Player*         Player                         ( CPF_Parm )

void USFXEngagement_Retrieve::PlayerDroppedObject ( class ASFXPawn_Player* Player )
{
	static UFunction* pFnPlayerDroppedObject = NULL;

	if ( ! pFnPlayerDroppedObject )
		pFnPlayerDroppedObject = (UFunction*) UObject::GObjObjects()->Data[ 108481 ];

	USFXEngagement_Retrieve_execPlayerDroppedObject_Parms PlayerDroppedObject_Parms;
	PlayerDroppedObject_Parms.Player = Player;

	this->ProcessEvent ( pFnPlayerDroppedObject, &PlayerDroppedObject_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Retrieve.PlayerPickedUpObject
// [0x00020002] 
// Parameters infos:
// class ASFXPawn_Player*         Player                         ( CPF_Parm )

void USFXEngagement_Retrieve::PlayerPickedUpObject ( class ASFXPawn_Player* Player )
{
	static UFunction* pFnPlayerPickedUpObject = NULL;

	if ( ! pFnPlayerPickedUpObject )
		pFnPlayerPickedUpObject = (UFunction*) UObject::GObjObjects()->Data[ 108479 ];

	USFXEngagement_Retrieve_execPlayerPickedUpObject_Parms PlayerPickedUpObject_Parms;
	PlayerPickedUpObject_Parms.Player = Player;

	this->ProcessEvent ( pFnPlayerPickedUpObject, &PlayerPickedUpObject_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Retrieve.IsCarryingPickup
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXPawn_Player*         Player                         ( CPF_Parm )

bool USFXEngagement_Retrieve::IsCarryingPickup ( class ASFXPawn_Player* Player )
{
	static UFunction* pFnIsCarryingPickup = NULL;

	if ( ! pFnIsCarryingPickup )
		pFnIsCarryingPickup = (UFunction*) UObject::GObjObjects()->Data[ 108476 ];

	USFXEngagement_Retrieve_execIsCarryingPickup_Parms IsCarryingPickup_Parms;
	IsCarryingPickup_Parms.Player = Player;

	this->ProcessEvent ( pFnIsCarryingPickup, &IsCarryingPickup_Parms, NULL );

	return IsCarryingPickup_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXEngagement_Retrieve.UpdateObjectiveStatus
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Retrieve::UpdateObjectiveStatus ( )
{
	static UFunction* pFnUpdateObjectiveStatus = NULL;

	if ( ! pFnUpdateObjectiveStatus )
		pFnUpdateObjectiveStatus = (UFunction*) UObject::GObjObjects()->Data[ 108474 ];

	USFXEngagement_Retrieve_execUpdateObjectiveStatus_Parms UpdateObjectiveStatus_Parms;

	this->ProcessEvent ( pFnUpdateObjectiveStatus, &UpdateObjectiveStatus_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Retrieve.ActivateRandomPickup
// [0x00020002] 
// Parameters infos:

void USFXEngagement_Retrieve::ActivateRandomPickup ( )
{
	static UFunction* pFnActivateRandomPickup = NULL;

	if ( ! pFnActivateRandomPickup )
		pFnActivateRandomPickup = (UFunction*) UObject::GObjObjects()->Data[ 108471 ];

	USFXEngagement_Retrieve_execActivateRandomPickup_Parms ActivateRandomPickup_Parms;

	this->ProcessEvent ( pFnActivateRandomPickup, &ActivateRandomPickup_Parms, NULL );
};

// Function sfxgamempcontent.SFXEngagement_Retrieve.BeginWave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXEngagement_Retrieve::BeginWave ( )
{
	static UFunction* pFnBeginWave = NULL;

	if ( ! pFnBeginWave )
		pFnBeginWave = (UFunction*) UObject::GObjObjects()->Data[ 108469 ];

	USFXEngagement_Retrieve_execBeginWave_Parms BeginWave_Parms;

	this->ProcessEvent ( pFnBeginWave, &BeginWave_Parms, NULL );

	return BeginWave_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgameeffect_matchconsumablebase.Consume
// [0x00020002] 
// Parameters infos:

void Usfxgameeffect_matchconsumablebase::Consume ( )
{
	static UFunction* pFnConsume = NULL;

	if ( ! pFnConsume )
		pFnConsume = (UFunction*) UObject::GObjObjects()->Data[ 108505 ];

	Usfxgameeffect_matchconsumablebase_execConsume_Parms Consume_Parms;

	this->ProcessEvent ( pFnConsume, &Consume_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameeffect_matchconsumablebase.OnApplied
// [0x00020002] 
// Parameters infos:

void Usfxgameeffect_matchconsumablebase::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 108501 ];

	Usfxgameeffect_matchconsumablebase_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.ClearCrossLevelReferences
// [0x00020002] 
// Parameters infos:

void ASFXGameInfoMP::ClearCrossLevelReferences ( )
{
	static UFunction* pFnClearCrossLevelReferences = NULL;

	if ( ! pFnClearCrossLevelReferences )
		pFnClearCrossLevelReferences = (UFunction*) UObject::GObjObjects()->Data[ 108675 ];

	ASFXGameInfoMP_execClearCrossLevelReferences_Parms ClearCrossLevelReferences_Parms;

	this->ProcessEvent ( pFnClearCrossLevelReferences, &ClearCrossLevelReferences_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.CallJoinInProgressDelegates
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXGameInfoMP::CallJoinInProgressDelegates ( )
{
	static UFunction* pFnCallJoinInProgressDelegates = NULL;

	if ( ! pFnCallJoinInProgressDelegates )
		pFnCallJoinInProgressDelegates = (UFunction*) UObject::GObjObjects()->Data[ 108673 ];

	ASFXGameInfoMP_execCallJoinInProgressDelegates_Parms CallJoinInProgressDelegates_Parms;

	this->ProcessEvent ( pFnCallJoinInProgressDelegates, &CallJoinInProgressDelegates_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.UnRegisterJoinInProgressDelegate
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         DelegateToRemove               ( CPF_Parm | CPF_NeedCtorLink )

void ASFXGameInfoMP::UnRegisterJoinInProgressDelegate ( struct FScriptDelegate DelegateToRemove )
{
	static UFunction* pFnUnRegisterJoinInProgressDelegate = NULL;

	if ( ! pFnUnRegisterJoinInProgressDelegate )
		pFnUnRegisterJoinInProgressDelegate = (UFunction*) UObject::GObjObjects()->Data[ 108671 ];

	ASFXGameInfoMP_execUnRegisterJoinInProgressDelegate_Parms UnRegisterJoinInProgressDelegate_Parms;
	memcpy ( &UnRegisterJoinInProgressDelegate_Parms.DelegateToRemove, &DelegateToRemove, 0xC );

	this->ProcessEvent ( pFnUnRegisterJoinInProgressDelegate, &UnRegisterJoinInProgressDelegate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.RegisterJoinInProgressDelegate
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         NewDelegate                    ( CPF_Parm | CPF_NeedCtorLink )

void ASFXGameInfoMP::RegisterJoinInProgressDelegate ( struct FScriptDelegate NewDelegate )
{
	static UFunction* pFnRegisterJoinInProgressDelegate = NULL;

	if ( ! pFnRegisterJoinInProgressDelegate )
		pFnRegisterJoinInProgressDelegate = (UFunction*) UObject::GObjObjects()->Data[ 108669 ];

	ASFXGameInfoMP_execRegisterJoinInProgressDelegate_Parms RegisterJoinInProgressDelegate_Parms;
	memcpy ( &RegisterJoinInProgressDelegate_Parms.NewDelegate, &NewDelegate, 0xC );

	this->ProcessEvent ( pFnRegisterJoinInProgressDelegate, &RegisterJoinInProgressDelegate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.SpawnEnemySquad
// [0x00020002] 
// Parameters infos:
// class ABioBaseSquad*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ABioBaseSquad* ASFXGameInfoMP::SpawnEnemySquad ( )
{
	static UFunction* pFnSpawnEnemySquad = NULL;

	if ( ! pFnSpawnEnemySquad )
		pFnSpawnEnemySquad = (UFunction*) UObject::GObjObjects()->Data[ 108667 ];

	ASFXGameInfoMP_execSpawnEnemySquad_Parms SpawnEnemySquad_Parms;

	this->ProcessEvent ( pFnSpawnEnemySquad, &SpawnEnemySquad_Parms, NULL );

	return SpawnEnemySquad_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGameInfoMP.GenericPlayerInitialization
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void ASFXGameInfoMP::GenericPlayerInitialization ( class AController* C )
{
	static UFunction* pFnGenericPlayerInitialization = NULL;

	if ( ! pFnGenericPlayerInitialization )
		pFnGenericPlayerInitialization = (UFunction*) UObject::GObjObjects()->Data[ 108665 ];

	ASFXGameInfoMP_execGenericPlayerInitialization_Parms GenericPlayerInitialization_Parms;
	GenericPlayerInitialization_Parms.C = C;

	this->ProcessEvent ( pFnGenericPlayerInitialization, &GenericPlayerInitialization_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.Logout
// [0x00020002] 
// Parameters infos:
// class AController*             Exiting                        ( CPF_Parm )

void ASFXGameInfoMP::Logout ( class AController* Exiting )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = (UFunction*) UObject::GObjObjects()->Data[ 108662 ];

	ASFXGameInfoMP_execLogout_Parms Logout_Parms;
	Logout_Parms.Exiting = Exiting;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.FindInactivePRI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_Parm )

bool ASFXGameInfoMP::FindInactivePRI ( class APlayerController* PC )
{
	static UFunction* pFnFindInactivePRI = NULL;

	if ( ! pFnFindInactivePRI )
		pFnFindInactivePRI = (UFunction*) UObject::GObjObjects()->Data[ 108659 ];

	ASFXGameInfoMP_execFindInactivePRI_Parms FindInactivePRI_Parms;
	FindInactivePRI_Parms.PC = PC;

	this->ProcessEvent ( pFnFindInactivePRI, &FindInactivePRI_Parms, NULL );

	return FindInactivePRI_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGameInfoMP.PreventPermanentDeath
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                KilledPawn                     ( CPF_Parm )

bool ASFXGameInfoMP::PreventPermanentDeath ( class ABioPawn* KilledPawn )
{
	static UFunction* pFnPreventPermanentDeath = NULL;

	if ( ! pFnPreventPermanentDeath )
		pFnPreventPermanentDeath = (UFunction*) UObject::GObjObjects()->Data[ 108656 ];

	ASFXGameInfoMP_execPreventPermanentDeath_Parms PreventPermanentDeath_Parms;
	PreventPermanentDeath_Parms.KilledPawn = KilledPawn;

	this->ProcessEvent ( pFnPreventPermanentDeath, &PreventPermanentDeath_Parms, NULL );

	return PreventPermanentDeath_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGameInfoMP.OnPlayerSquadDeath
// [0x00020000] 
// Parameters infos:

void ASFXGameInfoMP::OnPlayerSquadDeath ( )
{
	static UFunction* pFnOnPlayerSquadDeath = NULL;

	if ( ! pFnOnPlayerSquadDeath )
		pFnOnPlayerSquadDeath = (UFunction*) UObject::GObjObjects()->Data[ 108655 ];

	ASFXGameInfoMP_execOnPlayerSquadDeath_Parms OnPlayerSquadDeath_Parms;

	this->ProcessEvent ( pFnOnPlayerSquadDeath, &OnPlayerSquadDeath_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.GetSeamlessTravelActorList
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXGameInfoMP::eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 108650 ];

	ASFXGameInfoMP_eventGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function sfxgamempcontent.SFXGameInfoMP.RegisterServer
// [0x00020000] 
// Parameters infos:

void ASFXGameInfoMP::RegisterServer ( )
{
	static UFunction* pFnRegisterServer = NULL;

	if ( ! pFnRegisterServer )
		pFnRegisterServer = (UFunction*) UObject::GObjObjects()->Data[ 108595 ];

	ASFXGameInfoMP_execRegisterServer_Parms RegisterServer_Parms;

	this->ProcessEvent ( pFnRegisterServer, &RegisterServer_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.QuitToMainMenu
// [0x00020002] 
// Parameters infos:

void ASFXGameInfoMP::QuitToMainMenu ( )
{
	static UFunction* pFnQuitToMainMenu = NULL;

	if ( ! pFnQuitToMainMenu )
		pFnQuitToMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 108594 ];

	ASFXGameInfoMP_execQuitToMainMenu_Parms QuitToMainMenu_Parms;

	this->ProcessEvent ( pFnQuitToMainMenu, &QuitToMainMenu_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.QuitToLobby
// [0x00020002] 
// Parameters infos:
// struct FString                 ExtraURLOption                 ( CPF_Parm | CPF_NeedCtorLink )

void ASFXGameInfoMP::QuitToLobby ( struct FString ExtraURLOption )
{
	static UFunction* pFnQuitToLobby = NULL;

	if ( ! pFnQuitToLobby )
		pFnQuitToLobby = (UFunction*) UObject::GObjObjects()->Data[ 108592 ];

	ASFXGameInfoMP_execQuitToLobby_Parms QuitToLobby_Parms;
	memcpy ( &QuitToLobby_Parms.ExtraURLOption, &ExtraURLOption, 0xC );

	this->ProcessEvent ( pFnQuitToLobby, &QuitToLobby_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.EndMatch
// [0x00020002] 
// Parameters infos:

void ASFXGameInfoMP::EndMatch ( )
{
	static UFunction* pFnEndMatch = NULL;

	if ( ! pFnEndMatch )
		pFnEndMatch = (UFunction*) UObject::GObjObjects()->Data[ 108591 ];

	ASFXGameInfoMP_execEndMatch_Parms EndMatch_Parms;

	this->ProcessEvent ( pFnEndMatch, &EndMatch_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.RestartMatch
// [0x00020002] 
// Parameters infos:

void ASFXGameInfoMP::RestartMatch ( )
{
	static UFunction* pFnRestartMatch = NULL;

	if ( ! pFnRestartMatch )
		pFnRestartMatch = (UFunction*) UObject::GObjObjects()->Data[ 108590 ];

	ASFXGameInfoMP_execRestartMatch_Parms RestartMatch_Parms;

	this->ProcessEvent ( pFnRestartMatch, &RestartMatch_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.StartMatch
// [0x00020002] 
// Parameters infos:

void ASFXGameInfoMP::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 108589 ];

	ASFXGameInfoMP_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.AreAllPlayersDeath
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXGameInfoMP::AreAllPlayersDeath ( )
{
	static UFunction* pFnAreAllPlayersDeath = NULL;

	if ( ! pFnAreAllPlayersDeath )
		pFnAreAllPlayersDeath = (UFunction*) UObject::GObjObjects()->Data[ 108586 ];

	ASFXGameInfoMP_execAreAllPlayersDeath_Parms AreAllPlayersDeath_Parms;

	this->ProcessEvent ( pFnAreAllPlayersDeath, &AreAllPlayersDeath_Parms, NULL );

	return AreAllPlayersDeath_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGameInfoMP.IsRestarting
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class Asfxplayercontrollermp*  PC                             ( CPF_Parm )

bool ASFXGameInfoMP::IsRestarting ( class Asfxplayercontrollermp* PC )
{
	static UFunction* pFnIsRestarting = NULL;

	if ( ! pFnIsRestarting )
		pFnIsRestarting = (UFunction*) UObject::GObjObjects()->Data[ 108569 ];

	ASFXGameInfoMP_execIsRestarting_Parms IsRestarting_Parms;
	IsRestarting_Parms.PC = PC;

	this->ProcessEvent ( pFnIsRestarting, &IsRestarting_Parms, NULL );

	return IsRestarting_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGameInfoMP.TickRestartPlayerAsync
// [0x00020002] 
// Parameters infos:

void ASFXGameInfoMP::TickRestartPlayerAsync ( )
{
	static UFunction* pFnTickRestartPlayerAsync = NULL;

	if ( ! pFnTickRestartPlayerAsync )
		pFnTickRestartPlayerAsync = (UFunction*) UObject::GObjObjects()->Data[ 108577 ];

	ASFXGameInfoMP_execTickRestartPlayerAsync_Parms TickRestartPlayerAsync_Parms;

	this->ProcessEvent ( pFnTickRestartPlayerAsync, &TickRestartPlayerAsync_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.RestartPlayerAsync
// [0x00020002] 
// Parameters infos:
// class Asfxplayercontrollermp*  PC                             ( CPF_Parm )

void ASFXGameInfoMP::RestartPlayerAsync ( class Asfxplayercontrollermp* PC )
{
	static UFunction* pFnRestartPlayerAsync = NULL;

	if ( ! pFnRestartPlayerAsync )
		pFnRestartPlayerAsync = (UFunction*) UObject::GObjObjects()->Data[ 108572 ];

	ASFXGameInfoMP_execRestartPlayerAsync_Parms RestartPlayerAsync_Parms;
	RestartPlayerAsync_Parms.PC = PC;

	this->ProcessEvent ( pFnRestartPlayerAsync, &RestartPlayerAsync_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.RestartPlayer
// [0x00020002] 
// Parameters infos:
// class AController*             NewPlayer                      ( CPF_Parm )

void ASFXGameInfoMP::RestartPlayer ( class AController* NewPlayer )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 108565 ];

	ASFXGameInfoMP_execRestartPlayer_Parms RestartPlayer_Parms;
	RestartPlayer_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.RatePlayerStart
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerStart*            P                              ( CPF_Parm )
// unsigned char                  Team                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

float ASFXGameInfoMP::RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player )
{
	static UFunction* pFnRatePlayerStart = NULL;

	if ( ! pFnRatePlayerStart )
		pFnRatePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 108557 ];

	ASFXGameInfoMP_execRatePlayerStart_Parms RatePlayerStart_Parms;
	RatePlayerStart_Parms.P = P;
	RatePlayerStart_Parms.Team = Team;
	RatePlayerStart_Parms.Player = Player;

	this->ProcessEvent ( pFnRatePlayerStart, &RatePlayerStart_Parms, NULL );

	return RatePlayerStart_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGameInfoMP.RateBioPlayerStart
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioStartLocationMP*     P                              ( CPF_Parm )
// unsigned char                  Team                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

float ASFXGameInfoMP::RateBioPlayerStart ( class ABioStartLocationMP* P, unsigned char Team, class AController* Player )
{
	static UFunction* pFnRateBioPlayerStart = NULL;

	if ( ! pFnRateBioPlayerStart )
		pFnRateBioPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 108549 ];

	ASFXGameInfoMP_execRateBioPlayerStart_Parms RateBioPlayerStart_Parms;
	RateBioPlayerStart_Parms.P = P;
	RateBioPlayerStart_Parms.Team = Team;
	RateBioPlayerStart_Parms.Player = Player;

	this->ProcessEvent ( pFnRateBioPlayerStart, &RateBioPlayerStart_Parms, NULL );

	return RateBioPlayerStart_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGameInfoMP.SpawnDefaultPawnFor
// [0x00024002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewPlayer                      ( CPF_Parm )
// class ANavigationPoint*        StartSpot                      ( CPF_Parm )
// unsigned long                  bNoCollisionFail               ( CPF_OptionalParm | CPF_Parm )

class APawn* ASFXGameInfoMP::SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot, unsigned long bNoCollisionFail )
{
	static UFunction* pFnSpawnDefaultPawnFor = NULL;

	if ( ! pFnSpawnDefaultPawnFor )
		pFnSpawnDefaultPawnFor = (UFunction*) UObject::GObjObjects()->Data[ 108534 ];

	ASFXGameInfoMP_execSpawnDefaultPawnFor_Parms SpawnDefaultPawnFor_Parms;
	SpawnDefaultPawnFor_Parms.NewPlayer = NewPlayer;
	SpawnDefaultPawnFor_Parms.StartSpot = StartSpot;
	SpawnDefaultPawnFor_Parms.bNoCollisionFail = bNoCollisionFail;

	this->ProcessEvent ( pFnSpawnDefaultPawnFor, &SpawnDefaultPawnFor_Parms, NULL );

	return SpawnDefaultPawnFor_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGameInfoMP.FindPlayerStart
// [0x00024002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* ASFXGameInfoMP::FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnFindPlayerStart = NULL;

	if ( ! pFnFindPlayerStart )
		pFnFindPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 108522 ];

	ASFXGameInfoMP_execFindPlayerStart_Parms FindPlayerStart_Parms;
	FindPlayerStart_Parms.Player = Player;
	FindPlayerStart_Parms.InTeam = InTeam;
	memcpy ( &FindPlayerStart_Parms.IncomingName, &IncomingName, 0xC );

	this->ProcessEvent ( pFnFindPlayerStart, &FindPlayerStart_Parms, NULL );

	return FindPlayerStart_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGameInfoMP.Tick
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void ASFXGameInfoMP::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 108520 ];

	ASFXGameInfoMP_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXGameInfoMP::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 108519 ];

	ASFXGameInfoMP_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameInfoMP.PreBeginPlay
// [0x00020002] 
// Parameters infos:

void ASFXGameInfoMP::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 108515 ];

	ASFXGameInfoMP_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxhostmigrationmp.IsReadyToStartMatch
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ConnectedPlayerCount           ( CPF_Parm )

bool Usfxhostmigrationmp::IsReadyToStartMatch ( int ConnectedPlayerCount )
{
	static UFunction* pFnIsReadyToStartMatch = NULL;

	if ( ! pFnIsReadyToStartMatch )
		pFnIsReadyToStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 108608 ];

	Usfxhostmigrationmp_execIsReadyToStartMatch_Parms IsReadyToStartMatch_Parms;
	IsReadyToStartMatch_Parms.ConnectedPlayerCount = ConnectedPlayerCount;

	this->ProcessEvent ( pFnIsReadyToStartMatch, &IsReadyToStartMatch_Parms, NULL );

	return IsReadyToStartMatch_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxhostmigrationmp.RestoreGRI
// [0x00020002] 
// Parameters infos:
// class ASFXGRI*                 GRI                            ( CPF_Parm )

void Usfxhostmigrationmp::RestoreGRI ( class ASFXGRI* GRI )
{
	static UFunction* pFnRestoreGRI = NULL;

	if ( ! pFnRestoreGRI )
		pFnRestoreGRI = (UFunction*) UObject::GObjObjects()->Data[ 111323 ];

	Usfxhostmigrationmp_execRestoreGRI_Parms RestoreGRI_Parms;
	RestoreGRI_Parms.GRI = GRI;

	this->ProcessEvent ( pFnRestoreGRI, &RestoreGRI_Parms, NULL );
};

// Function sfxgamempcontent.sfxhostmigrationmp.RestorePRI
// [0x00020002] 
// Parameters infos:
// class Asfxpri*                 PRI                            ( CPF_Parm )

void Usfxhostmigrationmp::RestorePRI ( class Asfxpri* PRI )
{
	static UFunction* pFnRestorePRI = NULL;

	if ( ! pFnRestorePRI )
		pFnRestorePRI = (UFunction*) UObject::GObjObjects()->Data[ 111318 ];

	Usfxhostmigrationmp_execRestorePRI_Parms RestorePRI_Parms;
	RestorePRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnRestorePRI, &RestorePRI_Parms, NULL );
};

// Function sfxgamempcontent.sfxhostmigrationmp.FindPlayer
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            NetId                          ( CPF_Parm )
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FHMPlayer               OutPlayer                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxhostmigrationmp::FindPlayer ( struct FUniqueNetId NetId, struct FString PlayerName, struct FHMPlayer* OutPlayer )
{
	static UFunction* pFnFindPlayer = NULL;

	if ( ! pFnFindPlayer )
		pFnFindPlayer = (UFunction*) UObject::GObjObjects()->Data[ 111312 ];

	Usfxhostmigrationmp_execFindPlayer_Parms FindPlayer_Parms;
	memcpy ( &FindPlayer_Parms.NetId, &NetId, 0x8 );
	memcpy ( &FindPlayer_Parms.PlayerName, &PlayerName, 0xC );

	this->ProcessEvent ( pFnFindPlayer, &FindPlayer_Parms, NULL );

	if ( OutPlayer )
		memcpy ( OutPlayer, &FindPlayer_Parms.OutPlayer, 0x38 );

	return FindPlayer_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxhostmigrationmp.SaveGRI
// [0x00020002] 
// Parameters infos:
// class ASFXGRI*                 GRI                            ( CPF_Parm )

void Usfxhostmigrationmp::SaveGRI ( class ASFXGRI* GRI )
{
	static UFunction* pFnSaveGRI = NULL;

	if ( ! pFnSaveGRI )
		pFnSaveGRI = (UFunction*) UObject::GObjObjects()->Data[ 111302 ];

	Usfxhostmigrationmp_execSaveGRI_Parms SaveGRI_Parms;
	SaveGRI_Parms.GRI = GRI;

	this->ProcessEvent ( pFnSaveGRI, &SaveGRI_Parms, NULL );
};

// Function sfxgamempcontent.sfxhostmigrationmp.ResetWaveToRestore
// [0x00020002] 
// Parameters infos:

void Usfxhostmigrationmp::ResetWaveToRestore ( )
{
	static UFunction* pFnResetWaveToRestore = NULL;

	if ( ! pFnResetWaveToRestore )
		pFnResetWaveToRestore = (UFunction*) UObject::GObjObjects()->Data[ 111310 ];

	Usfxhostmigrationmp_execResetWaveToRestore_Parms ResetWaveToRestore_Parms;

	this->ProcessEvent ( pFnResetWaveToRestore, &ResetWaveToRestore_Parms, NULL );
};

// Function sfxgamempcontent.sfxhostmigrationmp.GetWaveToRestore
// [0x00020002] 
// Parameters infos:
// struct FWaveEventInfo          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FWaveEventInfo Usfxhostmigrationmp::GetWaveToRestore ( )
{
	static UFunction* pFnGetWaveToRestore = NULL;

	if ( ! pFnGetWaveToRestore )
		pFnGetWaveToRestore = (UFunction*) UObject::GObjObjects()->Data[ 111300 ];

	Usfxhostmigrationmp_execGetWaveToRestore_Parms GetWaveToRestore_Parms;

	this->ProcessEvent ( pFnGetWaveToRestore, &GetWaveToRestore_Parms, NULL );

	return GetWaveToRestore_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxhostmigrationmp.SetWaveToRestore
// [0x00020002] 
// Parameters infos:
// struct FWaveEventInfo          InWave                         ( CPF_Parm )

void Usfxhostmigrationmp::SetWaveToRestore ( struct FWaveEventInfo InWave )
{
	static UFunction* pFnSetWaveToRestore = NULL;

	if ( ! pFnSetWaveToRestore )
		pFnSetWaveToRestore = (UFunction*) UObject::GObjObjects()->Data[ 111298 ];

	Usfxhostmigrationmp_execSetWaveToRestore_Parms SetWaveToRestore_Parms;
	memcpy ( &SetWaveToRestore_Parms.InWave, &InWave, 0x20 );

	this->ProcessEvent ( pFnSetWaveToRestore, &SetWaveToRestore_Parms, NULL );
};

// Function sfxgamempcontent.sfxhostmigrationmp.CanRestoreWave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxhostmigrationmp::CanRestoreWave ( )
{
	static UFunction* pFnCanRestoreWave = NULL;

	if ( ! pFnCanRestoreWave )
		pFnCanRestoreWave = (UFunction*) UObject::GObjObjects()->Data[ 111296 ];

	Usfxhostmigrationmp_execCanRestoreWave_Parms CanRestoreWave_Parms;

	this->ProcessEvent ( pFnCanRestoreWave, &CanRestoreWave_Parms, NULL );

	return CanRestoreWave_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxhostmigrationmp.InvalidateAll
// [0x00020002] 
// Parameters infos:

void Usfxhostmigrationmp::InvalidateAll ( )
{
	static UFunction* pFnInvalidateAll = NULL;

	if ( ! pFnInvalidateAll )
		pFnInvalidateAll = (UFunction*) UObject::GObjObjects()->Data[ 111295 ];

	Usfxhostmigrationmp_execInvalidateAll_Parms InvalidateAll_Parms;

	this->ProcessEvent ( pFnInvalidateAll, &InvalidateAll_Parms, NULL );
};

// Function sfxgamempcontent.sfxhostmigrationmp.HasCompleteAndValidState
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXGRI*                 GRI                            ( CPF_Parm )

bool Usfxhostmigrationmp::HasCompleteAndValidState ( class ASFXGRI* GRI )
{
	static UFunction* pFnHasCompleteAndValidState = NULL;

	if ( ! pFnHasCompleteAndValidState )
		pFnHasCompleteAndValidState = (UFunction*) UObject::GObjObjects()->Data[ 111291 ];

	Usfxhostmigrationmp_execHasCompleteAndValidState_Parms HasCompleteAndValidState_Parms;
	HasCompleteAndValidState_Parms.GRI = GRI;

	this->ProcessEvent ( pFnHasCompleteAndValidState, &HasCompleteAndValidState_Parms, NULL );

	return HasCompleteAndValidState_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpendofmatch.GetHintText
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// void*                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

void* Usfxgui_mpendofmatch::GetHintText ( )
{
	static UFunction* pFnGetHintText = NULL;

	if ( ! pFnGetHintText )
		pFnGetHintText = (UFunction*) UObject::GObjObjects()->Data[ 109632 ];

	Usfxgui_mpendofmatch_execGetHintText_Parms GetHintText_Parms;

	this->ProcessEvent ( pFnGetHintText, &GetHintText_Parms, NULL );

	return GetHintText_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpendofmatch.GetOverallMatchResults
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class USFXMatchResultsData*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXMatchResultsData* Usfxgui_mpendofmatch::GetOverallMatchResults ( )
{
	static UFunction* pFnGetOverallMatchResults = NULL;

	if ( ! pFnGetOverallMatchResults )
		pFnGetOverallMatchResults = (UFunction*) UObject::GObjObjects()->Data[ 109617 ];

	Usfxgui_mpendofmatch_execGetOverallMatchResults_Parms GetOverallMatchResults_Parms;

	this->ProcessEvent ( pFnGetOverallMatchResults, &GetOverallMatchResults_Parms, NULL );

	return GetOverallMatchResults_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpendofmatch.GetMatchResults
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FMatchSettingsDisplayInfo ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FMatchSettingsDisplayInfo Usfxgui_mpendofmatch::GetMatchResults ( )
{
	static UFunction* pFnGetMatchResults = NULL;

	if ( ! pFnGetMatchResults )
		pFnGetMatchResults = (UFunction*) UObject::GObjObjects()->Data[ 109619 ];

	Usfxgui_mpendofmatch_execGetMatchResults_Parms GetMatchResults_Parms;

	this->ProcessEvent ( pFnGetMatchResults, &GetMatchResults_Parms, NULL );

	return GetMatchResults_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpendofmatch.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpendofmatch::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 109618 ];

	Usfxgui_mpendofmatch_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpendofmatch.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpendofmatch::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 109616 ];

	Usfxgui_mpendofmatch_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.SetBackgroundAlpha
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void Usfxguimoviemp::SetBackgroundAlpha ( float F )
{
	static UFunction* pFnSetBackgroundAlpha = NULL;

	if ( ! pFnSetBackgroundAlpha )
		pFnSetBackgroundAlpha = (UFunction*) UObject::GObjObjects()->Data[ 50651 ];

	Usfxguimoviemp_execSetBackgroundAlpha_Parms SetBackgroundAlpha_Parms;
	SetBackgroundAlpha_Parms.F = F;

	pFnSetBackgroundAlpha->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBackgroundAlpha, &SetBackgroundAlpha_Parms, NULL );

	pFnSetBackgroundAlpha->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.PreloadImages
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FString >       Images                         ( CPF_Parm | CPF_NeedCtorLink )

void Usfxguimoviemp::PreloadImages ( TArray< struct FString > Images )
{
	static UFunction* pFnPreloadImages = NULL;

	if ( ! pFnPreloadImages )
		pFnPreloadImages = (UFunction*) UObject::GObjObjects()->Data[ 50646 ];

	Usfxguimoviemp_execPreloadImages_Parms PreloadImages_Parms;
	memcpy ( &PreloadImages_Parms.Images, &Images, 0xC );

	this->ProcessEvent ( pFnPreloadImages, &PreloadImages_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.StopHandlingKeyPresses
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxguimoviemp::StopHandlingKeyPresses ( )
{
	static UFunction* pFnStopHandlingKeyPresses = NULL;

	if ( ! pFnStopHandlingKeyPresses )
		pFnStopHandlingKeyPresses = (UFunction*) UObject::GObjObjects()->Data[ 50645 ];

	Usfxguimoviemp_execStopHandlingKeyPresses_Parms StopHandlingKeyPresses_Parms;

	this->ProcessEvent ( pFnStopHandlingKeyPresses, &StopHandlingKeyPresses_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.StartHandlingKeyPresses
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxguimoviemp::StartHandlingKeyPresses ( )
{
	static UFunction* pFnStartHandlingKeyPresses = NULL;

	if ( ! pFnStartHandlingKeyPresses )
		pFnStartHandlingKeyPresses = (UFunction*) UObject::GObjObjects()->Data[ 50643 ];

	Usfxguimoviemp_execStartHandlingKeyPresses_Parms StartHandlingKeyPresses_Parms;

	this->ProcessEvent ( pFnStartHandlingKeyPresses, &StartHandlingKeyPresses_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.GetProfileTimes
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          fUpdate                        ( CPF_Parm | CPF_OutParm )
// float                          fRender                        ( CPF_Parm | CPF_OutParm )
// float                          fAdvance                       ( CPF_Parm | CPF_OutParm )

void Usfxguimoviemp::GetProfileTimes ( float* fUpdate, float* fRender, float* fAdvance )
{
	static UFunction* pFnGetProfileTimes = NULL;

	if ( ! pFnGetProfileTimes )
		pFnGetProfileTimes = (UFunction*) UObject::GObjObjects()->Data[ 46008 ];

	Usfxguimoviemp_execGetProfileTimes_Parms GetProfileTimes_Parms;

	pFnGetProfileTimes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileTimes, &GetProfileTimes_Parms, NULL );

	pFnGetProfileTimes->FunctionFlags |= 0x400;

	if ( fUpdate )
		*fUpdate = GetProfileTimes_Parms.fUpdate;

	if ( fRender )
		*fRender = GetProfileTimes_Parms.fRender;

	if ( fAdvance )
		*fAdvance = GetProfileTimes_Parms.fAdvance;
};

// Function SFXGame.SFXGUIMovie.PauseMenuAdditionalProcessing
// [0x00020000] 
// Parameters infos:

void Usfxguimoviemp::PauseMenuAdditionalProcessing ( )
{
	static UFunction* pFnPauseMenuAdditionalProcessing = NULL;

	if ( ! pFnPauseMenuAdditionalProcessing )
		pFnPauseMenuAdditionalProcessing = (UFunction*) UObject::GObjObjects()->Data[ 50642 ];

	Usfxguimoviemp_execPauseMenuAdditionalProcessing_Parms PauseMenuAdditionalProcessing_Parms;

	this->ProcessEvent ( pFnPauseMenuAdditionalProcessing, &PauseMenuAdditionalProcessing_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.GetNuiPawnCommandString
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 TargetPawn                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Rule                           ( CPF_Parm | CPF_NeedCtorLink )

struct FString Usfxguimoviemp::GetNuiPawnCommandString ( struct FString TargetPawn, struct FString Rule )
{
	static UFunction* pFnGetNuiPawnCommandString = NULL;

	if ( ! pFnGetNuiPawnCommandString )
		pFnGetNuiPawnCommandString = (UFunction*) UObject::GObjObjects()->Data[ 50633 ];

	Usfxguimoviemp_execGetNuiPawnCommandString_Parms GetNuiPawnCommandString_Parms;
	memcpy ( &GetNuiPawnCommandString_Parms.TargetPawn, &TargetPawn, 0xC );
	memcpy ( &GetNuiPawnCommandString_Parms.Rule, &Rule, 0xC );

	this->ProcessEvent ( pFnGetNuiPawnCommandString, &GetNuiPawnCommandString_Parms, NULL );

	return GetNuiPawnCommandString_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.IsNuiSpeechEnabled
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxguimoviemp::IsNuiSpeechEnabled ( )
{
	static UFunction* pFnIsNuiSpeechEnabled = NULL;

	if ( ! pFnIsNuiSpeechEnabled )
		pFnIsNuiSpeechEnabled = (UFunction*) UObject::GObjObjects()->Data[ 50631 ];

	Usfxguimoviemp_execIsNuiSpeechEnabled_Parms IsNuiSpeechEnabled_Parms;

	pFnIsNuiSpeechEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsNuiSpeechEnabled, &IsNuiSpeechEnabled_Parms, NULL );

	pFnIsNuiSpeechEnabled->FunctionFlags |= 0x400;

	return IsNuiSpeechEnabled_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.GetBoundKeyString
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 sAlias                         ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWrapNonTokenInParentheses     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  eGameMode                      ( CPF_OptionalParm | CPF_Parm )

struct FString Usfxguimoviemp::GetBoundKeyString ( struct FString sAlias, unsigned long bWrapNonTokenInParentheses, unsigned char eGameMode )
{
	static UFunction* pFnGetBoundKeyString = NULL;

	if ( ! pFnGetBoundKeyString )
		pFnGetBoundKeyString = (UFunction*) UObject::GObjObjects()->Data[ 50626 ];

	Usfxguimoviemp_execGetBoundKeyString_Parms GetBoundKeyString_Parms;
	memcpy ( &GetBoundKeyString_Parms.sAlias, &sAlias, 0xC );
	GetBoundKeyString_Parms.bWrapNonTokenInParentheses = bWrapNonTokenInParentheses;
	GetBoundKeyString_Parms.eGameMode = eGameMode;

	pFnGetBoundKeyString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundKeyString, &GetBoundKeyString_Parms, NULL );

	pFnGetBoundKeyString->FunctionFlags |= 0x400;

	return GetBoundKeyString_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.OnControllerProfileSettingChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void Usfxguimoviemp::eventOnControllerProfileSettingChange ( )
{
	static UFunction* pFnOnControllerProfileSettingChange = NULL;

	if ( ! pFnOnControllerProfileSettingChange )
		pFnOnControllerProfileSettingChange = (UFunction*) UObject::GObjObjects()->Data[ 50625 ];

	Usfxguimoviemp_eventOnControllerProfileSettingChange_Parms OnControllerProfileSettingChange_Parms;

	this->ProcessEvent ( pFnOnControllerProfileSettingChange, &OnControllerProfileSettingChange_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.OnLanguageChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void Usfxguimoviemp::eventOnLanguageChanged ( )
{
	static UFunction* pFnOnLanguageChanged = NULL;

	if ( ! pFnOnLanguageChanged )
		pFnOnLanguageChanged = (UFunction*) UObject::GObjObjects()->Data[ 50624 ];

	Usfxguimoviemp_eventOnLanguageChanged_Parms OnLanguageChanged_Parms;

	this->ProcessEvent ( pFnOnLanguageChanged, &OnLanguageChanged_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.AttachToASFunction
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sASObjectPath                  ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sASFuncName                    ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FName                   nmFuncToCall                   ( CPF_Parm )
// unsigned long                  bCallOriginalAS                ( CPF_Parm )
// unsigned long                  bInsertBeforeAS                ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 oCallbackObj                   ( CPF_OptionalParm | CPF_Parm )

void Usfxguimoviemp::AttachToASFunction ( struct FString sASObjectPath, struct FString sASFuncName, struct FName nmFuncToCall, unsigned long bCallOriginalAS, unsigned long bInsertBeforeAS, class UObject* oCallbackObj )
{
	static UFunction* pFnAttachToASFunction = NULL;

	if ( ! pFnAttachToASFunction )
		pFnAttachToASFunction = (UFunction*) UObject::GObjObjects()->Data[ 50617 ];

	Usfxguimoviemp_execAttachToASFunction_Parms AttachToASFunction_Parms;
	memcpy ( &AttachToASFunction_Parms.sASObjectPath, &sASObjectPath, 0xC );
	memcpy ( &AttachToASFunction_Parms.sASFuncName, &sASFuncName, 0xC );
	memcpy ( &AttachToASFunction_Parms.nmFuncToCall, &nmFuncToCall, 0x8 );
	AttachToASFunction_Parms.bCallOriginalAS = bCallOriginalAS;
	AttachToASFunction_Parms.bInsertBeforeAS = bInsertBeforeAS;
	AttachToASFunction_Parms.oCallbackObj = oCallbackObj;

	pFnAttachToASFunction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachToASFunction, &AttachToASFunction_Parms, NULL );

	pFnAttachToASFunction->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.IsOpen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxguimoviemp::IsOpen ( )
{
	static UFunction* pFnIsOpen = NULL;

	if ( ! pFnIsOpen )
		pFnIsOpen = (UFunction*) UObject::GObjObjects()->Data[ 50615 ];

	Usfxguimoviemp_execIsOpen_Parms IsOpen_Parms;

	pFnIsOpen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOpen, &IsOpen_Parms, NULL );

	pFnIsOpen->FunctionFlags |= 0x400;

	return IsOpen_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.PostProjectionToScreen
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector4                vPostProjectPos                ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector2D               vScreenLocation                ( CPF_Parm | CPF_OutParm )

void Usfxguimoviemp::PostProjectionToScreen ( struct FVector4* vPostProjectPos, struct FVector2D* vScreenLocation )
{
	static UFunction* pFnPostProjectionToScreen = NULL;

	if ( ! pFnPostProjectionToScreen )
		pFnPostProjectionToScreen = (UFunction*) UObject::GObjObjects()->Data[ 50612 ];

	Usfxguimoviemp_execPostProjectionToScreen_Parms PostProjectionToScreen_Parms;

	pFnPostProjectionToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostProjectionToScreen, &PostProjectionToScreen_Parms, NULL );

	pFnPostProjectionToScreen->FunctionFlags |= 0x400;

	if ( vPostProjectPos )
		memcpy ( vPostProjectPos, &PostProjectionToScreen_Parms.vPostProjectPos, 0x10 );

	if ( vScreenLocation )
		memcpy ( vScreenLocation, &PostProjectionToScreen_Parms.vScreenLocation, 0x8 );
};

// Function SFXGame.SFXGUIMovie.WorldToScreen
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vWorld                         ( CPF_Const | CPF_Parm )
// unsigned long                  bEnforceScreenEdge             ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               vScreenLocation                ( CPF_Parm | CPF_OutParm )
// struct FVector4                vPostProject                   ( CPF_Parm | CPF_OutParm )

bool Usfxguimoviemp::WorldToScreen ( struct FVector vWorld, unsigned long bEnforceScreenEdge, struct FVector2D* vScreenLocation, struct FVector4* vPostProject )
{
	static UFunction* pFnWorldToScreen = NULL;

	if ( ! pFnWorldToScreen )
		pFnWorldToScreen = (UFunction*) UObject::GObjObjects()->Data[ 50606 ];

	Usfxguimoviemp_execWorldToScreen_Parms WorldToScreen_Parms;
	memcpy ( &WorldToScreen_Parms.vWorld, &vWorld, 0xC );
	WorldToScreen_Parms.bEnforceScreenEdge = bEnforceScreenEdge;

	pFnWorldToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWorldToScreen, &WorldToScreen_Parms, NULL );

	pFnWorldToScreen->FunctionFlags |= 0x400;

	if ( vScreenLocation )
		memcpy ( vScreenLocation, &WorldToScreen_Parms.vScreenLocation, 0x8 );

	if ( vPostProject )
		memcpy ( vPostProject, &WorldToScreen_Parms.vPostProject, 0x10 );

	return WorldToScreen_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.WorldToScreenFast
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vWorld                         ( CPF_Const | CPF_Parm )
// unsigned long                  bEnforceScreenEdge             ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               vAdditionalScreenEdgeBorderBL  ( CPF_Const | CPF_OptionalParm | CPF_Parm )
// struct FVector2D               vAdditionalScreenEdgeBorderTR  ( CPF_Const | CPF_OptionalParm | CPF_Parm )
// struct FSFXGUISceneView        SceneView                      ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector2D               vScreenLocation                ( CPF_Parm | CPF_OutParm )
// struct FVector4                vPostProject                   ( CPF_Parm | CPF_OutParm )

bool Usfxguimoviemp::WorldToScreenFast ( struct FVector vWorld, unsigned long bEnforceScreenEdge, struct FVector2D vAdditionalScreenEdgeBorderBL, struct FVector2D vAdditionalScreenEdgeBorderTR, struct FSFXGUISceneView* SceneView, struct FVector2D* vScreenLocation, struct FVector4* vPostProject )
{
	static UFunction* pFnWorldToScreenFast = NULL;

	if ( ! pFnWorldToScreenFast )
		pFnWorldToScreenFast = (UFunction*) UObject::GObjObjects()->Data[ 50597 ];

	Usfxguimoviemp_execWorldToScreenFast_Parms WorldToScreenFast_Parms;
	memcpy ( &WorldToScreenFast_Parms.vWorld, &vWorld, 0xC );
	WorldToScreenFast_Parms.bEnforceScreenEdge = bEnforceScreenEdge;
	memcpy ( &WorldToScreenFast_Parms.vAdditionalScreenEdgeBorderBL, &vAdditionalScreenEdgeBorderBL, 0x8 );
	memcpy ( &WorldToScreenFast_Parms.vAdditionalScreenEdgeBorderTR, &vAdditionalScreenEdgeBorderTR, 0x8 );

	pFnWorldToScreenFast->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWorldToScreenFast, &WorldToScreenFast_Parms, NULL );

	pFnWorldToScreenFast->FunctionFlags |= 0x400;

	if ( SceneView )
		memcpy ( SceneView, &WorldToScreenFast_Parms.SceneView, 0x50 );

	if ( vScreenLocation )
		memcpy ( vScreenLocation, &WorldToScreenFast_Parms.vScreenLocation, 0x8 );

	if ( vPostProject )
		memcpy ( vPostProject, &WorldToScreenFast_Parms.vPostProject, 0x10 );

	return WorldToScreenFast_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.WorldToSafePostProjectionFast
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vWorld                         ( CPF_Const | CPF_Parm )
// unsigned long                  bEnforceScreenEdge             ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               vAdditionalScreenEdgeBorderBL  ( CPF_Const | CPF_OptionalParm | CPF_Parm )
// struct FVector2D               vAdditionalScreenEdgeBorderTR  ( CPF_Const | CPF_OptionalParm | CPF_Parm )
// struct FSFXGUISceneView        SceneView                      ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector4                vSafePostProjectPos            ( CPF_Parm | CPF_OutParm )
// struct FVector4                vUnsafePostProjectPos          ( CPF_Parm | CPF_OutParm )

bool Usfxguimoviemp::WorldToSafePostProjectionFast ( struct FVector vWorld, unsigned long bEnforceScreenEdge, struct FVector2D vAdditionalScreenEdgeBorderBL, struct FVector2D vAdditionalScreenEdgeBorderTR, struct FSFXGUISceneView* SceneView, struct FVector4* vSafePostProjectPos, struct FVector4* vUnsafePostProjectPos )
{
	static UFunction* pFnWorldToSafePostProjectionFast = NULL;

	if ( ! pFnWorldToSafePostProjectionFast )
		pFnWorldToSafePostProjectionFast = (UFunction*) UObject::GObjObjects()->Data[ 50588 ];

	Usfxguimoviemp_execWorldToSafePostProjectionFast_Parms WorldToSafePostProjectionFast_Parms;
	memcpy ( &WorldToSafePostProjectionFast_Parms.vWorld, &vWorld, 0xC );
	WorldToSafePostProjectionFast_Parms.bEnforceScreenEdge = bEnforceScreenEdge;
	memcpy ( &WorldToSafePostProjectionFast_Parms.vAdditionalScreenEdgeBorderBL, &vAdditionalScreenEdgeBorderBL, 0x8 );
	memcpy ( &WorldToSafePostProjectionFast_Parms.vAdditionalScreenEdgeBorderTR, &vAdditionalScreenEdgeBorderTR, 0x8 );

	pFnWorldToSafePostProjectionFast->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWorldToSafePostProjectionFast, &WorldToSafePostProjectionFast_Parms, NULL );

	pFnWorldToSafePostProjectionFast->FunctionFlags |= 0x400;

	if ( SceneView )
		memcpy ( SceneView, &WorldToSafePostProjectionFast_Parms.SceneView, 0x50 );

	if ( vSafePostProjectPos )
		memcpy ( vSafePostProjectPos, &WorldToSafePostProjectionFast_Parms.vSafePostProjectPos, 0x10 );

	if ( vUnsafePostProjectPos )
		memcpy ( vUnsafePostProjectPos, &WorldToSafePostProjectionFast_Parms.vUnsafePostProjectPos, 0x10 );

	return WorldToSafePostProjectionFast_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.GetGUISceneView
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FSFXGUISceneView        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FSFXGUISceneView Usfxguimoviemp::GetGUISceneView ( )
{
	static UFunction* pFnGetGUISceneView = NULL;

	if ( ! pFnGetGUISceneView )
		pFnGetGUISceneView = (UFunction*) UObject::GObjObjects()->Data[ 50586 ];

	Usfxguimoviemp_execGetGUISceneView_Parms GetGUISceneView_Parms;

	pFnGetGUISceneView->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGUISceneView, &GetGUISceneView_Parms, NULL );

	pFnGetGUISceneView->FunctionFlags |= 0x400;

	return GetGUISceneView_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.UIStrRef
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// void*                          sr                             ( CPF_Parm )

struct FString Usfxguimoviemp::UIStrRef ( void* sr )
{
	static UFunction* pFnUIStrRef = NULL;

	if ( ! pFnUIStrRef )
		pFnUIStrRef = (UFunction*) UObject::GObjObjects()->Data[ 42912 ];

	Usfxguimoviemp_execUIStrRef_Parms UIStrRef_Parms;
	UIStrRef_Parms.sr = sr;

	this->ProcessEvent ( pFnUIStrRef, &UIStrRef_Parms, NULL );

	return UIStrRef_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.GetTokenizedUIString
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// void*                          sr                             ( CPF_Parm )
// TArray< struct FSFXTokenMapping > aTokens                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FString Usfxguimoviemp::GetTokenizedUIString ( void* sr, TArray< struct FSFXTokenMapping >* aTokens )
{
	static UFunction* pFnGetTokenizedUIString = NULL;

	if ( ! pFnGetTokenizedUIString )
		pFnGetTokenizedUIString = (UFunction*) UObject::GObjObjects()->Data[ 50580 ];

	Usfxguimoviemp_execGetTokenizedUIString_Parms GetTokenizedUIString_Parms;
	GetTokenizedUIString_Parms.sr = sr;

	pFnGetTokenizedUIString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTokenizedUIString, &GetTokenizedUIString_Parms, NULL );

	pFnGetTokenizedUIString->FunctionFlags |= 0x400;

	if ( aTokens )
		memcpy ( aTokens, &GetTokenizedUIString_Parms.aTokens, 0xC );

	return GetTokenizedUIString_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.GetUIString
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// void*                          sr                             ( CPF_Parm )
// unsigned long                  bParse                         ( CPF_OptionalParm | CPF_Parm )

struct FString Usfxguimoviemp::GetUIString ( void* sr, unsigned long bParse )
{
	static UFunction* pFnGetUIString = NULL;

	if ( ! pFnGetUIString )
		pFnGetUIString = (UFunction*) UObject::GObjObjects()->Data[ 50576 ];

	Usfxguimoviemp_execGetUIString_Parms GetUIString_Parms;
	GetUIString_Parms.sr = sr;
	GetUIString_Parms.bParse = bParse;

	pFnGetUIString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUIString, &GetUIString_Parms, NULL );

	pFnGetUIString->FunctionFlags |= 0x400;

	return GetUIString_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.SetVariableStringRef
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 Path                           ( CPF_Parm | CPF_NeedCtorLink )
// void*                          sr                             ( CPF_Parm )

void Usfxguimoviemp::SetVariableStringRef ( struct FString Path, void* sr )
{
	static UFunction* pFnSetVariableStringRef = NULL;

	if ( ! pFnSetVariableStringRef )
		pFnSetVariableStringRef = (UFunction*) UObject::GObjObjects()->Data[ 50573 ];

	Usfxguimoviemp_execSetVariableStringRef_Parms SetVariableStringRef_Parms;
	memcpy ( &SetVariableStringRef_Parms.Path, &Path, 0xC );
	SetVariableStringRef_Parms.sr = sr;

	this->ProcessEvent ( pFnSetVariableStringRef, &SetVariableStringRef_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.IsMPGame
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxguimoviemp::IsMPGame ( )
{
	static UFunction* pFnIsMPGame = NULL;

	if ( ! pFnIsMPGame )
		pFnIsMPGame = (UFunction*) UObject::GObjObjects()->Data[ 50571 ];

	Usfxguimoviemp_execIsMPGame_Parms IsMPGame_Parms;

	this->ProcessEvent ( pFnIsMPGame, &IsMPGame_Parms, NULL );

	return IsMPGame_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.IsMPClient
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxguimoviemp::IsMPClient ( )
{
	static UFunction* pFnIsMPClient = NULL;

	if ( ! pFnIsMPClient )
		pFnIsMPClient = (UFunction*) UObject::GObjObjects()->Data[ 50568 ];

	Usfxguimoviemp_execIsMPClient_Parms IsMPClient_Parms;

	this->ProcessEvent ( pFnIsMPClient, &IsMPClient_Parms, NULL );

	return IsMPClient_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.GetScreenLayout
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char Usfxguimoviemp::GetScreenLayout ( )
{
	static UFunction* pFnGetScreenLayout = NULL;

	if ( ! pFnGetScreenLayout )
		pFnGetScreenLayout = (UFunction*) UObject::GObjObjects()->Data[ 50565 ];

	Usfxguimoviemp_execGetScreenLayout_Parms GetScreenLayout_Parms;

	this->ProcessEvent ( pFnGetScreenLayout, &GetScreenLayout_Parms, NULL );

	return GetScreenLayout_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.HandleInputConfigurations
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bMenuAdvanceSwapped            ( CPF_Parm )
// unsigned long                  bStickSouthpaw                 ( CPF_Parm )
// unsigned long                  bTriggerSouthpaw               ( CPF_Parm )
// unsigned long                  bTriggersShouldersSwapped      ( CPF_Parm )

void Usfxguimoviemp::HandleInputConfigurations ( unsigned long bMenuAdvanceSwapped, unsigned long bStickSouthpaw, unsigned long bTriggerSouthpaw, unsigned long bTriggersShouldersSwapped )
{
	static UFunction* pFnHandleInputConfigurations = NULL;

	if ( ! pFnHandleInputConfigurations )
		pFnHandleInputConfigurations = (UFunction*) UObject::GObjObjects()->Data[ 50462 ];

	Usfxguimoviemp_execHandleInputConfigurations_Parms HandleInputConfigurations_Parms;
	HandleInputConfigurations_Parms.bMenuAdvanceSwapped = bMenuAdvanceSwapped;
	HandleInputConfigurations_Parms.bStickSouthpaw = bStickSouthpaw;
	HandleInputConfigurations_Parms.bTriggerSouthpaw = bTriggerSouthpaw;
	HandleInputConfigurations_Parms.bTriggersShouldersSwapped = bTriggersShouldersSwapped;

	this->ProcessEvent ( pFnHandleInputConfigurations, &HandleInputConfigurations_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.SetGameMode
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )
// unsigned char                  eGameMode                      ( CPF_OptionalParm | CPF_Parm )

void Usfxguimoviemp::SetGameMode ( unsigned long bEnable, unsigned char eGameMode )
{
	static UFunction* pFnSetGameMode = NULL;

	if ( ! pFnSetGameMode )
		pFnSetGameMode = (UFunction*) UObject::GObjObjects()->Data[ 50558 ];

	Usfxguimoviemp_execSetGameMode_Parms SetGameMode_Parms;
	SetGameMode_Parms.bEnable = bEnable;
	SetGameMode_Parms.eGameMode = eGameMode;

	pFnSetGameMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGameMode, &SetGameMode_Parms, NULL );

	pFnSetGameMode->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.PlayGuiError
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void Usfxguimoviemp::PlayGuiError ( )
{
	static UFunction* pFnPlayGuiError = NULL;

	if ( ! pFnPlayGuiError )
		pFnPlayGuiError = (UFunction*) UObject::GObjObjects()->Data[ 50557 ];

	Usfxguimoviemp_execPlayGuiError_Parms PlayGuiError_Parms;

	pFnPlayGuiError->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayGuiError, &PlayGuiError_Parms, NULL );

	pFnPlayGuiError->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.StopGuiSound
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmSound                        ( CPF_Parm )

bool Usfxguimoviemp::StopGuiSound ( struct FName nmSound )
{
	static UFunction* pFnStopGuiSound = NULL;

	if ( ! pFnStopGuiSound )
		pFnStopGuiSound = (UFunction*) UObject::GObjObjects()->Data[ 50554 ];

	Usfxguimoviemp_execStopGuiSound_Parms StopGuiSound_Parms;
	memcpy ( &StopGuiSound_Parms.nmSound, &nmSound, 0x8 );

	pFnStopGuiSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopGuiSound, &StopGuiSound_Parms, NULL );

	pFnStopGuiSound->FunctionFlags |= 0x400;

	return StopGuiSound_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.PlayGuiSound
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmSound                        ( CPF_Parm )

bool Usfxguimoviemp::PlayGuiSound ( struct FName nmSound )
{
	static UFunction* pFnPlayGuiSound = NULL;

	if ( ! pFnPlayGuiSound )
		pFnPlayGuiSound = (UFunction*) UObject::GObjObjects()->Data[ 50470 ];

	Usfxguimoviemp_execPlayGuiSound_Parms PlayGuiSound_Parms;
	memcpy ( &PlayGuiSound_Parms.nmSound, &nmSound, 0x8 );

	pFnPlayGuiSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayGuiSound, &PlayGuiSound_Parms, NULL );

	pFnPlayGuiSound->FunctionFlags |= 0x400;

	return PlayGuiSound_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.StopGuiVoice
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void Usfxguimoviemp::StopGuiVoice ( )
{
	static UFunction* pFnStopGuiVoice = NULL;

	if ( ! pFnStopGuiVoice )
		pFnStopGuiVoice = (UFunction*) UObject::GObjObjects()->Data[ 50551 ];

	Usfxguimoviemp_execStopGuiVoice_Parms StopGuiVoice_Parms;

	pFnStopGuiVoice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopGuiVoice, &StopGuiVoice_Parms, NULL );

	pFnStopGuiVoice->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.PlayGuiVoice
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   nmVoice                        ( CPF_Parm )

void Usfxguimoviemp::PlayGuiVoice ( struct FName nmVoice )
{
	static UFunction* pFnPlayGuiVoice = NULL;

	if ( ! pFnPlayGuiVoice )
		pFnPlayGuiVoice = (UFunction*) UObject::GObjObjects()->Data[ 50549 ];

	Usfxguimoviemp_execPlayGuiVoice_Parms PlayGuiVoice_Parms;
	memcpy ( &PlayGuiVoice_Parms.nmVoice, &nmVoice, 0x8 );

	pFnPlayGuiVoice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayGuiVoice, &PlayGuiVoice_Parms, NULL );

	pFnPlayGuiVoice->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.StopGuiMusic
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void Usfxguimoviemp::StopGuiMusic ( )
{
	static UFunction* pFnStopGuiMusic = NULL;

	if ( ! pFnStopGuiMusic )
		pFnStopGuiMusic = (UFunction*) UObject::GObjObjects()->Data[ 50548 ];

	Usfxguimoviemp_execStopGuiMusic_Parms StopGuiMusic_Parms;

	pFnStopGuiMusic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopGuiMusic, &StopGuiMusic_Parms, NULL );

	pFnStopGuiMusic->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.PlayGuiMusic
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   nmMusic                        ( CPF_Parm )
// unsigned long                  bRestart                       ( CPF_OptionalParm | CPF_Parm )

void Usfxguimoviemp::PlayGuiMusic ( struct FName nmMusic, unsigned long bRestart )
{
	static UFunction* pFnPlayGuiMusic = NULL;

	if ( ! pFnPlayGuiMusic )
		pFnPlayGuiMusic = (UFunction*) UObject::GObjObjects()->Data[ 50545 ];

	Usfxguimoviemp_execPlayGuiMusic_Parms PlayGuiMusic_Parms;
	memcpy ( &PlayGuiMusic_Parms.nmMusic, &nmMusic, 0x8 );
	PlayGuiMusic_Parms.bRestart = bRestart;

	pFnPlayGuiMusic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayGuiMusic, &PlayGuiMusic_Parms, NULL );

	pFnPlayGuiMusic->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.OnAspectRatioChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          fNewAspectRatio                ( CPF_Parm )

void Usfxguimoviemp::eventOnAspectRatioChanged ( float fNewAspectRatio )
{
	static UFunction* pFnOnAspectRatioChanged = NULL;

	if ( ! pFnOnAspectRatioChanged )
		pFnOnAspectRatioChanged = (UFunction*) UObject::GObjObjects()->Data[ 50543 ];

	Usfxguimoviemp_eventOnAspectRatioChanged_Parms OnAspectRatioChanged_Parms;
	OnAspectRatioChanged_Parms.fNewAspectRatio = fNewAspectRatio;

	this->ProcessEvent ( pFnOnAspectRatioChanged, &OnAspectRatioChanged_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.UpdateAspectRatio
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bHorizontal                    ( CPF_OptionalParm | CPF_Parm )

float Usfxguimoviemp::UpdateAspectRatio ( unsigned long bForce, unsigned long bHorizontal )
{
	static UFunction* pFnUpdateAspectRatio = NULL;

	if ( ! pFnUpdateAspectRatio )
		pFnUpdateAspectRatio = (UFunction*) UObject::GObjObjects()->Data[ 50539 ];

	Usfxguimoviemp_execUpdateAspectRatio_Parms UpdateAspectRatio_Parms;
	UpdateAspectRatio_Parms.bForce = bForce;
	UpdateAspectRatio_Parms.bHorizontal = bHorizontal;

	pFnUpdateAspectRatio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAspectRatio, &UpdateAspectRatio_Parms, NULL );

	pFnUpdateAspectRatio->FunctionFlags |= 0x400;

	return UpdateAspectRatio_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.GetMovieAspectRatio
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Usfxguimoviemp::GetMovieAspectRatio ( )
{
	static UFunction* pFnGetMovieAspectRatio = NULL;

	if ( ! pFnGetMovieAspectRatio )
		pFnGetMovieAspectRatio = (UFunction*) UObject::GObjObjects()->Data[ 50537 ];

	Usfxguimoviemp_execGetMovieAspectRatio_Parms GetMovieAspectRatio_Parms;

	pFnGetMovieAspectRatio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMovieAspectRatio, &GetMovieAspectRatio_Parms, NULL );

	pFnGetMovieAspectRatio->FunctionFlags |= 0x400;

	return GetMovieAspectRatio_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.GetViewportAspectRatio
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Usfxguimoviemp::GetViewportAspectRatio ( )
{
	static UFunction* pFnGetViewportAspectRatio = NULL;

	if ( ! pFnGetViewportAspectRatio )
		pFnGetViewportAspectRatio = (UFunction*) UObject::GObjObjects()->Data[ 50535 ];

	Usfxguimoviemp_execGetViewportAspectRatio_Parms GetViewportAspectRatio_Parms;

	pFnGetViewportAspectRatio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportAspectRatio, &GetViewportAspectRatio_Parms, NULL );

	pFnGetViewportAspectRatio->FunctionFlags |= 0x400;

	return GetViewportAspectRatio_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.IsTriggerShoulderSwapped
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxguimoviemp::IsTriggerShoulderSwapped ( )
{
	static UFunction* pFnIsTriggerShoulderSwapped = NULL;

	if ( ! pFnIsTriggerShoulderSwapped )
		pFnIsTriggerShoulderSwapped = (UFunction*) UObject::GObjObjects()->Data[ 50466 ];

	Usfxguimoviemp_execIsTriggerShoulderSwapped_Parms IsTriggerShoulderSwapped_Parms;

	pFnIsTriggerShoulderSwapped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTriggerShoulderSwapped, &IsTriggerShoulderSwapped_Parms, NULL );

	pFnIsTriggerShoulderSwapped->FunctionFlags |= 0x400;

	return IsTriggerShoulderSwapped_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.IsTriggerSouthpaw
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxguimoviemp::IsTriggerSouthpaw ( )
{
	static UFunction* pFnIsTriggerSouthpaw = NULL;

	if ( ! pFnIsTriggerSouthpaw )
		pFnIsTriggerSouthpaw = (UFunction*) UObject::GObjObjects()->Data[ 50465 ];

	Usfxguimoviemp_execIsTriggerSouthpaw_Parms IsTriggerSouthpaw_Parms;

	pFnIsTriggerSouthpaw->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTriggerSouthpaw, &IsTriggerSouthpaw_Parms, NULL );

	pFnIsTriggerSouthpaw->FunctionFlags |= 0x400;

	return IsTriggerSouthpaw_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.IsStickSouthpaw
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxguimoviemp::IsStickSouthpaw ( )
{
	static UFunction* pFnIsStickSouthpaw = NULL;

	if ( ! pFnIsStickSouthpaw )
		pFnIsStickSouthpaw = (UFunction*) UObject::GObjObjects()->Data[ 50464 ];

	Usfxguimoviemp_execIsStickSouthpaw_Parms IsStickSouthpaw_Parms;

	pFnIsStickSouthpaw->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsStickSouthpaw, &IsStickSouthpaw_Parms, NULL );

	pFnIsStickSouthpaw->FunctionFlags |= 0x400;

	return IsStickSouthpaw_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.IsEnterMenuButtonAssignmentSwapped
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxguimoviemp::IsEnterMenuButtonAssignmentSwapped ( )
{
	static UFunction* pFnIsEnterMenuButtonAssignmentSwapped = NULL;

	if ( ! pFnIsEnterMenuButtonAssignmentSwapped )
		pFnIsEnterMenuButtonAssignmentSwapped = (UFunction*) UObject::GObjObjects()->Data[ 50463 ];

	Usfxguimoviemp_execIsEnterMenuButtonAssignmentSwapped_Parms IsEnterMenuButtonAssignmentSwapped_Parms;

	pFnIsEnterMenuButtonAssignmentSwapped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnterMenuButtonAssignmentSwapped, &IsEnterMenuButtonAssignmentSwapped_Parms, NULL );

	pFnIsEnterMenuButtonAssignmentSwapped->FunctionFlags |= 0x400;

	return IsEnterMenuButtonAssignmentSwapped_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.SetMouseVisible
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void Usfxguimoviemp::SetMouseVisible ( unsigned long bVisible )
{
	static UFunction* pFnSetMouseVisible = NULL;

	if ( ! pFnSetMouseVisible )
		pFnSetMouseVisible = (UFunction*) UObject::GObjObjects()->Data[ 50529 ];

	Usfxguimoviemp_execSetMouseVisible_Parms SetMouseVisible_Parms;
	SetMouseVisible_Parms.bVisible = bVisible;

	pFnSetMouseVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMouseVisible, &SetMouseVisible_Parms, NULL );

	pFnSetMouseVisible->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.SendMouseEvent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  nEventID                       ( CPF_Parm )

void Usfxguimoviemp::SendMouseEvent ( unsigned char nEventID )
{
	static UFunction* pFnSendMouseEvent = NULL;

	if ( ! pFnSendMouseEvent )
		pFnSendMouseEvent = (UFunction*) UObject::GObjObjects()->Data[ 50527 ];

	Usfxguimoviemp_execSendMouseEvent_Parms SendMouseEvent_Parms;
	SendMouseEvent_Parms.nEventID = nEventID;

	pFnSendMouseEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendMouseEvent, &SendMouseEvent_Parms, NULL );

	pFnSendMouseEvent->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.HandleInputEvent
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  nEventID                       ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

bool Usfxguimoviemp::eventHandleInputEvent ( unsigned char nEventID, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 50523 ];

	Usfxguimoviemp_eventHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.nEventID = nEventID;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );

	return HandleInputEvent_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.GetSFXUIController
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USFXGUIInteraction*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXGUIInteraction* Usfxguimoviemp::GetSFXUIController ( )
{
	static UFunction* pFnGetSFXUIController = NULL;

	if ( ! pFnGetSFXUIController )
		pFnGetSFXUIController = (UFunction*) UObject::GObjObjects()->Data[ 50521 ];

	Usfxguimoviemp_execGetSFXUIController_Parms GetSFXUIController_Parms;

	pFnGetSFXUIController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSFXUIController, &GetSFXUIController_Parms, NULL );

	pFnGetSFXUIController->FunctionFlags |= 0x400;

	return GetSFXUIController_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.Invoke0
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FASValue                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 sFuncPath                      ( CPF_Parm | CPF_NeedCtorLink )

struct FASValue Usfxguimoviemp::Invoke0 ( struct FString sFuncPath )
{
	static UFunction* pFnInvoke0 = NULL;

	if ( ! pFnInvoke0 )
		pFnInvoke0 = (UFunction*) UObject::GObjObjects()->Data[ 46461 ];

	Usfxguimoviemp_execInvoke0_Parms Invoke0_Parms;
	memcpy ( &Invoke0_Parms.sFuncPath, &sFuncPath, 0xC );

	pFnInvoke0->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInvoke0, &Invoke0_Parms, NULL );

	pFnInvoke0->FunctionFlags |= 0x400;

	return Invoke0_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.RemoveExtension
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  classObj                       ( CPF_Parm )

void Usfxguimoviemp::RemoveExtension ( class UClass* classObj )
{
	static UFunction* pFnRemoveExtension = NULL;

	if ( ! pFnRemoveExtension )
		pFnRemoveExtension = (UFunction*) UObject::GObjObjects()->Data[ 50518 ];

	Usfxguimoviemp_execRemoveExtension_Parms RemoveExtension_Parms;
	RemoveExtension_Parms.classObj = classObj;

	pFnRemoveExtension->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveExtension, &RemoveExtension_Parms, NULL );

	pFnRemoveExtension->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.GetExtension
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USFXGUIMovieExtension*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  classObj                       ( CPF_Parm )

class USFXGUIMovieExtension* Usfxguimoviemp::GetExtension ( class UClass* classObj )
{
	static UFunction* pFnGetExtension = NULL;

	if ( ! pFnGetExtension )
		pFnGetExtension = (UFunction*) UObject::GObjObjects()->Data[ 50515 ];

	Usfxguimoviemp_execGetExtension_Parms GetExtension_Parms;
	GetExtension_Parms.classObj = classObj;

	pFnGetExtension->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetExtension, &GetExtension_Parms, NULL );

	pFnGetExtension->FunctionFlags |= 0x400;

	return GetExtension_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.AddExtension
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USFXGUIMovieExtension*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  classObj                       ( CPF_Parm )

class USFXGUIMovieExtension* Usfxguimoviemp::AddExtension ( class UClass* classObj )
{
	static UFunction* pFnAddExtension = NULL;

	if ( ! pFnAddExtension )
		pFnAddExtension = (UFunction*) UObject::GObjObjects()->Data[ 50512 ];

	Usfxguimoviemp_execAddExtension_Parms AddExtension_Parms;
	AddExtension_Parms.classObj = classObj;

	pFnAddExtension->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddExtension, &AddExtension_Parms, NULL );

	pFnAddExtension->FunctionFlags |= 0x400;

	return AddExtension_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.GetRequiresUIWorld
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void Usfxguimoviemp::GetRequiresUIWorld ( )
{
	static UFunction* pFnGetRequiresUIWorld = NULL;

	if ( ! pFnGetRequiresUIWorld )
		pFnGetRequiresUIWorld = (UFunction*) UObject::GObjObjects()->Data[ 50511 ];

	Usfxguimoviemp_execGetRequiresUIWorld_Parms GetRequiresUIWorld_Parms;

	pFnGetRequiresUIWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRequiresUIWorld, &GetRequiresUIWorld_Parms, NULL );

	pFnGetRequiresUIWorld->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.SetRequiresUIWorld
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bUIWorldRequired               ( CPF_Parm )

void Usfxguimoviemp::SetRequiresUIWorld ( unsigned long bUIWorldRequired )
{
	static UFunction* pFnSetRequiresUIWorld = NULL;

	if ( ! pFnSetRequiresUIWorld )
		pFnSetRequiresUIWorld = (UFunction*) UObject::GObjObjects()->Data[ 50509 ];

	Usfxguimoviemp_execSetRequiresUIWorld_Parms SetRequiresUIWorld_Parms;
	SetRequiresUIWorld_Parms.bUIWorldRequired = bUIWorldRequired;

	pFnSetRequiresUIWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRequiresUIWorld, &SetRequiresUIWorld_Parms, NULL );

	pFnSetRequiresUIWorld->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.GetInputEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxguimoviemp::GetInputEnabled ( )
{
	static UFunction* pFnGetInputEnabled = NULL;

	if ( ! pFnGetInputEnabled )
		pFnGetInputEnabled = (UFunction*) UObject::GObjObjects()->Data[ 50507 ];

	Usfxguimoviemp_execGetInputEnabled_Parms GetInputEnabled_Parms;

	pFnGetInputEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInputEnabled, &GetInputEnabled_Parms, NULL );

	pFnGetInputEnabled->FunctionFlags |= 0x400;

	return GetInputEnabled_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.SetInputEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void Usfxguimoviemp::SetInputEnabled ( unsigned long bEnabled )
{
	static UFunction* pFnSetInputEnabled = NULL;

	if ( ! pFnSetInputEnabled )
		pFnSetInputEnabled = (UFunction*) UObject::GObjObjects()->Data[ 50505 ];

	Usfxguimoviemp_execSetInputEnabled_Parms SetInputEnabled_Parms;
	SetInputEnabled_Parms.bEnabled = bEnabled;

	pFnSetInputEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInputEnabled, &SetInputEnabled_Parms, NULL );

	pFnSetInputEnabled->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.GetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxguimoviemp::GetEnabled ( )
{
	static UFunction* pFnGetEnabled = NULL;

	if ( ! pFnGetEnabled )
		pFnGetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 50503 ];

	Usfxguimoviemp_execGetEnabled_Parms GetEnabled_Parms;

	pFnGetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEnabled, &GetEnabled_Parms, NULL );

	pFnGetEnabled->FunctionFlags |= 0x400;

	return GetEnabled_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.SetEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void Usfxguimoviemp::SetEnabled ( unsigned long bEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 50501 ];

	Usfxguimoviemp_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bEnabled = bEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.GetUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxguimoviemp::GetUpdate ( )
{
	static UFunction* pFnGetUpdate = NULL;

	if ( ! pFnGetUpdate )
		pFnGetUpdate = (UFunction*) UObject::GObjObjects()->Data[ 50499 ];

	Usfxguimoviemp_execGetUpdate_Parms GetUpdate_Parms;

	pFnGetUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUpdate, &GetUpdate_Parms, NULL );

	pFnGetUpdate->FunctionFlags |= 0x400;

	return GetUpdate_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.SetUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bUpdate                        ( CPF_Parm )

void Usfxguimoviemp::SetUpdate ( unsigned long bUpdate )
{
	static UFunction* pFnSetUpdate = NULL;

	if ( ! pFnSetUpdate )
		pFnSetUpdate = (UFunction*) UObject::GObjObjects()->Data[ 50497 ];

	Usfxguimoviemp_execSetUpdate_Parms SetUpdate_Parms;
	SetUpdate_Parms.bUpdate = bUpdate;

	pFnSetUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUpdate, &SetUpdate_Parms, NULL );

	pFnSetUpdate->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.GetVisible
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxguimoviemp::GetVisible ( )
{
	static UFunction* pFnGetVisible = NULL;

	if ( ! pFnGetVisible )
		pFnGetVisible = (UFunction*) UObject::GObjObjects()->Data[ 50495 ];

	Usfxguimoviemp_execGetVisible_Parms GetVisible_Parms;

	pFnGetVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVisible, &GetVisible_Parms, NULL );

	pFnGetVisible->FunctionFlags |= 0x400;

	return GetVisible_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.SetVisible
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void Usfxguimoviemp::SetVisible ( unsigned long bVisible )
{
	static UFunction* pFnSetVisible = NULL;

	if ( ! pFnSetVisible )
		pFnSetVisible = (UFunction*) UObject::GObjObjects()->Data[ 50493 ];

	Usfxguimoviemp_execSetVisible_Parms SetVisible_Parms;
	SetVisible_Parms.bVisible = bVisible;

	pFnSetVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVisible, &SetVisible_Parms, NULL );

	pFnSetVisible->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.HasFocus
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxguimoviemp::HasFocus ( )
{
	static UFunction* pFnHasFocus = NULL;

	if ( ! pFnHasFocus )
		pFnHasFocus = (UFunction*) UObject::GObjObjects()->Data[ 50491 ];

	Usfxguimoviemp_execHasFocus_Parms HasFocus_Parms;

	pFnHasFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasFocus, &HasFocus_Parms, NULL );

	pFnHasFocus->FunctionFlags |= 0x400;

	return HasFocus_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.SetAllowFSCommands
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bAllowFSCommands               ( CPF_Parm )

void Usfxguimoviemp::SetAllowFSCommands ( unsigned long bAllowFSCommands )
{
	static UFunction* pFnSetAllowFSCommands = NULL;

	if ( ! pFnSetAllowFSCommands )
		pFnSetAllowFSCommands = (UFunction*) UObject::GObjObjects()->Data[ 50489 ];

	Usfxguimoviemp_execSetAllowFSCommands_Parms SetAllowFSCommands_Parms;
	SetAllowFSCommands_Parms.bAllowFSCommands = bAllowFSCommands;

	pFnSetAllowFSCommands->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllowFSCommands, &SetAllowFSCommands_Parms, NULL );

	pFnSetAllowFSCommands->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.SetFocus
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bCapture                       ( CPF_Parm )
// unsigned long                  bFocus                         ( CPF_OptionalParm | CPF_Parm )

void Usfxguimoviemp::SetFocus ( unsigned long bCapture, unsigned long bFocus )
{
	static UFunction* pFnSetFocus = NULL;

	if ( ! pFnSetFocus )
		pFnSetFocus = (UFunction*) UObject::GObjObjects()->Data[ 50486 ];

	Usfxguimoviemp_execSetFocus_Parms SetFocus_Parms;
	SetFocus_Parms.bCapture = bCapture;
	SetFocus_Parms.bFocus = bFocus;

	pFnSetFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFocus, &SetFocus_Parms, NULL );

	pFnSetFocus->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.SetMovieFocus
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  Focus                          ( CPF_Parm )

void Usfxguimoviemp::SetMovieFocus ( unsigned long Focus )
{
	static UFunction* pFnSetMovieFocus = NULL;

	if ( ! pFnSetMovieFocus )
		pFnSetMovieFocus = (UFunction*) UObject::GObjObjects()->Data[ 50484 ];

	Usfxguimoviemp_execSetMovieFocus_Parms SetMovieFocus_Parms;
	SetMovieFocus_Parms.Focus = Focus;

	pFnSetMovieFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMovieFocus, &SetMovieFocus_Parms, NULL );

	pFnSetMovieFocus->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.Update
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void Usfxguimoviemp::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 50482 ];

	Usfxguimoviemp_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.PostAdvance
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          tDelta                         ( CPF_Parm )

void Usfxguimoviemp::eventPostAdvance ( float tDelta )
{
	static UFunction* pFnPostAdvance = NULL;

	if ( ! pFnPostAdvance )
		pFnPostAdvance = (UFunction*) UObject::GObjObjects()->Data[ 50480 ];

	Usfxguimoviemp_eventPostAdvance_Parms PostAdvance_Parms;
	PostAdvance_Parms.tDelta = tDelta;

	this->ProcessEvent ( pFnPostAdvance, &PostAdvance_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.Advance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          Time                           ( CPF_Parm )

void Usfxguimoviemp::Advance ( float Time )
{
	static UFunction* pFnAdvance = NULL;

	if ( ! pFnAdvance )
		pFnAdvance = (UFunction*) UObject::GObjObjects()->Data[ 50478 ];

	Usfxguimoviemp_execAdvance_Parms Advance_Parms;
	Advance_Parms.Time = Time;

	pFnAdvance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdvance, &Advance_Parms, NULL );

	pFnAdvance->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.InvokeOnCloseDelegates
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void Usfxguimoviemp::eventInvokeOnCloseDelegates ( )
{
	static UFunction* pFnInvokeOnCloseDelegates = NULL;

	if ( ! pFnInvokeOnCloseDelegates )
		pFnInvokeOnCloseDelegates = (UFunction*) UObject::GObjObjects()->Data[ 50475 ];

	Usfxguimoviemp_eventInvokeOnCloseDelegates_Parms InvokeOnCloseDelegates_Parms;

	this->ProcessEvent ( pFnInvokeOnCloseDelegates, &InvokeOnCloseDelegates_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxguimoviemp::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 50473 ];

	Usfxguimoviemp_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.Close
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  Unload                         ( CPF_OptionalParm | CPF_Parm )

void Usfxguimoviemp::Close ( unsigned long Unload )
{
	static UFunction* pFnClose = NULL;

	if ( ! pFnClose )
		pFnClose = (UFunction*) UObject::GObjObjects()->Data[ 50471 ];

	Usfxguimoviemp_execClose_Parms Close_Parms;
	Close_Parms.Unload = Unload;

	pFnClose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClose, &Close_Parms, NULL );

	pFnClose->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxguimoviemp::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 50468 ];

	Usfxguimoviemp_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.Start
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  StartPaused                    ( CPF_OptionalParm | CPF_Parm )

bool Usfxguimoviemp::eventStart ( unsigned long StartPaused )
{
	static UFunction* pFnStart = NULL;

	if ( ! pFnStart )
		pFnStart = (UFunction*) UObject::GObjObjects()->Data[ 47204 ];

	Usfxguimoviemp_eventStart_Parms Start_Parms;
	Start_Parms.StartPaused = StartPaused;

	pFnStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStart, &Start_Parms, NULL );

	pFnStart->FunctionFlags |= 0x400;

	return Start_Parms.ReturnValue;
};

// Function SFXGame.SFXGUIMovie.UpdateInputConfigurations
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxguimoviemp::eventUpdateInputConfigurations ( )
{
	static UFunction* pFnUpdateInputConfigurations = NULL;

	if ( ! pFnUpdateInputConfigurations )
		pFnUpdateInputConfigurations = (UFunction*) UObject::GObjObjects()->Data[ 50461 ];

	Usfxguimoviemp_eventUpdateInputConfigurations_Parms UpdateInputConfigurations_Parms;

	this->ProcessEvent ( pFnUpdateInputConfigurations, &UpdateInputConfigurations_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.ClearAllDelegates
// [0x00020002] 
// Parameters infos:

void Usfxguimoviemp::ClearAllDelegates ( )
{
	static UFunction* pFnClearAllDelegates = NULL;

	if ( ! pFnClearAllDelegates )
		pFnClearAllDelegates = (UFunction*) UObject::GObjObjects()->Data[ 50460 ];

	Usfxguimoviemp_execClearAllDelegates_Parms ClearAllDelegates_Parms;

	this->ProcessEvent ( pFnClearAllDelegates, &ClearAllDelegates_Parms, NULL );
};

// Function SFXGame.SFXGUIMovie.ClearOnMovieClosedDelegate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FScriptDelegate         i_OnMovieClosedDelegate        ( CPF_Parm | CPF_NeedCtorLink )

void Usfxguimoviemp::ClearOnMovieClosedDelegate ( struct FScriptDelegate i_OnMovieClosedDelegate )
{
	static UFunction* pFnClearOnMovieClosedDelegate = NULL;

	if ( ! pFnClearOnMovieClosedDelegate )
		pFnClearOnMovieClosedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 50458 ];

	Usfxguimoviemp_execClearOnMovieClosedDelegate_Parms ClearOnMovieClosedDelegate_Parms;
	memcpy ( &ClearOnMovieClosedDelegate_Parms.i_OnMovieClosedDelegate, &i_OnMovieClosedDelegate, 0xC );

	pFnClearOnMovieClosedDelegate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearOnMovieClosedDelegate, &ClearOnMovieClosedDelegate_Parms, NULL );

	pFnClearOnMovieClosedDelegate->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.AddOnMovieClosedDelegate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FScriptDelegate         i_OnMovieClosedDelegate        ( CPF_Parm | CPF_NeedCtorLink )

void Usfxguimoviemp::AddOnMovieClosedDelegate ( struct FScriptDelegate i_OnMovieClosedDelegate )
{
	static UFunction* pFnAddOnMovieClosedDelegate = NULL;

	if ( ! pFnAddOnMovieClosedDelegate )
		pFnAddOnMovieClosedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 50456 ];

	Usfxguimoviemp_execAddOnMovieClosedDelegate_Parms AddOnMovieClosedDelegate_Parms;
	memcpy ( &AddOnMovieClosedDelegate_Parms.i_OnMovieClosedDelegate, &i_OnMovieClosedDelegate, 0xC );

	pFnAddOnMovieClosedDelegate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddOnMovieClosedDelegate, &AddOnMovieClosedDelegate_Parms, NULL );

	pFnAddOnMovieClosedDelegate->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGUIMovie.OnMovieClosedDelegate
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXGUIMovie*            i_ScreenToClose                ( CPF_Parm )

bool Usfxguimoviemp::OnMovieClosedDelegate ( class USFXGUIMovie* i_ScreenToClose )
{
	static UFunction* pFnOnMovieClosedDelegate = NULL;

	if ( ! pFnOnMovieClosedDelegate )
		pFnOnMovieClosedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 50441 ];

	Usfxguimoviemp_execOnMovieClosedDelegate_Parms OnMovieClosedDelegate_Parms;
	OnMovieClosedDelegate_Parms.i_ScreenToClose = i_ScreenToClose;

	this->ProcessEvent ( pFnOnMovieClosedDelegate, &OnMovieClosedDelegate_Parms, NULL );

	return OnMovieClosedDelegate_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mppausemenu.ShowGamercard
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ListIndex                      ( CPF_Parm )

void Usfxgui_mppausemenu::ShowGamercard ( int ListIndex )
{
	static UFunction* pFnShowGamercard = NULL;

	if ( ! pFnShowGamercard )
		pFnShowGamercard = (UFunction*) UObject::GObjObjects()->Data[ 110761 ];

	Usfxgui_mppausemenu_execShowGamercard_Parms ShowGamercard_Parms;
	ShowGamercard_Parms.ListIndex = ListIndex;

	this->ProcessEvent ( pFnShowGamercard, &ShowGamercard_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppausemenu.GetChallengeText
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mppausemenu::GetChallengeText ( )
{
	static UFunction* pFnGetChallengeText = NULL;

	if ( ! pFnGetChallengeText )
		pFnGetChallengeText = (UFunction*) UObject::GObjObjects()->Data[ 110755 ];

	Usfxgui_mppausemenu_execGetChallengeText_Parms GetChallengeText_Parms;

	this->ProcessEvent ( pFnGetChallengeText, &GetChallengeText_Parms, NULL );

	return GetChallengeText_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mppausemenu.GetFactionText
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mppausemenu::GetFactionText ( )
{
	static UFunction* pFnGetFactionText = NULL;

	if ( ! pFnGetFactionText )
		pFnGetFactionText = (UFunction*) UObject::GObjObjects()->Data[ 110748 ];

	Usfxgui_mppausemenu_execGetFactionText_Parms GetFactionText_Parms;

	this->ProcessEvent ( pFnGetFactionText, &GetFactionText_Parms, NULL );

	return GetFactionText_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mppausemenu.GetMapText
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mppausemenu::GetMapText ( )
{
	static UFunction* pFnGetMapText = NULL;

	if ( ! pFnGetMapText )
		pFnGetMapText = (UFunction*) UObject::GObjObjects()->Data[ 110741 ];

	Usfxgui_mppausemenu_execGetMapText_Parms GetMapText_Parms;

	this->ProcessEvent ( pFnGetMapText, &GetMapText_Parms, NULL );

	return GetMapText_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mppausemenu.GetWaveNumber
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mppausemenu::GetWaveNumber ( )
{
	static UFunction* pFnGetWaveNumber = NULL;

	if ( ! pFnGetWaveNumber )
		pFnGetWaveNumber = (UFunction*) UObject::GObjObjects()->Data[ 110735 ];

	Usfxgui_mppausemenu_execGetWaveNumber_Parms GetWaveNumber_Parms;

	this->ProcessEvent ( pFnGetWaveNumber, &GetWaveNumber_Parms, NULL );

	return GetWaveNumber_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mppausemenu.OpenIngamePropertyEditor
// [0x00020002] 
// Parameters infos:

void Usfxgui_mppausemenu::OpenIngamePropertyEditor ( )
{
	static UFunction* pFnOpenIngamePropertyEditor = NULL;

	if ( ! pFnOpenIngamePropertyEditor )
		pFnOpenIngamePropertyEditor = (UFunction*) UObject::GObjObjects()->Data[ 110734 ];

	Usfxgui_mppausemenu_execOpenIngamePropertyEditor_Parms OpenIngamePropertyEditor_Parms;

	this->ProcessEvent ( pFnOpenIngamePropertyEditor, &OpenIngamePropertyEditor_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppausemenu.ShouldAnimate
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mppausemenu::ShouldAnimate ( )
{
	static UFunction* pFnShouldAnimate = NULL;

	if ( ! pFnShouldAnimate )
		pFnShouldAnimate = (UFunction*) UObject::GObjObjects()->Data[ 110731 ];

	Usfxgui_mppausemenu_execShouldAnimate_Parms ShouldAnimate_Parms;

	this->ProcessEvent ( pFnShouldAnimate, &ShouldAnimate_Parms, NULL );

	return ShouldAnimate_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mppausemenu.SortScoreData
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FPauseMenuScoreData     A                              ( CPF_Parm | CPF_NeedCtorLink )
// struct FPauseMenuScoreData     B                              ( CPF_Parm | CPF_NeedCtorLink )

int Usfxgui_mppausemenu::SortScoreData ( struct FPauseMenuScoreData A, struct FPauseMenuScoreData B )
{
	static UFunction* pFnSortScoreData = NULL;

	if ( ! pFnSortScoreData )
		pFnSortScoreData = (UFunction*) UObject::GObjObjects()->Data[ 110727 ];

	Usfxgui_mppausemenu_execSortScoreData_Parms SortScoreData_Parms;
	memcpy ( &SortScoreData_Parms.A, &A, 0x14 );
	memcpy ( &SortScoreData_Parms.B, &B, 0x14 );

	this->ProcessEvent ( pFnSortScoreData, &SortScoreData_Parms, NULL );

	return SortScoreData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mppausemenu.GetScoreData
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FPauseMenuScoreData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FPauseMenuScoreData > Usfxgui_mppausemenu::GetScoreData ( )
{
	static UFunction* pFnGetScoreData = NULL;

	if ( ! pFnGetScoreData )
		pFnGetScoreData = (UFunction*) UObject::GObjObjects()->Data[ 110718 ];

	Usfxgui_mppausemenu_execGetScoreData_Parms GetScoreData_Parms;

	this->ProcessEvent ( pFnGetScoreData, &GetScoreData_Parms, NULL );

	return GetScoreData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mppausemenu.ConfirmExitPopupCallback
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Usfxgui_mppausemenu::ConfirmExitPopupCallback ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnConfirmExitPopupCallback = NULL;

	if ( ! pFnConfirmExitPopupCallback )
		pFnConfirmExitPopupCallback = (UFunction*) UObject::GObjObjects()->Data[ 110712 ];

	Usfxgui_mppausemenu_execConfirmExitPopupCallback_Parms ConfirmExitPopupCallback_Parms;
	ConfirmExitPopupCallback_Parms.bAPressed = bAPressed;
	ConfirmExitPopupCallback_Parms.nContext = nContext;

	this->ProcessEvent ( pFnConfirmExitPopupCallback, &ConfirmExitPopupCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppausemenu.ExitMatch
// [0x00020002] 
// Parameters infos:

void Usfxgui_mppausemenu::ExitMatch ( )
{
	static UFunction* pFnExitMatch = NULL;

	if ( ! pFnExitMatch )
		pFnExitMatch = (UFunction*) UObject::GObjObjects()->Data[ 110706 ];

	Usfxgui_mppausemenu_execExitMatch_Parms ExitMatch_Parms;

	this->ProcessEvent ( pFnExitMatch, &ExitMatch_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppausemenu.OnMPOptionsClosed
// [0x00022003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mppausemenu::OnMPOptionsClosed ( )
{
	static UFunction* pFnOnMPOptionsClosed = NULL;

	if ( ! pFnOnMPOptionsClosed )
		pFnOnMPOptionsClosed = (UFunction*) UObject::GObjObjects()->Data[ 110704 ];

	Usfxgui_mppausemenu_execOnMPOptionsClosed_Parms OnMPOptionsClosed_Parms;

	this->ProcessEvent ( pFnOnMPOptionsClosed, &OnMPOptionsClosed_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppausemenu.OpenOptions
// [0x00020002] 
// Parameters infos:

void Usfxgui_mppausemenu::OpenOptions ( )
{
	static UFunction* pFnOpenOptions = NULL;

	if ( ! pFnOpenOptions )
		pFnOpenOptions = (UFunction*) UObject::GObjObjects()->Data[ 110703 ];

	Usfxgui_mppausemenu_execOpenOptions_Parms OpenOptions_Parms;

	this->ProcessEvent ( pFnOpenOptions, &OpenOptions_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppausemenu.Exit
// [0x00020002] 
// Parameters infos:

void Usfxgui_mppausemenu::Exit ( )
{
	static UFunction* pFnExit = NULL;

	if ( ! pFnExit )
		pFnExit = (UFunction*) UObject::GObjObjects()->Data[ 110702 ];

	Usfxgui_mppausemenu_execExit_Parms Exit_Parms;

	this->ProcessEvent ( pFnExit, &Exit_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppausemenu.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mppausemenu::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 110701 ];

	Usfxgui_mppausemenu_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppausemenu.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mppausemenu::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 110700 ];

	Usfxgui_mppausemenu_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.SaveAndExit
// [0x00020002] 
// Parameters infos:

void USFXGUI_MPOptions::SaveAndExit ( )
{
	static UFunction* pFnSaveAndExit = NULL;

	if ( ! pFnSaveAndExit )
		pFnSaveAndExit = (UFunction*) UObject::GObjObjects()->Data[ 62482 ];

	USFXGUI_MPOptions_execSaveAndExit_Parms SaveAndExit_Parms;

	this->ProcessEvent ( pFnSaveAndExit, &SaveAndExit_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.MovieLoaded
// [0x00020002] 
// Parameters infos:

void USFXGUI_MPOptions::MovieLoaded ( )
{
	static UFunction* pFnMovieLoaded = NULL;

	if ( ! pFnMovieLoaded )
		pFnMovieLoaded = (UFunction*) UObject::GObjObjects()->Data[ 62480 ];

	USFXGUI_MPOptions_execMovieLoaded_Parms MovieLoaded_Parms;

	this->ProcessEvent ( pFnMovieLoaded, &MovieLoaded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void USFXGUI_MPOptions::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 62479 ];

	USFXGUI_MPOptions_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.CloseGui
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGUI_MPOptions::CloseGui ( )
{
	static UFunction* pFnCloseGui = NULL;

	if ( ! pFnCloseGui )
		pFnCloseGui = (UFunction*) UObject::GObjObjects()->Data[ 62470 ];

	USFXGUI_MPOptions_execCloseGui_Parms CloseGui_Parms;

	this->ProcessEvent ( pFnCloseGui, &CloseGui_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXGUI_MPOptions::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 62467 ];

	USFXGUI_MPOptions_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.InitSystemSettingsCache
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void USFXGUI_MPOptions::InitSystemSettingsCache ( )
{
	static UFunction* pFnInitSystemSettingsCache = NULL;

	if ( ! pFnInitSystemSettingsCache )
		pFnInitSystemSettingsCache = (UFunction*) UObject::GObjObjects()->Data[ 62466 ];

	USFXGUI_MPOptions_execInitSystemSettingsCache_Parms InitSystemSettingsCache_Parms;

	pFnInitSystemSettingsCache->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSystemSettingsCache, &InitSystemSettingsCache_Parms, NULL );

	pFnInitSystemSettingsCache->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Options.SendTelemetryDump
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// struct FName                   Hook                           ( CPF_Parm )

void USFXGUI_MPOptions::SendTelemetryDump ( struct FName Hook )
{
	static UFunction* pFnSendTelemetryDump = NULL;

	if ( ! pFnSendTelemetryDump )
		pFnSendTelemetryDump = (UFunction*) UObject::GObjObjects()->Data[ 62464 ];

	USFXGUI_MPOptions_execSendTelemetryDump_Parms SendTelemetryDump_Parms;
	memcpy ( &SendTelemetryDump_Parms.Hook, &Hook, 0x8 );

	pFnSendTelemetryDump->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendTelemetryDump, &SendTelemetryDump_Parms, NULL );

	pFnSendTelemetryDump->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Options.SendTelemetryChanges
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXGUI_MPOptions::SendTelemetryChanges ( )
{
	static UFunction* pFnSendTelemetryChanges = NULL;

	if ( ! pFnSendTelemetryChanges )
		pFnSendTelemetryChanges = (UFunction*) UObject::GObjObjects()->Data[ 62463 ];

	USFXGUI_MPOptions_execSendTelemetryChanges_Parms SendTelemetryChanges_Parms;

	pFnSendTelemetryChanges->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendTelemetryChanges, &SendTelemetryChanges_Parms, NULL );

	pFnSendTelemetryChanges->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Options.AddTelemetryInfo
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  eOptionId                      ( CPF_Parm )
// int                            Value                          ( CPF_Parm )
// TArray< struct FTelemetryAttribute > Attributes                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::eventAddTelemetryInfo ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes )
{
	static UFunction* pFnAddTelemetryInfo = NULL;

	if ( ! pFnAddTelemetryInfo )
		pFnAddTelemetryInfo = (UFunction*) UObject::GObjObjects()->Data[ 62455 ];

	USFXGUI_MPOptions_eventAddTelemetryInfo_Parms AddTelemetryInfo_Parms;
	AddTelemetryInfo_Parms.eOptionId = eOptionId;
	AddTelemetryInfo_Parms.Value = Value;

	this->ProcessEvent ( pFnAddTelemetryInfo, &AddTelemetryInfo_Parms, NULL );

	if ( Attributes )
		memcpy ( Attributes, &AddTelemetryInfo_Parms.Attributes, 0xC );
};

// Function SFXGame.BioSFHandler_Options.AddTelem_Language
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eOptionId                      ( CPF_Parm )
// int                            Value                          ( CPF_Parm )
// TArray< struct FTelemetryAttribute > Attributes                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 TelemetryKey                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::AddTelem_Language ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey )
{
	static UFunction* pFnAddTelem_Language = NULL;

	if ( ! pFnAddTelem_Language )
		pFnAddTelem_Language = (UFunction*) UObject::GObjObjects()->Data[ 62449 ];

	USFXGUI_MPOptions_execAddTelem_Language_Parms AddTelem_Language_Parms;
	AddTelem_Language_Parms.eOptionId = eOptionId;
	AddTelem_Language_Parms.Value = Value;

	pFnAddTelem_Language->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTelem_Language, &AddTelem_Language_Parms, NULL );

	pFnAddTelem_Language->FunctionFlags |= 0x400;

	if ( Attributes )
		memcpy ( Attributes, &AddTelem_Language_Parms.Attributes, 0xC );

	if ( TelemetryKey )
		memcpy ( TelemetryKey, &AddTelem_Language_Parms.TelemetryKey, 0xC );
};

// Function SFXGame.BioSFHandler_Options.AddTelem_VCOutput
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eOptionId                      ( CPF_Parm )
// int                            Value                          ( CPF_Parm )
// TArray< struct FTelemetryAttribute > Attributes                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 TelemetryKey                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::AddTelem_VCOutput ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey )
{
	static UFunction* pFnAddTelem_VCOutput = NULL;

	if ( ! pFnAddTelem_VCOutput )
		pFnAddTelem_VCOutput = (UFunction*) UObject::GObjObjects()->Data[ 62443 ];

	USFXGUI_MPOptions_execAddTelem_VCOutput_Parms AddTelem_VCOutput_Parms;
	AddTelem_VCOutput_Parms.eOptionId = eOptionId;
	AddTelem_VCOutput_Parms.Value = Value;

	pFnAddTelem_VCOutput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTelem_VCOutput, &AddTelem_VCOutput_Parms, NULL );

	pFnAddTelem_VCOutput->FunctionFlags |= 0x400;

	if ( Attributes )
		memcpy ( Attributes, &AddTelem_VCOutput_Parms.Attributes, 0xC );

	if ( TelemetryKey )
		memcpy ( TelemetryKey, &AddTelem_VCOutput_Parms.TelemetryKey, 0xC );
};

// Function SFXGame.BioSFHandler_Options.AddTelem_VCInput
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eOptionId                      ( CPF_Parm )
// int                            Value                          ( CPF_Parm )
// TArray< struct FTelemetryAttribute > Attributes                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 TelemetryKey                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::AddTelem_VCInput ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey )
{
	static UFunction* pFnAddTelem_VCInput = NULL;

	if ( ! pFnAddTelem_VCInput )
		pFnAddTelem_VCInput = (UFunction*) UObject::GObjObjects()->Data[ 62437 ];

	USFXGUI_MPOptions_execAddTelem_VCInput_Parms AddTelem_VCInput_Parms;
	AddTelem_VCInput_Parms.eOptionId = eOptionId;
	AddTelem_VCInput_Parms.Value = Value;

	pFnAddTelem_VCInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTelem_VCInput, &AddTelem_VCInput_Parms, NULL );

	pFnAddTelem_VCInput->FunctionFlags |= 0x400;

	if ( Attributes )
		memcpy ( Attributes, &AddTelem_VCInput_Parms.Attributes, 0xC );

	if ( TelemetryKey )
		memcpy ( TelemetryKey, &AddTelem_VCInput_Parms.TelemetryKey, 0xC );
};

// Function SFXGame.BioSFHandler_Options.AddTelem_Resolution
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eOptionId                      ( CPF_Parm )
// int                            Value                          ( CPF_Parm )
// TArray< struct FTelemetryAttribute > Attributes                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 TelemetryKey                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::AddTelem_Resolution ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey )
{
	static UFunction* pFnAddTelem_Resolution = NULL;

	if ( ! pFnAddTelem_Resolution )
		pFnAddTelem_Resolution = (UFunction*) UObject::GObjObjects()->Data[ 62431 ];

	USFXGUI_MPOptions_execAddTelem_Resolution_Parms AddTelem_Resolution_Parms;
	AddTelem_Resolution_Parms.eOptionId = eOptionId;
	AddTelem_Resolution_Parms.Value = Value;

	pFnAddTelem_Resolution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTelem_Resolution, &AddTelem_Resolution_Parms, NULL );

	pFnAddTelem_Resolution->FunctionFlags |= 0x400;

	if ( Attributes )
		memcpy ( Attributes, &AddTelem_Resolution_Parms.Attributes, 0xC );

	if ( TelemetryKey )
		memcpy ( TelemetryKey, &AddTelem_Resolution_Parms.TelemetryKey, 0xC );
};

// Function SFXGame.BioSFHandler_Options.AddTelem_Brightness
// [0x00422002] 
// Parameters infos:
// unsigned char                  eOptionId                      ( CPF_Parm )
// int                            Value                          ( CPF_Parm )
// TArray< struct FTelemetryAttribute > Attributes                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 TelemetryKey                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::AddTelem_Brightness ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey )
{
	static UFunction* pFnAddTelem_Brightness = NULL;

	if ( ! pFnAddTelem_Brightness )
		pFnAddTelem_Brightness = (UFunction*) UObject::GObjObjects()->Data[ 62425 ];

	USFXGUI_MPOptions_execAddTelem_Brightness_Parms AddTelem_Brightness_Parms;
	AddTelem_Brightness_Parms.eOptionId = eOptionId;
	AddTelem_Brightness_Parms.Value = Value;

	this->ProcessEvent ( pFnAddTelem_Brightness, &AddTelem_Brightness_Parms, NULL );

	if ( Attributes )
		memcpy ( Attributes, &AddTelem_Brightness_Parms.Attributes, 0xC );

	if ( TelemetryKey )
		memcpy ( TelemetryKey, &AddTelem_Brightness_Parms.TelemetryKey, 0xC );
};

// Function SFXGame.BioSFHandler_Options.AddTelem_InvBool
// [0x00422002] 
// Parameters infos:
// unsigned char                  eOptionId                      ( CPF_Parm )
// int                            Value                          ( CPF_Parm )
// TArray< struct FTelemetryAttribute > Attributes                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 TelemetryKey                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::AddTelem_InvBool ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey )
{
	static UFunction* pFnAddTelem_InvBool = NULL;

	if ( ! pFnAddTelem_InvBool )
		pFnAddTelem_InvBool = (UFunction*) UObject::GObjObjects()->Data[ 62419 ];

	USFXGUI_MPOptions_execAddTelem_InvBool_Parms AddTelem_InvBool_Parms;
	AddTelem_InvBool_Parms.eOptionId = eOptionId;
	AddTelem_InvBool_Parms.Value = Value;

	this->ProcessEvent ( pFnAddTelem_InvBool, &AddTelem_InvBool_Parms, NULL );

	if ( Attributes )
		memcpy ( Attributes, &AddTelem_InvBool_Parms.Attributes, 0xC );

	if ( TelemetryKey )
		memcpy ( TelemetryKey, &AddTelem_InvBool_Parms.TelemetryKey, 0xC );
};

// Function SFXGame.BioSFHandler_Options.AddTelem_Bool
// [0x00422002] 
// Parameters infos:
// unsigned char                  eOptionId                      ( CPF_Parm )
// int                            Value                          ( CPF_Parm )
// TArray< struct FTelemetryAttribute > Attributes                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 TelemetryKey                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::AddTelem_Bool ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey )
{
	static UFunction* pFnAddTelem_Bool = NULL;

	if ( ! pFnAddTelem_Bool )
		pFnAddTelem_Bool = (UFunction*) UObject::GObjObjects()->Data[ 62413 ];

	USFXGUI_MPOptions_execAddTelem_Bool_Parms AddTelem_Bool_Parms;
	AddTelem_Bool_Parms.eOptionId = eOptionId;
	AddTelem_Bool_Parms.Value = Value;

	this->ProcessEvent ( pFnAddTelem_Bool, &AddTelem_Bool_Parms, NULL );

	if ( Attributes )
		memcpy ( Attributes, &AddTelem_Bool_Parms.Attributes, 0xC );

	if ( TelemetryKey )
		memcpy ( TelemetryKey, &AddTelem_Bool_Parms.TelemetryKey, 0xC );
};

// Function SFXGame.BioSFHandler_Options.AddTelem_Int
// [0x00422002] 
// Parameters infos:
// unsigned char                  eOptionId                      ( CPF_Parm )
// int                            Value                          ( CPF_Parm )
// TArray< struct FTelemetryAttribute > Attributes                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 TelemetryKey                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::AddTelem_Int ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey )
{
	static UFunction* pFnAddTelem_Int = NULL;

	if ( ! pFnAddTelem_Int )
		pFnAddTelem_Int = (UFunction*) UObject::GObjObjects()->Data[ 62407 ];

	USFXGUI_MPOptions_execAddTelem_Int_Parms AddTelem_Int_Parms;
	AddTelem_Int_Parms.eOptionId = eOptionId;
	AddTelem_Int_Parms.Value = Value;

	this->ProcessEvent ( pFnAddTelem_Int, &AddTelem_Int_Parms, NULL );

	if ( Attributes )
		memcpy ( Attributes, &AddTelem_Int_Parms.Attributes, 0xC );

	if ( TelemetryKey )
		memcpy ( TelemetryKey, &AddTelem_Int_Parms.TelemetryKey, 0xC );
};

// Function SFXGame.BioSFHandler_Options.UpdateAudioVolumeSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXProfileSettings*     ReadFrom                       ( CPF_Parm )

void USFXGUI_MPOptions::UpdateAudioVolumeSettings ( class USFXProfileSettings* ReadFrom )
{
	static UFunction* pFnUpdateAudioVolumeSettings = NULL;

	if ( ! pFnUpdateAudioVolumeSettings )
		pFnUpdateAudioVolumeSettings = (UFunction*) UObject::GObjObjects()->Data[ 62405 ];

	USFXGUI_MPOptions_execUpdateAudioVolumeSettings_Parms UpdateAudioVolumeSettings_Parms;
	UpdateAudioVolumeSettings_Parms.ReadFrom = ReadFrom;

	pFnUpdateAudioVolumeSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAudioVolumeSettings, &UpdateAudioVolumeSettings_Parms, NULL );

	pFnUpdateAudioVolumeSettings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Options.UpdateDisplayGamma
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXProfileSettings*     ReadFrom                       ( CPF_Parm )

void USFXGUI_MPOptions::UpdateDisplayGamma ( class USFXProfileSettings* ReadFrom )
{
	static UFunction* pFnUpdateDisplayGamma = NULL;

	if ( ! pFnUpdateDisplayGamma )
		pFnUpdateDisplayGamma = (UFunction*) UObject::GObjObjects()->Data[ 62403 ];

	USFXGUI_MPOptions_execUpdateDisplayGamma_Parms UpdateDisplayGamma_Parms;
	UpdateDisplayGamma_Parms.ReadFrom = ReadFrom;

	pFnUpdateDisplayGamma->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDisplayGamma, &UpdateDisplayGamma_Parms, NULL );

	pFnUpdateDisplayGamma->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Options.GetProfileSettingsForOptions
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< unsigned char >        lstProfSettings                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< int >                  lstTypes                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::GetProfileSettingsForOptions ( TArray< unsigned char >* lstProfSettings, TArray< int >* lstTypes )
{
	static UFunction* pFnGetProfileSettingsForOptions = NULL;

	if ( ! pFnGetProfileSettingsForOptions )
		pFnGetProfileSettingsForOptions = (UFunction*) UObject::GObjObjects()->Data[ 62398 ];

	USFXGUI_MPOptions_execGetProfileSettingsForOptions_Parms GetProfileSettingsForOptions_Parms;

	pFnGetProfileSettingsForOptions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingsForOptions, &GetProfileSettingsForOptions_Parms, NULL );

	pFnGetProfileSettingsForOptions->FunctionFlags |= 0x400;

	if ( lstProfSettings )
		memcpy ( lstProfSettings, &GetProfileSettingsForOptions_Parms.lstProfSettings, 0xC );

	if ( lstTypes )
		memcpy ( lstTypes, &GetProfileSettingsForOptions_Parms.lstTypes, 0xC );
};

// Function SFXGame.BioSFHandler_Options.GetProfileSettingForOption
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Type                           ( CPF_Parm )

unsigned char USFXGUI_MPOptions::GetProfileSettingForOption ( int Type )
{
	static UFunction* pFnGetProfileSettingForOption = NULL;

	if ( ! pFnGetProfileSettingForOption )
		pFnGetProfileSettingForOption = (UFunction*) UObject::GObjObjects()->Data[ 62395 ];

	USFXGUI_MPOptions_execGetProfileSettingForOption_Parms GetProfileSettingForOption_Parms;
	GetProfileSettingForOption_Parms.Type = Type;

	pFnGetProfileSettingForOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingForOption, &GetProfileSettingForOption_Parms, NULL );

	pFnGetProfileSettingForOption->FunctionFlags |= 0x400;

	return GetProfileSettingForOption_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_Options.SetOption
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Type                           ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void USFXGUI_MPOptions::SetOption ( int Type, int Value )
{
	static UFunction* pFnSetOption = NULL;

	if ( ! pFnSetOption )
		pFnSetOption = (UFunction*) UObject::GObjObjects()->Data[ 62392 ];

	USFXGUI_MPOptions_execSetOption_Parms SetOption_Parms;
	SetOption_Parms.Type = Type;
	SetOption_Parms.Value = Value;

	pFnSetOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOption, &SetOption_Parms, NULL );

	pFnSetOption->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Options.SetOptionsOnGUI
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXProfileSettings*     Settings                       ( CPF_Parm )

void USFXGUI_MPOptions::SetOptionsOnGUI ( class USFXProfileSettings* Settings )
{
	static UFunction* pFnSetOptionsOnGUI = NULL;

	if ( ! pFnSetOptionsOnGUI )
		pFnSetOptionsOnGUI = (UFunction*) UObject::GObjObjects()->Data[ 62390 ];

	USFXGUI_MPOptions_execSetOptionsOnGUI_Parms SetOptionsOnGUI_Parms;
	SetOptionsOnGUI_Parms.Settings = Settings;

	pFnSetOptionsOnGUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOptionsOnGUI, &SetOptionsOnGUI_Parms, NULL );

	pFnSetOptionsOnGUI->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Options.UpdateSpeechLanguageOptions
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXGUI_Option_TextLanguage* TextOption                     ( CPF_Parm )

void USFXGUI_MPOptions::UpdateSpeechLanguageOptions ( class USFXGUI_Option_TextLanguage* TextOption )
{
	static UFunction* pFnUpdateSpeechLanguageOptions = NULL;

	if ( ! pFnUpdateSpeechLanguageOptions )
		pFnUpdateSpeechLanguageOptions = (UFunction*) UObject::GObjObjects()->Data[ 62388 ];

	USFXGUI_MPOptions_execUpdateSpeechLanguageOptions_Parms UpdateSpeechLanguageOptions_Parms;
	UpdateSpeechLanguageOptions_Parms.TextOption = TextOption;

	pFnUpdateSpeechLanguageOptions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSpeechLanguageOptions, &UpdateSpeechLanguageOptions_Parms, NULL );

	pFnUpdateSpeechLanguageOptions->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Options.Callback_ResetToDefaults
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void USFXGUI_MPOptions::Callback_ResetToDefaults ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ResetToDefaults = NULL;

	if ( ! pFnCallback_ResetToDefaults )
		pFnCallback_ResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 62375 ];

	USFXGUI_MPOptions_execCallback_ResetToDefaults_Parms Callback_ResetToDefaults_Parms;
	Callback_ResetToDefaults_Parms.bAPressed = bAPressed;
	Callback_ResetToDefaults_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ResetToDefaults, &Callback_ResetToDefaults_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.ResetToDefaults
// [0x00020002] 
// Parameters infos:
// struct FString                 sPackedIDs                     ( CPF_Parm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::ResetToDefaults ( struct FString sPackedIDs )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 62372 ];

	USFXGUI_MPOptions_execResetToDefaults_Parms ResetToDefaults_Parms;
	memcpy ( &ResetToDefaults_Parms.sPackedIDs, &sPackedIDs, 0xC );

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.Helper_ExtractPackedOptIDs
// [0x00420002] 
// Parameters infos:
// struct FString                 sPackedIDs                     ( CPF_Parm | CPF_NeedCtorLink )
// TArray< int >                  lstOptIDs                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::Helper_ExtractPackedOptIDs ( struct FString sPackedIDs, TArray< int >* lstOptIDs )
{
	static UFunction* pFnHelper_ExtractPackedOptIDs = NULL;

	if ( ! pFnHelper_ExtractPackedOptIDs )
		pFnHelper_ExtractPackedOptIDs = (UFunction*) UObject::GObjObjects()->Data[ 62365 ];

	USFXGUI_MPOptions_execHelper_ExtractPackedOptIDs_Parms Helper_ExtractPackedOptIDs_Parms;
	memcpy ( &Helper_ExtractPackedOptIDs_Parms.sPackedIDs, &sPackedIDs, 0xC );

	this->ProcessEvent ( pFnHelper_ExtractPackedOptIDs, &Helper_ExtractPackedOptIDs_Parms, NULL );

	if ( lstOptIDs )
		memcpy ( lstOptIDs, &Helper_ExtractPackedOptIDs_Parms.lstOptIDs, 0xC );
};

// Function SFXGame.BioSFHandler_Options.Helper_CreateResetConfirmPopup
// [0x00020002] 
// Parameters infos:
// class USFXGUIInteraction*      GuiMan                         ( CPF_Parm )
// struct FScriptDelegate         pInputDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::Helper_CreateResetConfirmPopup ( class USFXGUIInteraction* GuiMan, struct FScriptDelegate pInputDelegate )
{
	static UFunction* pFnHelper_CreateResetConfirmPopup = NULL;

	if ( ! pFnHelper_CreateResetConfirmPopup )
		pFnHelper_CreateResetConfirmPopup = (UFunction*) UObject::GObjObjects()->Data[ 62356 ];

	USFXGUI_MPOptions_execHelper_CreateResetConfirmPopup_Parms Helper_CreateResetConfirmPopup_Parms;
	Helper_CreateResetConfirmPopup_Parms.GuiMan = GuiMan;
	memcpy ( &Helper_CreateResetConfirmPopup_Parms.pInputDelegate, &pInputDelegate, 0xC );

	this->ProcessEvent ( pFnHelper_CreateResetConfirmPopup, &Helper_CreateResetConfirmPopup_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.SetOnCloseCallback
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         fn_OnCloseDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate )
{
	static UFunction* pFnSetOnCloseCallback = NULL;

	if ( ! pFnSetOnCloseCallback )
		pFnSetOnCloseCallback = (UFunction*) UObject::GObjObjects()->Data[ 62353 ];

	USFXGUI_MPOptions_execSetOnCloseCallback_Parms SetOnCloseCallback_Parms;
	memcpy ( &SetOnCloseCallback_Parms.fn_OnCloseDelegate, &fn_OnCloseDelegate, 0xC );

	this->ProcessEvent ( pFnSetOnCloseCallback, &SetOnCloseCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.OnCloseCallback
// [0x00120000] 
// Parameters infos:

void USFXGUI_MPOptions::OnCloseCallback ( )
{
	static UFunction* pFnOnCloseCallback = NULL;

	if ( ! pFnOnCloseCallback )
		pFnOnCloseCallback = (UFunction*) UObject::GObjObjects()->Data[ 62352 ];

	USFXGUI_MPOptions_execOnCloseCallback_Parms OnCloseCallback_Parms;

	this->ProcessEvent ( pFnOnCloseCallback, &OnCloseCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.AddTelem
// [0x00522000] 
// Parameters infos:
// unsigned char                  eOptionId                      ( CPF_Parm )
// int                            Value                          ( CPF_Parm )
// TArray< struct FTelemetryAttribute > Attributes                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 TelemetryKey                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_MPOptions::AddTelem ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey )
{
	static UFunction* pFnAddTelem = NULL;

	if ( ! pFnAddTelem )
		pFnAddTelem = (UFunction*) UObject::GObjObjects()->Data[ 62295 ];

	USFXGUI_MPOptions_execAddTelem_Parms AddTelem_Parms;
	AddTelem_Parms.eOptionId = eOptionId;
	AddTelem_Parms.Value = Value;

	this->ProcessEvent ( pFnAddTelem, &AddTelem_Parms, NULL );

	if ( Attributes )
		memcpy ( Attributes, &AddTelem_Parms.Attributes, 0xC );

	if ( TelemetryKey )
		memcpy ( TelemetryKey, &AddTelem_Parms.TelemetryKey, 0xC );
};

// Function SFXGame.BioSFHandler_PCOptions.RevertSettings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXGUI_PCMPOptions::RevertSettings ( )
{
	static UFunction* pFnRevertSettings = NULL;

	if ( ! pFnRevertSettings )
		pFnRevertSettings = (UFunction*) UObject::GObjObjects()->Data[ 62685 ];

	USFXGUI_PCMPOptions_execRevertSettings_Parms RevertSettings_Parms;

	pFnRevertSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRevertSettings, &RevertSettings_Parms, NULL );

	pFnRevertSettings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.ApplySettings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXGUI_PCMPOptions::ApplySettings ( )
{
	static UFunction* pFnApplySettings = NULL;

	if ( ! pFnApplySettings )
		pFnApplySettings = (UFunction*) UObject::GObjObjects()->Data[ 62675 ];

	USFXGUI_PCMPOptions_execApplySettings_Parms ApplySettings_Parms;

	pFnApplySettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplySettings, &ApplySettings_Parms, NULL );

	pFnApplySettings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.WillChangeDisplay
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGUI_PCMPOptions::WillChangeDisplay ( )
{
	static UFunction* pFnWillChangeDisplay = NULL;

	if ( ! pFnWillChangeDisplay )
		pFnWillChangeDisplay = (UFunction*) UObject::GObjObjects()->Data[ 62674 ];

	USFXGUI_PCMPOptions_execWillChangeDisplay_Parms WillChangeDisplay_Parms;

	pFnWillChangeDisplay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWillChangeDisplay, &WillChangeDisplay_Parms, NULL );

	pFnWillChangeDisplay->FunctionFlags |= 0x400;

	return WillChangeDisplay_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_PCOptions.ResetPCToDefaults
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< int >                  lstOptsToReset                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_PCMPOptions::ResetPCToDefaults ( TArray< int >* lstOptsToReset )
{
	static UFunction* pFnResetPCToDefaults = NULL;

	if ( ! pFnResetPCToDefaults )
		pFnResetPCToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 62656 ];

	USFXGUI_PCMPOptions_execResetPCToDefaults_Parms ResetPCToDefaults_Parms;

	pFnResetPCToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetPCToDefaults, &ResetPCToDefaults_Parms, NULL );

	pFnResetPCToDefaults->FunctionFlags |= 0x400;

	if ( lstOptsToReset )
		memcpy ( lstOptsToReset, &ResetPCToDefaults_Parms.lstOptsToReset, 0xC );
};

// Function SFXGame.BioSFHandler_PCOptions.InitPCBindings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  Defaults                       ( CPF_Parm )

void USFXGUI_PCMPOptions::InitPCBindings ( unsigned long Defaults )
{
	static UFunction* pFnInitPCBindings = NULL;

	if ( ! pFnInitPCBindings )
		pFnInitPCBindings = (UFunction*) UObject::GObjObjects()->Data[ 62644 ];

	USFXGUI_PCMPOptions_execInitPCBindings_Parms InitPCBindings_Parms;
	InitPCBindings_Parms.Defaults = Defaults;

	pFnInitPCBindings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitPCBindings, &InitPCBindings_Parms, NULL );

	pFnInitPCBindings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.ApplyPCBindings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXGUI_PCMPOptions::ApplyPCBindings ( )
{
	static UFunction* pFnApplyPCBindings = NULL;

	if ( ! pFnApplyPCBindings )
		pFnApplyPCBindings = (UFunction*) UObject::GObjObjects()->Data[ 62676 ];

	USFXGUI_PCMPOptions_execApplyPCBindings_Parms ApplyPCBindings_Parms;

	pFnApplyPCBindings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyPCBindings, &ApplyPCBindings_Parms, NULL );

	pFnApplyPCBindings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.RefreshGUIBindings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXGUI_PCMPOptions::RefreshGUIBindings ( )
{
	static UFunction* pFnRefreshGUIBindings = NULL;

	if ( ! pFnRefreshGUIBindings )
		pFnRefreshGUIBindings = (UFunction*) UObject::GObjObjects()->Data[ 62652 ];

	USFXGUI_PCMPOptions_execRefreshGUIBindings_Parms RefreshGUIBindings_Parms;

	pFnRefreshGUIBindings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshGUIBindings, &RefreshGUIBindings_Parms, NULL );

	pFnRefreshGUIBindings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.ProcessInput
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  EventType                      ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool USFXGUI_PCMPOptions::ProcessInput ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnProcessInput = NULL;

	if ( ! pFnProcessInput )
		pFnProcessInput = (UFunction*) UObject::GObjObjects()->Data[ 62689 ];

	USFXGUI_PCMPOptions_execProcessInput_Parms ProcessInput_Parms;
	ProcessInput_Parms.ControllerId = ControllerId;
	memcpy ( &ProcessInput_Parms.Key, &Key, 0x8 );
	ProcessInput_Parms.EventType = EventType;
	ProcessInput_Parms.AmountDepressed = AmountDepressed;
	ProcessInput_Parms.bGamepad = bGamepad;

	pFnProcessInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessInput, &ProcessInput_Parms, NULL );

	pFnProcessInput->FunctionFlags |= 0x400;

	return ProcessInput_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_PCOptions.Callback_ConfirmDisplayChange
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void USFXGUI_PCMPOptions::Callback_ConfirmDisplayChange ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ConfirmDisplayChange = NULL;

	if ( ! pFnCallback_ConfirmDisplayChange )
		pFnCallback_ConfirmDisplayChange = (UFunction*) UObject::GObjObjects()->Data[ 62686 ];

	USFXGUI_PCMPOptions_execCallback_ConfirmDisplayChange_Parms Callback_ConfirmDisplayChange_Parms;
	Callback_ConfirmDisplayChange_Parms.bAPressed = bAPressed;
	Callback_ConfirmDisplayChange_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ConfirmDisplayChange, &Callback_ConfirmDisplayChange_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.Callback_DisplayChangeTimeout
// [0x00020002] 
// Parameters infos:

void USFXGUI_PCMPOptions::Callback_DisplayChangeTimeout ( )
{
	static UFunction* pFnCallback_DisplayChangeTimeout = NULL;

	if ( ! pFnCallback_DisplayChangeTimeout )
		pFnCallback_DisplayChangeTimeout = (UFunction*) UObject::GObjObjects()->Data[ 62684 ];

	USFXGUI_PCMPOptions_execCallback_DisplayChangeTimeout_Parms Callback_DisplayChangeTimeout_Parms;

	this->ProcessEvent ( pFnCallback_DisplayChangeTimeout, &Callback_DisplayChangeTimeout_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.ConfirmDisplayChange
// [0x00020002] 
// Parameters infos:

void USFXGUI_PCMPOptions::ConfirmDisplayChange ( )
{
	static UFunction* pFnConfirmDisplayChange = NULL;

	if ( ! pFnConfirmDisplayChange )
		pFnConfirmDisplayChange = (UFunction*) UObject::GObjObjects()->Data[ 62677 ];

	USFXGUI_PCMPOptions_execConfirmDisplayChange_Parms ConfirmDisplayChange_Parms;

	this->ProcessEvent ( pFnConfirmDisplayChange, &ConfirmDisplayChange_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.SaveAndExit
// [0x00020002] 
// Parameters infos:

void USFXGUI_PCMPOptions::SaveAndExit ( )
{
	static UFunction* pFnSaveAndExit = NULL;

	if ( ! pFnSaveAndExit )
		pFnSaveAndExit = (UFunction*) UObject::GObjObjects()->Data[ 62671 ];

	USFXGUI_PCMPOptions_execSaveAndExit_Parms SaveAndExit_Parms;

	this->ProcessEvent ( pFnSaveAndExit, &SaveAndExit_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.ResetPCBindings
// [0x00020002] 
// Parameters infos:

void USFXGUI_PCMPOptions::ResetPCBindings ( )
{
	static UFunction* pFnResetPCBindings = NULL;

	if ( ! pFnResetPCBindings )
		pFnResetPCBindings = (UFunction*) UObject::GObjObjects()->Data[ 62665 ];

	USFXGUI_PCMPOptions_execResetPCBindings_Parms ResetPCBindings_Parms;

	this->ProcessEvent ( pFnResetPCBindings, &ResetPCBindings_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.CaptureNewBinding
// [0x00020002] 
// Parameters infos:
// int                            BindIndex                      ( CPF_Parm )
// int                            BindNumber                     ( CPF_Parm )

void USFXGUI_PCMPOptions::CaptureNewBinding ( int BindIndex, int BindNumber )
{
	static UFunction* pFnCaptureNewBinding = NULL;

	if ( ! pFnCaptureNewBinding )
		pFnCaptureNewBinding = (UFunction*) UObject::GObjObjects()->Data[ 62659 ];

	USFXGUI_PCMPOptions_execCaptureNewBinding_Parms CaptureNewBinding_Parms;
	CaptureNewBinding_Parms.BindIndex = BindIndex;
	CaptureNewBinding_Parms.BindNumber = BindNumber;

	this->ProcessEvent ( pFnCaptureNewBinding, &CaptureNewBinding_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.BuildControlBindingList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UGFxValue*               optionData                     ( CPF_Parm )

void USFXGUI_PCMPOptions::BuildControlBindingList ( class UGFxValue* optionData )
{
	static UFunction* pFnBuildControlBindingList = NULL;

	if ( ! pFnBuildControlBindingList )
		pFnBuildControlBindingList = (UFunction*) UObject::GObjObjects()->Data[ 62657 ];

	USFXGUI_PCMPOptions_execBuildControlBindingList_Parms BuildControlBindingList_Parms;
	BuildControlBindingList_Parms.optionData = optionData;

	pFnBuildControlBindingList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildControlBindingList, &BuildControlBindingList_Parms, NULL );

	pFnBuildControlBindingList->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.Callback_ResetPCToDefaults
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void USFXGUI_PCMPOptions::Callback_ResetPCToDefaults ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ResetPCToDefaults = NULL;

	if ( ! pFnCallback_ResetPCToDefaults )
		pFnCallback_ResetPCToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 62653 ];

	USFXGUI_PCMPOptions_execCallback_ResetPCToDefaults_Parms Callback_ResetPCToDefaults_Parms;
	Callback_ResetPCToDefaults_Parms.bAPressed = bAPressed;
	Callback_ResetPCToDefaults_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ResetPCToDefaults, &Callback_ResetPCToDefaults_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.Helper_DoPCBindingReset
// [0x00020002] 
// Parameters infos:

void USFXGUI_PCMPOptions::Helper_DoPCBindingReset ( )
{
	static UFunction* pFnHelper_DoPCBindingReset = NULL;

	if ( ! pFnHelper_DoPCBindingReset )
		pFnHelper_DoPCBindingReset = (UFunction*) UObject::GObjObjects()->Data[ 62650 ];

	USFXGUI_PCMPOptions_execHelper_DoPCBindingReset_Parms Helper_DoPCBindingReset_Parms;

	this->ProcessEvent ( pFnHelper_DoPCBindingReset, &Helper_DoPCBindingReset_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.Callback_ResetPCBindings
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void USFXGUI_PCMPOptions::Callback_ResetPCBindings ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ResetPCBindings = NULL;

	if ( ! pFnCallback_ResetPCBindings )
		pFnCallback_ResetPCBindings = (UFunction*) UObject::GObjObjects()->Data[ 62647 ];

	USFXGUI_PCMPOptions_execCallback_ResetPCBindings_Parms Callback_ResetPCBindings_Parms;
	Callback_ResetPCBindings_Parms.bAPressed = bAPressed;
	Callback_ResetPCBindings_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ResetPCBindings, &Callback_ResetPCBindings_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.ResetToDefaults
// [0x00020002] 
// Parameters infos:
// struct FString                 sPackedIDs                     ( CPF_Parm | CPF_NeedCtorLink )

void USFXGUI_PCMPOptions::ResetToDefaults ( struct FString sPackedIDs )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 62645 ];

	USFXGUI_PCMPOptions_execResetToDefaults_Parms ResetToDefaults_Parms;
	memcpy ( &ResetToDefaults_Parms.sPackedIDs, &sPackedIDs, 0xC );

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.MovieLoaded
// [0x00020002] 
// Parameters infos:

void USFXGUI_PCMPOptions::MovieLoaded ( )
{
	static UFunction* pFnMovieLoaded = NULL;

	if ( ! pFnMovieLoaded )
		pFnMovieLoaded = (UFunction*) UObject::GObjObjects()->Data[ 62643 ];

	USFXGUI_PCMPOptions_execMovieLoaded_Parms MovieLoaded_Parms;

	this->ProcessEvent ( pFnMovieLoaded, &MovieLoaded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void USFXGUI_PCMPOptions::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 62642 ];

	USFXGUI_PCMPOptions_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.AS_InitializeScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  SkipIntro                      ( CPF_Parm )

void Usfxgui_mpreinforcementsreveal::AS_InitializeScreen ( unsigned long SkipIntro )
{
	static UFunction* pFnAS_InitializeScreen = NULL;

	if ( ! pFnAS_InitializeScreen )
		pFnAS_InitializeScreen = (UFunction*) UObject::GObjObjects()->Data[ 110821 ];

	Usfxgui_mpreinforcementsreveal_execAS_InitializeScreen_Parms AS_InitializeScreen_Parms;
	AS_InitializeScreen_Parms.SkipIntro = SkipIntro;

	this->ProcessEvent ( pFnAS_InitializeScreen, &AS_InitializeScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.GetCardsToDisplay
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FCardInfoData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FCardInfoData > Usfxgui_mpreinforcementsreveal::GetCardsToDisplay ( )
{
	static UFunction* pFnGetCardsToDisplay = NULL;

	if ( ! pFnGetCardsToDisplay )
		pFnGetCardsToDisplay = (UFunction*) UObject::GObjObjects()->Data[ 110841 ];

	Usfxgui_mpreinforcementsreveal_execGetCardsToDisplay_Parms GetCardsToDisplay_Parms;

	this->ProcessEvent ( pFnGetCardsToDisplay, &GetCardsToDisplay_Parms, NULL );

	return GetCardsToDisplay_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.GetAwardedPackName
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpreinforcementsreveal::GetAwardedPackName ( )
{
	static UFunction* pFnGetAwardedPackName = NULL;

	if ( ! pFnGetAwardedPackName )
		pFnGetAwardedPackName = (UFunction*) UObject::GObjObjects()->Data[ 110818 ];

	Usfxgui_mpreinforcementsreveal_execGetAwardedPackName_Parms GetAwardedPackName_Parms;

	this->ProcessEvent ( pFnGetAwardedPackName, &GetAwardedPackName_Parms, NULL );

	return GetAwardedPackName_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.GetPackRevealSound
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName Usfxgui_mpreinforcementsreveal::GetPackRevealSound ( )
{
	static UFunction* pFnGetPackRevealSound = NULL;

	if ( ! pFnGetPackRevealSound )
		pFnGetPackRevealSound = (UFunction*) UObject::GObjObjects()->Data[ 110820 ];

	Usfxgui_mpreinforcementsreveal_execGetPackRevealSound_Parms GetPackRevealSound_Parms;

	this->ProcessEvent ( pFnGetPackRevealSound, &GetPackRevealSound_Parms, NULL );

	return GetPackRevealSound_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.GetPackIntroHoloTextureRef
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpreinforcementsreveal::GetPackIntroHoloTextureRef ( )
{
	static UFunction* pFnGetPackIntroHoloTextureRef = NULL;

	if ( ! pFnGetPackIntroHoloTextureRef )
		pFnGetPackIntroHoloTextureRef = (UFunction*) UObject::GObjObjects()->Data[ 110845 ];

	Usfxgui_mpreinforcementsreveal_execGetPackIntroHoloTextureRef_Parms GetPackIntroHoloTextureRef_Parms;

	this->ProcessEvent ( pFnGetPackIntroHoloTextureRef, &GetPackIntroHoloTextureRef_Parms, NULL );

	return GetPackIntroHoloTextureRef_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.GetPackIntroTextureRef
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpreinforcementsreveal::GetPackIntroTextureRef ( )
{
	static UFunction* pFnGetPackIntroTextureRef = NULL;

	if ( ! pFnGetPackIntroTextureRef )
		pFnGetPackIntroTextureRef = (UFunction*) UObject::GObjObjects()->Data[ 110843 ];

	Usfxgui_mpreinforcementsreveal_execGetPackIntroTextureRef_Parms GetPackIntroTextureRef_Parms;

	this->ProcessEvent ( pFnGetPackIntroTextureRef, &GetPackIntroTextureRef_Parms, NULL );

	return GetPackIntroTextureRef_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.Exit
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpreinforcementsreveal::Exit ( )
{
	static UFunction* pFnExit = NULL;

	if ( ! pFnExit )
		pFnExit = (UFunction*) UObject::GObjObjects()->Data[ 110842 ];

	Usfxgui_mpreinforcementsreveal_execExit_Parms Exit_Parms;

	this->ProcessEvent ( pFnExit, &Exit_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.GetCardData
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FCardDisplayData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FCardDisplayData > Usfxgui_mpreinforcementsreveal::GetCardData ( )
{
	static UFunction* pFnGetCardData = NULL;

	if ( ! pFnGetCardData )
		pFnGetCardData = (UFunction*) UObject::GObjObjects()->Data[ 110832 ];

	Usfxgui_mpreinforcementsreveal_execGetCardData_Parms GetCardData_Parms;

	this->ProcessEvent ( pFnGetCardData, &GetCardData_Parms, NULL );

	return GetCardData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.GetPackName
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpreinforcementsreveal::GetPackName ( )
{
	static UFunction* pFnGetPackName = NULL;

	if ( ! pFnGetPackName )
		pFnGetPackName = (UFunction*) UObject::GObjObjects()->Data[ 110830 ];

	Usfxgui_mpreinforcementsreveal_execGetPackName_Parms GetPackName_Parms;

	this->ProcessEvent ( pFnGetPackName, &GetPackName_Parms, NULL );

	return GetPackName_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.GetCardDisplayData
// [0x00422003] ( FUNC_Final )
// Parameters infos:
// struct FCardDisplayData        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FCardInfoData           CardData                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FCardDisplayData Usfxgui_mpreinforcementsreveal::GetCardDisplayData ( struct FCardInfoData* CardData )
{
	static UFunction* pFnGetCardDisplayData = NULL;

	if ( ! pFnGetCardDisplayData )
		pFnGetCardDisplayData = (UFunction*) UObject::GObjObjects()->Data[ 110823 ];

	Usfxgui_mpreinforcementsreveal_execGetCardDisplayData_Parms GetCardDisplayData_Parms;

	this->ProcessEvent ( pFnGetCardDisplayData, &GetCardDisplayData_Parms, NULL );

	if ( CardData )
		memcpy ( CardData, &GetCardDisplayData_Parms.CardData, 0x68 );

	return GetCardDisplayData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpreinforcementsreveal::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 110822 ];

	Usfxgui_mpreinforcementsreveal_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpreinforcementsreveal::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 110812 ];

	Usfxgui_mpreinforcementsreveal_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.SetOnCloseCallback
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         fn_OnCloseDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mpreinforcementsreveal::SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate )
{
	static UFunction* pFnSetOnCloseCallback = NULL;

	if ( ! pFnSetOnCloseCallback )
		pFnSetOnCloseCallback = (UFunction*) UObject::GObjObjects()->Data[ 110809 ];

	Usfxgui_mpreinforcementsreveal_execSetOnCloseCallback_Parms SetOnCloseCallback_Parms;
	memcpy ( &SetOnCloseCallback_Parms.fn_OnCloseDelegate, &fn_OnCloseDelegate, 0xC );

	this->ProcessEvent ( pFnSetOnCloseCallback, &SetOnCloseCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpreinforcementsreveal.OnCloseCallback
// [0x00120000] 
// Parameters infos:

void Usfxgui_mpreinforcementsreveal::OnCloseCallback ( )
{
	static UFunction* pFnOnCloseCallback = NULL;

	if ( ! pFnOnCloseCallback )
		pFnOnCloseCallback = (UFunction*) UObject::GObjObjects()->Data[ 110808 ];

	Usfxgui_mpreinforcementsreveal_execOnCloseCallback_Parms OnCloseCallback_Parms;

	this->ProcessEvent ( pFnOnCloseCallback, &OnCloseCallback_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AS_HideSpectatorHUD
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGUI_MPHUD::AS_HideSpectatorHUD ( )
{
	static UFunction* pFnAS_HideSpectatorHUD = NULL;

	if ( ! pFnAS_HideSpectatorHUD )
		pFnAS_HideSpectatorHUD = (UFunction*) UObject::GObjObjects()->Data[ 109687 ];

	USFXGUI_MPHUD_execAS_HideSpectatorHUD_Parms AS_HideSpectatorHUD_Parms;

	this->ProcessEvent ( pFnAS_HideSpectatorHUD, &AS_HideSpectatorHUD_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AS_ShowSpectatorHUD
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGUI_MPHUD::AS_ShowSpectatorHUD ( )
{
	static UFunction* pFnAS_ShowSpectatorHUD = NULL;

	if ( ! pFnAS_ShowSpectatorHUD )
		pFnAS_ShowSpectatorHUD = (UFunction*) UObject::GObjObjects()->Data[ 109824 ];

	USFXGUI_MPHUD_execAS_ShowSpectatorHUD_Parms AS_ShowSpectatorHUD_Parms;

	this->ProcessEvent ( pFnAS_ShowSpectatorHUD, &AS_ShowSpectatorHUD_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AS_DisplaySubareaText
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 sSubareaText                   ( CPF_Parm | CPF_NeedCtorLink )

void USFXGUI_MPHUD::AS_DisplaySubareaText ( struct FString sSubareaText )
{
	static UFunction* pFnAS_DisplaySubareaText = NULL;

	if ( ! pFnAS_DisplaySubareaText )
		pFnAS_DisplaySubareaText = (UFunction*) UObject::GObjObjects()->Data[ 109821 ];

	USFXGUI_MPHUD_execAS_DisplaySubareaText_Parms AS_DisplaySubareaText_Parms;
	memcpy ( &AS_DisplaySubareaText_Parms.sSubareaText, &sSubareaText, 0xC );

	this->ProcessEvent ( pFnAS_DisplaySubareaText, &AS_DisplaySubareaText_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AS_SetProgressBarVisible
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )
// unsigned long                  bSkipTransition                ( CPF_Parm )

void USFXGUI_MPHUD::AS_SetProgressBarVisible ( unsigned long bVisible, unsigned long bSkipTransition )
{
	static UFunction* pFnAS_SetProgressBarVisible = NULL;

	if ( ! pFnAS_SetProgressBarVisible )
		pFnAS_SetProgressBarVisible = (UFunction*) UObject::GObjObjects()->Data[ 109813 ];

	USFXGUI_MPHUD_execAS_SetProgressBarVisible_Parms AS_SetProgressBarVisible_Parms;
	AS_SetProgressBarVisible_Parms.bVisible = bVisible;
	AS_SetProgressBarVisible_Parms.bSkipTransition = bSkipTransition;

	this->ProcessEvent ( pFnAS_SetProgressBarVisible, &AS_SetProgressBarVisible_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AS_SetObjectiveVisible
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )
// unsigned long                  bCircleObjectives              ( CPF_Parm )

void USFXGUI_MPHUD::AS_SetObjectiveVisible ( unsigned long bVisible, unsigned long bCircleObjectives )
{
	static UFunction* pFnAS_SetObjectiveVisible = NULL;

	if ( ! pFnAS_SetObjectiveVisible )
		pFnAS_SetObjectiveVisible = (UFunction*) UObject::GObjObjects()->Data[ 109778 ];

	USFXGUI_MPHUD_execAS_SetObjectiveVisible_Parms AS_SetObjectiveVisible_Parms;
	AS_SetObjectiveVisible_Parms.bVisible = bVisible;
	AS_SetObjectiveVisible_Parms.bCircleObjectives = bCircleObjectives;

	this->ProcessEvent ( pFnAS_SetObjectiveVisible, &AS_SetObjectiveVisible_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AS_SetTimerPulse
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bPulse                         ( CPF_Parm )

void USFXGUI_MPHUD::AS_SetTimerPulse ( unsigned long bPulse )
{
	static UFunction* pFnAS_SetTimerPulse = NULL;

	if ( ! pFnAS_SetTimerPulse )
		pFnAS_SetTimerPulse = (UFunction*) UObject::GObjObjects()->Data[ 109764 ];

	USFXGUI_MPHUD_execAS_SetTimerPulse_Parms AS_SetTimerPulse_Parms;
	AS_SetTimerPulse_Parms.bPulse = bPulse;

	this->ProcessEvent ( pFnAS_SetTimerPulse, &AS_SetTimerPulse_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AS_SetTimerVisible
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void USFXGUI_MPHUD::AS_SetTimerVisible ( unsigned long bVisible )
{
	static UFunction* pFnAS_SetTimerVisible = NULL;

	if ( ! pFnAS_SetTimerVisible )
		pFnAS_SetTimerVisible = (UFunction*) UObject::GObjObjects()->Data[ 109770 ];

	USFXGUI_MPHUD_execAS_SetTimerVisible_Parms AS_SetTimerVisible_Parms;
	AS_SetTimerVisible_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnAS_SetTimerVisible, &AS_SetTimerVisible_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AS_SetPowerMapVisible
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )
// unsigned long                  bSkipTransition                ( CPF_Parm )

void USFXGUI_MPHUD::AS_SetPowerMapVisible ( unsigned long bVisible, unsigned long bSkipTransition )
{
	static UFunction* pFnAS_SetPowerMapVisible = NULL;

	if ( ! pFnAS_SetPowerMapVisible )
		pFnAS_SetPowerMapVisible = (UFunction*) UObject::GObjObjects()->Data[ 109728 ];

	USFXGUI_MPHUD_execAS_SetPowerMapVisible_Parms AS_SetPowerMapVisible_Parms;
	AS_SetPowerMapVisible_Parms.bVisible = bVisible;
	AS_SetPowerMapVisible_Parms.bSkipTransition = bSkipTransition;

	this->ProcessEvent ( pFnAS_SetPowerMapVisible, &AS_SetPowerMapVisible_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AS_SetTickerText
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UGFxValue*               barMC                          ( CPF_Parm )
// struct FString                 sText                          ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void USFXGUI_MPHUD::AS_SetTickerText ( class UGFxValue* barMC, struct FString sText )
{
	static UFunction* pFnAS_SetTickerText = NULL;

	if ( ! pFnAS_SetTickerText )
		pFnAS_SetTickerText = (UFunction*) UObject::GObjObjects()->Data[ 109748 ];

	USFXGUI_MPHUD_execAS_SetTickerText_Parms AS_SetTickerText_Parms;
	AS_SetTickerText_Parms.barMC = barMC;
	memcpy ( &AS_SetTickerText_Parms.sText, &sText, 0xC );

	this->ProcessEvent ( pFnAS_SetTickerText, &AS_SetTickerText_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AS_FadeTickerBar
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UGFxValue*               barMC                          ( CPF_Parm )

void USFXGUI_MPHUD::AS_FadeTickerBar ( class UGFxValue* barMC )
{
	static UFunction* pFnAS_FadeTickerBar = NULL;

	if ( ! pFnAS_FadeTickerBar )
		pFnAS_FadeTickerBar = (UFunction*) UObject::GObjObjects()->Data[ 109739 ];

	USFXGUI_MPHUD_execAS_FadeTickerBar_Parms AS_FadeTickerBar_Parms;
	AS_FadeTickerBar_Parms.barMC = barMC;

	this->ProcessEvent ( pFnAS_FadeTickerBar, &AS_FadeTickerBar_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AS_ResetTickerBar
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UGFxValue*               barMC                          ( CPF_Parm )

void USFXGUI_MPHUD::AS_ResetTickerBar ( class UGFxValue* barMC )
{
	static UFunction* pFnAS_ResetTickerBar = NULL;

	if ( ! pFnAS_ResetTickerBar )
		pFnAS_ResetTickerBar = (UFunction*) UObject::GObjObjects()->Data[ 109751 ];

	USFXGUI_MPHUD_execAS_ResetTickerBar_Parms AS_ResetTickerBar_Parms;
	AS_ResetTickerBar_Parms.barMC = barMC;

	this->ProcessEvent ( pFnAS_ResetTickerBar, &AS_ResetTickerBar_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AS_SetDPadVisible
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )
// unsigned long                  bSkipTransition                ( CPF_Parm )

void USFXGUI_MPHUD::AS_SetDPadVisible ( unsigned long bVisible, unsigned long bSkipTransition )
{
	static UFunction* pFnAS_SetDPadVisible = NULL;

	if ( ! pFnAS_SetDPadVisible )
		pFnAS_SetDPadVisible = (UFunction*) UObject::GObjObjects()->Data[ 109715 ];

	USFXGUI_MPHUD_execAS_SetDPadVisible_Parms AS_SetDPadVisible_Parms;
	AS_SetDPadVisible_Parms.bVisible = bVisible;
	AS_SetDPadVisible_Parms.bSkipTransition = bSkipTransition;

	this->ProcessEvent ( pFnAS_SetDPadVisible, &AS_SetDPadVisible_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.ShowSpectatorHUD
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGUI_MPHUD::ShowSpectatorHUD ( )
{
	static UFunction* pFnShowSpectatorHUD = NULL;

	if ( ! pFnShowSpectatorHUD )
		pFnShowSpectatorHUD = (UFunction*) UObject::GObjObjects()->Data[ 109692 ];

	USFXGUI_MPHUD_execShowSpectatorHUD_Parms ShowSpectatorHUD_Parms;

	this->ProcessEvent ( pFnShowSpectatorHUD, &ShowSpectatorHUD_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.DisplaySubareaText
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// void*                          NewSubareaText                 ( CPF_Parm )

void USFXGUI_MPHUD::DisplaySubareaText ( void* NewSubareaText )
{
	static UFunction* pFnDisplaySubareaText = NULL;

	if ( ! pFnDisplaySubareaText )
		pFnDisplaySubareaText = (UFunction*) UObject::GObjObjects()->Data[ 109818 ];

	USFXGUI_MPHUD_execDisplaySubareaText_Parms DisplaySubareaText_Parms;
	DisplaySubareaText_Parms.NewSubareaText = NewSubareaText;

	this->ProcessEvent ( pFnDisplaySubareaText, &DisplaySubareaText_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.UpdateCenterProgressBar
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void USFXGUI_MPHUD::UpdateCenterProgressBar ( float fDeltaT )
{
	static UFunction* pFnUpdateCenterProgressBar = NULL;

	if ( ! pFnUpdateCenterProgressBar )
		pFnUpdateCenterProgressBar = (UFunction*) UObject::GObjObjects()->Data[ 109698 ];

	USFXGUI_MPHUD_execUpdateCenterProgressBar_Parms UpdateCenterProgressBar_Parms;
	UpdateCenterProgressBar_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateCenterProgressBar, &UpdateCenterProgressBar_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.HideCenterProgressBar
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGUI_MPHUD::HideCenterProgressBar ( )
{
	static UFunction* pFnHideCenterProgressBar = NULL;

	if ( ! pFnHideCenterProgressBar )
		pFnHideCenterProgressBar = (UFunction*) UObject::GObjObjects()->Data[ 109814 ];

	USFXGUI_MPHUD_execHideCenterProgressBar_Parms HideCenterProgressBar_Parms;

	this->ProcessEvent ( pFnHideCenterProgressBar, &HideCenterProgressBar_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.ShowCenterProgressBar
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          fCenterBarTime                 ( CPF_Parm )

void USFXGUI_MPHUD::ShowCenterProgressBar ( float fCenterBarTime )
{
	static UFunction* pFnShowCenterProgressBar = NULL;

	if ( ! pFnShowCenterProgressBar )
		pFnShowCenterProgressBar = (UFunction*) UObject::GObjObjects()->Data[ 109808 ];

	USFXGUI_MPHUD_execShowCenterProgressBar_Parms ShowCenterProgressBar_Parms;
	ShowCenterProgressBar_Parms.fCenterBarTime = fCenterBarTime;

	this->ProcessEvent ( pFnShowCenterProgressBar, &ShowCenterProgressBar_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.UpdateObjectiveCircles
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void USFXGUI_MPHUD::UpdateObjectiveCircles ( float fDeltaT )
{
	static UFunction* pFnUpdateObjectiveCircles = NULL;

	if ( ! pFnUpdateObjectiveCircles )
		pFnUpdateObjectiveCircles = (UFunction*) UObject::GObjObjects()->Data[ 109699 ];

	USFXGUI_MPHUD_execUpdateObjectiveCircles_Parms UpdateObjectiveCircles_Parms;
	UpdateObjectiveCircles_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateObjectiveCircles, &UpdateObjectiveCircles_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.PlayerIsFinishedWithObjective
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGUI_MPHUD::PlayerIsFinishedWithObjective ( )
{
	static UFunction* pFnPlayerIsFinishedWithObjective = NULL;

	if ( ! pFnPlayerIsFinishedWithObjective )
		pFnPlayerIsFinishedWithObjective = (UFunction*) UObject::GObjObjects()->Data[ 109805 ];

	USFXGUI_MPHUD_execPlayerIsFinishedWithObjective_Parms PlayerIsFinishedWithObjective_Parms;

	this->ProcessEvent ( pFnPlayerIsFinishedWithObjective, &PlayerIsFinishedWithObjective_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.PlayerIsUsingObjectiveWithTime
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          fTime                          ( CPF_Parm )

void USFXGUI_MPHUD::PlayerIsUsingObjectiveWithTime ( float fTime )
{
	static UFunction* pFnPlayerIsUsingObjectiveWithTime = NULL;

	if ( ! pFnPlayerIsUsingObjectiveWithTime )
		pFnPlayerIsUsingObjectiveWithTime = (UFunction*) UObject::GObjObjects()->Data[ 109801 ];

	USFXGUI_MPHUD_execPlayerIsUsingObjectiveWithTime_Parms PlayerIsUsingObjectiveWithTime_Parms;
	PlayerIsUsingObjectiveWithTime_Parms.fTime = fTime;

	this->ProcessEvent ( pFnPlayerIsUsingObjectiveWithTime, &PlayerIsUsingObjectiveWithTime_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.SetCurrentObjectiveCircleCompletion
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          fPercentComplete               ( CPF_Parm )

void USFXGUI_MPHUD::SetCurrentObjectiveCircleCompletion ( float fPercentComplete )
{
	static UFunction* pFnSetCurrentObjectiveCircleCompletion = NULL;

	if ( ! pFnSetCurrentObjectiveCircleCompletion )
		pFnSetCurrentObjectiveCircleCompletion = (UFunction*) UObject::GObjObjects()->Data[ 109799 ];

	USFXGUI_MPHUD_execSetCurrentObjectiveCircleCompletion_Parms SetCurrentObjectiveCircleCompletion_Parms;
	SetCurrentObjectiveCircleCompletion_Parms.fPercentComplete = fPercentComplete;

	this->ProcessEvent ( pFnSetCurrentObjectiveCircleCompletion, &SetCurrentObjectiveCircleCompletion_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.SetObjectiveCircleProgress
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nNumComplete                   ( CPF_Parm )

void USFXGUI_MPHUD::SetObjectiveCircleProgress ( int nNumComplete )
{
	static UFunction* pFnSetObjectiveCircleProgress = NULL;

	if ( ! pFnSetObjectiveCircleProgress )
		pFnSetObjectiveCircleProgress = (UFunction*) UObject::GObjObjects()->Data[ 109795 ];

	USFXGUI_MPHUD_execSetObjectiveCircleProgress_Parms SetObjectiveCircleProgress_Parms;
	SetObjectiveCircleProgress_Parms.nNumComplete = nNumComplete;

	this->ProcessEvent ( pFnSetObjectiveCircleProgress, &SetObjectiveCircleProgress_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.SetObjectiveCircleText
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 s1                             ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 s2                             ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 s3                             ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 s4                             ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void USFXGUI_MPHUD::SetObjectiveCircleText ( struct FString s1, struct FString s2, struct FString s3, struct FString s4 )
{
	static UFunction* pFnSetObjectiveCircleText = NULL;

	if ( ! pFnSetObjectiveCircleText )
		pFnSetObjectiveCircleText = (UFunction*) UObject::GObjObjects()->Data[ 109790 ];

	USFXGUI_MPHUD_execSetObjectiveCircleText_Parms SetObjectiveCircleText_Parms;
	memcpy ( &SetObjectiveCircleText_Parms.s1, &s1, 0xC );
	memcpy ( &SetObjectiveCircleText_Parms.s2, &s2, 0xC );
	memcpy ( &SetObjectiveCircleText_Parms.s3, &s3, 0xC );
	memcpy ( &SetObjectiveCircleText_Parms.s4, &s4, 0xC );

	this->ProcessEvent ( pFnSetObjectiveCircleText, &SetObjectiveCircleText_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.SetObjectiveCirclesVisible
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void USFXGUI_MPHUD::SetObjectiveCirclesVisible ( unsigned long bVisible )
{
	static UFunction* pFnSetObjectiveCirclesVisible = NULL;

	if ( ! pFnSetObjectiveCirclesVisible )
		pFnSetObjectiveCirclesVisible = (UFunction*) UObject::GObjObjects()->Data[ 109775 ];

	USFXGUI_MPHUD_execSetObjectiveCirclesVisible_Parms SetObjectiveCirclesVisible_Parms;
	SetObjectiveCirclesVisible_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnSetObjectiveCirclesVisible, &SetObjectiveCirclesVisible_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.SetObjectiveBarProgress
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// float                          fPct                           ( CPF_Parm )
// unsigned long                  bBoostAnim                     ( CPF_OptionalParm | CPF_Parm )

void USFXGUI_MPHUD::SetObjectiveBarProgress ( float fPct, unsigned long bBoostAnim )
{
	static UFunction* pFnSetObjectiveBarProgress = NULL;

	if ( ! pFnSetObjectiveBarProgress )
		pFnSetObjectiveBarProgress = (UFunction*) UObject::GObjObjects()->Data[ 109782 ];

	USFXGUI_MPHUD_execSetObjectiveBarProgress_Parms SetObjectiveBarProgress_Parms;
	SetObjectiveBarProgress_Parms.fPct = fPct;
	SetObjectiveBarProgress_Parms.bBoostAnim = bBoostAnim;

	this->ProcessEvent ( pFnSetObjectiveBarProgress, &SetObjectiveBarProgress_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.SetBoostAnimOn
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bTurnOn                        ( CPF_Parm )

void USFXGUI_MPHUD::SetBoostAnimOn ( unsigned long bTurnOn )
{
	static UFunction* pFnSetBoostAnimOn = NULL;

	if ( ! pFnSetBoostAnimOn )
		pFnSetBoostAnimOn = (UFunction*) UObject::GObjObjects()->Data[ 109779 ];

	USFXGUI_MPHUD_execSetBoostAnimOn_Parms SetBoostAnimOn_Parms;
	SetBoostAnimOn_Parms.bTurnOn = bTurnOn;

	this->ProcessEvent ( pFnSetBoostAnimOn, &SetBoostAnimOn_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.SetObjectiveBarVisible
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void USFXGUI_MPHUD::SetObjectiveBarVisible ( unsigned long bVisible )
{
	static UFunction* pFnSetObjectiveBarVisible = NULL;

	if ( ! pFnSetObjectiveBarVisible )
		pFnSetObjectiveBarVisible = (UFunction*) UObject::GObjObjects()->Data[ 109774 ];

	USFXGUI_MPHUD_execSetObjectiveBarVisible_Parms SetObjectiveBarVisible_Parms;
	SetObjectiveBarVisible_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnSetObjectiveBarVisible, &SetObjectiveBarVisible_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.SetObjectiveText
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// void*                          srObjectiveText                ( CPF_Parm )

void USFXGUI_MPHUD::SetObjectiveText ( void* srObjectiveText )
{
	static UFunction* pFnSetObjectiveText = NULL;

	if ( ! pFnSetObjectiveText )
		pFnSetObjectiveText = (UFunction*) UObject::GObjObjects()->Data[ 109673 ];

	USFXGUI_MPHUD_execSetObjectiveText_Parms SetObjectiveText_Parms;
	SetObjectiveText_Parms.srObjectiveText = srObjectiveText;

	this->ProcessEvent ( pFnSetObjectiveText, &SetObjectiveText_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.CancelCountdownTimer
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGUI_MPHUD::CancelCountdownTimer ( )
{
	static UFunction* pFnCancelCountdownTimer = NULL;

	if ( ! pFnCancelCountdownTimer )
		pFnCancelCountdownTimer = (UFunction*) UObject::GObjObjects()->Data[ 109771 ];

	USFXGUI_MPHUD_execCancelCountdownTimer_Parms CancelCountdownTimer_Parms;

	this->ProcessEvent ( pFnCancelCountdownTimer, &CancelCountdownTimer_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.StartCountdownTimer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          fTime                          ( CPF_Parm )
// float                          fWarningTime                   ( CPF_Parm )

void USFXGUI_MPHUD::StartCountdownTimer ( float fTime, float fWarningTime )
{
	static UFunction* pFnStartCountdownTimer = NULL;

	if ( ! pFnStartCountdownTimer )
		pFnStartCountdownTimer = (UFunction*) UObject::GObjObjects()->Data[ 109767 ];

	USFXGUI_MPHUD_execStartCountdownTimer_Parms StartCountdownTimer_Parms;
	StartCountdownTimer_Parms.fTime = fTime;
	StartCountdownTimer_Parms.fWarningTime = fWarningTime;

	this->ProcessEvent ( pFnStartCountdownTimer, &StartCountdownTimer_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.SetTimerText
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// struct FString                 sText                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGUI_MPHUD::SetTimerText ( struct FString* sText )
{
	static UFunction* pFnSetTimerText = NULL;

	if ( ! pFnSetTimerText )
		pFnSetTimerText = (UFunction*) UObject::GObjObjects()->Data[ 109761 ];

	USFXGUI_MPHUD_execSetTimerText_Parms SetTimerText_Parms;

	this->ProcessEvent ( pFnSetTimerText, &SetTimerText_Parms, NULL );

	if ( sText )
		memcpy ( sText, &SetTimerText_Parms.sText, 0xC );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.UpdateCountdownTimer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void USFXGUI_MPHUD::UpdateCountdownTimer ( float fDeltaT )
{
	static UFunction* pFnUpdateCountdownTimer = NULL;

	if ( ! pFnUpdateCountdownTimer )
		pFnUpdateCountdownTimer = (UFunction*) UObject::GObjObjects()->Data[ 109697 ];

	USFXGUI_MPHUD_execUpdateCountdownTimer_Parms UpdateCountdownTimer_Parms;
	UpdateCountdownTimer_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateCountdownTimer, &UpdateCountdownTimer_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.OnTickerFadeComplete
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nTickerID                      ( CPF_Parm )

void USFXGUI_MPHUD::OnTickerFadeComplete ( int nTickerID )
{
	static UFunction* pFnOnTickerFadeComplete = NULL;

	if ( ! pFnOnTickerFadeComplete )
		pFnOnTickerFadeComplete = (UFunction*) UObject::GObjObjects()->Data[ 109752 ];

	USFXGUI_MPHUD_execOnTickerFadeComplete_Parms OnTickerFadeComplete_Parms;
	OnTickerFadeComplete_Parms.nTickerID = nTickerID;

	this->ProcessEvent ( pFnOnTickerFadeComplete, &OnTickerFadeComplete_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.ResetTickerMovie
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void USFXGUI_MPHUD::ResetTickerMovie ( int nIndex )
{
	static UFunction* pFnResetTickerMovie = NULL;

	if ( ! pFnResetTickerMovie )
		pFnResetTickerMovie = (UFunction*) UObject::GObjObjects()->Data[ 109747 ];

	USFXGUI_MPHUD_execResetTickerMovie_Parms ResetTickerMovie_Parms;
	ResetTickerMovie_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnResetTickerMovie, &ResetTickerMovie_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.ClearTickerEntries
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGUI_MPHUD::ClearTickerEntries ( )
{
	static UFunction* pFnClearTickerEntries = NULL;

	if ( ! pFnClearTickerEntries )
		pFnClearTickerEntries = (UFunction*) UObject::GObjObjects()->Data[ 109688 ];

	USFXGUI_MPHUD_execClearTickerEntries_Parms ClearTickerEntries_Parms;

	this->ProcessEvent ( pFnClearTickerEntries, &ClearTickerEntries_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AddTickerEntry
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FString                 sText                          ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void USFXGUI_MPHUD::AddTickerEntry ( struct FString sText )
{
	static UFunction* pFnAddTickerEntry = NULL;

	if ( ! pFnAddTickerEntry )
		pFnAddTickerEntry = (UFunction*) UObject::GObjObjects()->Data[ 109742 ];

	USFXGUI_MPHUD_execAddTickerEntry_Parms AddTickerEntry_Parms;
	memcpy ( &AddTickerEntry_Parms.sText, &sText, 0xC );

	this->ProcessEvent ( pFnAddTickerEntry, &AddTickerEntry_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.AcquireNewTickerEntries
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGUI_MPHUD::AcquireNewTickerEntries ( )
{
	static UFunction* pFnAcquireNewTickerEntries = NULL;

	if ( ! pFnAcquireNewTickerEntries )
		pFnAcquireNewTickerEntries = (UFunction*) UObject::GObjObjects()->Data[ 109737 ];

	USFXGUI_MPHUD_execAcquireNewTickerEntries_Parms AcquireNewTickerEntries_Parms;

	this->ProcessEvent ( pFnAcquireNewTickerEntries, &AcquireNewTickerEntries_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.UpdateTickers
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void USFXGUI_MPHUD::UpdateTickers ( float fDeltaT )
{
	static UFunction* pFnUpdateTickers = NULL;

	if ( ! pFnUpdateTickers )
		pFnUpdateTickers = (UFunction*) UObject::GObjObjects()->Data[ 109696 ];

	USFXGUI_MPHUD_execUpdateTickers_Parms UpdateTickers_Parms;
	UpdateTickers_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateTickers, &UpdateTickers_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.UpdateCenterPowerIcons
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void USFXGUI_MPHUD::UpdateCenterPowerIcons ( float fDeltaT )
{
	static UFunction* pFnUpdateCenterPowerIcons = NULL;

	if ( ! pFnUpdateCenterPowerIcons )
		pFnUpdateCenterPowerIcons = (UFunction*) UObject::GObjObjects()->Data[ 109695 ];

	USFXGUI_MPHUD_execUpdateCenterPowerIcons_Parms UpdateCenterPowerIcons_Parms;
	UpdateCenterPowerIcons_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateCenterPowerIcons, &UpdateCenterPowerIcons_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.OnPawnPowerUsed
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class Usfxpowercustomaction*   oPower                         ( CPF_Parm )

void USFXGUI_MPHUD::OnPawnPowerUsed ( class Usfxpowercustomaction* oPower )
{
	static UFunction* pFnOnPawnPowerUsed = NULL;

	if ( ! pFnOnPawnPowerUsed )
		pFnOnPawnPowerUsed = (UFunction*) UObject::GObjObjects()->Data[ 109729 ];

	USFXGUI_MPHUD_execOnPawnPowerUsed_Parms OnPawnPowerUsed_Parms;
	OnPawnPowerUsed_Parms.oPower = oPower;

	this->ProcessEvent ( pFnOnPawnPowerUsed, &OnPawnPowerUsed_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.SetPowersVisible
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )
// unsigned long                  bSkipTransition                ( CPF_OptionalParm | CPF_Parm )

void USFXGUI_MPHUD::SetPowersVisible ( unsigned long bVisible, unsigned long bSkipTransition )
{
	static UFunction* pFnSetPowersVisible = NULL;

	if ( ! pFnSetPowersVisible )
		pFnSetPowersVisible = (UFunction*) UObject::GObjObjects()->Data[ 109689 ];

	USFXGUI_MPHUD_execSetPowersVisible_Parms SetPowersVisible_Parms;
	SetPowersVisible_Parms.bVisible = bVisible;
	SetPowersVisible_Parms.bSkipTransition = bSkipTransition;

	this->ProcessEvent ( pFnSetPowersVisible, &SetPowersVisible_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.OnControllerProfileSettingChange
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXGUI_MPHUD::eventOnControllerProfileSettingChange ( )
{
	static UFunction* pFnOnControllerProfileSettingChange = NULL;

	if ( ! pFnOnControllerProfileSettingChange )
		pFnOnControllerProfileSettingChange = (UFunction*) UObject::GObjObjects()->Data[ 109724 ];

	USFXGUI_MPHUD_eventOnControllerProfileSettingChange_Parms OnControllerProfileSettingChange_Parms;

	this->ProcessEvent ( pFnOnControllerProfileSettingChange, &OnControllerProfileSettingChange_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.InitializeCenterPowerIcons
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGUI_MPHUD::InitializeCenterPowerIcons ( )
{
	static UFunction* pFnInitializeCenterPowerIcons = NULL;

	if ( ! pFnInitializeCenterPowerIcons )
		pFnInitializeCenterPowerIcons = (UFunction*) UObject::GObjObjects()->Data[ 109702 ];

	USFXGUI_MPHUD_execInitializeCenterPowerIcons_Parms InitializeCenterPowerIcons_Parms;

	this->ProcessEvent ( pFnInitializeCenterPowerIcons, &InitializeCenterPowerIcons_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.UpdateDPadPowerIcons
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGUI_MPHUD::UpdateDPadPowerIcons ( )
{
	static UFunction* pFnUpdateDPadPowerIcons = NULL;

	if ( ! pFnUpdateDPadPowerIcons )
		pFnUpdateDPadPowerIcons = (UFunction*) UObject::GObjObjects()->Data[ 109717 ];

	USFXGUI_MPHUD_execUpdateDPadPowerIcons_Parms UpdateDPadPowerIcons_Parms;

	this->ProcessEvent ( pFnUpdateDPadPowerIcons, &UpdateDPadPowerIcons_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.HideDPadPowerIcons
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bSkipTransition                ( CPF_OptionalParm | CPF_Parm )

void USFXGUI_MPHUD::HideDPadPowerIcons ( unsigned long bSkipTransition )
{
	static UFunction* pFnHideDPadPowerIcons = NULL;

	if ( ! pFnHideDPadPowerIcons )
		pFnHideDPadPowerIcons = (UFunction*) UObject::GObjObjects()->Data[ 109693 ];

	USFXGUI_MPHUD_execHideDPadPowerIcons_Parms HideDPadPowerIcons_Parms;
	HideDPadPowerIcons_Parms.bSkipTransition = bSkipTransition;

	this->ProcessEvent ( pFnHideDPadPowerIcons, &HideDPadPowerIcons_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.ShowDPadPowerIcons
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bSkipTransition                ( CPF_OptionalParm | CPF_Parm )

void USFXGUI_MPHUD::ShowDPadPowerIcons ( unsigned long bSkipTransition )
{
	static UFunction* pFnShowDPadPowerIcons = NULL;

	if ( ! pFnShowDPadPowerIcons )
		pFnShowDPadPowerIcons = (UFunction*) UObject::GObjObjects()->Data[ 109691 ];

	USFXGUI_MPHUD_execShowDPadPowerIcons_Parms ShowDPadPowerIcons_Parms;
	ShowDPadPowerIcons_Parms.bSkipTransition = bSkipTransition;

	this->ProcessEvent ( pFnShowDPadPowerIcons, &ShowDPadPowerIcons_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.InitializeDPadPowerIcons
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGUI_MPHUD::InitializeDPadPowerIcons ( )
{
	static UFunction* pFnInitializeDPadPowerIcons = NULL;

	if ( ! pFnInitializeDPadPowerIcons )
		pFnInitializeDPadPowerIcons = (UFunction*) UObject::GObjObjects()->Data[ 109701 ];

	USFXGUI_MPHUD_execInitializeDPadPowerIcons_Parms InitializeDPadPowerIcons_Parms;

	this->ProcessEvent ( pFnInitializeDPadPowerIcons, &InitializeDPadPowerIcons_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.UpdateDPad
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void USFXGUI_MPHUD::UpdateDPad ( float fDeltaT )
{
	static UFunction* pFnUpdateDPad = NULL;

	if ( ! pFnUpdateDPad )
		pFnUpdateDPad = (UFunction*) UObject::GObjObjects()->Data[ 109694 ];

	USFXGUI_MPHUD_execUpdateDPad_Parms UpdateDPad_Parms;
	UpdateDPad_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateDPad, &UpdateDPad_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.Initialize
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGUI_MPHUD::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 109700 ];

	USFXGUI_MPHUD_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void USFXGUI_MPHUD::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 109678 ];

	USFXGUI_MPHUD_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXGUI_MPHUD::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 109676 ];

	USFXGUI_MPHUD_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.InitTickerMovie
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            N                              ( CPF_Parm )

void USFXGUI_MPHUD::InitTickerMovie ( int N )
{
	static UFunction* pFnInitTickerMovie = NULL;

	if ( ! pFnInitTickerMovie )
		pFnInitTickerMovie = (UFunction*) UObject::GObjObjects()->Data[ 109672 ];

	USFXGUI_MPHUD_execInitTickerMovie_Parms InitTickerMovie_Parms;
	InitTickerMovie_Parms.N = N;

	this->ProcessEvent ( pFnInitTickerMovie, &InitTickerMovie_Parms, NULL );
};

// Function sfxgamempcontent.SFXGUI_MPHUD.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXGUI_MPHUD::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 109657 ];

	USFXGUI_MPHUD_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function SFXGame.BioHUD.RemoveTraceAtIndex
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nTrace                         ( CPF_Parm )

void ASFXHUDMP::RemoveTraceAtIndex ( int nTrace )
{
	static UFunction* pFnRemoveTraceAtIndex = NULL;

	if ( ! pFnRemoveTraceAtIndex )
		pFnRemoveTraceAtIndex = (UFunction*) UObject::GObjObjects()->Data[ 47151 ];

	ASFXHUDMP_execRemoveTraceAtIndex_Parms RemoveTraceAtIndex_Parms;
	RemoveTraceAtIndex_Parms.nTrace = nTrace;

	this->ProcessEvent ( pFnRemoveTraceAtIndex, &RemoveTraceAtIndex_Parms, NULL );
};

// Function SFXGame.BioHUD.ClearTraceStrips
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXHUDMP::ClearTraceStrips ( )
{
	static UFunction* pFnClearTraceStrips = NULL;

	if ( ! pFnClearTraceStrips )
		pFnClearTraceStrips = (UFunction*) UObject::GObjObjects()->Data[ 47148 ];

	ASFXHUDMP_execClearTraceStrips_Parms ClearTraceStrips_Parms;

	this->ProcessEvent ( pFnClearTraceStrips, &ClearTraceStrips_Parms, NULL );
};

// Function SFXGame.BioHUD.AddAnimNodeTraceStrip
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )
// struct FName                   nmAnimnode                     ( CPF_Parm )
// struct FLinearColor            DrawColor                      ( CPF_Parm )

void ASFXHUDMP::AddAnimNodeTraceStrip ( class AActor* TargetActor, struct FName nmAnimnode, struct FLinearColor DrawColor )
{
	static UFunction* pFnAddAnimNodeTraceStrip = NULL;

	if ( ! pFnAddAnimNodeTraceStrip )
		pFnAddAnimNodeTraceStrip = (UFunction*) UObject::GObjObjects()->Data[ 47140 ];

	ASFXHUDMP_execAddAnimNodeTraceStrip_Parms AddAnimNodeTraceStrip_Parms;
	AddAnimNodeTraceStrip_Parms.TargetActor = TargetActor;
	memcpy ( &AddAnimNodeTraceStrip_Parms.nmAnimnode, &nmAnimnode, 0x8 );
	memcpy ( &AddAnimNodeTraceStrip_Parms.DrawColor, &DrawColor, 0x10 );

	this->ProcessEvent ( pFnAddAnimNodeTraceStrip, &AddAnimNodeTraceStrip_Parms, NULL );
};

// Function SFXGame.BioHUD.AddPropertyTraceStrip
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )
// struct FName                   nmProperty                     ( CPF_Parm )
// struct FLinearColor            DrawColor                      ( CPF_Parm )

void ASFXHUDMP::AddPropertyTraceStrip ( class AActor* TargetActor, struct FName nmProperty, struct FLinearColor DrawColor )
{
	static UFunction* pFnAddPropertyTraceStrip = NULL;

	if ( ! pFnAddPropertyTraceStrip )
		pFnAddPropertyTraceStrip = (UFunction*) UObject::GObjObjects()->Data[ 47146 ];

	ASFXHUDMP_execAddPropertyTraceStrip_Parms AddPropertyTraceStrip_Parms;
	AddPropertyTraceStrip_Parms.TargetActor = TargetActor;
	memcpy ( &AddPropertyTraceStrip_Parms.nmProperty, &nmProperty, 0x8 );
	memcpy ( &AddPropertyTraceStrip_Parms.DrawColor, &DrawColor, 0x10 );

	this->ProcessEvent ( pFnAddPropertyTraceStrip, &AddPropertyTraceStrip_Parms, NULL );
};

// Function SFXGame.BioHUD.AddAxisTraceStrip
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FName                   nmAxis                         ( CPF_Parm )
// struct FLinearColor            DrawColor                      ( CPF_Parm )

void ASFXHUDMP::AddAxisTraceStrip ( struct FName nmAxis, struct FLinearColor DrawColor )
{
	static UFunction* pFnAddAxisTraceStrip = NULL;

	if ( ! pFnAddAxisTraceStrip )
		pFnAddAxisTraceStrip = (UFunction*) UObject::GObjObjects()->Data[ 47134 ];

	ASFXHUDMP_execAddAxisTraceStrip_Parms AddAxisTraceStrip_Parms;
	memcpy ( &AddAxisTraceStrip_Parms.nmAxis, &nmAxis, 0x8 );
	memcpy ( &AddAxisTraceStrip_Parms.DrawColor, &DrawColor, 0x10 );

	this->ProcessEvent ( pFnAddAxisTraceStrip, &AddAxisTraceStrip_Parms, NULL );
};

// Function SFXGame.BioHUD.AddButtonTraceStrip
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FName                   nmButton                       ( CPF_Parm )
// struct FLinearColor            DrawColor                      ( CPF_Parm )

void ASFXHUDMP::AddButtonTraceStrip ( struct FName nmButton, struct FLinearColor DrawColor )
{
	static UFunction* pFnAddButtonTraceStrip = NULL;

	if ( ! pFnAddButtonTraceStrip )
		pFnAddButtonTraceStrip = (UFunction*) UObject::GObjObjects()->Data[ 47130 ];

	ASFXHUDMP_execAddButtonTraceStrip_Parms AddButtonTraceStrip_Parms;
	memcpy ( &AddButtonTraceStrip_Parms.nmButton, &nmButton, 0x8 );
	memcpy ( &AddButtonTraceStrip_Parms.DrawColor, &DrawColor, 0x10 );

	this->ProcessEvent ( pFnAddButtonTraceStrip, &AddButtonTraceStrip_Parms, NULL );
};

// Function SFXGame.BioHUD.DebugDraw_TraceStrips
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ABioHUD*                 HUD                            ( CPF_Parm )

void ASFXHUDMP::DebugDraw_TraceStrips ( class ABioHUD* HUD )
{
	static UFunction* pFnDebugDraw_TraceStrips = NULL;

	if ( ! pFnDebugDraw_TraceStrips )
		pFnDebugDraw_TraceStrips = (UFunction*) UObject::GObjObjects()->Data[ 51174 ];

	ASFXHUDMP_execDebugDraw_TraceStrips_Parms DebugDraw_TraceStrips_Parms;
	DebugDraw_TraceStrips_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDebugDraw_TraceStrips, &DebugDraw_TraceStrips_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawTraceStripBacking
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               Origin                         ( CPF_Parm )
// struct FVector2D               Extent                         ( CPF_Parm )
// float                          fTimeScale                     ( CPF_Parm )
// float                          fMostRecentTime                ( CPF_Parm )
// struct FLinearColor            LineColor                      ( CPF_Parm )

void ASFXHUDMP::DrawTraceStripBacking ( struct FVector2D Origin, struct FVector2D Extent, float fTimeScale, float fMostRecentTime, struct FLinearColor LineColor )
{
	static UFunction* pFnDrawTraceStripBacking = NULL;

	if ( ! pFnDrawTraceStripBacking )
		pFnDrawTraceStripBacking = (UFunction*) UObject::GObjObjects()->Data[ 51168 ];

	ASFXHUDMP_execDrawTraceStripBacking_Parms DrawTraceStripBacking_Parms;
	memcpy ( &DrawTraceStripBacking_Parms.Origin, &Origin, 0x8 );
	memcpy ( &DrawTraceStripBacking_Parms.Extent, &Extent, 0x8 );
	DrawTraceStripBacking_Parms.fTimeScale = fTimeScale;
	DrawTraceStripBacking_Parms.fMostRecentTime = fMostRecentTime;
	memcpy ( &DrawTraceStripBacking_Parms.LineColor, &LineColor, 0x10 );

	pFnDrawTraceStripBacking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTraceStripBacking, &DrawTraceStripBacking_Parms, NULL );

	pFnDrawTraceStripBacking->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.DrawTraceStrip
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FTraceStripChannel      Chan                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FVector2D               Origin                         ( CPF_Parm )
// struct FVector2D               Extent                         ( CPF_Parm )
// float                          fTimeScale                     ( CPF_Parm )

void ASFXHUDMP::DrawTraceStrip ( struct FTraceStripChannel Chan, struct FVector2D Origin, struct FVector2D Extent, float fTimeScale )
{
	static UFunction* pFnDrawTraceStrip = NULL;

	if ( ! pFnDrawTraceStrip )
		pFnDrawTraceStrip = (UFunction*) UObject::GObjObjects()->Data[ 51163 ];

	ASFXHUDMP_execDrawTraceStrip_Parms DrawTraceStrip_Parms;
	memcpy ( &DrawTraceStrip_Parms.Chan, &Chan, 0x4C );
	memcpy ( &DrawTraceStrip_Parms.Origin, &Origin, 0x8 );
	memcpy ( &DrawTraceStrip_Parms.Extent, &Extent, 0x8 );
	DrawTraceStrip_Parms.fTimeScale = fTimeScale;

	pFnDrawTraceStrip->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTraceStrip, &DrawTraceStrip_Parms, NULL );

	pFnDrawTraceStrip->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.UpdateTraceStrips
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          fBufferTime                    ( CPF_Parm )

void ASFXHUDMP::UpdateTraceStrips ( float fBufferTime )
{
	static UFunction* pFnUpdateTraceStrips = NULL;

	if ( ! pFnUpdateTraceStrips )
		pFnUpdateTraceStrips = (UFunction*) UObject::GObjObjects()->Data[ 51161 ];

	ASFXHUDMP_execUpdateTraceStrips_Parms UpdateTraceStrips_Parms;
	UpdateTraceStrips_Parms.fBufferTime = fBufferTime;

	pFnUpdateTraceStrips->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTraceStrips, &UpdateTraceStrips_Parms, NULL );

	pFnUpdateTraceStrips->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.HideTraceStrips
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXHUDMP::HideTraceStrips ( )
{
	static UFunction* pFnHideTraceStrips = NULL;

	if ( ! pFnHideTraceStrips )
		pFnHideTraceStrips = (UFunction*) UObject::GObjObjects()->Data[ 51160 ];

	ASFXHUDMP_execHideTraceStrips_Parms HideTraceStrips_Parms;

	this->ProcessEvent ( pFnHideTraceStrips, &HideTraceStrips_Parms, NULL );
};

// Function SFXGame.BioHUD.StartTraceStrips
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXHUDMP::StartTraceStrips ( )
{
	static UFunction* pFnStartTraceStrips = NULL;

	if ( ! pFnStartTraceStrips )
		pFnStartTraceStrips = (UFunction*) UObject::GObjObjects()->Data[ 51159 ];

	ASFXHUDMP_execStartTraceStrips_Parms StartTraceStrips_Parms;

	this->ProcessEvent ( pFnStartTraceStrips, &StartTraceStrips_Parms, NULL );
};

// Function SFXGame.BioHUD.IsFinalReleaseBuild
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXHUDMP::IsFinalReleaseBuild ( )
{
	static UFunction* pFnIsFinalReleaseBuild = NULL;

	if ( ! pFnIsFinalReleaseBuild )
		pFnIsFinalReleaseBuild = (UFunction*) UObject::GObjObjects()->Data[ 51157 ];

	ASFXHUDMP_execIsFinalReleaseBuild_Parms IsFinalReleaseBuild_Parms;

	this->ProcessEvent ( pFnIsFinalReleaseBuild, &IsFinalReleaseBuild_Parms, NULL );

	return IsFinalReleaseBuild_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.AddBar
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FName                   Id                             ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// float                          Lifetime                       ( CPF_OptionalParm | CPF_Parm )
// int                            C                              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  Grows                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  Shrinks                        ( CPF_OptionalParm | CPF_Parm )

void ASFXHUDMP::AddBar ( struct FName Id, float X, float Y, float Width, float Lifetime, int C, unsigned long Grows, unsigned long Shrinks )
{
	static UFunction* pFnAddBar = NULL;

	if ( ! pFnAddBar )
		pFnAddBar = (UFunction*) UObject::GObjObjects()->Data[ 46854 ];

	ASFXHUDMP_execAddBar_Parms AddBar_Parms;
	memcpy ( &AddBar_Parms.Id, &Id, 0x8 );
	AddBar_Parms.X = X;
	AddBar_Parms.Y = Y;
	AddBar_Parms.Width = Width;
	AddBar_Parms.Lifetime = Lifetime;
	AddBar_Parms.C = C;
	AddBar_Parms.Grows = Grows;
	AddBar_Parms.Shrinks = Shrinks;

	this->ProcessEvent ( pFnAddBar, &AddBar_Parms, NULL );
};

// Function SFXGame.BioHUD.RemoveBar
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   Id                             ( CPF_Parm )

void ASFXHUDMP::RemoveBar ( struct FName Id )
{
	static UFunction* pFnRemoveBar = NULL;

	if ( ! pFnRemoveBar )
		pFnRemoveBar = (UFunction*) UObject::GObjObjects()->Data[ 51128 ];

	ASFXHUDMP_execRemoveBar_Parms RemoveBar_Parms;
	memcpy ( &RemoveBar_Parms.Id, &Id, 0x8 );

	this->ProcessEvent ( pFnRemoveBar, &RemoveBar_Parms, NULL );
};

// Function SFXGame.BioHUD.AddDesignerText
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FName                   Id                             ( CPF_Parm )
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          TimeOut                        ( CPF_OptionalParm | CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  Center                         ( CPF_OptionalParm | CPF_Parm )

void ASFXHUDMP::AddDesignerText ( struct FName Id, struct FString S, float X, float Y, float TimeOut, float Scale, unsigned long Center )
{
	static UFunction* pFnAddDesignerText = NULL;

	if ( ! pFnAddDesignerText )
		pFnAddDesignerText = (UFunction*) UObject::GObjObjects()->Data[ 46842 ];

	ASFXHUDMP_execAddDesignerText_Parms AddDesignerText_Parms;
	memcpy ( &AddDesignerText_Parms.Id, &Id, 0x8 );
	memcpy ( &AddDesignerText_Parms.S, &S, 0xC );
	AddDesignerText_Parms.X = X;
	AddDesignerText_Parms.Y = Y;
	AddDesignerText_Parms.TimeOut = TimeOut;
	AddDesignerText_Parms.Scale = Scale;
	AddDesignerText_Parms.Center = Center;

	this->ProcessEvent ( pFnAddDesignerText, &AddDesignerText_Parms, NULL );
};

// Function SFXGame.BioHUD.HasDesignerText
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   Id                             ( CPF_Parm )
// struct FString                 S                              ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool ASFXHUDMP::HasDesignerText ( struct FName Id, struct FString S )
{
	static UFunction* pFnHasDesignerText = NULL;

	if ( ! pFnHasDesignerText )
		pFnHasDesignerText = (UFunction*) UObject::GObjObjects()->Data[ 51133 ];

	ASFXHUDMP_execHasDesignerText_Parms HasDesignerText_Parms;
	memcpy ( &HasDesignerText_Parms.Id, &Id, 0x8 );
	memcpy ( &HasDesignerText_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnHasDesignerText, &HasDesignerText_Parms, NULL );

	return HasDesignerText_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.RemoveDesignerText
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   Id                             ( CPF_Parm )

void ASFXHUDMP::RemoveDesignerText ( struct FName Id )
{
	static UFunction* pFnRemoveDesignerText = NULL;

	if ( ! pFnRemoveDesignerText )
		pFnRemoveDesignerText = (UFunction*) UObject::GObjObjects()->Data[ 46832 ];

	ASFXHUDMP_execRemoveDesignerText_Parms RemoveDesignerText_Parms;
	memcpy ( &RemoveDesignerText_Parms.Id, &Id, 0x8 );

	this->ProcessEvent ( pFnRemoveDesignerText, &RemoveDesignerText_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawDesignerHud
// [0x00020002] 
// Parameters infos:

void ASFXHUDMP::DrawDesignerHud ( )
{
	static UFunction* pFnDrawDesignerHud = NULL;

	if ( ! pFnDrawDesignerHud )
		pFnDrawDesignerHud = (UFunction*) UObject::GObjObjects()->Data[ 51120 ];

	ASFXHUDMP_execDrawDesignerHud_Parms DrawDesignerHud_Parms;

	this->ProcessEvent ( pFnDrawDesignerHud, &DrawDesignerHud_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_SetTimerDetails
// [0x00020002] 
// Parameters infos:
// unsigned long                  bModalTimer                    ( CPF_Parm )
// unsigned long                  bVisible                       ( CPF_Parm )
// float                          fStartTime                     ( CPF_Parm )
// float                          fEndTime                       ( CPF_Parm )
// float                          fInterval                      ( CPF_Parm )

void ASFXHUDMP::DUI_SetTimerDetails ( unsigned long bModalTimer, unsigned long bVisible, float fStartTime, float fEndTime, float fInterval )
{
	static UFunction* pFnDUI_SetTimerDetails = NULL;

	if ( ! pFnDUI_SetTimerDetails )
		pFnDUI_SetTimerDetails = (UFunction*) UObject::GObjObjects()->Data[ 51113 ];

	ASFXHUDMP_execDUI_SetTimerDetails_Parms DUI_SetTimerDetails_Parms;
	DUI_SetTimerDetails_Parms.bModalTimer = bModalTimer;
	DUI_SetTimerDetails_Parms.bVisible = bVisible;
	DUI_SetTimerDetails_Parms.fStartTime = fStartTime;
	DUI_SetTimerDetails_Parms.fEndTime = fEndTime;
	DUI_SetTimerDetails_Parms.fInterval = fInterval;

	this->ProcessEvent ( pFnDUI_SetTimerDetails, &DUI_SetTimerDetails_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_SetQuasarLayout
// [0x00020002] 
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )

void ASFXHUDMP::DUI_SetQuasarLayout ( unsigned long bShow )
{
	static UFunction* pFnDUI_SetQuasarLayout = NULL;

	if ( ! pFnDUI_SetQuasarLayout )
		pFnDUI_SetQuasarLayout = (UFunction*) UObject::GObjObjects()->Data[ 51110 ];

	ASFXHUDMP_execDUI_SetQuasarLayout_Parms DUI_SetQuasarLayout_Parms;
	DUI_SetQuasarLayout_Parms.bShow = bShow;

	this->ProcessEvent ( pFnDUI_SetQuasarLayout, &DUI_SetQuasarLayout_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_SetBarFillDirection
// [0x00020002] 
// Parameters infos:
// unsigned long                  bModalBar                      ( CPF_Parm )
// unsigned long                  bLeftToRight                   ( CPF_Parm )

void ASFXHUDMP::DUI_SetBarFillDirection ( unsigned long bModalBar, unsigned long bLeftToRight )
{
	static UFunction* pFnDUI_SetBarFillDirection = NULL;

	if ( ! pFnDUI_SetBarFillDirection )
		pFnDUI_SetBarFillDirection = (UFunction*) UObject::GObjObjects()->Data[ 51106 ];

	ASFXHUDMP_execDUI_SetBarFillDirection_Parms DUI_SetBarFillDirection_Parms;
	DUI_SetBarFillDirection_Parms.bModalBar = bModalBar;
	DUI_SetBarFillDirection_Parms.bLeftToRight = bLeftToRight;

	this->ProcessEvent ( pFnDUI_SetBarFillDirection, &DUI_SetBarFillDirection_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_SetBarFillPercent
// [0x00020002] 
// Parameters infos:
// unsigned long                  bModalBar                      ( CPF_Parm )
// int                            nPercent                       ( CPF_Parm )

void ASFXHUDMP::DUI_SetBarFillPercent ( unsigned long bModalBar, int nPercent )
{
	static UFunction* pFnDUI_SetBarFillPercent = NULL;

	if ( ! pFnDUI_SetBarFillPercent )
		pFnDUI_SetBarFillPercent = (UFunction*) UObject::GObjObjects()->Data[ 51102 ];

	ASFXHUDMP_execDUI_SetBarFillPercent_Parms DUI_SetBarFillPercent_Parms;
	DUI_SetBarFillPercent_Parms.bModalBar = bModalBar;
	DUI_SetBarFillPercent_Parms.nPercent = nPercent;

	this->ProcessEvent ( pFnDUI_SetBarFillPercent, &DUI_SetBarFillPercent_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_SetBarMarkerPoints
// [0x00020002] 
// Parameters infos:
// unsigned long                  bModalBar                      ( CPF_Parm )
// int                            nMarker1                       ( CPF_Parm )
// int                            nMarker2                       ( CPF_Parm )

void ASFXHUDMP::DUI_SetBarMarkerPoints ( unsigned long bModalBar, int nMarker1, int nMarker2 )
{
	static UFunction* pFnDUI_SetBarMarkerPoints = NULL;

	if ( ! pFnDUI_SetBarMarkerPoints )
		pFnDUI_SetBarMarkerPoints = (UFunction*) UObject::GObjObjects()->Data[ 51097 ];

	ASFXHUDMP_execDUI_SetBarMarkerPoints_Parms DUI_SetBarMarkerPoints_Parms;
	DUI_SetBarMarkerPoints_Parms.bModalBar = bModalBar;
	DUI_SetBarMarkerPoints_Parms.nMarker1 = nMarker1;
	DUI_SetBarMarkerPoints_Parms.nMarker2 = nMarker2;

	this->ProcessEvent ( pFnDUI_SetBarMarkerPoints, &DUI_SetBarMarkerPoints_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_SetCounterValue
// [0x00020002] 
// Parameters infos:
// unsigned long                  bModalCounter                  ( CPF_Parm )
// int                            nValue                         ( CPF_Parm )

void ASFXHUDMP::DUI_SetCounterValue ( unsigned long bModalCounter, int nValue )
{
	static UFunction* pFnDUI_SetCounterValue = NULL;

	if ( ! pFnDUI_SetCounterValue )
		pFnDUI_SetCounterValue = (UFunction*) UObject::GObjObjects()->Data[ 51093 ];

	ASFXHUDMP_execDUI_SetCounterValue_Parms DUI_SetCounterValue_Parms;
	DUI_SetCounterValue_Parms.bModalCounter = bModalCounter;
	DUI_SetCounterValue_Parms.nValue = nValue;

	this->ProcessEvent ( pFnDUI_SetCounterValue, &DUI_SetCounterValue_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_SetElementText
// [0x00020002] 
// Parameters infos:
// unsigned char                  nElement                       ( CPF_Parm )
// struct FString                 sText                          ( CPF_Parm | CPF_NeedCtorLink )

void ASFXHUDMP::DUI_SetElementText ( unsigned char nElement, struct FString sText )
{
	static UFunction* pFnDUI_SetElementText = NULL;

	if ( ! pFnDUI_SetElementText )
		pFnDUI_SetElementText = (UFunction*) UObject::GObjObjects()->Data[ 51089 ];

	ASFXHUDMP_execDUI_SetElementText_Parms DUI_SetElementText_Parms;
	DUI_SetElementText_Parms.nElement = nElement;
	memcpy ( &DUI_SetElementText_Parms.sText, &sText, 0xC );

	this->ProcessEvent ( pFnDUI_SetElementText, &DUI_SetElementText_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_SetTextStringRef
// [0x00020002] 
// Parameters infos:
// unsigned char                  nElement                       ( CPF_Parm )
// void*                          srText                         ( CPF_Parm )

void ASFXHUDMP::DUI_SetTextStringRef ( unsigned char nElement, void* srText )
{
	static UFunction* pFnDUI_SetTextStringRef = NULL;

	if ( ! pFnDUI_SetTextStringRef )
		pFnDUI_SetTextStringRef = (UFunction*) UObject::GObjObjects()->Data[ 51085 ];

	ASFXHUDMP_execDUI_SetTextStringRef_Parms DUI_SetTextStringRef_Parms;
	DUI_SetTextStringRef_Parms.nElement = nElement;
	DUI_SetTextStringRef_Parms.srText = srText;

	this->ProcessEvent ( pFnDUI_SetTextStringRef, &DUI_SetTextStringRef_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_ClearElementPulse
// [0x00020002] 
// Parameters infos:
// unsigned char                  nElement                       ( CPF_Parm )

void ASFXHUDMP::DUI_ClearElementPulse ( unsigned char nElement )
{
	static UFunction* pFnDUI_ClearElementPulse = NULL;

	if ( ! pFnDUI_ClearElementPulse )
		pFnDUI_ClearElementPulse = (UFunction*) UObject::GObjObjects()->Data[ 51082 ];

	ASFXHUDMP_execDUI_ClearElementPulse_Parms DUI_ClearElementPulse_Parms;
	DUI_ClearElementPulse_Parms.nElement = nElement;

	this->ProcessEvent ( pFnDUI_ClearElementPulse, &DUI_ClearElementPulse_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_SetupElementPulse
// [0x00020002] 
// Parameters infos:
// unsigned char                  nElement                       ( CPF_Parm )
// float                          fMinAlpha                      ( CPF_Parm )
// float                          fCycleTime                     ( CPF_Parm )

void ASFXHUDMP::DUI_SetupElementPulse ( unsigned char nElement, float fMinAlpha, float fCycleTime )
{
	static UFunction* pFnDUI_SetupElementPulse = NULL;

	if ( ! pFnDUI_SetupElementPulse )
		pFnDUI_SetupElementPulse = (UFunction*) UObject::GObjObjects()->Data[ 51077 ];

	ASFXHUDMP_execDUI_SetupElementPulse_Parms DUI_SetupElementPulse_Parms;
	DUI_SetupElementPulse_Parms.nElement = nElement;
	DUI_SetupElementPulse_Parms.fMinAlpha = fMinAlpha;
	DUI_SetupElementPulse_Parms.fCycleTime = fCycleTime;

	this->ProcessEvent ( pFnDUI_SetupElementPulse, &DUI_SetupElementPulse_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_SetElementAlpha
// [0x00020002] 
// Parameters infos:
// unsigned char                  nElement                       ( CPF_Parm )
// float                          fAlpha                         ( CPF_Parm )

void ASFXHUDMP::DUI_SetElementAlpha ( unsigned char nElement, float fAlpha )
{
	static UFunction* pFnDUI_SetElementAlpha = NULL;

	if ( ! pFnDUI_SetElementAlpha )
		pFnDUI_SetElementAlpha = (UFunction*) UObject::GObjObjects()->Data[ 51073 ];

	ASFXHUDMP_execDUI_SetElementAlpha_Parms DUI_SetElementAlpha_Parms;
	DUI_SetElementAlpha_Parms.nElement = nElement;
	DUI_SetElementAlpha_Parms.fAlpha = fAlpha;

	this->ProcessEvent ( pFnDUI_SetElementAlpha, &DUI_SetElementAlpha_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_SetElementColor
// [0x00020002] 
// Parameters infos:
// unsigned char                  nElement                       ( CPF_Parm )
// struct FColor                  stColor                        ( CPF_Parm )

void ASFXHUDMP::DUI_SetElementColor ( unsigned char nElement, struct FColor stColor )
{
	static UFunction* pFnDUI_SetElementColor = NULL;

	if ( ! pFnDUI_SetElementColor )
		pFnDUI_SetElementColor = (UFunction*) UObject::GObjObjects()->Data[ 51069 ];

	ASFXHUDMP_execDUI_SetElementColor_Parms DUI_SetElementColor_Parms;
	DUI_SetElementColor_Parms.nElement = nElement;
	memcpy ( &DUI_SetElementColor_Parms.stColor, &stColor, 0x4 );

	this->ProcessEvent ( pFnDUI_SetElementColor, &DUI_SetElementColor_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_SetElementVisible
// [0x00024002] 
// Parameters infos:
// unsigned char                  nElement                       ( CPF_Parm )
// unsigned long                  bVisible                       ( CPF_Parm )
// float                          fFadeTime                      ( CPF_OptionalParm | CPF_Parm )

void ASFXHUDMP::DUI_SetElementVisible ( unsigned char nElement, unsigned long bVisible, float fFadeTime )
{
	static UFunction* pFnDUI_SetElementVisible = NULL;

	if ( ! pFnDUI_SetElementVisible )
		pFnDUI_SetElementVisible = (UFunction*) UObject::GObjObjects()->Data[ 51064 ];

	ASFXHUDMP_execDUI_SetElementVisible_Parms DUI_SetElementVisible_Parms;
	DUI_SetElementVisible_Parms.nElement = nElement;
	DUI_SetElementVisible_Parms.bVisible = bVisible;
	DUI_SetElementVisible_Parms.fFadeTime = fFadeTime;

	this->ProcessEvent ( pFnDUI_SetElementVisible, &DUI_SetElementVisible_Parms, NULL );
};

// Function SFXGame.BioHUD.DUI_ClearAll
// [0x00020002] 
// Parameters infos:
// unsigned long                  bModal                         ( CPF_Parm )

void ASFXHUDMP::DUI_ClearAll ( unsigned long bModal )
{
	static UFunction* pFnDUI_ClearAll = NULL;

	if ( ! pFnDUI_ClearAll )
		pFnDUI_ClearAll = (UFunction*) UObject::GObjObjects()->Data[ 51061 ];

	ASFXHUDMP_execDUI_ClearAll_Parms DUI_ClearAll_Parms;
	DUI_ClearAll_Parms.bModal = bModal;

	this->ProcessEvent ( pFnDUI_ClearAll, &DUI_ClearAll_Parms, NULL );
};

// Function SFXGame.BioHUD.ShowReachSpecs
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// struct FName                   nmNavigationPoint              ( CPF_Parm )

void ASFXHUDMP::ShowReachSpecs ( struct FName nmNavigationPoint )
{
	static UFunction* pFnShowReachSpecs = NULL;

	if ( ! pFnShowReachSpecs )
		pFnShowReachSpecs = (UFunction*) UObject::GObjObjects()->Data[ 51056 ];

	ASFXHUDMP_execShowReachSpecs_Parms ShowReachSpecs_Parms;
	memcpy ( &ShowReachSpecs_Parms.nmNavigationPoint, &nmNavigationPoint, 0x8 );

	this->ProcessEvent ( pFnShowReachSpecs, &ShowReachSpecs_Parms, NULL );
};

// Function SFXGame.BioHUD.DisplayRouteInfo
// [0x00024601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// class APawn*                   pPawn                          ( CPF_Parm )
// struct FColor                  PathColor                      ( CPF_Parm )
// unsigned long                  bDrawPathOnly                  ( CPF_OptionalParm | CPF_Parm )

void ASFXHUDMP::DisplayRouteInfo ( class APawn* pPawn, struct FColor PathColor, unsigned long bDrawPathOnly )
{
	static UFunction* pFnDisplayRouteInfo = NULL;

	if ( ! pFnDisplayRouteInfo )
		pFnDisplayRouteInfo = (UFunction*) UObject::GObjObjects()->Data[ 51052 ];

	ASFXHUDMP_execDisplayRouteInfo_Parms DisplayRouteInfo_Parms;
	DisplayRouteInfo_Parms.pPawn = pPawn;
	memcpy ( &DisplayRouteInfo_Parms.PathColor, &PathColor, 0x4 );
	DisplayRouteInfo_Parms.bDrawPathOnly = bDrawPathOnly;

	pFnDisplayRouteInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayRouteInfo, &DisplayRouteInfo_Parms, NULL );

	pFnDisplayRouteInfo->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.DebugDraw_CoverNames
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ABioHUD*                 HUD                            ( CPF_Parm )

void ASFXHUDMP::DebugDraw_CoverNames ( class ABioHUD* HUD )
{
	static UFunction* pFnDebugDraw_CoverNames = NULL;

	if ( ! pFnDebugDraw_CoverNames )
		pFnDebugDraw_CoverNames = (UFunction*) UObject::GObjObjects()->Data[ 51039 ];

	ASFXHUDMP_execDebugDraw_CoverNames_Parms DebugDraw_CoverNames_Parms;
	DebugDraw_CoverNames_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDebugDraw_CoverNames, &DebugDraw_CoverNames_Parms, NULL );
};

// Function SFXGame.BioHUD.ToggleCoverNames
// [0x00024203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// unsigned long                  ClaimedCoverOnly               ( CPF_OptionalParm | CPF_Parm )

void ASFXHUDMP::ToggleCoverNames ( unsigned long ClaimedCoverOnly )
{
	static UFunction* pFnToggleCoverNames = NULL;

	if ( ! pFnToggleCoverNames )
		pFnToggleCoverNames = (UFunction*) UObject::GObjObjects()->Data[ 51036 ];

	ASFXHUDMP_execToggleCoverNames_Parms ToggleCoverNames_Parms;
	ToggleCoverNames_Parms.ClaimedCoverOnly = ClaimedCoverOnly;

	this->ProcessEvent ( pFnToggleCoverNames, &ToggleCoverNames_Parms, NULL );
};

// Function SFXGame.BioHUD.UpdateCover
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bShowRotation                  ( CPF_Parm )

void ASFXHUDMP::UpdateCover ( unsigned long bShowRotation )
{
	static UFunction* pFnUpdateCover = NULL;

	if ( ! pFnUpdateCover )
		pFnUpdateCover = (UFunction*) UObject::GObjObjects()->Data[ 51034 ];

	ASFXHUDMP_execUpdateCover_Parms UpdateCover_Parms;
	UpdateCover_Parms.bShowRotation = bShowRotation;

	pFnUpdateCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCover, &UpdateCover_Parms, NULL );

	pFnUpdateCover->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.DebugDraw_UpdateCover
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ABioHUD*                 HUD                            ( CPF_Parm )

void ASFXHUDMP::DebugDraw_UpdateCover ( class ABioHUD* HUD )
{
	static UFunction* pFnDebugDraw_UpdateCover = NULL;

	if ( ! pFnDebugDraw_UpdateCover )
		pFnDebugDraw_UpdateCover = (UFunction*) UObject::GObjObjects()->Data[ 51031 ];

	ASFXHUDMP_execDebugDraw_UpdateCover_Parms DebugDraw_UpdateCover_Parms;
	DebugDraw_UpdateCover_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDebugDraw_UpdateCover, &DebugDraw_UpdateCover_Parms, NULL );
};

// Function SFXGame.BioHUD.ShowCover
// [0x00024203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// unsigned long                  bShowRotation                  ( CPF_OptionalParm | CPF_Parm )

void ASFXHUDMP::ShowCover ( unsigned long bShowRotation )
{
	static UFunction* pFnShowCover = NULL;

	if ( ! pFnShowCover )
		pFnShowCover = (UFunction*) UObject::GObjObjects()->Data[ 51028 ];

	ASFXHUDMP_execShowCover_Parms ShowCover_Parms;
	ShowCover_Parms.bShowRotation = bShowRotation;

	this->ProcessEvent ( pFnShowCover, &ShowCover_Parms, NULL );
};

// Function SFXGame.BioHUD.DebugDraw_ActorInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ABioHUD*                 HUD                            ( CPF_Parm )

void ASFXHUDMP::DebugDraw_ActorInfo ( class ABioHUD* HUD )
{
	static UFunction* pFnDebugDraw_ActorInfo = NULL;

	if ( ! pFnDebugDraw_ActorInfo )
		pFnDebugDraw_ActorInfo = (UFunction*) UObject::GObjObjects()->Data[ 51018 ];

	ASFXHUDMP_execDebugDraw_ActorInfo_Parms DebugDraw_ActorInfo_Parms;
	DebugDraw_ActorInfo_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDebugDraw_ActorInfo, &DebugDraw_ActorInfo_Parms, NULL );
};

// Function SFXGame.BioHUD.DebugDraw_PlayerLocation
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ABioHUD*                 HUD                            ( CPF_Parm )

void ASFXHUDMP::DebugDraw_PlayerLocation ( class ABioHUD* HUD )
{
	static UFunction* pFnDebugDraw_PlayerLocation = NULL;

	if ( ! pFnDebugDraw_PlayerLocation )
		pFnDebugDraw_PlayerLocation = (UFunction*) UObject::GObjObjects()->Data[ 51014 ];

	ASFXHUDMP_execDebugDraw_PlayerLocation_Parms DebugDraw_PlayerLocation_Parms;
	DebugDraw_PlayerLocation_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDebugDraw_PlayerLocation, &DebugDraw_PlayerLocation_Parms, NULL );
};

// Function SFXGame.BioHUD.HideLocation
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void ASFXHUDMP::HideLocation ( )
{
	static UFunction* pFnHideLocation = NULL;

	if ( ! pFnHideLocation )
		pFnHideLocation = (UFunction*) UObject::GObjObjects()->Data[ 51013 ];

	ASFXHUDMP_execHideLocation_Parms HideLocation_Parms;

	this->ProcessEvent ( pFnHideLocation, &HideLocation_Parms, NULL );
};

// Function SFXGame.BioHUD.ShowLocation
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void ASFXHUDMP::ShowLocation ( )
{
	static UFunction* pFnShowLocation = NULL;

	if ( ! pFnShowLocation )
		pFnShowLocation = (UFunction*) UObject::GObjObjects()->Data[ 51012 ];

	ASFXHUDMP_execShowLocation_Parms ShowLocation_Parms;

	this->ProcessEvent ( pFnShowLocation, &ShowLocation_Parms, NULL );
};

// Function SFXGame.BioHUD.SetActorForActorInfo
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// struct FName                   nmActor                        ( CPF_Parm )

void ASFXHUDMP::SetActorForActorInfo ( struct FName nmActor )
{
	static UFunction* pFnSetActorForActorInfo = NULL;

	if ( ! pFnSetActorForActorInfo )
		pFnSetActorForActorInfo = (UFunction*) UObject::GObjObjects()->Data[ 51009 ];

	ASFXHUDMP_execSetActorForActorInfo_Parms SetActorForActorInfo_Parms;
	memcpy ( &SetActorForActorInfo_Parms.nmActor, &nmActor, 0x8 );

	this->ProcessEvent ( pFnSetActorForActorInfo, &SetActorForActorInfo_Parms, NULL );
};

// Function SFXGame.BioHUD.LockActorInfo
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void ASFXHUDMP::LockActorInfo ( )
{
	static UFunction* pFnLockActorInfo = NULL;

	if ( ! pFnLockActorInfo )
		pFnLockActorInfo = (UFunction*) UObject::GObjObjects()->Data[ 51001 ];

	ASFXHUDMP_execLockActorInfo_Parms LockActorInfo_Parms;

	this->ProcessEvent ( pFnLockActorInfo, &LockActorInfo_Parms, NULL );
};

// Function SFXGame.BioHUD.DisplayActorInfo
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void ASFXHUDMP::DisplayActorInfo ( )
{
	static UFunction* pFnDisplayActorInfo = NULL;

	if ( ! pFnDisplayActorInfo )
		pFnDisplayActorInfo = (UFunction*) UObject::GObjObjects()->Data[ 51000 ];

	ASFXHUDMP_execDisplayActorInfo_Parms DisplayActorInfo_Parms;

	this->ProcessEvent ( pFnDisplayActorInfo, &DisplayActorInfo_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawTextWithColor
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 valueName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FColor                  LabelColor                     ( CPF_Parm )
// struct FColor                  DataColor                      ( CPF_Parm )

void ASFXHUDMP::eventDrawTextWithColor ( struct FString valueName, struct FString Value, struct FColor LabelColor, struct FColor DataColor )
{
	static UFunction* pFnDrawTextWithColor = NULL;

	if ( ! pFnDrawTextWithColor )
		pFnDrawTextWithColor = (UFunction*) UObject::GObjObjects()->Data[ 50988 ];

	ASFXHUDMP_eventDrawTextWithColor_Parms DrawTextWithColor_Parms;
	memcpy ( &DrawTextWithColor_Parms.valueName, &valueName, 0xC );
	memcpy ( &DrawTextWithColor_Parms.Value, &Value, 0xC );
	memcpy ( &DrawTextWithColor_Parms.LabelColor, &LabelColor, 0x4 );
	memcpy ( &DrawTextWithColor_Parms.DataColor, &DataColor, 0x4 );

	this->ProcessEvent ( pFnDrawTextWithColor, &DrawTextWithColor_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawText
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FString                 valueName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FColor                  LabelColor                     ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  DataColor                      ( CPF_OptionalParm | CPF_Parm )

void ASFXHUDMP::eventDrawText ( struct FString valueName, struct FString Value, struct FColor LabelColor, struct FColor DataColor )
{
	static UFunction* pFnDrawText = NULL;

	if ( ! pFnDrawText )
		pFnDrawText = (UFunction*) UObject::GObjObjects()->Data[ 50983 ];

	ASFXHUDMP_eventDrawText_Parms DrawText_Parms;
	memcpy ( &DrawText_Parms.valueName, &valueName, 0xC );
	memcpy ( &DrawText_Parms.Value, &Value, 0xC );
	memcpy ( &DrawText_Parms.LabelColor, &LabelColor, 0x4 );
	memcpy ( &DrawText_Parms.DataColor, &DataColor, 0x4 );

	this->ProcessEvent ( pFnDrawText, &DrawText_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawCircle
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          fX                             ( CPF_Parm )
// float                          fY                             ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void ASFXHUDMP::DrawCircle ( float fX, float fY, float Radius )
{
	static UFunction* pFnDrawCircle = NULL;

	if ( ! pFnDrawCircle )
		pFnDrawCircle = (UFunction*) UObject::GObjObjects()->Data[ 50972 ];

	ASFXHUDMP_execDrawCircle_Parms DrawCircle_Parms;
	DrawCircle_Parms.fX = fX;
	DrawCircle_Parms.fY = fY;
	DrawCircle_Parms.Radius = Radius;

	this->ProcessEvent ( pFnDrawCircle, &DrawCircle_Parms, NULL );
};

// Function SFXGame.BioHUD.CDrawSquare
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nSize                          ( CPF_Parm )

void ASFXHUDMP::CDrawSquare ( int nSize )
{
	static UFunction* pFnCDrawSquare = NULL;

	if ( ! pFnCDrawSquare )
		pFnCDrawSquare = (UFunction*) UObject::GObjObjects()->Data[ 50968 ];

	ASFXHUDMP_execCDrawSquare_Parms CDrawSquare_Parms;
	CDrawSquare_Parms.nSize = nSize;

	this->ProcessEvent ( pFnCDrawSquare, &CDrawSquare_Parms, NULL );
};

// Function SFXGame.BioHUD.LoadTestTextStringFromFile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXHUDMP::LoadTestTextStringFromFile ( )
{
	static UFunction* pFnLoadTestTextStringFromFile = NULL;

	if ( ! pFnLoadTestTextStringFromFile )
		pFnLoadTestTextStringFromFile = (UFunction*) UObject::GObjObjects()->Data[ 50966 ];

	ASFXHUDMP_execLoadTestTextStringFromFile_Parms LoadTestTextStringFromFile_Parms;

	pFnLoadTestTextStringFromFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadTestTextStringFromFile, &LoadTestTextStringFromFile_Parms, NULL );

	pFnLoadTestTextStringFromFile->FunctionFlags |= 0x400;

	return LoadTestTextStringFromFile_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.DrawFakeShadowText
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            X                              ( CPF_Parm )
// int                            Y                              ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// struct FString                 sText                          ( CPF_Parm | CPF_NeedCtorLink )

void ASFXHUDMP::DrawFakeShadowText ( int X, int Y, struct FColor DrawColor, struct FString sText )
{
	static UFunction* pFnDrawFakeShadowText = NULL;

	if ( ! pFnDrawFakeShadowText )
		pFnDrawFakeShadowText = (UFunction*) UObject::GObjObjects()->Data[ 50960 ];

	ASFXHUDMP_execDrawFakeShadowText_Parms DrawFakeShadowText_Parms;
	DrawFakeShadowText_Parms.X = X;
	DrawFakeShadowText_Parms.Y = Y;
	memcpy ( &DrawFakeShadowText_Parms.DrawColor, &DrawColor, 0x4 );
	memcpy ( &DrawFakeShadowText_Parms.sText, &sText, 0xC );

	this->ProcessEvent ( pFnDrawFakeShadowText, &DrawFakeShadowText_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawEngineHUD
// [0x00020000] 
// Parameters infos:

void ASFXHUDMP::DrawEngineHUD ( )
{
	static UFunction* pFnDrawEngineHUD = NULL;

	if ( ! pFnDrawEngineHUD )
		pFnDrawEngineHUD = (UFunction*) UObject::GObjObjects()->Data[ 50959 ];

	ASFXHUDMP_execDrawEngineHUD_Parms DrawEngineHUD_Parms;

	this->ProcessEvent ( pFnDrawEngineHUD, &DrawEngineHUD_Parms, NULL );
};

// Function SFXGame.BioHUD.IsDrawing
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FScriptDelegate         DebugDrawFunc                  ( CPF_Parm | CPF_NeedCtorLink )

bool ASFXHUDMP::IsDrawing ( struct FScriptDelegate DebugDrawFunc )
{
	static UFunction* pFnIsDrawing = NULL;

	if ( ! pFnIsDrawing )
		pFnIsDrawing = (UFunction*) UObject::GObjObjects()->Data[ 44927 ];

	ASFXHUDMP_execIsDrawing_Parms IsDrawing_Parms;
	memcpy ( &IsDrawing_Parms.DebugDrawFunc, &DebugDrawFunc, 0xC );

	this->ProcessEvent ( pFnIsDrawing, &IsDrawing_Parms, NULL );

	return IsDrawing_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.ClearDebugDraw
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         DebugDrawFunc                  ( CPF_Parm | CPF_NeedCtorLink )

void ASFXHUDMP::ClearDebugDraw ( struct FScriptDelegate DebugDrawFunc )
{
	static UFunction* pFnClearDebugDraw = NULL;

	if ( ! pFnClearDebugDraw )
		pFnClearDebugDraw = (UFunction*) UObject::GObjObjects()->Data[ 44929 ];

	ASFXHUDMP_execClearDebugDraw_Parms ClearDebugDraw_Parms;
	memcpy ( &ClearDebugDraw_Parms.DebugDrawFunc, &DebugDrawFunc, 0xC );

	this->ProcessEvent ( pFnClearDebugDraw, &ClearDebugDraw_Parms, NULL );
};

// Function SFXGame.BioHUD.AddDebugDraw
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         DebugDrawFunc                  ( CPF_Parm | CPF_NeedCtorLink )

void ASFXHUDMP::AddDebugDraw ( struct FScriptDelegate DebugDrawFunc )
{
	static UFunction* pFnAddDebugDraw = NULL;

	if ( ! pFnAddDebugDraw )
		pFnAddDebugDraw = (UFunction*) UObject::GObjObjects()->Data[ 44930 ];

	ASFXHUDMP_execAddDebugDraw_Parms AddDebugDraw_Parms;
	memcpy ( &AddDebugDraw_Parms.DebugDrawFunc, &DebugDrawFunc, 0xC );

	this->ProcessEvent ( pFnAddDebugDraw, &AddDebugDraw_Parms, NULL );
};

// Function SFXGame.BioHUD.ToggleDebugDraw
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         DebugDrawFunc                  ( CPF_Parm | CPF_NeedCtorLink )

void ASFXHUDMP::ToggleDebugDraw ( struct FScriptDelegate DebugDrawFunc )
{
	static UFunction* pFnToggleDebugDraw = NULL;

	if ( ! pFnToggleDebugDraw )
		pFnToggleDebugDraw = (UFunction*) UObject::GObjObjects()->Data[ 45353 ];

	ASFXHUDMP_execToggleDebugDraw_Parms ToggleDebugDraw_Parms;
	memcpy ( &ToggleDebugDraw_Parms.DebugDrawFunc, &DebugDrawFunc, 0xC );

	this->ProcessEvent ( pFnToggleDebugDraw, &ToggleDebugDraw_Parms, NULL );
};

// Function SFXGame.BioHUD.DebugDraw
// [0x00120000] 
// Parameters infos:
// class ABioHUD*                 H                              ( CPF_Parm )

void ASFXHUDMP::DebugDraw ( class ABioHUD* H )
{
	static UFunction* pFnDebugDraw = NULL;

	if ( ! pFnDebugDraw )
		pFnDebugDraw = (UFunction*) UObject::GObjObjects()->Data[ 50861 ];

	ASFXHUDMP_execDebugDraw_Parms DebugDraw_Parms;
	DebugDraw_Parms.H = H;

	this->ProcessEvent ( pFnDebugDraw, &DebugDraw_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawHUD
// [0x00020002] 
// Parameters infos:

void ASFXHUDMP::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 50947 ];

	ASFXHUDMP_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function SFXGame.BioHUD.PostRender
// [0x00020002] 
// Parameters infos:

void ASFXHUDMP::PostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 50940 ];

	ASFXHUDMP_execPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function SFXGame.BioHUD.ToggleSafeArea
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void ASFXHUDMP::ToggleSafeArea ( )
{
	static UFunction* pFnToggleSafeArea = NULL;

	if ( ! pFnToggleSafeArea )
		pFnToggleSafeArea = (UFunction*) UObject::GObjObjects()->Data[ 50939 ];

	ASFXHUDMP_execToggleSafeArea_Parms ToggleSafeArea_Parms;

	this->ProcessEvent ( pFnToggleSafeArea, &ToggleSafeArea_Parms, NULL );
};

// Function SFXGame.BioHUD.DisplaySafeArea
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXHUDMP::DisplaySafeArea ( )
{
	static UFunction* pFnDisplaySafeArea = NULL;

	if ( ! pFnDisplaySafeArea )
		pFnDisplaySafeArea = (UFunction*) UObject::GObjObjects()->Data[ 50936 ];

	ASFXHUDMP_execDisplaySafeArea_Parms DisplaySafeArea_Parms;

	this->ProcessEvent ( pFnDisplaySafeArea, &DisplaySafeArea_Parms, NULL );
};

// Function SFXGame.BioHUD.ProfileConversationExtra
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioConversationController* oCurConv                       ( CPF_Parm )

void ASFXHUDMP::eventProfileConversationExtra ( class UBioConversationController* oCurConv )
{
	static UFunction* pFnProfileConversationExtra = NULL;

	if ( ! pFnProfileConversationExtra )
		pFnProfileConversationExtra = (UFunction*) UObject::GObjObjects()->Data[ 50921 ];

	ASFXHUDMP_eventProfileConversationExtra_Parms ProfileConversationExtra_Parms;
	ProfileConversationExtra_Parms.oCurConv = oCurConv;

	this->ProcessEvent ( pFnProfileConversationExtra, &ProfileConversationExtra_Parms, NULL );
};

// Function SFXGame.BioHUD.ProfileAnimPreload
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )

void ASFXHUDMP::ProfileAnimPreload ( class AActor* TargetActor )
{
	static UFunction* pFnProfileAnimPreload = NULL;

	if ( ! pFnProfileAnimPreload )
		pFnProfileAnimPreload = (UFunction*) UObject::GObjObjects()->Data[ 50919 ];

	ASFXHUDMP_execProfileAnimPreload_Parms ProfileAnimPreload_Parms;
	ProfileAnimPreload_Parms.TargetActor = TargetActor;

	pFnProfileAnimPreload->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileAnimPreload, &ProfileAnimPreload_Parms, NULL );

	pFnProfileAnimPreload->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileKinect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )

void ASFXHUDMP::ProfileKinect ( class AActor* TargetActor )
{
	static UFunction* pFnProfileKinect = NULL;

	if ( ! pFnProfileKinect )
		pFnProfileKinect = (UFunction*) UObject::GObjObjects()->Data[ 50917 ];

	ASFXHUDMP_execProfileKinect_Parms ProfileKinect_Parms;
	ProfileKinect_Parms.TargetActor = TargetActor;

	pFnProfileKinect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileKinect, &ProfileKinect_Parms, NULL );

	pFnProfileKinect->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileWwise
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )

void ASFXHUDMP::ProfileWwise ( class AActor* TargetActor )
{
	static UFunction* pFnProfileWwise = NULL;

	if ( ! pFnProfileWwise )
		pFnProfileWwise = (UFunction*) UObject::GObjObjects()->Data[ 50915 ];

	ASFXHUDMP_execProfileWwise_Parms ProfileWwise_Parms;
	ProfileWwise_Parms.TargetActor = TargetActor;

	pFnProfileWwise->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileWwise, &ProfileWwise_Parms, NULL );

	pFnProfileWwise->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileLookAt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )

void ASFXHUDMP::ProfileLookAt ( class AActor* TargetActor )
{
	static UFunction* pFnProfileLookAt = NULL;

	if ( ! pFnProfileLookAt )
		pFnProfileLookAt = (UFunction*) UObject::GObjObjects()->Data[ 50913 ];

	ASFXHUDMP_execProfileLookAt_Parms ProfileLookAt_Parms;
	ProfileLookAt_Parms.TargetActor = TargetActor;

	pFnProfileLookAt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileLookAt, &ProfileLookAt_Parms, NULL );

	pFnProfileLookAt->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileCover
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )

void ASFXHUDMP::ProfileCover ( class AActor* TargetActor )
{
	static UFunction* pFnProfileCover = NULL;

	if ( ! pFnProfileCover )
		pFnProfileCover = (UFunction*) UObject::GObjObjects()->Data[ 50911 ];

	ASFXHUDMP_execProfileCover_Parms ProfileCover_Parms;
	ProfileCover_Parms.TargetActor = TargetActor;

	pFnProfileCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileCover, &ProfileCover_Parms, NULL );

	pFnProfileCover->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )

void ASFXHUDMP::ProfileAnim ( class AActor* TargetActor )
{
	static UFunction* pFnProfileAnim = NULL;

	if ( ! pFnProfileAnim )
		pFnProfileAnim = (UFunction*) UObject::GObjObjects()->Data[ 50909 ];

	ASFXHUDMP_execProfileAnim_Parms ProfileAnim_Parms;
	ProfileAnim_Parms.TargetActor = TargetActor;

	pFnProfileAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileAnim, &ProfileAnim_Parms, NULL );

	pFnProfileAnim->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileGestures
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )

void ASFXHUDMP::ProfileGestures ( class AActor* TargetActor )
{
	static UFunction* pFnProfileGestures = NULL;

	if ( ! pFnProfileGestures )
		pFnProfileGestures = (UFunction*) UObject::GObjObjects()->Data[ 50907 ];

	ASFXHUDMP_execProfileGestures_Parms ProfileGestures_Parms;
	ProfileGestures_Parms.TargetActor = TargetActor;

	pFnProfileGestures->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileGestures, &ProfileGestures_Parms, NULL );

	pFnProfileGestures->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileConversation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )

void ASFXHUDMP::ProfileConversation ( class AActor* TargetActor )
{
	static UFunction* pFnProfileConversation = NULL;

	if ( ! pFnProfileConversation )
		pFnProfileConversation = (UFunction*) UObject::GObjObjects()->Data[ 50905 ];

	ASFXHUDMP_execProfileConversation_Parms ProfileConversation_Parms;
	ProfileConversation_Parms.TargetActor = TargetActor;

	pFnProfileConversation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileConversation, &ProfileConversation_Parms, NULL );

	pFnProfileConversation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileConversationBug
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )

void ASFXHUDMP::ProfileConversationBug ( class AActor* TargetActor )
{
	static UFunction* pFnProfileConversationBug = NULL;

	if ( ! pFnProfileConversationBug )
		pFnProfileConversationBug = (UFunction*) UObject::GObjObjects()->Data[ 50903 ];

	ASFXHUDMP_execProfileConversationBug_Parms ProfileConversationBug_Parms;
	ProfileConversationBug_Parms.TargetActor = TargetActor;

	pFnProfileConversationBug->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileConversationBug, &ProfileConversationBug_Parms, NULL );

	pFnProfileConversationBug->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ViewportDeProject
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            LocalPlayerOwner               ( CPF_Parm )
// struct FVector                 ScreenLocation                 ( CPF_Parm )
// struct FVector                 OutLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 OutDirection                   ( CPF_Parm | CPF_OutParm )

void ASFXHUDMP::ViewportDeProject ( class ULocalPlayer* LocalPlayerOwner, struct FVector ScreenLocation, struct FVector* OutLocation, struct FVector* OutDirection )
{
	static UFunction* pFnViewportDeProject = NULL;

	if ( ! pFnViewportDeProject )
		pFnViewportDeProject = (UFunction*) UObject::GObjObjects()->Data[ 50898 ];

	ASFXHUDMP_execViewportDeProject_Parms ViewportDeProject_Parms;
	ViewportDeProject_Parms.LocalPlayerOwner = LocalPlayerOwner;
	memcpy ( &ViewportDeProject_Parms.ScreenLocation, &ScreenLocation, 0xC );

	pFnViewportDeProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnViewportDeProject, &ViewportDeProject_Parms, NULL );

	pFnViewportDeProject->FunctionFlags |= 0x400;

	if ( OutLocation )
		memcpy ( OutLocation, &ViewportDeProject_Parms.OutLocation, 0xC );

	if ( OutDirection )
		memcpy ( OutDirection, &ViewportDeProject_Parms.OutDirection, 0xC );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.IsMatchTimerRunning
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxgameinfomp_lobby::IsMatchTimerRunning ( )
{
	static UFunction* pFnIsMatchTimerRunning = NULL;

	if ( ! pFnIsMatchTimerRunning )
		pFnIsMatchTimerRunning = (UFunction*) UObject::GObjObjects()->Data[ 108723 ];

	Asfxgameinfomp_lobby_execIsMatchTimerRunning_Parms IsMatchTimerRunning_Parms;

	this->ProcessEvent ( pFnIsMatchTimerRunning, &IsMatchTimerRunning_Parms, NULL );

	return IsMatchTimerRunning_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.UpdateKickVotes
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxgameinfomp_lobby::UpdateKickVotes ( )
{
	static UFunction* pFnUpdateKickVotes = NULL;

	if ( ! pFnUpdateKickVotes )
		pFnUpdateKickVotes = (UFunction*) UObject::GObjObjects()->Data[ 108861 ];

	Asfxgameinfomp_lobby_execUpdateKickVotes_Parms UpdateKickVotes_Parms;

	this->ProcessEvent ( pFnUpdateKickVotes, &UpdateKickVotes_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.OnMPNetworkError
// [0x00020002] 
// Parameters infos:
// struct FString                 additionalInfo                 ( CPF_Parm | CPF_NeedCtorLink )

void Asfxgameinfomp_lobby::OnMPNetworkError ( struct FString additionalInfo )
{
	static UFunction* pFnOnMPNetworkError = NULL;

	if ( ! pFnOnMPNetworkError )
		pFnOnMPNetworkError = (UFunction*) UObject::GObjObjects()->Data[ 108859 ];

	Asfxgameinfomp_lobby_execOnMPNetworkError_Parms OnMPNetworkError_Parms;
	memcpy ( &OnMPNetworkError_Parms.additionalInfo, &additionalInfo, 0xC );

	this->ProcessEvent ( pFnOnMPNetworkError, &OnMPNetworkError_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.OnMPFatalError
// [0x00020002] 
// Parameters infos:
// struct FString                 additionalInfo                 ( CPF_Parm | CPF_NeedCtorLink )

void Asfxgameinfomp_lobby::OnMPFatalError ( struct FString additionalInfo )
{
	static UFunction* pFnOnMPFatalError = NULL;

	if ( ! pFnOnMPFatalError )
		pFnOnMPFatalError = (UFunction*) UObject::GObjObjects()->Data[ 108857 ];

	Asfxgameinfomp_lobby_execOnMPFatalError_Parms OnMPFatalError_Parms;
	memcpy ( &OnMPFatalError_Parms.additionalInfo, &additionalInfo, 0xC );

	this->ProcessEvent ( pFnOnMPFatalError, &OnMPFatalError_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.ShowNetworkErrorPrompt
// [0x00020002] 
// Parameters infos:
// void*                          Caption                        ( CPF_Parm )

void Asfxgameinfomp_lobby::ShowNetworkErrorPrompt ( void* Caption )
{
	static UFunction* pFnShowNetworkErrorPrompt = NULL;

	if ( ! pFnShowNetworkErrorPrompt )
		pFnShowNetworkErrorPrompt = (UFunction*) UObject::GObjObjects()->Data[ 108855 ];

	Asfxgameinfomp_lobby_execShowNetworkErrorPrompt_Parms ShowNetworkErrorPrompt_Parms;
	ShowNetworkErrorPrompt_Parms.Caption = Caption;

	this->ProcessEvent ( pFnShowNetworkErrorPrompt, &ShowNetworkErrorPrompt_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.ShowPrompt
// [0x00020002] 
// Parameters infos:
// void*                          Caption                        ( CPF_Parm )
// unsigned long                  withOkButton                   ( CPF_Parm )

void Asfxgameinfomp_lobby::ShowPrompt ( void* Caption, unsigned long withOkButton )
{
	static UFunction* pFnShowPrompt = NULL;

	if ( ! pFnShowPrompt )
		pFnShowPrompt = (UFunction*) UObject::GObjObjects()->Data[ 108849 ];

	Asfxgameinfomp_lobby_execShowPrompt_Parms ShowPrompt_Parms;
	ShowPrompt_Parms.Caption = Caption;
	ShowPrompt_Parms.withOkButton = withOkButton;

	this->ProcessEvent ( pFnShowPrompt, &ShowPrompt_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.CancelSearch
// [0x00020002] 
// Parameters infos:

void Asfxgameinfomp_lobby::CancelSearch ( )
{
	static UFunction* pFnCancelSearch = NULL;

	if ( ! pFnCancelSearch )
		pFnCancelSearch = (UFunction*) UObject::GObjObjects()->Data[ 108848 ];

	Asfxgameinfomp_lobby_execCancelSearch_Parms CancelSearch_Parms;

	this->ProcessEvent ( pFnCancelSearch, &CancelSearch_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.CancelSearchInput
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Asfxgameinfomp_lobby::CancelSearchInput ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnCancelSearchInput = NULL;

	if ( ! pFnCancelSearchInput )
		pFnCancelSearchInput = (UFunction*) UObject::GObjObjects()->Data[ 108845 ];

	Asfxgameinfomp_lobby_execCancelSearchInput_Parms CancelSearchInput_Parms;
	CancelSearchInput_Parms.bAPressed = bAPressed;
	CancelSearchInput_Parms.nContext = nContext;

	this->ProcessEvent ( pFnCancelSearchInput, &CancelSearchInput_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.OnMPGameStarted
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void Asfxgameinfomp_lobby::OnMPGameStarted ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnMPGameStarted = NULL;

	if ( ! pFnOnMPGameStarted )
		pFnOnMPGameStarted = (UFunction*) UObject::GObjObjects()->Data[ 108842 ];

	Asfxgameinfomp_lobby_execOnMPGameStarted_Parms OnMPGameStarted_Parms;
	OnMPGameStarted_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnMPGameStarted, &OnMPGameStarted_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.OnQuickMatchJoined
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void Asfxgameinfomp_lobby::OnQuickMatchJoined ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnQuickMatchJoined = NULL;

	if ( ! pFnOnQuickMatchJoined )
		pFnOnQuickMatchJoined = (UFunction*) UObject::GObjObjects()->Data[ 108839 ];

	Asfxgameinfomp_lobby_execOnQuickMatchJoined_Parms OnQuickMatchJoined_Parms;
	memcpy ( &OnQuickMatchJoined_Parms.SessionName, &SessionName, 0x8 );
	OnQuickMatchJoined_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnQuickMatchJoined, &OnQuickMatchJoined_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.OnMultiplayerGameDestroyed
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void Asfxgameinfomp_lobby::OnMultiplayerGameDestroyed ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnMultiplayerGameDestroyed = NULL;

	if ( ! pFnOnMultiplayerGameDestroyed )
		pFnOnMultiplayerGameDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 108836 ];

	Asfxgameinfomp_lobby_execOnMultiplayerGameDestroyed_Parms OnMultiplayerGameDestroyed_Parms;
	memcpy ( &OnMultiplayerGameDestroyed_Parms.SessionName, &SessionName, 0x8 );
	OnMultiplayerGameDestroyed_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnMultiplayerGameDestroyed, &OnMultiplayerGameDestroyed_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.ShowStrictNatWarning
// [0x00020002] 
// Parameters infos:

void Asfxgameinfomp_lobby::ShowStrictNatWarning ( )
{
	static UFunction* pFnShowStrictNatWarning = NULL;

	if ( ! pFnShowStrictNatWarning )
		pFnShowStrictNatWarning = (UFunction*) UObject::GObjObjects()->Data[ 108832 ];

	Asfxgameinfomp_lobby_execShowStrictNatWarning_Parms ShowStrictNatWarning_Parms;

	this->ProcessEvent ( pFnShowStrictNatWarning, &ShowStrictNatWarning_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.CheckNatRestriction
// [0x00020002] 
// Parameters infos:

void Asfxgameinfomp_lobby::CheckNatRestriction ( )
{
	static UFunction* pFnCheckNatRestriction = NULL;

	if ( ! pFnCheckNatRestriction )
		pFnCheckNatRestriction = (UFunction*) UObject::GObjObjects()->Data[ 108828 ];

	Asfxgameinfomp_lobby_execCheckNatRestriction_Parms CheckNatRestriction_Parms;

	this->ProcessEvent ( pFnCheckNatRestriction, &CheckNatRestriction_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.OnCreateGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void Asfxgameinfomp_lobby::OnCreateGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnCreateGameComplete = NULL;

	if ( ! pFnOnCreateGameComplete )
		pFnOnCreateGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 108823 ];

	Asfxgameinfomp_lobby_execOnCreateGameComplete_Parms OnCreateGameComplete_Parms;
	memcpy ( &OnCreateGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnCreateGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnCreateGameComplete, &OnCreateGameComplete_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.OnQuickMatchComplete
// [0x00020002] 
// Parameters infos:
// unsigned char                  Result                         ( CPF_Parm )

void Asfxgameinfomp_lobby::OnQuickMatchComplete ( unsigned char Result )
{
	static UFunction* pFnOnQuickMatchComplete = NULL;

	if ( ! pFnOnQuickMatchComplete )
		pFnOnQuickMatchComplete = (UFunction*) UObject::GObjObjects()->Data[ 108820 ];

	Asfxgameinfomp_lobby_execOnQuickMatchComplete_Parms OnQuickMatchComplete_Parms;
	OnQuickMatchComplete_Parms.Result = Result;

	this->ProcessEvent ( pFnOnQuickMatchComplete, &OnQuickMatchComplete_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.QuickMatch
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXOnlineGameSettings*  GameSettings                   ( CPF_OptionalParm | CPF_Parm )

bool Asfxgameinfomp_lobby::QuickMatch ( class USFXOnlineGameSettings* GameSettings )
{
	static UFunction* pFnQuickMatch = NULL;

	if ( ! pFnQuickMatch )
		pFnQuickMatch = (UFunction*) UObject::GObjObjects()->Data[ 108816 ];

	Asfxgameinfomp_lobby_execQuickMatch_Parms QuickMatch_Parms;
	QuickMatch_Parms.GameSettings = GameSettings;

	this->ProcessEvent ( pFnQuickMatch, &QuickMatch_Parms, NULL );

	return QuickMatch_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.CreateOnlineGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXOnlineGameSettings*  GameSettings                   ( CPF_Parm )

bool Asfxgameinfomp_lobby::CreateOnlineGame ( class USFXOnlineGameSettings* GameSettings )
{
	static UFunction* pFnCreateOnlineGame = NULL;

	if ( ! pFnCreateOnlineGame )
		pFnCreateOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 108812 ];

	Asfxgameinfomp_lobby_execCreateOnlineGame_Parms CreateOnlineGame_Parms;
	CreateOnlineGame_Parms.GameSettings = GameSettings;

	this->ProcessEvent ( pFnCreateOnlineGame, &CreateOnlineGame_Parms, NULL );

	return CreateOnlineGame_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.StartMPMatch
// [0x00024002] 
// Parameters infos:
// class USFXOnlineGameSettings*  GameSettings                   ( CPF_OptionalParm | CPF_Parm )

void Asfxgameinfomp_lobby::StartMPMatch ( class USFXOnlineGameSettings* GameSettings )
{
	static UFunction* pFnStartMPMatch = NULL;

	if ( ! pFnStartMPMatch )
		pFnStartMPMatch = (UFunction*) UObject::GObjObjects()->Data[ 108801 ];

	Asfxgameinfomp_lobby_execStartMPMatch_Parms StartMPMatch_Parms;
	StartMPMatch_Parms.GameSettings = GameSettings;

	this->ProcessEvent ( pFnStartMPMatch, &StartMPMatch_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.ChooseRandomEnemy
// [0x00020002] 
// Parameters infos:
// struct FMPEnemyInfo            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FMPEnemyInfo Asfxgameinfomp_lobby::ChooseRandomEnemy ( )
{
	static UFunction* pFnChooseRandomEnemy = NULL;

	if ( ! pFnChooseRandomEnemy )
		pFnChooseRandomEnemy = (UFunction*) UObject::GObjObjects()->Data[ 108784 ];

	Asfxgameinfomp_lobby_execChooseRandomEnemy_Parms ChooseRandomEnemy_Parms;

	this->ProcessEvent ( pFnChooseRandomEnemy, &ChooseRandomEnemy_Parms, NULL );

	return ChooseRandomEnemy_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.ChooseRandomMap
// [0x00020002] 
// Parameters infos:
// struct FMPMapInfo              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FMPMapInfo Asfxgameinfomp_lobby::ChooseRandomMap ( )
{
	static UFunction* pFnChooseRandomMap = NULL;

	if ( ! pFnChooseRandomMap )
		pFnChooseRandomMap = (UFunction*) UObject::GObjObjects()->Data[ 108771 ];

	Asfxgameinfomp_lobby_execChooseRandomMap_Parms ChooseRandomMap_Parms;

	this->ProcessEvent ( pFnChooseRandomMap, &ChooseRandomMap_Parms, NULL );

	return ChooseRandomMap_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.ChangeMatchSettings
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            privacy                        ( CPF_Parm )
// int                            MapId                          ( CPF_Parm )
// unsigned long                  bRandomMap                     ( CPF_Parm )
// int                            EnemyType                      ( CPF_Parm )
// unsigned long                  bRandomEnemy                   ( CPF_Parm )
// int                            NewDifficulty                  ( CPF_Parm )
// unsigned long                  bAllowMatchmaking              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  updateOnline                   ( CPF_OptionalParm | CPF_Parm )

bool Asfxgameinfomp_lobby::ChangeMatchSettings ( int privacy, int MapId, unsigned long bRandomMap, int EnemyType, unsigned long bRandomEnemy, int NewDifficulty, unsigned long bAllowMatchmaking, unsigned long updateOnline )
{
	static UFunction* pFnChangeMatchSettings = NULL;

	if ( ! pFnChangeMatchSettings )
		pFnChangeMatchSettings = (UFunction*) UObject::GObjObjects()->Data[ 108755 ];

	Asfxgameinfomp_lobby_execChangeMatchSettings_Parms ChangeMatchSettings_Parms;
	ChangeMatchSettings_Parms.privacy = privacy;
	ChangeMatchSettings_Parms.MapId = MapId;
	ChangeMatchSettings_Parms.bRandomMap = bRandomMap;
	ChangeMatchSettings_Parms.EnemyType = EnemyType;
	ChangeMatchSettings_Parms.bRandomEnemy = bRandomEnemy;
	ChangeMatchSettings_Parms.NewDifficulty = NewDifficulty;
	ChangeMatchSettings_Parms.bAllowMatchmaking = bAllowMatchmaking;
	ChangeMatchSettings_Parms.updateOnline = updateOnline;

	this->ProcessEvent ( pFnChangeMatchSettings, &ChangeMatchSettings_Parms, NULL );

	return ChangeMatchSettings_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.UnCommitSettings
// [0x00020002] 
// Parameters infos:

void Asfxgameinfomp_lobby::UnCommitSettings ( )
{
	static UFunction* pFnUnCommitSettings = NULL;

	if ( ! pFnUnCommitSettings )
		pFnUnCommitSettings = (UFunction*) UObject::GObjObjects()->Data[ 108753 ];

	Asfxgameinfomp_lobby_execUnCommitSettings_Parms UnCommitSettings_Parms;

	this->ProcessEvent ( pFnUnCommitSettings, &UnCommitSettings_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.CommitSettings
// [0x00020002] 
// Parameters infos:

void Asfxgameinfomp_lobby::CommitSettings ( )
{
	static UFunction* pFnCommitSettings = NULL;

	if ( ! pFnCommitSettings )
		pFnCommitSettings = (UFunction*) UObject::GObjObjects()->Data[ 108744 ];

	Asfxgameinfomp_lobby_execCommitSettings_Parms CommitSettings_Parms;

	this->ProcessEvent ( pFnCommitSettings, &CommitSettings_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.TravelToNextMap
// [0x00020002] 
// Parameters infos:

void Asfxgameinfomp_lobby::TravelToNextMap ( )
{
	static UFunction* pFnTravelToNextMap = NULL;

	if ( ! pFnTravelToNextMap )
		pFnTravelToNextMap = (UFunction*) UObject::GObjObjects()->Data[ 108739 ];

	Asfxgameinfomp_lobby_execTravelToNextMap_Parms TravelToNextMap_Parms;

	this->ProcessEvent ( pFnTravelToNextMap, &TravelToNextMap_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.SetMatchTimerState
// [0x00020002] 
// Parameters infos:
// unsigned char                  NewMatchTimerState             ( CPF_Parm )

void Asfxgameinfomp_lobby::SetMatchTimerState ( unsigned char NewMatchTimerState )
{
	static UFunction* pFnSetMatchTimerState = NULL;

	if ( ! pFnSetMatchTimerState )
		pFnSetMatchTimerState = (UFunction*) UObject::GObjObjects()->Data[ 108742 ];

	Asfxgameinfomp_lobby_execSetMatchTimerState_Parms SetMatchTimerState_Parms;
	SetMatchTimerState_Parms.NewMatchTimerState = NewMatchTimerState;

	this->ProcessEvent ( pFnSetMatchTimerState, &SetMatchTimerState_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.CheckAllPlayersReady
// [0x00020002] 
// Parameters infos:

void Asfxgameinfomp_lobby::CheckAllPlayersReady ( )
{
	static UFunction* pFnCheckAllPlayersReady = NULL;

	if ( ! pFnCheckAllPlayersReady )
		pFnCheckAllPlayersReady = (UFunction*) UObject::GObjObjects()->Data[ 108729 ];

	Asfxgameinfomp_lobby_execCheckAllPlayersReady_Parms CheckAllPlayersReady_Parms;

	this->ProcessEvent ( pFnCheckAllPlayersReady, &CheckAllPlayersReady_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.RestartPlayer
// [0x00020002] 
// Parameters infos:
// class AController*             NewPlayer                      ( CPF_Parm )

void Asfxgameinfomp_lobby::RestartPlayer ( class AController* NewPlayer )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 108727 ];

	Asfxgameinfomp_lobby_execRestartPlayer_Parms RestartPlayer_Parms;
	RestartPlayer_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void Asfxgameinfomp_lobby::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 108720 ];

	Asfxgameinfomp_lobby_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.DeferredPostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxgameinfomp_lobby::DeferredPostBeginPlay ( )
{
	static UFunction* pFnDeferredPostBeginPlay = NULL;

	if ( ! pFnDeferredPostBeginPlay )
		pFnDeferredPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 108717 ];

	Asfxgameinfomp_lobby_execDeferredPostBeginPlay_Parms DeferredPostBeginPlay_Parms;

	this->ProcessEvent ( pFnDeferredPostBeginPlay, &DeferredPostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.ClearCrossLevelReferences
// [0x00020002] 
// Parameters infos:

void Asfxgameinfomp_lobby::ClearCrossLevelReferences ( )
{
	static UFunction* pFnClearCrossLevelReferences = NULL;

	if ( ! pFnClearCrossLevelReferences )
		pFnClearCrossLevelReferences = (UFunction*) UObject::GObjObjects()->Data[ 108716 ];

	Asfxgameinfomp_lobby_execClearCrossLevelReferences_Parms ClearCrossLevelReferences_Parms;

	this->ProcessEvent ( pFnClearCrossLevelReferences, &ClearCrossLevelReferences_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void Asfxgameinfomp_lobby::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 108715 ];

	Asfxgameinfomp_lobby_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.GetOnlineGameSettings
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USFXOnlineGameSettings*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXOnlineGameSettings* Asfxgameinfomp_lobby::GetOnlineGameSettings ( )
{
	static UFunction* pFnGetOnlineGameSettings = NULL;

	if ( ! pFnGetOnlineGameSettings )
		pFnGetOnlineGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 108713 ];

	Asfxgameinfomp_lobby_execGetOnlineGameSettings_Parms GetOnlineGameSettings_Parms;

	this->ProcessEvent ( pFnGetOnlineGameSettings, &GetOnlineGameSettings_Parms, NULL );

	return GetOnlineGameSettings_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgameinfomp_lobby.GetPC
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class Asfxplayercontrollermp*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class Asfxplayercontrollermp* Asfxgameinfomp_lobby::GetPC ( )
{
	static UFunction* pFnGetPC = NULL;

	if ( ! pFnGetPC )
		pFnGetPC = (UFunction*) UObject::GObjObjects()->Data[ 108710 ];

	Asfxgameinfomp_lobby_execGetPC_Parms GetPC_Parms;

	this->ProcessEvent ( pFnGetPC, &GetPC_Parms, NULL );

	return GetPC_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.CanForceLastManReady
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxgrimp_lobby::CanForceLastManReady ( )
{
	static UFunction* pFnCanForceLastManReady = NULL;

	if ( ! pFnCanForceLastManReady )
		pFnCanForceLastManReady = (UFunction*) UObject::GObjObjects()->Data[ 108737 ];

	Asfxgrimp_lobby_execCanForceLastManReady_Parms CanForceLastManReady_Parms;

	this->ProcessEvent ( pFnCanForceLastManReady, &CanForceLastManReady_Parms, NULL );

	return CanForceLastManReady_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.CopyProperties
// [0x00020002] 
// Parameters infos:
// class ASFXGRI*                 OldGRI                         ( CPF_Parm )

void Asfxgrimp_lobby::CopyProperties ( class ASFXGRI* OldGRI )
{
	static UFunction* pFnCopyProperties = NULL;

	if ( ! pFnCopyProperties )
		pFnCopyProperties = (UFunction*) UObject::GObjObjects()->Data[ 109293 ];

	Asfxgrimp_lobby_execCopyProperties_Parms CopyProperties_Parms;
	CopyProperties_Parms.OldGRI = OldGRI;

	this->ProcessEvent ( pFnCopyProperties, &CopyProperties_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp_lobby.SaveDataForHostMigration
// [0x00020102] 
// Parameters infos:

void Asfxgrimp_lobby::SaveDataForHostMigration ( )
{
	static UFunction* pFnSaveDataForHostMigration = NULL;

	if ( ! pFnSaveDataForHostMigration )
		pFnSaveDataForHostMigration = (UFunction*) UObject::GObjObjects()->Data[ 109291 ];

	Asfxgrimp_lobby_execSaveDataForHostMigration_Parms SaveDataForHostMigration_Parms;

	this->ProcessEvent ( pFnSaveDataForHostMigration, &SaveDataForHostMigration_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp_lobby.GetChallengeTypes
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// TArray< struct FMPChallengeInfo > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FMPChallengeInfo > Asfxgrimp_lobby::GetChallengeTypes ( )
{
	static UFunction* pFnGetChallengeTypes = NULL;

	if ( ! pFnGetChallengeTypes )
		pFnGetChallengeTypes = (UFunction*) UObject::GObjObjects()->Data[ 109288 ];

	Asfxgrimp_lobby_execGetChallengeTypes_Parms GetChallengeTypes_Parms;

	this->ProcessEvent ( pFnGetChallengeTypes, &GetChallengeTypes_Parms, NULL );

	return GetChallengeTypes_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.GetEnemyTypes
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// TArray< struct FMPEnemyInfo >  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FMPEnemyInfo > Asfxgrimp_lobby::GetEnemyTypes ( )
{
	static UFunction* pFnGetEnemyTypes = NULL;

	if ( ! pFnGetEnemyTypes )
		pFnGetEnemyTypes = (UFunction*) UObject::GObjObjects()->Data[ 109285 ];

	Asfxgrimp_lobby_execGetEnemyTypes_Parms GetEnemyTypes_Parms;

	this->ProcessEvent ( pFnGetEnemyTypes, &GetEnemyTypes_Parms, NULL );

	return GetEnemyTypes_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.GetMapInfo
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// struct FMPMapInfo              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            MapId                          ( CPF_Parm )

struct FMPMapInfo Asfxgrimp_lobby::GetMapInfo ( int MapId )
{
	static UFunction* pFnGetMapInfo = NULL;

	if ( ! pFnGetMapInfo )
		pFnGetMapInfo = (UFunction*) UObject::GObjObjects()->Data[ 109282 ];

	Asfxgrimp_lobby_execGetMapInfo_Parms GetMapInfo_Parms;
	GetMapInfo_Parms.MapId = MapId;

	this->ProcessEvent ( pFnGetMapInfo, &GetMapInfo_Parms, NULL );

	return GetMapInfo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.IsMultiplayerGame
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxgrimp_lobby::IsMultiplayerGame ( )
{
	static UFunction* pFnIsMultiplayerGame = NULL;

	if ( ! pFnIsMultiplayerGame )
		pFnIsMultiplayerGame = (UFunction*) UObject::GObjObjects()->Data[ 109279 ];

	Asfxgrimp_lobby_execIsMultiplayerGame_Parms IsMultiplayerGame_Parms;

	this->ProcessEvent ( pFnIsMultiplayerGame, &IsMultiplayerGame_Parms, NULL );

	return IsMultiplayerGame_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.GetPrivacy
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Asfxgrimp_lobby::GetPrivacy ( )
{
	static UFunction* pFnGetPrivacy = NULL;

	if ( ! pFnGetPrivacy )
		pFnGetPrivacy = (UFunction*) UObject::GObjObjects()->Data[ 109281 ];

	Asfxgrimp_lobby_execGetPrivacy_Parms GetPrivacy_Parms;

	this->ProcessEvent ( pFnGetPrivacy, &GetPrivacy_Parms, NULL );

	return GetPrivacy_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.IsPrivateMatch
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxgrimp_lobby::IsPrivateMatch ( )
{
	static UFunction* pFnIsPrivateMatch = NULL;

	if ( ! pFnIsPrivateMatch )
		pFnIsPrivateMatch = (UFunction*) UObject::GObjObjects()->Data[ 109277 ];

	Asfxgrimp_lobby_execIsPrivateMatch_Parms IsPrivateMatch_Parms;

	this->ProcessEvent ( pFnIsPrivateMatch, &IsPrivateMatch_Parms, NULL );

	return IsPrivateMatch_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.ReturnToMainMenu
// [0x00020102] 
// Parameters infos:

void Asfxgrimp_lobby::ReturnToMainMenu ( )
{
	static UFunction* pFnReturnToMainMenu = NULL;

	if ( ! pFnReturnToMainMenu )
		pFnReturnToMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 109276 ];

	Asfxgrimp_lobby_execReturnToMainMenu_Parms ReturnToMainMenu_Parms;

	this->ProcessEvent ( pFnReturnToMainMenu, &ReturnToMainMenu_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp_lobby.UnreadyAllPlayers
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxgrimp_lobby::UnreadyAllPlayers ( )
{
	static UFunction* pFnUnreadyAllPlayers = NULL;

	if ( ! pFnUnreadyAllPlayers )
		pFnUnreadyAllPlayers = (UFunction*) UObject::GObjObjects()->Data[ 109255 ];

	Asfxgrimp_lobby_execUnreadyAllPlayers_Parms UnreadyAllPlayers_Parms;

	this->ProcessEvent ( pFnUnreadyAllPlayers, &UnreadyAllPlayers_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp_lobby.GetNumReadyPlayers
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Asfxgrimp_lobby::GetNumReadyPlayers ( )
{
	static UFunction* pFnGetNumReadyPlayers = NULL;

	if ( ! pFnGetNumReadyPlayers )
		pFnGetNumReadyPlayers = (UFunction*) UObject::GObjObjects()->Data[ 108733 ];

	Asfxgrimp_lobby_execGetNumReadyPlayers_Parms GetNumReadyPlayers_Parms;

	this->ProcessEvent ( pFnGetNumReadyPlayers, &GetNumReadyPlayers_Parms, NULL );

	return GetNumReadyPlayers_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.GetNumPlayers
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Asfxgrimp_lobby::GetNumPlayers ( )
{
	static UFunction* pFnGetNumPlayers = NULL;

	if ( ! pFnGetNumPlayers )
		pFnGetNumPlayers = (UFunction*) UObject::GObjObjects()->Data[ 108735 ];

	Asfxgrimp_lobby_execGetNumPlayers_Parms GetNumPlayers_Parms;

	this->ProcessEvent ( pFnGetNumPlayers, &GetNumPlayers_Parms, NULL );

	return GetNumPlayers_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.GetLobbyStatusString
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Asfxgrimp_lobby::GetLobbyStatusString ( )
{
	static UFunction* pFnGetLobbyStatusString = NULL;

	if ( ! pFnGetLobbyStatusString )
		pFnGetLobbyStatusString = (UFunction*) UObject::GObjObjects()->Data[ 109248 ];

	Asfxgrimp_lobby_execGetLobbyStatusString_Parms GetLobbyStatusString_Parms;

	this->ProcessEvent ( pFnGetLobbyStatusString, &GetLobbyStatusString_Parms, NULL );

	return GetLobbyStatusString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.CanInteract
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxgrimp_lobby::CanInteract ( )
{
	static UFunction* pFnCanInteract = NULL;

	if ( ! pFnCanInteract )
		pFnCanInteract = (UFunction*) UObject::GObjObjects()->Data[ 109246 ];

	Asfxgrimp_lobby_execCanInteract_Parms CanInteract_Parms;

	this->ProcessEvent ( pFnCanInteract, &CanInteract_Parms, NULL );

	return CanInteract_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.BuildCombinedMapArray
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxgrimp_lobby::BuildCombinedMapArray ( )
{
	static UFunction* pFnBuildCombinedMapArray = NULL;

	if ( ! pFnBuildCombinedMapArray )
		pFnBuildCombinedMapArray = (UFunction*) UObject::GObjObjects()->Data[ 109232 ];

	Asfxgrimp_lobby_execBuildCombinedMapArray_Parms BuildCombinedMapArray_Parms;

	this->ProcessEvent ( pFnBuildCombinedMapArray, &BuildCombinedMapArray_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp_lobby.ShowMapChangedDueToDLCMismatchPopup
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxgrimp_lobby::ShowMapChangedDueToDLCMismatchPopup ( )
{
	static UFunction* pFnShowMapChangedDueToDLCMismatchPopup = NULL;

	if ( ! pFnShowMapChangedDueToDLCMismatchPopup )
		pFnShowMapChangedDueToDLCMismatchPopup = (UFunction*) UObject::GObjObjects()->Data[ 109235 ];

	Asfxgrimp_lobby_execShowMapChangedDueToDLCMismatchPopup_Parms ShowMapChangedDueToDLCMismatchPopup_Parms;

	this->ProcessEvent ( pFnShowMapChangedDueToDLCMismatchPopup, &ShowMapChangedDueToDLCMismatchPopup_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp_lobby.UpdateMapArrays
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxgrimp_lobby::UpdateMapArrays ( )
{
	static UFunction* pFnUpdateMapArrays = NULL;

	if ( ! pFnUpdateMapArrays )
		pFnUpdateMapArrays = (UFunction*) UObject::GObjObjects()->Data[ 109230 ];

	Asfxgrimp_lobby_execUpdateMapArrays_Parms UpdateMapArrays_Parms;

	this->ProcessEvent ( pFnUpdateMapArrays, &UpdateMapArrays_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp_lobby.UpdatePlayerListOrder
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxgrimp_lobby::UpdatePlayerListOrder ( )
{
	static UFunction* pFnUpdatePlayerListOrder = NULL;

	if ( ! pFnUpdatePlayerListOrder )
		pFnUpdatePlayerListOrder = (UFunction*) UObject::GObjObjects()->Data[ 109226 ];

	Asfxgrimp_lobby_execUpdatePlayerListOrder_Parms UpdatePlayerListOrder_Parms;

	this->ProcessEvent ( pFnUpdatePlayerListOrder, &UpdatePlayerListOrder_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp_lobby.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void Asfxgrimp_lobby::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 109223 ];

	Asfxgrimp_lobby_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp_lobby.UpdateLobbyTimerSound
// [0x00020102] 
// Parameters infos:

void Asfxgrimp_lobby::UpdateLobbyTimerSound ( )
{
	static UFunction* pFnUpdateLobbyTimerSound = NULL;

	if ( ! pFnUpdateLobbyTimerSound )
		pFnUpdateLobbyTimerSound = (UFunction*) UObject::GObjObjects()->Data[ 109225 ];

	Asfxgrimp_lobby_execUpdateLobbyTimerSound_Parms UpdateLobbyTimerSound_Parms;

	this->ProcessEvent ( pFnUpdateLobbyTimerSound, &UpdateLobbyTimerSound_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp_lobby.SetMatchStartTimer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bTimerRunning                  ( CPF_Parm )
// float                          fTimerValue                    ( CPF_Parm )
// float                          fAllPlayersReadyTimerDuration  ( CPF_Parm )

void Asfxgrimp_lobby::SetMatchStartTimer ( unsigned long bTimerRunning, float fTimerValue, float fAllPlayersReadyTimerDuration )
{
	static UFunction* pFnSetMatchStartTimer = NULL;

	if ( ! pFnSetMatchStartTimer )
		pFnSetMatchStartTimer = (UFunction*) UObject::GObjObjects()->Data[ 108725 ];

	Asfxgrimp_lobby_execSetMatchStartTimer_Parms SetMatchStartTimer_Parms;
	SetMatchStartTimer_Parms.bTimerRunning = bTimerRunning;
	SetMatchStartTimer_Parms.fTimerValue = fTimerValue;
	SetMatchStartTimer_Parms.fAllPlayersReadyTimerDuration = fAllPlayersReadyTimerDuration;

	this->ProcessEvent ( pFnSetMatchStartTimer, &SetMatchStartTimer_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp_lobby.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void Asfxgrimp_lobby::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 109211 ];

	Asfxgrimp_lobby_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamempcontent.sfxgrimp_lobby.GetOnlineGameInterface
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UOnlineGameInterface*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameInterface* Asfxgrimp_lobby::GetOnlineGameInterface ( )
{
	static UFunction* pFnGetOnlineGameInterface = NULL;

	if ( ! pFnGetOnlineGameInterface )
		pFnGetOnlineGameInterface = (UFunction*) UObject::GObjObjects()->Data[ 109208 ];

	Asfxgrimp_lobby_execGetOnlineGameInterface_Parms GetOnlineGameInterface_Parms;

	this->ProcessEvent ( pFnGetOnlineGameInterface, &GetOnlineGameInterface_Parms, NULL );

	return GetOnlineGameInterface_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.GetPC
// [0x00020102] 
// Parameters infos:
// class Asfxplayercontrollermp*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class Asfxplayercontrollermp* Asfxgrimp_lobby::GetPC ( )
{
	static UFunction* pFnGetPC = NULL;

	if ( ! pFnGetPC )
		pFnGetPC = (UFunction*) UObject::GObjObjects()->Data[ 109206 ];

	Asfxgrimp_lobby_execGetPC_Parms GetPC_Parms;

	this->ProcessEvent ( pFnGetPC, &GetPC_Parms, NULL );

	return GetPC_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgrimp_lobby.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxgrimp_lobby::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 109204 ];

	Asfxgrimp_lobby_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.OnMPChallengesScreenClosed
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXGUIMovie*            oMovie                         ( CPF_Parm )

bool Asfxlobbyflow::OnMPChallengesScreenClosed ( class USFXGUIMovie* oMovie )
{
	static UFunction* pFnOnMPChallengesScreenClosed = NULL;

	if ( ! pFnOnMPChallengesScreenClosed )
		pFnOnMPChallengesScreenClosed = (UFunction*) UObject::GObjObjects()->Data[ 111704 ];

	Asfxlobbyflow_execOnMPChallengesScreenClosed_Parms OnMPChallengesScreenClosed_Parms;
	OnMPChallengesScreenClosed_Parms.oMovie = oMovie;

	this->ProcessEvent ( pFnOnMPChallengesScreenClosed, &OnMPChallengesScreenClosed_Parms, NULL );

	return OnMPChallengesScreenClosed_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.ShowMPChallengeScreen_Helper
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< unsigned long >        AccomplishmentDataRepeatability ( CPF_Parm | CPF_NeedCtorLink )

bool Asfxlobbyflow::ShowMPChallengeScreen_Helper ( TArray< unsigned long > AccomplishmentDataRepeatability )
{
	static UFunction* pFnShowMPChallengeScreen_Helper = NULL;

	if ( ! pFnShowMPChallengeScreen_Helper )
		pFnShowMPChallengeScreen_Helper = (UFunction*) UObject::GObjObjects()->Data[ 111706 ];

	Asfxlobbyflow_execShowMPChallengeScreen_Helper_Parms ShowMPChallengeScreen_Helper_Parms;
	memcpy ( &ShowMPChallengeScreen_Helper_Parms.AccomplishmentDataRepeatability, &AccomplishmentDataRepeatability, 0xC );

	this->ProcessEvent ( pFnShowMPChallengeScreen_Helper, &ShowMPChallengeScreen_Helper_Parms, NULL );

	return ShowMPChallengeScreen_Helper_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.ShowMPChallengeScreen
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxlobbyflow::ShowMPChallengeScreen ( )
{
	static UFunction* pFnShowMPChallengeScreen = NULL;

	if ( ! pFnShowMPChallengeScreen )
		pFnShowMPChallengeScreen = (UFunction*) UObject::GObjObjects()->Data[ 110291 ];

	Asfxlobbyflow_execShowMPChallengeScreen_Parms ShowMPChallengeScreen_Parms;

	this->ProcessEvent ( pFnShowMPChallengeScreen, &ShowMPChallengeScreen_Parms, NULL );

	return ShowMPChallengeScreen_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.FadeInFromBlack
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::FadeInFromBlack ( )
{
	static UFunction* pFnFadeInFromBlack = NULL;

	if ( ! pFnFadeInFromBlack )
		pFnFadeInFromBlack = (UFunction*) UObject::GObjObjects()->Data[ 111445 ];

	Asfxlobbyflow_execFadeInFromBlack_Parms FadeInFromBlack_Parms;

	this->ProcessEvent ( pFnFadeInFromBlack, &FadeInFromBlack_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ChangeMapMusic
// [0x00020002] 
// Parameters infos:
// int                            MapId                          ( CPF_Parm )

void Asfxlobbyflow::ChangeMapMusic ( int MapId )
{
	static UFunction* pFnChangeMapMusic = NULL;

	if ( ! pFnChangeMapMusic )
		pFnChangeMapMusic = (UFunction*) UObject::GObjObjects()->Data[ 111695 ];

	Asfxlobbyflow_execChangeMapMusic_Parms ChangeMapMusic_Parms;
	ChangeMapMusic_Parms.MapId = MapId;

	this->ProcessEvent ( pFnChangeMapMusic, &ChangeMapMusic_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.IsInDeployFlow
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxlobbyflow::IsInDeployFlow ( )
{
	static UFunction* pFnIsInDeployFlow = NULL;

	if ( ! pFnIsInDeployFlow )
		pFnIsInDeployFlow = (UFunction*) UObject::GObjObjects()->Data[ 109456 ];

	Asfxlobbyflow_execIsInDeployFlow_Parms IsInDeployFlow_Parms;

	this->ProcessEvent ( pFnIsInDeployFlow, &IsInDeployFlow_Parms, NULL );

	return IsInDeployFlow_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.LoadPersonalMatchSettings
// [0x00020002] 
// Parameters infos:
// unsigned char                  eType                          ( CPF_Parm )

void Asfxlobbyflow::LoadPersonalMatchSettings ( unsigned char eType )
{
	static UFunction* pFnLoadPersonalMatchSettings = NULL;

	if ( ! pFnLoadPersonalMatchSettings )
		pFnLoadPersonalMatchSettings = (UFunction*) UObject::GObjObjects()->Data[ 111689 ];

	Asfxlobbyflow_execLoadPersonalMatchSettings_Parms LoadPersonalMatchSettings_Parms;
	LoadPersonalMatchSettings_Parms.eType = eType;

	this->ProcessEvent ( pFnLoadPersonalMatchSettings, &LoadPersonalMatchSettings_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.SavePersonalMatchSettings
// [0x00020002] 
// Parameters infos:
// unsigned char                  eType                          ( CPF_Parm )

void Asfxlobbyflow::SavePersonalMatchSettings ( unsigned char eType )
{
	static UFunction* pFnSavePersonalMatchSettings = NULL;

	if ( ! pFnSavePersonalMatchSettings )
		pFnSavePersonalMatchSettings = (UFunction*) UObject::GObjObjects()->Data[ 111684 ];

	Asfxlobbyflow_execSavePersonalMatchSettings_Parms SavePersonalMatchSettings_Parms;
	SavePersonalMatchSettings_Parms.eType = eType;

	this->ProcessEvent ( pFnSavePersonalMatchSettings, &SavePersonalMatchSettings_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.StartNewMatch
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::StartNewMatch ( )
{
	static UFunction* pFnStartNewMatch = NULL;

	if ( ! pFnStartNewMatch )
		pFnStartNewMatch = (UFunction*) UObject::GObjObjects()->Data[ 111680 ];

	Asfxlobbyflow_execStartNewMatch_Parms StartNewMatch_Parms;

	this->ProcessEvent ( pFnStartNewMatch, &StartNewMatch_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.StartCustomMatch
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::StartCustomMatch ( )
{
	static UFunction* pFnStartCustomMatch = NULL;

	if ( ! pFnStartCustomMatch )
		pFnStartCustomMatch = (UFunction*) UObject::GObjObjects()->Data[ 111676 ];

	Asfxlobbyflow_execStartCustomMatch_Parms StartCustomMatch_Parms;

	this->ProcessEvent ( pFnStartCustomMatch, &StartCustomMatch_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.StartQuickMatch
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::StartQuickMatch ( )
{
	static UFunction* pFnStartQuickMatch = NULL;

	if ( ! pFnStartQuickMatch )
		pFnStartQuickMatch = (UFunction*) UObject::GObjObjects()->Data[ 111674 ];

	Asfxlobbyflow_execStartQuickMatch_Parms StartQuickMatch_Parms;

	this->ProcessEvent ( pFnStartQuickMatch, &StartQuickMatch_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.RefreshMapList
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::RefreshMapList ( )
{
	static UFunction* pFnRefreshMapList = NULL;

	if ( ! pFnRefreshMapList )
		pFnRefreshMapList = (UFunction*) UObject::GObjObjects()->Data[ 111673 ];

	Asfxlobbyflow_execRefreshMapList_Parms RefreshMapList_Parms;

	this->ProcessEvent ( pFnRefreshMapList, &RefreshMapList_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.CanSetReady
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxlobbyflow::CanSetReady ( )
{
	static UFunction* pFnCanSetReady = NULL;

	if ( ! pFnCanSetReady )
		pFnCanSetReady = (UFunction*) UObject::GObjObjects()->Data[ 110349 ];

	Asfxlobbyflow_execCanSetReady_Parms CanSetReady_Parms;

	this->ProcessEvent ( pFnCanSetReady, &CanSetReady_Parms, NULL );

	return CanSetReady_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.StartConnectToMapFlow
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxlobbyflow::StartConnectToMapFlow ( )
{
	static UFunction* pFnStartConnectToMapFlow = NULL;

	if ( ! pFnStartConnectToMapFlow )
		pFnStartConnectToMapFlow = (UFunction*) UObject::GObjObjects()->Data[ 111663 ];

	Asfxlobbyflow_execStartConnectToMapFlow_Parms StartConnectToMapFlow_Parms;

	this->ProcessEvent ( pFnStartConnectToMapFlow, &StartConnectToMapFlow_Parms, NULL );

	return StartConnectToMapFlow_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.IsInConnectToMapFlow
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxlobbyflow::IsInConnectToMapFlow ( )
{
	static UFunction* pFnIsInConnectToMapFlow = NULL;

	if ( ! pFnIsInConnectToMapFlow )
		pFnIsInConnectToMapFlow = (UFunction*) UObject::GObjObjects()->Data[ 111659 ];

	Asfxlobbyflow_execIsInConnectToMapFlow_Parms IsInConnectToMapFlow_Parms;

	this->ProcessEvent ( pFnIsInConnectToMapFlow, &IsInConnectToMapFlow_Parms, NULL );

	return IsInConnectToMapFlow_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.DoesEveryoneHaveMap
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MapId                          ( CPF_Parm )

bool Asfxlobbyflow::DoesEveryoneHaveMap ( int MapId )
{
	static UFunction* pFnDoesEveryoneHaveMap = NULL;

	if ( ! pFnDoesEveryoneHaveMap )
		pFnDoesEveryoneHaveMap = (UFunction*) UObject::GObjObjects()->Data[ 109233 ];

	Asfxlobbyflow_execDoesEveryoneHaveMap_Parms DoesEveryoneHaveMap_Parms;
	DoesEveryoneHaveMap_Parms.MapId = MapId;

	this->ProcessEvent ( pFnDoesEveryoneHaveMap, &DoesEveryoneHaveMap_Parms, NULL );

	return DoesEveryoneHaveMap_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.SortMapInfoData
// [0x00120002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FMPMapInfo              A                              ( CPF_Parm | CPF_NeedCtorLink )
// struct FMPMapInfo              B                              ( CPF_Parm | CPF_NeedCtorLink )

int Asfxlobbyflow::SortMapInfoData ( struct FMPMapInfo A, struct FMPMapInfo B )
{
	static UFunction* pFnSortMapInfoData = NULL;

	if ( ! pFnSortMapInfoData )
		pFnSortMapInfoData = (UFunction*) UObject::GObjObjects()->Data[ 111657 ];

	Asfxlobbyflow_execSortMapInfoData_Parms SortMapInfoData_Parms;
	memcpy ( &SortMapInfoData_Parms.A, &A, 0x40 );
	memcpy ( &SortMapInfoData_Parms.B, &B, 0x40 );

	this->ProcessEvent ( pFnSortMapInfoData, &SortMapInfoData_Parms, NULL );

	return SortMapInfoData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.GetAvailableMapList
// [0x00020002] 
// Parameters infos:
// TArray< struct FMPMapInfo >    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FMPMapInfo > Asfxlobbyflow::GetAvailableMapList ( )
{
	static UFunction* pFnGetAvailableMapList = NULL;

	if ( ! pFnGetAvailableMapList )
		pFnGetAvailableMapList = (UFunction*) UObject::GObjObjects()->Data[ 108781 ];

	Asfxlobbyflow_execGetAvailableMapList_Parms GetAvailableMapList_Parms;

	this->ProcessEvent ( pFnGetAvailableMapList, &GetAvailableMapList_Parms, NULL );

	return GetAvailableMapList_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.PlayGuiSound
// [0x00020002] 
// Parameters infos:
// struct FName                   SoundName                      ( CPF_Parm )

void Asfxlobbyflow::PlayGuiSound ( struct FName SoundName )
{
	static UFunction* pFnPlayGuiSound = NULL;

	if ( ! pFnPlayGuiSound )
		pFnPlayGuiSound = (UFunction*) UObject::GObjObjects()->Data[ 111638 ];

	Asfxlobbyflow_execPlayGuiSound_Parms PlayGuiSound_Parms;
	memcpy ( &PlayGuiSound_Parms.SoundName, &SoundName, 0x8 );

	this->ProcessEvent ( pFnPlayGuiSound, &PlayGuiSound_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.OnSearchGameCancelled
// [0x00020000] 
// Parameters infos:

void Asfxlobbyflow::OnSearchGameCancelled ( )
{
	static UFunction* pFnOnSearchGameCancelled = NULL;

	if ( ! pFnOnSearchGameCancelled )
		pFnOnSearchGameCancelled = (UFunction*) UObject::GObjObjects()->Data[ 111540 ];

	Asfxlobbyflow_execOnSearchGameCancelled_Parms OnSearchGameCancelled_Parms;

	this->ProcessEvent ( pFnOnSearchGameCancelled, &OnSearchGameCancelled_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.OnCharacterChanged
// [0x00020100] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void Asfxlobbyflow::OnCharacterChanged ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnOnCharacterChanged = NULL;

	if ( ! pFnOnCharacterChanged )
		pFnOnCharacterChanged = (UFunction*) UObject::GObjObjects()->Data[ 111538 ];

	Asfxlobbyflow_execOnCharacterChanged_Parms OnCharacterChanged_Parms;
	OnCharacterChanged_Parms.PRI = PRI;

	this->ProcessEvent ( pFnOnCharacterChanged, &OnCharacterChanged_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.OnPlayerLeave
// [0x00020100] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void Asfxlobbyflow::OnPlayerLeave ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnOnPlayerLeave = NULL;

	if ( ! pFnOnPlayerLeave )
		pFnOnPlayerLeave = (UFunction*) UObject::GObjObjects()->Data[ 111536 ];

	Asfxlobbyflow_execOnPlayerLeave_Parms OnPlayerLeave_Parms;
	OnPlayerLeave_Parms.PRI = PRI;

	this->ProcessEvent ( pFnOnPlayerLeave, &OnPlayerLeave_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.OnPlayerEnter
// [0x00020100] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void Asfxlobbyflow::OnPlayerEnter ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnOnPlayerEnter = NULL;

	if ( ! pFnOnPlayerEnter )
		pFnOnPlayerEnter = (UFunction*) UObject::GObjObjects()->Data[ 111534 ];

	Asfxlobbyflow_execOnPlayerEnter_Parms OnPlayerEnter_Parms;
	OnPlayerEnter_Parms.PRI = PRI;

	this->ProcessEvent ( pFnOnPlayerEnter, &OnPlayerEnter_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ChangeMatchSettings
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            privacy                        ( CPF_Parm )
// int                            MapId                          ( CPF_Parm )
// int                            EnemyType                      ( CPF_Parm )
// int                            NewDifficulty                  ( CPF_Parm )

bool Asfxlobbyflow::ChangeMatchSettings ( int privacy, int MapId, int EnemyType, int NewDifficulty )
{
	static UFunction* pFnChangeMatchSettings = NULL;

	if ( ! pFnChangeMatchSettings )
		pFnChangeMatchSettings = (UFunction*) UObject::GObjObjects()->Data[ 110176 ];

	Asfxlobbyflow_execChangeMatchSettings_Parms ChangeMatchSettings_Parms;
	ChangeMatchSettings_Parms.privacy = privacy;
	ChangeMatchSettings_Parms.MapId = MapId;
	ChangeMatchSettings_Parms.EnemyType = EnemyType;
	ChangeMatchSettings_Parms.NewDifficulty = NewDifficulty;

	this->ProcessEvent ( pFnChangeMatchSettings, &ChangeMatchSettings_Parms, NULL );

	return ChangeMatchSettings_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.FinishChangingMatchSettings
// [0x00020000] 
// Parameters infos:
// unsigned long                  bSuccess                       ( CPF_Parm )

void Asfxlobbyflow::FinishChangingMatchSettings ( unsigned long bSuccess )
{
	static UFunction* pFnFinishChangingMatchSettings = NULL;

	if ( ! pFnFinishChangingMatchSettings )
		pFnFinishChangingMatchSettings = (UFunction*) UObject::GObjObjects()->Data[ 111528 ];

	Asfxlobbyflow_execFinishChangingMatchSettings_Parms FinishChangingMatchSettings_Parms;
	FinishChangingMatchSettings_Parms.bSuccess = bSuccess;

	this->ProcessEvent ( pFnFinishChangingMatchSettings, &FinishChangingMatchSettings_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.FinishSelectCharacterFlow
// [0x00020000] 
// Parameters infos:
// unsigned long                  bSuccess                       ( CPF_Parm )

void Asfxlobbyflow::FinishSelectCharacterFlow ( unsigned long bSuccess )
{
	static UFunction* pFnFinishSelectCharacterFlow = NULL;

	if ( ! pFnFinishSelectCharacterFlow )
		pFnFinishSelectCharacterFlow = (UFunction*) UObject::GObjObjects()->Data[ 111526 ];

	Asfxlobbyflow_execFinishSelectCharacterFlow_Parms FinishSelectCharacterFlow_Parms;
	FinishSelectCharacterFlow_Parms.bSuccess = bSuccess;

	this->ProcessEvent ( pFnFinishSelectCharacterFlow, &FinishSelectCharacterFlow_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.FinishModifyCharacterFlow
// [0x00020000] 
// Parameters infos:

void Asfxlobbyflow::FinishModifyCharacterFlow ( )
{
	static UFunction* pFnFinishModifyCharacterFlow = NULL;

	if ( ! pFnFinishModifyCharacterFlow )
		pFnFinishModifyCharacterFlow = (UFunction*) UObject::GObjObjects()->Data[ 111525 ];

	Asfxlobbyflow_execFinishModifyCharacterFlow_Parms FinishModifyCharacterFlow_Parms;

	this->ProcessEvent ( pFnFinishModifyCharacterFlow, &FinishModifyCharacterFlow_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.OnMatchSettingsChanged
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::OnMatchSettingsChanged ( )
{
	static UFunction* pFnOnMatchSettingsChanged = NULL;

	if ( ! pFnOnMatchSettingsChanged )
		pFnOnMatchSettingsChanged = (UFunction*) UObject::GObjObjects()->Data[ 111524 ];

	Asfxlobbyflow_execOnMatchSettingsChanged_Parms OnMatchSettingsChanged_Parms;

	this->ProcessEvent ( pFnOnMatchSettingsChanged, &OnMatchSettingsChanged_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.OnWeaponUIDataLoaded
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::OnWeaponUIDataLoaded ( )
{
	static UFunction* pFnOnWeaponUIDataLoaded = NULL;

	if ( ! pFnOnWeaponUIDataLoaded )
		pFnOnWeaponUIDataLoaded = (UFunction*) UObject::GObjObjects()->Data[ 111523 ];

	Asfxlobbyflow_execOnWeaponUIDataLoaded_Parms OnWeaponUIDataLoaded_Parms;

	this->ProcessEvent ( pFnOnWeaponUIDataLoaded, &OnWeaponUIDataLoaded_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.InitializeWeaponUIManager
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::InitializeWeaponUIManager ( )
{
	static UFunction* pFnInitializeWeaponUIManager = NULL;

	if ( ! pFnInitializeWeaponUIManager )
		pFnInitializeWeaponUIManager = (UFunction*) UObject::GObjObjects()->Data[ 111522 ];

	Asfxlobbyflow_execInitializeWeaponUIManager_Parms InitializeWeaponUIManager_Parms;

	this->ProcessEvent ( pFnInitializeWeaponUIManager, &InitializeWeaponUIManager_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.RestoreOriginalPawn
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::RestoreOriginalPawn ( )
{
	static UFunction* pFnRestoreOriginalPawn = NULL;

	if ( ! pFnRestoreOriginalPawn )
		pFnRestoreOriginalPawn = (UFunction*) UObject::GObjObjects()->Data[ 111520 ];

	Asfxlobbyflow_execRestoreOriginalPawn_Parms RestoreOriginalPawn_Parms;

	this->ProcessEvent ( pFnRestoreOriginalPawn, &RestoreOriginalPawn_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.SpawnDummyPawn
// [0x00020002] 
// Parameters infos:
// struct FString                 KitArchetype                   ( CPF_Parm | CPF_NeedCtorLink )

void Asfxlobbyflow::SpawnDummyPawn ( struct FString KitArchetype )
{
	static UFunction* pFnSpawnDummyPawn = NULL;

	if ( ! pFnSpawnDummyPawn )
		pFnSpawnDummyPawn = (UFunction*) UObject::GObjObjects()->Data[ 111511 ];

	Asfxlobbyflow_execSpawnDummyPawn_Parms SpawnDummyPawn_Parms;
	memcpy ( &SpawnDummyPawn_Parms.KitArchetype, &KitArchetype, 0xC );

	this->ProcessEvent ( pFnSpawnDummyPawn, &SpawnDummyPawn_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.SetupLocalCharacterData
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::SetupLocalCharacterData ( )
{
	static UFunction* pFnSetupLocalCharacterData = NULL;

	if ( ! pFnSetupLocalCharacterData )
		pFnSetupLocalCharacterData = (UFunction*) UObject::GObjObjects()->Data[ 111507 ];

	Asfxlobbyflow_execSetupLocalCharacterData_Parms SetupLocalCharacterData_Parms;

	this->ProcessEvent ( pFnSetupLocalCharacterData, &SetupLocalCharacterData_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.StartDeployFlow
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::StartDeployFlow ( )
{
	static UFunction* pFnStartDeployFlow = NULL;

	if ( ! pFnStartDeployFlow )
		pFnStartDeployFlow = (UFunction*) UObject::GObjObjects()->Data[ 111505 ];

	Asfxlobbyflow_execStartDeployFlow_Parms StartDeployFlow_Parms;

	this->ProcessEvent ( pFnStartDeployFlow, &StartDeployFlow_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.FinishMPAppearanceScreen
// [0x00020002] 
// Parameters infos:
// unsigned long                  bSuccess                       ( CPF_Parm )
// class Usfxmpcharacterrecord*   ModifiedCharacter              ( CPF_Parm )

void Asfxlobbyflow::FinishMPAppearanceScreen ( unsigned long bSuccess, class Usfxmpcharacterrecord* ModifiedCharacter )
{
	static UFunction* pFnFinishMPAppearanceScreen = NULL;

	if ( ! pFnFinishMPAppearanceScreen )
		pFnFinishMPAppearanceScreen = (UFunction*) UObject::GObjObjects()->Data[ 111500 ];

	Asfxlobbyflow_execFinishMPAppearanceScreen_Parms FinishMPAppearanceScreen_Parms;
	FinishMPAppearanceScreen_Parms.bSuccess = bSuccess;
	FinishMPAppearanceScreen_Parms.ModifiedCharacter = ModifiedCharacter;

	this->ProcessEvent ( pFnFinishMPAppearanceScreen, &FinishMPAppearanceScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void Asfxlobbyflow::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 111497 ];

	Asfxlobbyflow_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.SendPlayerDataToServer
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::SendPlayerDataToServer ( )
{
	static UFunction* pFnSendPlayerDataToServer = NULL;

	if ( ! pFnSendPlayerDataToServer )
		pFnSendPlayerDataToServer = (UFunction*) UObject::GObjObjects()->Data[ 111493 ];

	Asfxlobbyflow_execSendPlayerDataToServer_Parms SendPlayerDataToServer_Parms;

	this->ProcessEvent ( pFnSendPlayerDataToServer, &SendPlayerDataToServer_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.IsReadyToEnterLobby
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxlobbyflow::IsReadyToEnterLobby ( )
{
	static UFunction* pFnIsReadyToEnterLobby = NULL;

	if ( ! pFnIsReadyToEnterLobby )
		pFnIsReadyToEnterLobby = (UFunction*) UObject::GObjObjects()->Data[ 111489 ];

	Asfxlobbyflow_execIsReadyToEnterLobby_Parms IsReadyToEnterLobby_Parms;

	this->ProcessEvent ( pFnIsReadyToEnterLobby, &IsReadyToEnterLobby_Parms, NULL );

	return IsReadyToEnterLobby_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.IsReadyToStartMPFlow
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxlobbyflow::IsReadyToStartMPFlow ( )
{
	static UFunction* pFnIsReadyToStartMPFlow = NULL;

	if ( ! pFnIsReadyToStartMPFlow )
		pFnIsReadyToStartMPFlow = (UFunction*) UObject::GObjObjects()->Data[ 111485 ];

	Asfxlobbyflow_execIsReadyToStartMPFlow_Parms IsReadyToStartMPFlow_Parms;

	this->ProcessEvent ( pFnIsReadyToStartMPFlow, &IsReadyToStartMPFlow_Parms, NULL );

	return IsReadyToStartMPFlow_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.IsReadyToSendPlayerDataToServer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Asfxlobbyflow::IsReadyToSendPlayerDataToServer ( )
{
	static UFunction* pFnIsReadyToSendPlayerDataToServer = NULL;

	if ( ! pFnIsReadyToSendPlayerDataToServer )
		pFnIsReadyToSendPlayerDataToServer = (UFunction*) UObject::GObjObjects()->Data[ 111478 ];

	Asfxlobbyflow_execIsReadyToSendPlayerDataToServer_Parms IsReadyToSendPlayerDataToServer_Parms;

	this->ProcessEvent ( pFnIsReadyToSendPlayerDataToServer, &IsReadyToSendPlayerDataToServer_Parms, NULL );

	return IsReadyToSendPlayerDataToServer_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.OnOptionsScreenClosed
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::OnOptionsScreenClosed ( )
{
	static UFunction* pFnOnOptionsScreenClosed = NULL;

	if ( ! pFnOnOptionsScreenClosed )
		pFnOnOptionsScreenClosed = (UFunction*) UObject::GObjObjects()->Data[ 111477 ];

	Asfxlobbyflow_execOnOptionsScreenClosed_Parms OnOptionsScreenClosed_Parms;

	this->ProcessEvent ( pFnOnOptionsScreenClosed, &OnOptionsScreenClosed_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowOptionsScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowOptionsScreen ( )
{
	static UFunction* pFnShowOptionsScreen = NULL;

	if ( ! pFnShowOptionsScreen )
		pFnShowOptionsScreen = (UFunction*) UObject::GObjObjects()->Data[ 110163 ];

	Asfxlobbyflow_execShowOptionsScreen_Parms ShowOptionsScreen_Parms;

	this->ProcessEvent ( pFnShowOptionsScreen, &ShowOptionsScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.OnCloseRevealScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::OnCloseRevealScreen ( )
{
	static UFunction* pFnOnCloseRevealScreen = NULL;

	if ( ! pFnOnCloseRevealScreen )
		pFnOnCloseRevealScreen = (UFunction*) UObject::GObjObjects()->Data[ 111476 ];

	Asfxlobbyflow_execOnCloseRevealScreen_Parms OnCloseRevealScreen_Parms;

	this->ProcessEvent ( pFnOnCloseRevealScreen, &OnCloseRevealScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowReinforcementsRevealScreeen
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bManualReveal                  ( CPF_Parm )

void Asfxlobbyflow::ShowReinforcementsRevealScreeen ( unsigned long bManualReveal )
{
	static UFunction* pFnShowReinforcementsRevealScreeen = NULL;

	if ( ! pFnShowReinforcementsRevealScreeen )
		pFnShowReinforcementsRevealScreeen = (UFunction*) UObject::GObjObjects()->Data[ 111206 ];

	Asfxlobbyflow_execShowReinforcementsRevealScreeen_Parms ShowReinforcementsRevealScreeen_Parms;
	ShowReinforcementsRevealScreeen_Parms.bManualReveal = bManualReveal;

	this->ProcessEvent ( pFnShowReinforcementsRevealScreeen, &ShowReinforcementsRevealScreeen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowMatchConsumablesScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowMatchConsumablesScreen ( )
{
	static UFunction* pFnShowMatchConsumablesScreen = NULL;

	if ( ! pFnShowMatchConsumablesScreen )
		pFnShowMatchConsumablesScreen = (UFunction*) UObject::GObjObjects()->Data[ 110159 ];

	Asfxlobbyflow_execShowMatchConsumablesScreen_Parms ShowMatchConsumablesScreen_Parms;

	this->ProcessEvent ( pFnShowMatchConsumablesScreen, &ShowMatchConsumablesScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowMPAppearanceScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowMPAppearanceScreen ( )
{
	static UFunction* pFnShowMPAppearanceScreen = NULL;

	if ( ! pFnShowMPAppearanceScreen )
		pFnShowMPAppearanceScreen = (UFunction*) UObject::GObjObjects()->Data[ 110157 ];

	Asfxlobbyflow_execShowMPAppearanceScreen_Parms ShowMPAppearanceScreen_Parms;

	this->ProcessEvent ( pFnShowMPAppearanceScreen, &ShowMPAppearanceScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowMPSelectKitScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowMPSelectKitScreen ( )
{
	static UFunction* pFnShowMPSelectKitScreen = NULL;

	if ( ! pFnShowMPSelectKitScreen )
		pFnShowMPSelectKitScreen = (UFunction*) UObject::GObjObjects()->Data[ 110166 ];

	Asfxlobbyflow_execShowMPSelectKitScreen_Parms ShowMPSelectKitScreen_Parms;

	this->ProcessEvent ( pFnShowMPSelectKitScreen, &ShowMPSelectKitScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ExitMultiplayer
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ExitMultiplayer ( )
{
	static UFunction* pFnExitMultiplayer = NULL;

	if ( ! pFnExitMultiplayer )
		pFnExitMultiplayer = (UFunction*) UObject::GObjObjects()->Data[ 110139 ];

	Asfxlobbyflow_execExitMultiplayer_Parms ExitMultiplayer_Parms;

	this->ProcessEvent ( pFnExitMultiplayer, &ExitMultiplayer_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.GoBackToSelectFirstCharacter
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::GoBackToSelectFirstCharacter ( )
{
	static UFunction* pFnGoBackToSelectFirstCharacter = NULL;

	if ( ! pFnGoBackToSelectFirstCharacter )
		pFnGoBackToSelectFirstCharacter = (UFunction*) UObject::GObjObjects()->Data[ 110128 ];

	Asfxlobbyflow_execGoBackToSelectFirstCharacter_Parms GoBackToSelectFirstCharacter_Parms;

	this->ProcessEvent ( pFnGoBackToSelectFirstCharacter, &GoBackToSelectFirstCharacter_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ReturnToMainMenu
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::ReturnToMainMenu ( )
{
	static UFunction* pFnReturnToMainMenu = NULL;

	if ( ! pFnReturnToMainMenu )
		pFnReturnToMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 111472 ];

	Asfxlobbyflow_execReturnToMainMenu_Parms ReturnToMainMenu_Parms;

	this->ProcessEvent ( pFnReturnToMainMenu, &ReturnToMainMenu_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowStoreScreenFromPromotion
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// int                            PromotionalStoreID             ( CPF_OptionalParm | CPF_Parm )

void Asfxlobbyflow::ShowStoreScreenFromPromotion ( int PromotionalStoreID )
{
	static UFunction* pFnShowStoreScreenFromPromotion = NULL;

	if ( ! pFnShowStoreScreenFromPromotion )
		pFnShowStoreScreenFromPromotion = (UFunction*) UObject::GObjObjects()->Data[ 110784 ];

	Asfxlobbyflow_execShowStoreScreenFromPromotion_Parms ShowStoreScreenFromPromotion_Parms;
	ShowStoreScreenFromPromotion_Parms.PromotionalStoreID = PromotionalStoreID;

	this->ProcessEvent ( pFnShowStoreScreenFromPromotion, &ShowStoreScreenFromPromotion_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowPromotionScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowPromotionScreen ( )
{
	static UFunction* pFnShowPromotionScreen = NULL;

	if ( ! pFnShowPromotionScreen )
		pFnShowPromotionScreen = (UFunction*) UObject::GObjObjects()->Data[ 111441 ];

	Asfxlobbyflow_execShowPromotionScreen_Parms ShowPromotionScreen_Parms;

	this->ProcessEvent ( pFnShowPromotionScreen, &ShowPromotionScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.RefreshLobbyStatusBars
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::RefreshLobbyStatusBars ( )
{
	static UFunction* pFnRefreshLobbyStatusBars = NULL;

	if ( ! pFnRefreshLobbyStatusBars )
		pFnRefreshLobbyStatusBars = (UFunction*) UObject::GObjObjects()->Data[ 109215 ];

	Asfxlobbyflow_execRefreshLobbyStatusBars_Parms RefreshLobbyStatusBars_Parms;

	this->ProcessEvent ( pFnRefreshLobbyStatusBars, &RefreshLobbyStatusBars_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.HideLobbyStatusBars
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::HideLobbyStatusBars ( )
{
	static UFunction* pFnHideLobbyStatusBars = NULL;

	if ( ! pFnHideLobbyStatusBars )
		pFnHideLobbyStatusBars = (UFunction*) UObject::GObjObjects()->Data[ 111466 ];

	Asfxlobbyflow_execHideLobbyStatusBars_Parms HideLobbyStatusBars_Parms;

	this->ProcessEvent ( pFnHideLobbyStatusBars, &HideLobbyStatusBars_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowLobbyStatusBars
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowLobbyStatusBars ( )
{
	static UFunction* pFnShowLobbyStatusBars = NULL;

	if ( ! pFnShowLobbyStatusBars )
		pFnShowLobbyStatusBars = (UFunction*) UObject::GObjObjects()->Data[ 111464 ];

	Asfxlobbyflow_execShowLobbyStatusBars_Parms ShowLobbyStatusBars_Parms;

	this->ProcessEvent ( pFnShowLobbyStatusBars, &ShowLobbyStatusBars_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.RefreshLobbyScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::RefreshLobbyScreen ( )
{
	static UFunction* pFnRefreshLobbyScreen = NULL;

	if ( ! pFnRefreshLobbyScreen )
		pFnRefreshLobbyScreen = (UFunction*) UObject::GObjObjects()->Data[ 109214 ];

	Asfxlobbyflow_execRefreshLobbyScreen_Parms RefreshLobbyScreen_Parms;

	this->ProcessEvent ( pFnRefreshLobbyScreen, &RefreshLobbyScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.FinishLeaderboardScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXGUIMovie*            i_ScreenToClose                ( CPF_Parm )

bool Asfxlobbyflow::FinishLeaderboardScreen ( class USFXGUIMovie* i_ScreenToClose )
{
	static UFunction* pFnFinishLeaderboardScreen = NULL;

	if ( ! pFnFinishLeaderboardScreen )
		pFnFinishLeaderboardScreen = (UFunction*) UObject::GObjObjects()->Data[ 111460 ];

	Asfxlobbyflow_execFinishLeaderboardScreen_Parms FinishLeaderboardScreen_Parms;
	FinishLeaderboardScreen_Parms.i_ScreenToClose = i_ScreenToClose;

	this->ProcessEvent ( pFnFinishLeaderboardScreen, &FinishLeaderboardScreen_Parms, NULL );

	return FinishLeaderboardScreen_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.ShowLeaderboardScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowLeaderboardScreen ( )
{
	static UFunction* pFnShowLeaderboardScreen = NULL;

	if ( ! pFnShowLeaderboardScreen )
		pFnShowLeaderboardScreen = (UFunction*) UObject::GObjObjects()->Data[ 110161 ];

	Asfxlobbyflow_execShowLeaderboardScreen_Parms ShowLeaderboardScreen_Parms;

	this->ProcessEvent ( pFnShowLeaderboardScreen, &ShowLeaderboardScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.SetLastSelectedOffer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nOfferID                       ( CPF_Parm )

void Asfxlobbyflow::SetLastSelectedOffer ( int nOfferID )
{
	static UFunction* pFnSetLastSelectedOffer = NULL;

	if ( ! pFnSetLastSelectedOffer )
		pFnSetLastSelectedOffer = (UFunction*) UObject::GObjObjects()->Data[ 111034 ];

	Asfxlobbyflow_execSetLastSelectedOffer_Parms SetLastSelectedOffer_Parms;
	SetLastSelectedOffer_Parms.nOfferID = nOfferID;

	this->ProcessEvent ( pFnSetLastSelectedOffer, &SetLastSelectedOffer_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.FinishStoreScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::FinishStoreScreen ( )
{
	static UFunction* pFnFinishStoreScreen = NULL;

	if ( ! pFnFinishStoreScreen )
		pFnFinishStoreScreen = (UFunction*) UObject::GObjObjects()->Data[ 111046 ];

	Asfxlobbyflow_execFinishStoreScreen_Parms FinishStoreScreen_Parms;

	this->ProcessEvent ( pFnFinishStoreScreen, &FinishStoreScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowStoreScreen
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bProcessPurchases              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSendTelemetry                 ( CPF_OptionalParm | CPF_Parm )

void Asfxlobbyflow::ShowStoreScreen ( unsigned long bProcessPurchases, unsigned long bSendTelemetry )
{
	static UFunction* pFnShowStoreScreen = NULL;

	if ( ! pFnShowStoreScreen )
		pFnShowStoreScreen = (UFunction*) UObject::GObjObjects()->Data[ 110154 ];

	Asfxlobbyflow_execShowStoreScreen_Parms ShowStoreScreen_Parms;
	ShowStoreScreen_Parms.bProcessPurchases = bProcessPurchases;
	ShowStoreScreen_Parms.bSendTelemetry = bSendTelemetry;

	this->ProcessEvent ( pFnShowStoreScreen, &ShowStoreScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.FinishWeaponsScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::FinishWeaponsScreen ( )
{
	static UFunction* pFnFinishWeaponsScreen = NULL;

	if ( ! pFnFinishWeaponsScreen )
		pFnFinishWeaponsScreen = (UFunction*) UObject::GObjObjects()->Data[ 111453 ];

	Asfxlobbyflow_execFinishWeaponsScreen_Parms FinishWeaponsScreen_Parms;

	this->ProcessEvent ( pFnFinishWeaponsScreen, &FinishWeaponsScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowWeaponsScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowWeaponsScreen ( )
{
	static UFunction* pFnShowWeaponsScreen = NULL;

	if ( ! pFnShowWeaponsScreen )
		pFnShowWeaponsScreen = (UFunction*) UObject::GObjObjects()->Data[ 110152 ];

	Asfxlobbyflow_execShowWeaponsScreen_Parms ShowWeaponsScreen_Parms;

	this->ProcessEvent ( pFnShowWeaponsScreen, &ShowWeaponsScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.FinishTalentsLevelUpScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::FinishTalentsLevelUpScreen ( )
{
	static UFunction* pFnFinishTalentsLevelUpScreen = NULL;

	if ( ! pFnFinishTalentsLevelUpScreen )
		pFnFinishTalentsLevelUpScreen = (UFunction*) UObject::GObjObjects()->Data[ 111452 ];

	Asfxlobbyflow_execFinishTalentsLevelUpScreen_Parms FinishTalentsLevelUpScreen_Parms;

	this->ProcessEvent ( pFnFinishTalentsLevelUpScreen, &FinishTalentsLevelUpScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowTalentsLevelUpScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowTalentsLevelUpScreen ( )
{
	static UFunction* pFnShowTalentsLevelUpScreen = NULL;

	if ( ! pFnShowTalentsLevelUpScreen )
		pFnShowTalentsLevelUpScreen = (UFunction*) UObject::GObjObjects()->Data[ 110150 ];

	Asfxlobbyflow_execShowTalentsLevelUpScreen_Parms ShowTalentsLevelUpScreen_Parms;

	this->ProcessEvent ( pFnShowTalentsLevelUpScreen, &ShowTalentsLevelUpScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowMatchSettingsScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowMatchSettingsScreen ( )
{
	static UFunction* pFnShowMatchSettingsScreen = NULL;

	if ( ! pFnShowMatchSettingsScreen )
		pFnShowMatchSettingsScreen = (UFunction*) UObject::GObjObjects()->Data[ 110147 ];

	Asfxlobbyflow_execShowMatchSettingsScreen_Parms ShowMatchSettingsScreen_Parms;

	this->ProcessEvent ( pFnShowMatchSettingsScreen, &ShowMatchSettingsScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.HideCustomMatchScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::HideCustomMatchScreen ( )
{
	static UFunction* pFnHideCustomMatchScreen = NULL;

	if ( ! pFnHideCustomMatchScreen )
		pFnHideCustomMatchScreen = (UFunction*) UObject::GObjObjects()->Data[ 111451 ];

	Asfxlobbyflow_execHideCustomMatchScreen_Parms HideCustomMatchScreen_Parms;

	this->ProcessEvent ( pFnHideCustomMatchScreen, &HideCustomMatchScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowCustomMatchScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowCustomMatchScreen ( )
{
	static UFunction* pFnShowCustomMatchScreen = NULL;

	if ( ! pFnShowCustomMatchScreen )
		pFnShowCustomMatchScreen = (UFunction*) UObject::GObjObjects()->Data[ 110142 ];

	Asfxlobbyflow_execShowCustomMatchScreen_Parms ShowCustomMatchScreen_Parms;

	this->ProcessEvent ( pFnShowCustomMatchScreen, &ShowCustomMatchScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowHostNewMissionScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowHostNewMissionScreen ( )
{
	static UFunction* pFnShowHostNewMissionScreen = NULL;

	if ( ! pFnShowHostNewMissionScreen )
		pFnShowHostNewMissionScreen = (UFunction*) UObject::GObjObjects()->Data[ 110144 ];

	Asfxlobbyflow_execShowHostNewMissionScreen_Parms ShowHostNewMissionScreen_Parms;

	this->ProcessEvent ( pFnShowHostNewMissionScreen, &ShowHostNewMissionScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.HideSelectKitScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::HideSelectKitScreen ( )
{
	static UFunction* pFnHideSelectKitScreen = NULL;

	if ( ! pFnHideSelectKitScreen )
		pFnHideSelectKitScreen = (UFunction*) UObject::GObjObjects()->Data[ 111450 ];

	Asfxlobbyflow_execHideSelectKitScreen_Parms HideSelectKitScreen_Parms;

	this->ProcessEvent ( pFnHideSelectKitScreen, &HideSelectKitScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.HideMatchResultsScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::HideMatchResultsScreen ( )
{
	static UFunction* pFnHideMatchResultsScreen = NULL;

	if ( ! pFnHideMatchResultsScreen )
		pFnHideMatchResultsScreen = (UFunction*) UObject::GObjObjects()->Data[ 111449 ];

	Asfxlobbyflow_execHideMatchResultsScreen_Parms HideMatchResultsScreen_Parms;

	this->ProcessEvent ( pFnHideMatchResultsScreen, &HideMatchResultsScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowMatchResultsScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowMatchResultsScreen ( )
{
	static UFunction* pFnShowMatchResultsScreen = NULL;

	if ( ! pFnShowMatchResultsScreen )
		pFnShowMatchResultsScreen = (UFunction*) UObject::GObjObjects()->Data[ 111448 ];

	Asfxlobbyflow_execShowMatchResultsScreen_Parms ShowMatchResultsScreen_Parms;

	this->ProcessEvent ( pFnShowMatchResultsScreen, &ShowMatchResultsScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.HideLobbyScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::HideLobbyScreen ( )
{
	static UFunction* pFnHideLobbyScreen = NULL;

	if ( ! pFnHideLobbyScreen )
		pFnHideLobbyScreen = (UFunction*) UObject::GObjObjects()->Data[ 111447 ];

	Asfxlobbyflow_execHideLobbyScreen_Parms HideLobbyScreen_Parms;

	this->ProcessEvent ( pFnHideLobbyScreen, &HideLobbyScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowLobbyScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowLobbyScreen ( )
{
	static UFunction* pFnShowLobbyScreen = NULL;

	if ( ! pFnShowLobbyScreen )
		pFnShowLobbyScreen = (UFunction*) UObject::GObjObjects()->Data[ 110467 ];

	Asfxlobbyflow_execShowLobbyScreen_Parms ShowLobbyScreen_Parms;

	this->ProcessEvent ( pFnShowLobbyScreen, &ShowLobbyScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.HideMultiplayerMenu
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::HideMultiplayerMenu ( )
{
	static UFunction* pFnHideMultiplayerMenu = NULL;

	if ( ! pFnHideMultiplayerMenu )
		pFnHideMultiplayerMenu = (UFunction*) UObject::GObjObjects()->Data[ 111446 ];

	Asfxlobbyflow_execHideMultiplayerMenu_Parms HideMultiplayerMenu_Parms;

	this->ProcessEvent ( pFnHideMultiplayerMenu, &HideMultiplayerMenu_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ShowMultiplayerMenu
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::ShowMultiplayerMenu ( )
{
	static UFunction* pFnShowMultiplayerMenu = NULL;

	if ( ! pFnShowMultiplayerMenu )
		pFnShowMultiplayerMenu = (UFunction*) UObject::GObjObjects()->Data[ 111444 ];

	Asfxlobbyflow_execShowMultiplayerMenu_Parms ShowMultiplayerMenu_Parms;

	this->ProcessEvent ( pFnShowMultiplayerMenu, &ShowMultiplayerMenu_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.FinishMatchResults
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::FinishMatchResults ( )
{
	static UFunction* pFnFinishMatchResults = NULL;

	if ( ! pFnFinishMatchResults )
		pFnFinishMatchResults = (UFunction*) UObject::GObjObjects()->Data[ 111443 ];

	Asfxlobbyflow_execFinishMatchResults_Parms FinishMatchResults_Parms;

	this->ProcessEvent ( pFnFinishMatchResults, &FinishMatchResults_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ServerRestartPlayer
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::ServerRestartPlayer ( )
{
	static UFunction* pFnServerRestartPlayer = NULL;

	if ( ! pFnServerRestartPlayer )
		pFnServerRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 111442 ];

	Asfxlobbyflow_execServerRestartPlayer_Parms ServerRestartPlayer_Parms;

	this->ProcessEvent ( pFnServerRestartPlayer, &ServerRestartPlayer_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.EnterLobby
// [0x00020002] 
// Parameters infos:

void Asfxlobbyflow::EnterLobby ( )
{
	static UFunction* pFnEnterLobby = NULL;

	if ( ! pFnEnterLobby )
		pFnEnterLobby = (UFunction*) UObject::GObjObjects()->Data[ 111430 ];

	Asfxlobbyflow_execEnterLobby_Parms EnterLobby_Parms;

	this->ProcessEvent ( pFnEnterLobby, &EnterLobby_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.StartMPFlow
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Asfxlobbyflow::StartMPFlow ( )
{
	static UFunction* pFnStartMPFlow = NULL;

	if ( ! pFnStartMPFlow )
		pFnStartMPFlow = (UFunction*) UObject::GObjObjects()->Data[ 111426 ];

	Asfxlobbyflow_execStartMPFlow_Parms StartMPFlow_Parms;

	this->ProcessEvent ( pFnStartMPFlow, &StartMPFlow_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.RestoreLocalPRIMatchConsumablesFromOfflineTransfer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class Asfxpri*                 PRI                            ( CPF_Parm )

void Asfxlobbyflow::RestoreLocalPRIMatchConsumablesFromOfflineTransfer ( class Asfxpri* PRI )
{
	static UFunction* pFnRestoreLocalPRIMatchConsumablesFromOfflineTransfer = NULL;

	if ( ! pFnRestoreLocalPRIMatchConsumablesFromOfflineTransfer )
		pFnRestoreLocalPRIMatchConsumablesFromOfflineTransfer = (UFunction*) UObject::GObjObjects()->Data[ 111415 ];

	Asfxlobbyflow_execRestoreLocalPRIMatchConsumablesFromOfflineTransfer_Parms RestoreLocalPRIMatchConsumablesFromOfflineTransfer_Parms;
	RestoreLocalPRIMatchConsumablesFromOfflineTransfer_Parms.PRI = PRI;

	this->ProcessEvent ( pFnRestoreLocalPRIMatchConsumablesFromOfflineTransfer, &RestoreLocalPRIMatchConsumablesFromOfflineTransfer_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.ClearCrossLevelReferences
// [0x00020000] 
// Parameters infos:

void Asfxlobbyflow::ClearCrossLevelReferences ( )
{
	static UFunction* pFnClearCrossLevelReferences = NULL;

	if ( ! pFnClearCrossLevelReferences )
		pFnClearCrossLevelReferences = (UFunction*) UObject::GObjObjects()->Data[ 111414 ];

	Asfxlobbyflow_execClearCrossLevelReferences_Parms ClearCrossLevelReferences_Parms;

	this->ProcessEvent ( pFnClearCrossLevelReferences, &ClearCrossLevelReferences_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Asfxlobbyflow::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 111413 ];

	Asfxlobbyflow_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function sfxgamempcontent.sfxlobbyflow.GetLobbyGRI
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class Asfxgrimp_lobby*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class Asfxgrimp_lobby* Asfxlobbyflow::GetLobbyGRI ( )
{
	static UFunction* pFnGetLobbyGRI = NULL;

	if ( ! pFnGetLobbyGRI )
		pFnGetLobbyGRI = (UFunction*) UObject::GObjObjects()->Data[ 111032 ];

	Asfxlobbyflow_execGetLobbyGRI_Parms GetLobbyGRI_Parms;

	this->ProcessEvent ( pFnGetLobbyGRI, &GetLobbyGRI_Parms, NULL );

	return GetLobbyGRI_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.GetPRI
// [0x00020102] 
// Parameters infos:
// class Asfxprimp*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class Asfxprimp* Asfxlobbyflow::GetPRI ( )
{
	static UFunction* pFnGetPRI = NULL;

	if ( ! pFnGetPRI )
		pFnGetPRI = (UFunction*) UObject::GObjObjects()->Data[ 111410 ];

	Asfxlobbyflow_execGetPRI_Parms GetPRI_Parms;

	this->ProcessEvent ( pFnGetPRI, &GetPRI_Parms, NULL );

	return GetPRI_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxlobbyflow.GetPC
// [0x00020102] 
// Parameters infos:
// class Asfxplayercontrollermp*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class Asfxplayercontrollermp* Asfxlobbyflow::GetPC ( )
{
	static UFunction* pFnGetPC = NULL;

	if ( ! pFnGetPC )
		pFnGetPC = (UFunction*) UObject::GObjObjects()->Data[ 111407 ];

	Asfxlobbyflow_execGetPC_Parms GetPC_Parms;

	this->ProcessEvent ( pFnGetPC, &GetPC_Parms, NULL );

	return GetPC_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavemanager_horde.GenerateEnemySpawnPointList
// [0x00020002] 
// Parameters infos:

void Asfxwavemanager_horde::GenerateEnemySpawnPointList ( )
{
	static UFunction* pFnGenerateEnemySpawnPointList = NULL;

	if ( ! pFnGenerateEnemySpawnPointList )
		pFnGenerateEnemySpawnPointList = (UFunction*) UObject::GObjObjects()->Data[ 113510 ];

	Asfxwavemanager_horde_execGenerateEnemySpawnPointList_Parms GenerateEnemySpawnPointList_Parms;

	this->ProcessEvent ( pFnGenerateEnemySpawnPointList, &GenerateEnemySpawnPointList_Parms, NULL );
};

// Function sfxgamempcontent.sfxwavemanager_horde.WavePointsForRound
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Round                          ( CPF_Parm )

int Asfxwavemanager_horde::WavePointsForRound ( int Round )
{
	static UFunction* pFnWavePointsForRound = NULL;

	if ( ! pFnWavePointsForRound )
		pFnWavePointsForRound = (UFunction*) UObject::GObjObjects()->Data[ 113504 ];

	Asfxwavemanager_horde_execWavePointsForRound_Parms WavePointsForRound_Parms;
	WavePointsForRound_Parms.Round = Round;

	this->ProcessEvent ( pFnWavePointsForRound, &WavePointsForRound_Parms, NULL );

	return WavePointsForRound_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavemanager_horde.HordeWaveSort
// [0x00120102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 A                              ( CPF_Parm )
// class UObject*                 B                              ( CPF_Parm )

int Asfxwavemanager_horde::HordeWaveSort ( class UObject* A, class UObject* B )
{
	static UFunction* pFnHordeWaveSort = NULL;

	if ( ! pFnHordeWaveSort )
		pFnHordeWaveSort = (UFunction*) UObject::GObjObjects()->Data[ 113500 ];

	Asfxwavemanager_horde_execHordeWaveSort_Parms HordeWaveSort_Parms;
	HordeWaveSort_Parms.A = A;
	HordeWaveSort_Parms.B = B;

	this->ProcessEvent ( pFnHordeWaveSort, &HordeWaveSort_Parms, NULL );

	return HordeWaveSort_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavemanager_horde.GetWaveIndex
// [0x00024002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            WaveIndex                      ( CPF_OptionalParm | CPF_Parm )
// struct FString                 WaveString                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

int Asfxwavemanager_horde::GetWaveIndex ( int WaveIndex, struct FString WaveString )
{
	static UFunction* pFnGetWaveIndex = NULL;

	if ( ! pFnGetWaveIndex )
		pFnGetWaveIndex = (UFunction*) UObject::GObjObjects()->Data[ 113380 ];

	Asfxwavemanager_horde_execGetWaveIndex_Parms GetWaveIndex_Parms;
	GetWaveIndex_Parms.WaveIndex = WaveIndex;
	memcpy ( &GetWaveIndex_Parms.WaveString, &WaveString, 0xC );

	this->ProcessEvent ( pFnGetWaveIndex, &GetWaveIndex_Parms, NULL );

	return GetWaveIndex_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavemanager_horde.SelectWaveType
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* Asfxwavemanager_horde::SelectWaveType ( )
{
	static UFunction* pFnSelectWaveType = NULL;

	if ( ! pFnSelectWaveType )
		pFnSelectWaveType = (UFunction*) UObject::GObjObjects()->Data[ 113491 ];

	Asfxwavemanager_horde_execSelectWaveType_Parms SelectWaveType_Parms;

	this->ProcessEvent ( pFnSelectWaveType, &SelectWaveType_Parms, NULL );

	return SelectWaveType_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxwavemanager_horde.GeneratePotentialWaveList
// [0x00024102] 
// Parameters infos:
// class UClass*                  SpecifiedWaveType              ( CPF_OptionalParm | CPF_Parm )

void Asfxwavemanager_horde::GeneratePotentialWaveList ( class UClass* SpecifiedWaveType )
{
	static UFunction* pFnGeneratePotentialWaveList = NULL;

	if ( ! pFnGeneratePotentialWaveList )
		pFnGeneratePotentialWaveList = (UFunction*) UObject::GObjObjects()->Data[ 113483 ];

	Asfxwavemanager_horde_execGeneratePotentialWaveList_Parms GeneratePotentialWaveList_Parms;
	GeneratePotentialWaveList_Parms.SpecifiedWaveType = SpecifiedWaveType;

	this->ProcessEvent ( pFnGeneratePotentialWaveList, &GeneratePotentialWaveList_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.IsChallengeSystemEnabled
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::IsChallengeSystemEnabled ( )
{
	static UFunction* pFnIsChallengeSystemEnabled = NULL;

	if ( ! pFnIsChallengeSystemEnabled )
		pFnIsChallengeSystemEnabled = (UFunction*) UObject::GObjObjects()->Data[ 110280 ];

	Usfxgui_mplobby_execIsChallengeSystemEnabled_Parms IsChallengeSystemEnabled_Parms;

	this->ProcessEvent ( pFnIsChallengeSystemEnabled, &IsChallengeSystemEnabled_Parms, NULL );

	return IsChallengeSystemEnabled_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.ShowMPChallengeScreen
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ShowMPChallengeScreen ( )
{
	static UFunction* pFnShowMPChallengeScreen = NULL;

	if ( ! pFnShowMPChallengeScreen )
		pFnShowMPChallengeScreen = (UFunction*) UObject::GObjObjects()->Data[ 110288 ];

	Usfxgui_mplobby_execShowMPChallengeScreen_Parms ShowMPChallengeScreen_Parms;

	this->ProcessEvent ( pFnShowMPChallengeScreen, &ShowMPChallengeScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.OnRequestImageComplete
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FSFXOnlineImageRequest  ImageRequestResult             ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mplobby::OnRequestImageComplete ( struct FSFXOnlineImageRequest ImageRequestResult )
{
	static UFunction* pFnOnRequestImageComplete = NULL;

	if ( ! pFnOnRequestImageComplete )
		pFnOnRequestImageComplete = (UFunction*) UObject::GObjObjects()->Data[ 110290 ];

	Usfxgui_mplobby_execOnRequestImageComplete_Parms OnRequestImageComplete_Parms;
	memcpy ( &OnRequestImageComplete_Parms.ImageRequestResult, &ImageRequestResult, 0x18 );

	this->ProcessEvent ( pFnOnRequestImageComplete, &OnRequestImageComplete_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.RequestImage
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Resource                       ( CPF_Parm | CPF_NeedCtorLink )

struct FString Usfxgui_mplobby::RequestImage ( struct FString Resource )
{
	static UFunction* pFnRequestImage = NULL;

	if ( ! pFnRequestImage )
		pFnRequestImage = (UFunction*) UObject::GObjObjects()->Data[ 110293 ];

	Usfxgui_mplobby_execRequestImage_Parms RequestImage_Parms;
	memcpy ( &RequestImage_Parms.Resource, &Resource, 0xC );

	this->ProcessEvent ( pFnRequestImage, &RequestImage_Parms, NULL );

	return RequestImage_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetEmblemData
// [0x00020002] 
// Parameters infos:
// struct FEmblemDisplayInfo      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            EmblemID                       ( CPF_Parm )

struct FEmblemDisplayInfo Usfxgui_mplobby::GetEmblemData ( int EmblemID )
{
	static UFunction* pFnGetEmblemData = NULL;

	if ( ! pFnGetEmblemData )
		pFnGetEmblemData = (UFunction*) UObject::GObjObjects()->Data[ 110296 ];

	Usfxgui_mplobby_execGetEmblemData_Parms GetEmblemData_Parms;
	GetEmblemData_Parms.EmblemID = EmblemID;

	this->ProcessEvent ( pFnGetEmblemData, &GetEmblemData_Parms, NULL );

	return GetEmblemData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.CheckIfSignedInFailSafe
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::CheckIfSignedInFailSafe ( )
{
	static UFunction* pFnCheckIfSignedInFailSafe = NULL;

	if ( ! pFnCheckIfSignedInFailSafe )
		pFnCheckIfSignedInFailSafe = (UFunction*) UObject::GObjObjects()->Data[ 110141 ];

	Usfxgui_mplobby_execCheckIfSignedInFailSafe_Parms CheckIfSignedInFailSafe_Parms;

	this->ProcessEvent ( pFnCheckIfSignedInFailSafe, &CheckIfSignedInFailSafe_Parms, NULL );

	return CheckIfSignedInFailSafe_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetGAWZoneBonusText
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            MapId                          ( CPF_Parm )

struct FString Usfxgui_mplobby::GetGAWZoneBonusText ( int MapId )
{
	static UFunction* pFnGetGAWZoneBonusText = NULL;

	if ( ! pFnGetGAWZoneBonusText )
		pFnGetGAWZoneBonusText = (UFunction*) UObject::GObjObjects()->Data[ 110262 ];

	Usfxgui_mplobby_execGetGAWZoneBonusText_Parms GetGAWZoneBonusText_Parms;
	GetGAWZoneBonusText_Parms.MapId = MapId;

	this->ProcessEvent ( pFnGetGAWZoneBonusText, &GetGAWZoneBonusText_Parms, NULL );

	return GetGAWZoneBonusText_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.CameFromSelectFirstCharacter
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::CameFromSelectFirstCharacter ( )
{
	static UFunction* pFnCameFromSelectFirstCharacter = NULL;

	if ( ! pFnCameFromSelectFirstCharacter )
		pFnCameFromSelectFirstCharacter = (UFunction*) UObject::GObjObjects()->Data[ 110259 ];

	Usfxgui_mplobby_execCameFromSelectFirstCharacter_Parms CameFromSelectFirstCharacter_Parms;

	this->ProcessEvent ( pFnCameFromSelectFirstCharacter, &CameFromSelectFirstCharacter_Parms, NULL );

	return CameFromSelectFirstCharacter_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.ViewInvitations
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ViewInvitations ( )
{
	static UFunction* pFnViewInvitations = NULL;

	if ( ! pFnViewInvitations )
		pFnViewInvitations = (UFunction*) UObject::GObjObjects()->Data[ 110257 ];

	Usfxgui_mplobby_execViewInvitations_Parms ViewInvitations_Parms;

	this->ProcessEvent ( pFnViewInvitations, &ViewInvitations_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.GetMapZoneID
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )

int Usfxgui_mplobby::GetMapZoneID ( struct FString MapName )
{
	static UFunction* pFnGetMapZoneID = NULL;

	if ( ! pFnGetMapZoneID )
		pFnGetMapZoneID = (UFunction*) UObject::GObjObjects()->Data[ 110250 ];

	Usfxgui_mplobby_execGetMapZoneID_Parms GetMapZoneID_Parms;
	memcpy ( &GetMapZoneID_Parms.MapName, &MapName, 0xC );

	this->ProcessEvent ( pFnGetMapZoneID, &GetMapZoneID_Parms, NULL );

	return GetMapZoneID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetFormattedReadinessPercentage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nReadiness                     ( CPF_Parm )

struct FString Usfxgui_mplobby::GetFormattedReadinessPercentage ( int nReadiness )
{
	static UFunction* pFnGetFormattedReadinessPercentage = NULL;

	if ( ! pFnGetFormattedReadinessPercentage )
		pFnGetFormattedReadinessPercentage = (UFunction*) UObject::GObjObjects()->Data[ 110245 ];

	Usfxgui_mplobby_execGetFormattedReadinessPercentage_Parms GetFormattedReadinessPercentage_Parms;
	GetFormattedReadinessPercentage_Parms.nReadiness = nReadiness;

	this->ProcessEvent ( pFnGetFormattedReadinessPercentage, &GetFormattedReadinessPercentage_Parms, NULL );

	return GetFormattedReadinessPercentage_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.ShouldShowChatDisabledMessage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::ShouldShowChatDisabledMessage ( )
{
	static UFunction* pFnShouldShowChatDisabledMessage = NULL;

	if ( ! pFnShouldShowChatDisabledMessage )
		pFnShouldShowChatDisabledMessage = (UFunction*) UObject::GObjObjects()->Data[ 110241 ];

	Usfxgui_mplobby_execShouldShowChatDisabledMessage_Parms ShouldShowChatDisabledMessage_Parms;

	this->ProcessEvent ( pFnShouldShowChatDisabledMessage, &ShouldShowChatDisabledMessage_Parms, NULL );

	return ShouldShowChatDisabledMessage_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.PreloadLobbyImages
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::PreloadLobbyImages ( )
{
	static UFunction* pFnPreloadLobbyImages = NULL;

	if ( ! pFnPreloadLobbyImages )
		pFnPreloadLobbyImages = (UFunction*) UObject::GObjObjects()->Data[ 109894 ];

	Usfxgui_mplobby_execPreloadLobbyImages_Parms PreloadLobbyImages_Parms;

	this->ProcessEvent ( pFnPreloadLobbyImages, &PreloadLobbyImages_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.IsHostingNewMission
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::IsHostingNewMission ( )
{
	static UFunction* pFnIsHostingNewMission = NULL;

	if ( ! pFnIsHostingNewMission )
		pFnIsHostingNewMission = (UFunction*) UObject::GObjObjects()->Data[ 110226 ];

	Usfxgui_mplobby_execIsHostingNewMission_Parms IsHostingNewMission_Parms;

	this->ProcessEvent ( pFnIsHostingNewMission, &IsHostingNewMission_Parms, NULL );

	return IsHostingNewMission_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetMaxActiveConsumables
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mplobby::GetMaxActiveConsumables ( )
{
	static UFunction* pFnGetMaxActiveConsumables = NULL;

	if ( ! pFnGetMaxActiveConsumables )
		pFnGetMaxActiveConsumables = (UFunction*) UObject::GObjObjects()->Data[ 110223 ];

	Usfxgui_mplobby_execGetMaxActiveConsumables_Parms GetMaxActiveConsumables_Parms;

	this->ProcessEvent ( pFnGetMaxActiveConsumables, &GetMaxActiveConsumables_Parms, NULL );

	return GetMaxActiveConsumables_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetEnemyBonusText
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            EnemyIndex                     ( CPF_Parm )
// unsigned long                  UseXP                          ( CPF_Parm )

struct FString Usfxgui_mplobby::GetEnemyBonusText ( int EnemyIndex, unsigned long UseXP )
{
	static UFunction* pFnGetEnemyBonusText = NULL;

	if ( ! pFnGetEnemyBonusText )
		pFnGetEnemyBonusText = (UFunction*) UObject::GObjObjects()->Data[ 110225 ];

	Usfxgui_mplobby_execGetEnemyBonusText_Parms GetEnemyBonusText_Parms;
	GetEnemyBonusText_Parms.EnemyIndex = EnemyIndex;
	GetEnemyBonusText_Parms.UseXP = UseXP;

	this->ProcessEvent ( pFnGetEnemyBonusText, &GetEnemyBonusText_Parms, NULL );

	return GetEnemyBonusText_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetMapBonusText
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            MapIndex                       ( CPF_Parm )
// unsigned long                  UseXP                          ( CPF_Parm )

struct FString Usfxgui_mplobby::GetMapBonusText ( int MapIndex, unsigned long UseXP )
{
	static UFunction* pFnGetMapBonusText = NULL;

	if ( ! pFnGetMapBonusText )
		pFnGetMapBonusText = (UFunction*) UObject::GObjObjects()->Data[ 110311 ];

	Usfxgui_mplobby_execGetMapBonusText_Parms GetMapBonusText_Parms;
	GetMapBonusText_Parms.MapIndex = MapIndex;
	GetMapBonusText_Parms.UseXP = UseXP;

	this->ProcessEvent ( pFnGetMapBonusText, &GetMapBonusText_Parms, NULL );

	return GetMapBonusText_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetRandomEnemyBonusText
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mplobby::GetRandomEnemyBonusText ( )
{
	static UFunction* pFnGetRandomEnemyBonusText = NULL;

	if ( ! pFnGetRandomEnemyBonusText )
		pFnGetRandomEnemyBonusText = (UFunction*) UObject::GObjObjects()->Data[ 110221 ];

	Usfxgui_mplobby_execGetRandomEnemyBonusText_Parms GetRandomEnemyBonusText_Parms;

	this->ProcessEvent ( pFnGetRandomEnemyBonusText, &GetRandomEnemyBonusText_Parms, NULL );

	return GetRandomEnemyBonusText_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetRandomMapBonusText
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mplobby::GetRandomMapBonusText ( )
{
	static UFunction* pFnGetRandomMapBonusText = NULL;

	if ( ! pFnGetRandomMapBonusText )
		pFnGetRandomMapBonusText = (UFunction*) UObject::GObjObjects()->Data[ 110219 ];

	Usfxgui_mplobby_execGetRandomMapBonusText_Parms GetRandomMapBonusText_Parms;

	this->ProcessEvent ( pFnGetRandomMapBonusText, &GetRandomMapBonusText_Parms, NULL );

	return GetRandomMapBonusText_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.ChangeMapMusic
// [0x00020002] 
// Parameters infos:
// int                            nMapId                         ( CPF_Parm )

void Usfxgui_mplobby::ChangeMapMusic ( int nMapId )
{
	static UFunction* pFnChangeMapMusic = NULL;

	if ( ! pFnChangeMapMusic )
		pFnChangeMapMusic = (UFunction*) UObject::GObjObjects()->Data[ 110217 ];

	Usfxgui_mplobby_execChangeMapMusic_Parms ChangeMapMusic_Parms;
	ChangeMapMusic_Parms.nMapId = nMapId;

	this->ProcessEvent ( pFnChangeMapMusic, &ChangeMapMusic_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.VoteToKickPlayerInSlot
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            SlotIndex                      ( CPF_Parm )
// unsigned long                  bKick                          ( CPF_Parm )

void Usfxgui_mplobby::VoteToKickPlayerInSlot ( int SlotIndex, unsigned long bKick )
{
	static UFunction* pFnVoteToKickPlayerInSlot = NULL;

	if ( ! pFnVoteToKickPlayerInSlot )
		pFnVoteToKickPlayerInSlot = (UFunction*) UObject::GObjObjects()->Data[ 110212 ];

	Usfxgui_mplobby_execVoteToKickPlayerInSlot_Parms VoteToKickPlayerInSlot_Parms;
	VoteToKickPlayerInSlot_Parms.SlotIndex = SlotIndex;
	VoteToKickPlayerInSlot_Parms.bKick = bKick;

	this->ProcessEvent ( pFnVoteToKickPlayerInSlot, &VoteToKickPlayerInSlot_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.HasVotedToKickPlayerInSlot
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIndex                      ( CPF_Parm )

bool Usfxgui_mplobby::HasVotedToKickPlayerInSlot ( int SlotIndex )
{
	static UFunction* pFnHasVotedToKickPlayerInSlot = NULL;

	if ( ! pFnHasVotedToKickPlayerInSlot )
		pFnHasVotedToKickPlayerInSlot = (UFunction*) UObject::GObjObjects()->Data[ 110207 ];

	Usfxgui_mplobby_execHasVotedToKickPlayerInSlot_Parms HasVotedToKickPlayerInSlot_Parms;
	HasVotedToKickPlayerInSlot_Parms.SlotIndex = SlotIndex;

	this->ProcessEvent ( pFnHasVotedToKickPlayerInSlot, &HasVotedToKickPlayerInSlot_Parms, NULL );

	return HasVotedToKickPlayerInSlot_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.ClearAllNewWeaponNotifications
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ClearAllNewWeaponNotifications ( )
{
	static UFunction* pFnClearAllNewWeaponNotifications = NULL;

	if ( ! pFnClearAllNewWeaponNotifications )
		pFnClearAllNewWeaponNotifications = (UFunction*) UObject::GObjObjects()->Data[ 109899 ];

	Usfxgui_mplobby_execClearAllNewWeaponNotifications_Parms ClearAllNewWeaponNotifications_Parms;

	this->ProcessEvent ( pFnClearAllNewWeaponNotifications, &ClearAllNewWeaponNotifications_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.CanAffordNewStoreItems
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::CanAffordNewStoreItems ( )
{
	static UFunction* pFnCanAffordNewStoreItems = NULL;

	if ( ! pFnCanAffordNewStoreItems )
		pFnCanAffordNewStoreItems = (UFunction*) UObject::GObjObjects()->Data[ 110202 ];

	Usfxgui_mplobby_execCanAffordNewStoreItems_Parms CanAffordNewStoreItems_Parms;

	this->ProcessEvent ( pFnCanAffordNewStoreItems, &CanAffordNewStoreItems_Parms, NULL );

	return CanAffordNewStoreItems_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.HasNewMatchConsumables
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::HasNewMatchConsumables ( )
{
	static UFunction* pFnHasNewMatchConsumables = NULL;

	if ( ! pFnHasNewMatchConsumables )
		pFnHasNewMatchConsumables = (UFunction*) UObject::GObjObjects()->Data[ 110199 ];

	Usfxgui_mplobby_execHasNewMatchConsumables_Parms HasNewMatchConsumables_Parms;

	this->ProcessEvent ( pFnHasNewMatchConsumables, &HasNewMatchConsumables_Parms, NULL );

	return HasNewMatchConsumables_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.HasNewAppearanceOptions
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::HasNewAppearanceOptions ( )
{
	static UFunction* pFnHasNewAppearanceOptions = NULL;

	if ( ! pFnHasNewAppearanceOptions )
		pFnHasNewAppearanceOptions = (UFunction*) UObject::GObjObjects()->Data[ 110195 ];

	Usfxgui_mplobby_execHasNewAppearanceOptions_Parms HasNewAppearanceOptions_Parms;

	this->ProcessEvent ( pFnHasNewAppearanceOptions, &HasNewAppearanceOptions_Parms, NULL );

	return HasNewAppearanceOptions_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.HasNewWeapons
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::HasNewWeapons ( )
{
	static UFunction* pFnHasNewWeapons = NULL;

	if ( ! pFnHasNewWeapons )
		pFnHasNewWeapons = (UFunction*) UObject::GObjObjects()->Data[ 110191 ];

	Usfxgui_mplobby_execHasNewWeapons_Parms HasNewWeapons_Parms;

	this->ProcessEvent ( pFnHasNewWeapons, &HasNewWeapons_Parms, NULL );

	return HasNewWeapons_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.ToggleMuteForSlot
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            SlotIndex                      ( CPF_Parm )

void Usfxgui_mplobby::ToggleMuteForSlot ( int SlotIndex )
{
	static UFunction* pFnToggleMuteForSlot = NULL;

	if ( ! pFnToggleMuteForSlot )
		pFnToggleMuteForSlot = (UFunction*) UObject::GObjObjects()->Data[ 110186 ];

	Usfxgui_mplobby_execToggleMuteForSlot_Parms ToggleMuteForSlot_Parms;
	ToggleMuteForSlot_Parms.SlotIndex = SlotIndex;

	this->ProcessEvent ( pFnToggleMuteForSlot, &ToggleMuteForSlot_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.SetPreviouslySelectedItem
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            Subscreen                      ( CPF_Parm )
// int                            ItemIndex                      ( CPF_Parm )

void Usfxgui_mplobby::SetPreviouslySelectedItem ( int Subscreen, int ItemIndex )
{
	static UFunction* pFnSetPreviouslySelectedItem = NULL;

	if ( ! pFnSetPreviouslySelectedItem )
		pFnSetPreviouslySelectedItem = (UFunction*) UObject::GObjObjects()->Data[ 110183 ];

	Usfxgui_mplobby_execSetPreviouslySelectedItem_Parms SetPreviouslySelectedItem_Parms;
	SetPreviouslySelectedItem_Parms.Subscreen = Subscreen;
	SetPreviouslySelectedItem_Parms.ItemIndex = ItemIndex;

	this->ProcessEvent ( pFnSetPreviouslySelectedItem, &SetPreviouslySelectedItem_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.GetPreviouslySelectedItem
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Subscreen                      ( CPF_Parm )

int Usfxgui_mplobby::GetPreviouslySelectedItem ( int Subscreen )
{
	static UFunction* pFnGetPreviouslySelectedItem = NULL;

	if ( ! pFnGetPreviouslySelectedItem )
		pFnGetPreviouslySelectedItem = (UFunction*) UObject::GObjObjects()->Data[ 110179 ];

	Usfxgui_mplobby_execGetPreviouslySelectedItem_Parms GetPreviouslySelectedItem_Parms;
	GetPreviouslySelectedItem_Parms.Subscreen = Subscreen;

	this->ProcessEvent ( pFnGetPreviouslySelectedItem, &GetPreviouslySelectedItem_Parms, NULL );

	return GetPreviouslySelectedItem_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.CancelMatchSettings
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::CancelMatchSettings ( )
{
	static UFunction* pFnCancelMatchSettings = NULL;

	if ( ! pFnCancelMatchSettings )
		pFnCancelMatchSettings = (UFunction*) UObject::GObjObjects()->Data[ 110178 ];

	Usfxgui_mplobby_execCancelMatchSettings_Parms CancelMatchSettings_Parms;

	this->ProcessEvent ( pFnCancelMatchSettings, &CancelMatchSettings_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ChangeMatchSettings
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ChangeMatchSettings ( )
{
	static UFunction* pFnChangeMatchSettings = NULL;

	if ( ! pFnChangeMatchSettings )
		pFnChangeMatchSettings = (UFunction*) UObject::GObjObjects()->Data[ 110170 ];

	Usfxgui_mplobby_execChangeMatchSettings_Parms ChangeMatchSettings_Parms;

	this->ProcessEvent ( pFnChangeMatchSettings, &ChangeMatchSettings_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.GetCredits
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mplobby::GetCredits ( )
{
	static UFunction* pFnGetCredits = NULL;

	if ( ! pFnGetCredits )
		pFnGetCredits = (UFunction*) UObject::GObjObjects()->Data[ 110168 ];

	Usfxgui_mplobby_execGetCredits_Parms GetCredits_Parms;

	this->ProcessEvent ( pFnGetCredits, &GetCredits_Parms, NULL );

	return GetCredits_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.QuickMatch
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::QuickMatch ( )
{
	static UFunction* pFnQuickMatch = NULL;

	if ( ! pFnQuickMatch )
		pFnQuickMatch = (UFunction*) UObject::GObjObjects()->Data[ 110167 ];

	Usfxgui_mplobby_execQuickMatch_Parms QuickMatch_Parms;

	this->ProcessEvent ( pFnQuickMatch, &QuickMatch_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.SwitchCharacter
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::SwitchCharacter ( )
{
	static UFunction* pFnSwitchCharacter = NULL;

	if ( ! pFnSwitchCharacter )
		pFnSwitchCharacter = (UFunction*) UObject::GObjObjects()->Data[ 110164 ];

	Usfxgui_mplobby_execSwitchCharacter_Parms SwitchCharacter_Parms;

	this->ProcessEvent ( pFnSwitchCharacter, &SwitchCharacter_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ShowOptionsScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ShowOptionsScreen ( )
{
	static UFunction* pFnShowOptionsScreen = NULL;

	if ( ! pFnShowOptionsScreen )
		pFnShowOptionsScreen = (UFunction*) UObject::GObjObjects()->Data[ 110162 ];

	Usfxgui_mplobby_execShowOptionsScreen_Parms ShowOptionsScreen_Parms;

	this->ProcessEvent ( pFnShowOptionsScreen, &ShowOptionsScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ShowLeaderboardScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ShowLeaderboardScreen ( )
{
	static UFunction* pFnShowLeaderboardScreen = NULL;

	if ( ! pFnShowLeaderboardScreen )
		pFnShowLeaderboardScreen = (UFunction*) UObject::GObjObjects()->Data[ 110160 ];

	Usfxgui_mplobby_execShowLeaderboardScreen_Parms ShowLeaderboardScreen_Parms;

	this->ProcessEvent ( pFnShowLeaderboardScreen, &ShowLeaderboardScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ShowMatchConsumablesScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ShowMatchConsumablesScreen ( )
{
	static UFunction* pFnShowMatchConsumablesScreen = NULL;

	if ( ! pFnShowMatchConsumablesScreen )
		pFnShowMatchConsumablesScreen = (UFunction*) UObject::GObjObjects()->Data[ 110158 ];

	Usfxgui_mplobby_execShowMatchConsumablesScreen_Parms ShowMatchConsumablesScreen_Parms;

	this->ProcessEvent ( pFnShowMatchConsumablesScreen, &ShowMatchConsumablesScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ShowAppearanceScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ShowAppearanceScreen ( )
{
	static UFunction* pFnShowAppearanceScreen = NULL;

	if ( ! pFnShowAppearanceScreen )
		pFnShowAppearanceScreen = (UFunction*) UObject::GObjObjects()->Data[ 110155 ];

	Usfxgui_mplobby_execShowAppearanceScreen_Parms ShowAppearanceScreen_Parms;

	this->ProcessEvent ( pFnShowAppearanceScreen, &ShowAppearanceScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ShowStoreScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ShowStoreScreen ( )
{
	static UFunction* pFnShowStoreScreen = NULL;

	if ( ! pFnShowStoreScreen )
		pFnShowStoreScreen = (UFunction*) UObject::GObjObjects()->Data[ 110153 ];

	Usfxgui_mplobby_execShowStoreScreen_Parms ShowStoreScreen_Parms;

	this->ProcessEvent ( pFnShowStoreScreen, &ShowStoreScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ShowWeaponsScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ShowWeaponsScreen ( )
{
	static UFunction* pFnShowWeaponsScreen = NULL;

	if ( ! pFnShowWeaponsScreen )
		pFnShowWeaponsScreen = (UFunction*) UObject::GObjObjects()->Data[ 110151 ];

	Usfxgui_mplobby_execShowWeaponsScreen_Parms ShowWeaponsScreen_Parms;

	this->ProcessEvent ( pFnShowWeaponsScreen, &ShowWeaponsScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ShowTalentsLevelUpScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ShowTalentsLevelUpScreen ( )
{
	static UFunction* pFnShowTalentsLevelUpScreen = NULL;

	if ( ! pFnShowTalentsLevelUpScreen )
		pFnShowTalentsLevelUpScreen = (UFunction*) UObject::GObjObjects()->Data[ 110148 ];

	Usfxgui_mplobby_execShowTalentsLevelUpScreen_Parms ShowTalentsLevelUpScreen_Parms;

	this->ProcessEvent ( pFnShowTalentsLevelUpScreen, &ShowTalentsLevelUpScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ShowMatchSettingsScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ShowMatchSettingsScreen ( )
{
	static UFunction* pFnShowMatchSettingsScreen = NULL;

	if ( ! pFnShowMatchSettingsScreen )
		pFnShowMatchSettingsScreen = (UFunction*) UObject::GObjObjects()->Data[ 110145 ];

	Usfxgui_mplobby_execShowMatchSettingsScreen_Parms ShowMatchSettingsScreen_Parms;

	this->ProcessEvent ( pFnShowMatchSettingsScreen, &ShowMatchSettingsScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.HostNewMission
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::HostNewMission ( )
{
	static UFunction* pFnHostNewMission = NULL;

	if ( ! pFnHostNewMission )
		pFnHostNewMission = (UFunction*) UObject::GObjObjects()->Data[ 110143 ];

	Usfxgui_mplobby_execHostNewMission_Parms HostNewMission_Parms;

	this->ProcessEvent ( pFnHostNewMission, &HostNewMission_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.CustomMatch
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::CustomMatch ( )
{
	static UFunction* pFnCustomMatch = NULL;

	if ( ! pFnCustomMatch )
		pFnCustomMatch = (UFunction*) UObject::GObjObjects()->Data[ 110140 ];

	Usfxgui_mplobby_execCustomMatch_Parms CustomMatch_Parms;

	this->ProcessEvent ( pFnCustomMatch, &CustomMatch_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ConfirmExitMultiplayer
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ConfirmExitMultiplayer ( )
{
	static UFunction* pFnConfirmExitMultiplayer = NULL;

	if ( ! pFnConfirmExitMultiplayer )
		pFnConfirmExitMultiplayer = (UFunction*) UObject::GObjObjects()->Data[ 110138 ];

	Usfxgui_mplobby_execConfirmExitMultiplayer_Parms ConfirmExitMultiplayer_Parms;

	this->ProcessEvent ( pFnConfirmExitMultiplayer, &ConfirmExitMultiplayer_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ExitMultiplayerConfirmationPopupInputDelegate
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Usfxgui_mplobby::ExitMultiplayerConfirmationPopupInputDelegate ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnExitMultiplayerConfirmationPopupInputDelegate = NULL;

	if ( ! pFnExitMultiplayerConfirmationPopupInputDelegate )
		pFnExitMultiplayerConfirmationPopupInputDelegate = (UFunction*) UObject::GObjObjects()->Data[ 110135 ];

	Usfxgui_mplobby_execExitMultiplayerConfirmationPopupInputDelegate_Parms ExitMultiplayerConfirmationPopupInputDelegate_Parms;
	ExitMultiplayerConfirmationPopupInputDelegate_Parms.bAPressed = bAPressed;
	ExitMultiplayerConfirmationPopupInputDelegate_Parms.nContext = nContext;

	this->ProcessEvent ( pFnExitMultiplayerConfirmationPopupInputDelegate, &ExitMultiplayerConfirmationPopupInputDelegate_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ShowExitMultiplayerConfirmationPopup
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ShowExitMultiplayerConfirmationPopup ( )
{
	static UFunction* pFnShowExitMultiplayerConfirmationPopup = NULL;

	if ( ! pFnShowExitMultiplayerConfirmationPopup )
		pFnShowExitMultiplayerConfirmationPopup = (UFunction*) UObject::GObjObjects()->Data[ 110130 ];

	Usfxgui_mplobby_execShowExitMultiplayerConfirmationPopup_Parms ShowExitMultiplayerConfirmationPopup_Parms;

	this->ProcessEvent ( pFnShowExitMultiplayerConfirmationPopup, &ShowExitMultiplayerConfirmationPopup_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ExitMultiplayer
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ExitMultiplayer ( )
{
	static UFunction* pFnExitMultiplayer = NULL;

	if ( ! pFnExitMultiplayer )
		pFnExitMultiplayer = (UFunction*) UObject::GObjObjects()->Data[ 110129 ];

	Usfxgui_mplobby_execExitMultiplayer_Parms ExitMultiplayer_Parms;

	this->ProcessEvent ( pFnExitMultiplayer, &ExitMultiplayer_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.GoBackToSelectFirstCharacter
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::GoBackToSelectFirstCharacter ( )
{
	static UFunction* pFnGoBackToSelectFirstCharacter = NULL;

	if ( ! pFnGoBackToSelectFirstCharacter )
		pFnGoBackToSelectFirstCharacter = (UFunction*) UObject::GObjObjects()->Data[ 110127 ];

	Usfxgui_mplobby_execGoBackToSelectFirstCharacter_Parms GoBackToSelectFirstCharacter_Parms;

	this->ProcessEvent ( pFnGoBackToSelectFirstCharacter, &GoBackToSelectFirstCharacter_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ConfirmExitLobby
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ConfirmExitLobby ( )
{
	static UFunction* pFnConfirmExitLobby = NULL;

	if ( ! pFnConfirmExitLobby )
		pFnConfirmExitLobby = (UFunction*) UObject::GObjObjects()->Data[ 110124 ];

	Usfxgui_mplobby_execConfirmExitLobby_Parms ConfirmExitLobby_Parms;

	this->ProcessEvent ( pFnConfirmExitLobby, &ConfirmExitLobby_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ExitLobbyPopupInputDelegate
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Usfxgui_mplobby::ExitLobbyPopupInputDelegate ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnExitLobbyPopupInputDelegate = NULL;

	if ( ! pFnExitLobbyPopupInputDelegate )
		pFnExitLobbyPopupInputDelegate = (UFunction*) UObject::GObjObjects()->Data[ 110121 ];

	Usfxgui_mplobby_execExitLobbyPopupInputDelegate_Parms ExitLobbyPopupInputDelegate_Parms;
	ExitLobbyPopupInputDelegate_Parms.bAPressed = bAPressed;
	ExitLobbyPopupInputDelegate_Parms.nContext = nContext;

	this->ProcessEvent ( pFnExitLobbyPopupInputDelegate, &ExitLobbyPopupInputDelegate_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ExitLobby
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ExitLobby ( )
{
	static UFunction* pFnExitLobby = NULL;

	if ( ! pFnExitLobby )
		pFnExitLobby = (UFunction*) UObject::GObjObjects()->Data[ 110115 ];

	Usfxgui_mplobby_execExitLobby_Parms ExitLobby_Parms;

	this->ProcessEvent ( pFnExitLobby, &ExitLobby_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ShowPartySessions
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::ShowPartySessions ( )
{
	static UFunction* pFnShowPartySessions = NULL;

	if ( ! pFnShowPartySessions )
		pFnShowPartySessions = (UFunction*) UObject::GObjObjects()->Data[ 110112 ];

	Usfxgui_mplobby_execShowPartySessions_Parms ShowPartySessions_Parms;

	this->ProcessEvent ( pFnShowPartySessions, &ShowPartySessions_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.InviteParty
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::InviteParty ( )
{
	static UFunction* pFnInviteParty = NULL;

	if ( ! pFnInviteParty )
		pFnInviteParty = (UFunction*) UObject::GObjObjects()->Data[ 110110 ];

	Usfxgui_mplobby_execInviteParty_Parms InviteParty_Parms;

	this->ProcessEvent ( pFnInviteParty, &InviteParty_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.IsInParty
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::IsInParty ( )
{
	static UFunction* pFnIsInParty = NULL;

	if ( ! pFnIsInParty )
		pFnIsInParty = (UFunction*) UObject::GObjObjects()->Data[ 109907 ];

	Usfxgui_mplobby_execIsInParty_Parms IsInParty_Parms;

	this->ProcessEvent ( pFnIsInParty, &IsInParty_Parms, NULL );

	return IsInParty_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.InviteFriends
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::InviteFriends ( )
{
	static UFunction* pFnInviteFriends = NULL;

	if ( ! pFnInviteFriends )
		pFnInviteFriends = (UFunction*) UObject::GObjObjects()->Data[ 110101 ];

	Usfxgui_mplobby_execInviteFriends_Parms InviteFriends_Parms;

	this->ProcessEvent ( pFnInviteFriends, &InviteFriends_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ShowGamercard
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            SlotIndex                      ( CPF_Parm )

void Usfxgui_mplobby::ShowGamercard ( int SlotIndex )
{
	static UFunction* pFnShowGamercard = NULL;

	if ( ! pFnShowGamercard )
		pFnShowGamercard = (UFunction*) UObject::GObjObjects()->Data[ 110097 ];

	Usfxgui_mplobby_execShowGamercard_Parms ShowGamercard_Parms;
	ShowGamercard_Parms.SlotIndex = SlotIndex;

	this->ProcessEvent ( pFnShowGamercard, &ShowGamercard_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.SetReady
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  Ready                          ( CPF_Parm )

void Usfxgui_mplobby::SetReady ( unsigned long Ready )
{
	static UFunction* pFnSetReady = NULL;

	if ( ! pFnSetReady )
		pFnSetReady = (UFunction*) UObject::GObjObjects()->Data[ 110095 ];

	Usfxgui_mplobby_execSetReady_Parms SetReady_Parms;
	SetReady_Parms.Ready = Ready;

	this->ProcessEvent ( pFnSetReady, &SetReady_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.GetLeaderboardNotificationText
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mplobby::GetLeaderboardNotificationText ( )
{
	static UFunction* pFnGetLeaderboardNotificationText = NULL;

	if ( ! pFnGetLeaderboardNotificationText )
		pFnGetLeaderboardNotificationText = (UFunction*) UObject::GObjObjects()->Data[ 110092 ];

	Usfxgui_mplobby_execGetLeaderboardNotificationText_Parms GetLeaderboardNotificationText_Parms;

	this->ProcessEvent ( pFnGetLeaderboardNotificationText, &GetLeaderboardNotificationText_Parms, NULL );

	return GetLeaderboardNotificationText_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.HasLeaderboardNotifications
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::HasLeaderboardNotifications ( )
{
	static UFunction* pFnHasLeaderboardNotifications = NULL;

	if ( ! pFnHasLeaderboardNotifications )
		pFnHasLeaderboardNotifications = (UFunction*) UObject::GObjObjects()->Data[ 110090 ];

	Usfxgui_mplobby_execHasLeaderboardNotifications_Parms HasLeaderboardNotifications_Parms;

	this->ProcessEvent ( pFnHasLeaderboardNotifications, &HasLeaderboardNotifications_Parms, NULL );

	return HasLeaderboardNotifications_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetPreviousSubScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mplobby::GetPreviousSubScreen ( )
{
	static UFunction* pFnGetPreviousSubScreen = NULL;

	if ( ! pFnGetPreviousSubScreen )
		pFnGetPreviousSubScreen = (UFunction*) UObject::GObjObjects()->Data[ 109898 ];

	Usfxgui_mplobby_execGetPreviousSubScreen_Parms GetPreviousSubScreen_Parms;

	this->ProcessEvent ( pFnGetPreviousSubScreen, &GetPreviousSubScreen_Parms, NULL );

	return GetPreviousSubScreen_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.HasCreditsToSpend
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::HasCreditsToSpend ( )
{
	static UFunction* pFnHasCreditsToSpend = NULL;

	if ( ! pFnHasCreditsToSpend )
		pFnHasCreditsToSpend = (UFunction*) UObject::GObjObjects()->Data[ 110084 ];

	Usfxgui_mplobby_execHasCreditsToSpend_Parms HasCreditsToSpend_Parms;

	this->ProcessEvent ( pFnHasCreditsToSpend, &HasCreditsToSpend_Parms, NULL );

	return HasCreditsToSpend_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.HasTalentPointsToSpend
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::HasTalentPointsToSpend ( )
{
	static UFunction* pFnHasTalentPointsToSpend = NULL;

	if ( ! pFnHasTalentPointsToSpend )
		pFnHasTalentPointsToSpend = (UFunction*) UObject::GObjObjects()->Data[ 110080 ];

	Usfxgui_mplobby_execHasTalentPointsToSpend_Parms HasTalentPointsToSpend_Parms;

	this->ProcessEvent ( pFnHasTalentPointsToSpend, &HasTalentPointsToSpend_Parms, NULL );

	return HasTalentPointsToSpend_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.CanLevelUp
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::CanLevelUp ( )
{
	static UFunction* pFnCanLevelUp = NULL;

	if ( ! pFnCanLevelUp )
		pFnCanLevelUp = (UFunction*) UObject::GObjObjects()->Data[ 110078 ];

	Usfxgui_mplobby_execCanLevelUp_Parms CanLevelUp_Parms;

	this->ProcessEvent ( pFnCanLevelUp, &CanLevelUp_Parms, NULL );

	return CanLevelUp_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.IsReady
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::IsReady ( )
{
	static UFunction* pFnIsReady = NULL;

	if ( ! pFnIsReady )
		pFnIsReady = (UFunction*) UObject::GObjObjects()->Data[ 110075 ];

	Usfxgui_mplobby_execIsReady_Parms IsReady_Parms;

	this->ProcessEvent ( pFnIsReady, &IsReady_Parms, NULL );

	return IsReady_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetPrivacy
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mplobby::GetPrivacy ( )
{
	static UFunction* pFnGetPrivacy = NULL;

	if ( ! pFnGetPrivacy )
		pFnGetPrivacy = (UFunction*) UObject::GObjObjects()->Data[ 110077 ];

	Usfxgui_mplobby_execGetPrivacy_Parms GetPrivacy_Parms;

	this->ProcessEvent ( pFnGetPrivacy, &GetPrivacy_Parms, NULL );

	return GetPrivacy_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.IsPrivateMatch
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::IsPrivateMatch ( )
{
	static UFunction* pFnIsPrivateMatch = NULL;

	if ( ! pFnIsPrivateMatch )
		pFnIsPrivateMatch = (UFunction*) UObject::GObjObjects()->Data[ 110073 ];

	Usfxgui_mplobby_execIsPrivateMatch_Parms IsPrivateMatch_Parms;

	this->ProcessEvent ( pFnIsPrivateMatch, &IsPrivateMatch_Parms, NULL );

	return IsPrivateMatch_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.IsGameFull
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::IsGameFull ( )
{
	static UFunction* pFnIsGameFull = NULL;

	if ( ! pFnIsGameFull )
		pFnIsGameFull = (UFunction*) UObject::GObjObjects()->Data[ 110071 ];

	Usfxgui_mplobby_execIsGameFull_Parms IsGameFull_Parms;

	this->ProcessEvent ( pFnIsGameFull, &IsGameFull_Parms, NULL );

	return IsGameFull_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.CanInteract
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::CanInteract ( )
{
	static UFunction* pFnCanInteract = NULL;

	if ( ! pFnCanInteract )
		pFnCanInteract = (UFunction*) UObject::GObjObjects()->Data[ 109909 ];

	Usfxgui_mplobby_execCanInteract_Parms CanInteract_Parms;

	this->ProcessEvent ( pFnCanInteract, &CanInteract_Parms, NULL );

	return CanInteract_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetMatchConsumableSlotTypeForCategory
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Category                       ( CPF_Parm )

int Usfxgui_mplobby::GetMatchConsumableSlotTypeForCategory ( int Category )
{
	static UFunction* pFnGetMatchConsumableSlotTypeForCategory = NULL;

	if ( ! pFnGetMatchConsumableSlotTypeForCategory )
		pFnGetMatchConsumableSlotTypeForCategory = (UFunction*) UObject::GObjObjects()->Data[ 110066 ];

	Usfxgui_mplobby_execGetMatchConsumableSlotTypeForCategory_Parms GetMatchConsumableSlotTypeForCategory_Parms;
	GetMatchConsumableSlotTypeForCategory_Parms.Category = Category;

	this->ProcessEvent ( pFnGetMatchConsumableSlotTypeForCategory, &GetMatchConsumableSlotTypeForCategory_Parms, NULL );

	return GetMatchConsumableSlotTypeForCategory_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetCharacterInfo_Patch
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FPlayerDisplayInfo_Patch ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class Asfxprimp*               PRI                            ( CPF_Parm )

struct FPlayerDisplayInfo_Patch Usfxgui_mplobby::GetCharacterInfo_Patch ( class Asfxprimp* PRI )
{
	static UFunction* pFnGetCharacterInfo_Patch = NULL;

	if ( ! pFnGetCharacterInfo_Patch )
		pFnGetCharacterInfo_Patch = (UFunction*) UObject::GObjObjects()->Data[ 110069 ];

	Usfxgui_mplobby_execGetCharacterInfo_Patch_Parms GetCharacterInfo_Patch_Parms;
	GetCharacterInfo_Patch_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetCharacterInfo_Patch, &GetCharacterInfo_Patch_Parms, NULL );

	return GetCharacterInfo_Patch_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetPlayerSlotInfo_Patch
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FPlayerDisplayInfo_Patch ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )

struct FPlayerDisplayInfo_Patch Usfxgui_mplobby::GetPlayerSlotInfo_Patch ( int Index )
{
	static UFunction* pFnGetPlayerSlotInfo_Patch = NULL;

	if ( ! pFnGetPlayerSlotInfo_Patch )
		pFnGetPlayerSlotInfo_Patch = (UFunction*) UObject::GObjObjects()->Data[ 110325 ];

	Usfxgui_mplobby_execGetPlayerSlotInfo_Patch_Parms GetPlayerSlotInfo_Patch_Parms;
	GetPlayerSlotInfo_Patch_Parms.Index = Index;

	this->ProcessEvent ( pFnGetPlayerSlotInfo_Patch, &GetPlayerSlotInfo_Patch_Parms, NULL );

	return GetPlayerSlotInfo_Patch_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetCharacterConsumableInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FMatchConsumableDisplayInfo > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class Asfxprimp*               PRI                            ( CPF_Parm )

TArray< struct FMatchConsumableDisplayInfo > Usfxgui_mplobby::GetCharacterConsumableInfo ( class Asfxprimp* PRI )
{
	static UFunction* pFnGetCharacterConsumableInfo = NULL;

	if ( ! pFnGetCharacterConsumableInfo )
		pFnGetCharacterConsumableInfo = (UFunction*) UObject::GObjObjects()->Data[ 110019 ];

	Usfxgui_mplobby_execGetCharacterConsumableInfo_Parms GetCharacterConsumableInfo_Parms;
	GetCharacterConsumableInfo_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetCharacterConsumableInfo, &GetCharacterConsumableInfo_Parms, NULL );

	return GetCharacterConsumableInfo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetCharacterWeaponInfo
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FWeaponDisplayInfo > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class Asfxprimp*               PRI                            ( CPF_Parm )

TArray< struct FWeaponDisplayInfo > Usfxgui_mplobby::GetCharacterWeaponInfo ( class Asfxprimp* PRI )
{
	static UFunction* pFnGetCharacterWeaponInfo = NULL;

	if ( ! pFnGetCharacterWeaponInfo )
		pFnGetCharacterWeaponInfo = (UFunction*) UObject::GObjObjects()->Data[ 110018 ];

	Usfxgui_mplobby_execGetCharacterWeaponInfo_Parms GetCharacterWeaponInfo_Parms;
	GetCharacterWeaponInfo_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetCharacterWeaponInfo, &GetCharacterWeaponInfo_Parms, NULL );

	return GetCharacterWeaponInfo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetCharacterPowerInfo
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FPowerDisplayInfo > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class Asfxprimp*               PRI                            ( CPF_Parm )

TArray< struct FPowerDisplayInfo > Usfxgui_mplobby::GetCharacterPowerInfo ( class Asfxprimp* PRI )
{
	static UFunction* pFnGetCharacterPowerInfo = NULL;

	if ( ! pFnGetCharacterPowerInfo )
		pFnGetCharacterPowerInfo = (UFunction*) UObject::GObjObjects()->Data[ 110017 ];

	Usfxgui_mplobby_execGetCharacterPowerInfo_Parms GetCharacterPowerInfo_Parms;
	GetCharacterPowerInfo_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetCharacterPowerInfo, &GetCharacterPowerInfo_Parms, NULL );

	return GetCharacterPowerInfo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetCharacterInfoDetailed
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FPlayerDisplayInfo      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class Asfxprimp*               PRI                            ( CPF_Parm )

struct FPlayerDisplayInfo Usfxgui_mplobby::GetCharacterInfoDetailed ( class Asfxprimp* PRI )
{
	static UFunction* pFnGetCharacterInfoDetailed = NULL;

	if ( ! pFnGetCharacterInfoDetailed )
		pFnGetCharacterInfoDetailed = (UFunction*) UObject::GObjObjects()->Data[ 109990 ];

	Usfxgui_mplobby_execGetCharacterInfoDetailed_Parms GetCharacterInfoDetailed_Parms;
	GetCharacterInfoDetailed_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetCharacterInfoDetailed, &GetCharacterInfoDetailed_Parms, NULL );

	return GetCharacterInfoDetailed_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetCharacterInfoBasic
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FPlayerDisplayInfo      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class Asfxprimp*               PRI                            ( CPF_Parm )

struct FPlayerDisplayInfo Usfxgui_mplobby::GetCharacterInfoBasic ( class Asfxprimp* PRI )
{
	static UFunction* pFnGetCharacterInfoBasic = NULL;

	if ( ! pFnGetCharacterInfoBasic )
		pFnGetCharacterInfoBasic = (UFunction*) UObject::GObjObjects()->Data[ 109986 ];

	Usfxgui_mplobby_execGetCharacterInfoBasic_Parms GetCharacterInfoBasic_Parms;
	GetCharacterInfoBasic_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetCharacterInfoBasic, &GetCharacterInfoBasic_Parms, NULL );

	return GetCharacterInfoBasic_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetLocalPlayerDetailedInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FPlayerDisplayInfo      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FPlayerDisplayInfo Usfxgui_mplobby::GetLocalPlayerDetailedInfo ( )
{
	static UFunction* pFnGetLocalPlayerDetailedInfo = NULL;

	if ( ! pFnGetLocalPlayerDetailedInfo )
		pFnGetLocalPlayerDetailedInfo = (UFunction*) UObject::GObjObjects()->Data[ 109993 ];

	Usfxgui_mplobby_execGetLocalPlayerDetailedInfo_Parms GetLocalPlayerDetailedInfo_Parms;

	this->ProcessEvent ( pFnGetLocalPlayerDetailedInfo, &GetLocalPlayerDetailedInfo_Parms, NULL );

	return GetLocalPlayerDetailedInfo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetLocalPlayerBasicInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FPlayerDisplayInfo      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FPlayerDisplayInfo Usfxgui_mplobby::GetLocalPlayerBasicInfo ( )
{
	static UFunction* pFnGetLocalPlayerBasicInfo = NULL;

	if ( ! pFnGetLocalPlayerBasicInfo )
		pFnGetLocalPlayerBasicInfo = (UFunction*) UObject::GObjObjects()->Data[ 109991 ];

	Usfxgui_mplobby_execGetLocalPlayerBasicInfo_Parms GetLocalPlayerBasicInfo_Parms;

	this->ProcessEvent ( pFnGetLocalPlayerBasicInfo, &GetLocalPlayerBasicInfo_Parms, NULL );

	return GetLocalPlayerBasicInfo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetPlayerSlotDetailedInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FPlayerDisplayInfo      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Index                          ( CPF_Parm )

struct FPlayerDisplayInfo Usfxgui_mplobby::GetPlayerSlotDetailedInfo ( int Index )
{
	static UFunction* pFnGetPlayerSlotDetailedInfo = NULL;

	if ( ! pFnGetPlayerSlotDetailedInfo )
		pFnGetPlayerSlotDetailedInfo = (UFunction*) UObject::GObjObjects()->Data[ 109987 ];

	Usfxgui_mplobby_execGetPlayerSlotDetailedInfo_Parms GetPlayerSlotDetailedInfo_Parms;
	GetPlayerSlotDetailedInfo_Parms.Index = Index;

	this->ProcessEvent ( pFnGetPlayerSlotDetailedInfo, &GetPlayerSlotDetailedInfo_Parms, NULL );

	return GetPlayerSlotDetailedInfo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetPlayerSlotBasicInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FPlayerDisplayInfo      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Index                          ( CPF_Parm )

struct FPlayerDisplayInfo Usfxgui_mplobby::GetPlayerSlotBasicInfo ( int Index )
{
	static UFunction* pFnGetPlayerSlotBasicInfo = NULL;

	if ( ! pFnGetPlayerSlotBasicInfo )
		pFnGetPlayerSlotBasicInfo = (UFunction*) UObject::GObjObjects()->Data[ 109983 ];

	Usfxgui_mplobby_execGetPlayerSlotBasicInfo_Parms GetPlayerSlotBasicInfo_Parms;
	GetPlayerSlotBasicInfo_Parms.Index = Index;

	this->ProcessEvent ( pFnGetPlayerSlotBasicInfo, &GetPlayerSlotBasicInfo_Parms, NULL );

	return GetPlayerSlotBasicInfo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetPlayerInSlot
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class Asfxprimp*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )

class Asfxprimp* Usfxgui_mplobby::GetPlayerInSlot ( int Index )
{
	static UFunction* pFnGetPlayerInSlot = NULL;

	if ( ! pFnGetPlayerInSlot )
		pFnGetPlayerInSlot = (UFunction*) UObject::GObjObjects()->Data[ 109979 ];

	Usfxgui_mplobby_execGetPlayerInSlot_Parms GetPlayerInSlot_Parms;
	GetPlayerInSlot_Parms.Index = Index;

	this->ProcessEvent ( pFnGetPlayerInSlot, &GetPlayerInSlot_Parms, NULL );

	return GetPlayerInSlot_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetNumPlayers
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mplobby::GetNumPlayers ( )
{
	static UFunction* pFnGetNumPlayers = NULL;

	if ( ! pFnGetNumPlayers )
		pFnGetNumPlayers = (UFunction*) UObject::GObjObjects()->Data[ 109977 ];

	Usfxgui_mplobby_execGetNumPlayers_Parms GetNumPlayers_Parms;

	this->ProcessEvent ( pFnGetNumPlayers, &GetNumPlayers_Parms, NULL );

	return GetNumPlayers_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetNumPlayerSlots
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mplobby::GetNumPlayerSlots ( )
{
	static UFunction* pFnGetNumPlayerSlots = NULL;

	if ( ! pFnGetNumPlayerSlots )
		pFnGetNumPlayerSlots = (UFunction*) UObject::GObjObjects()->Data[ 109975 ];

	Usfxgui_mplobby_execGetNumPlayerSlots_Parms GetNumPlayerSlots_Parms;

	this->ProcessEvent ( pFnGetNumPlayerSlots, &GetNumPlayerSlots_Parms, NULL );

	return GetNumPlayerSlots_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetLobbyStatusString
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mplobby::GetLobbyStatusString ( )
{
	static UFunction* pFnGetLobbyStatusString = NULL;

	if ( ! pFnGetLobbyStatusString )
		pFnGetLobbyStatusString = (UFunction*) UObject::GObjObjects()->Data[ 109973 ];

	Usfxgui_mplobby_execGetLobbyStatusString_Parms GetLobbyStatusString_Parms;

	this->ProcessEvent ( pFnGetLobbyStatusString, &GetLobbyStatusString_Parms, NULL );

	return GetLobbyStatusString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.GetLobbyStatus
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mplobby::GetLobbyStatus ( )
{
	static UFunction* pFnGetLobbyStatus = NULL;

	if ( ! pFnGetLobbyStatus )
		pFnGetLobbyStatus = (UFunction*) UObject::GObjObjects()->Data[ 109971 ];

	Usfxgui_mplobby_execGetLobbyStatus_Parms GetLobbyStatus_Parms;

	this->ProcessEvent ( pFnGetLobbyStatus, &GetLobbyStatus_Parms, NULL );

	return GetLobbyStatus_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.IsUIWorldPawnRequired
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Subscreen                      ( CPF_Parm )

bool Usfxgui_mplobby::IsUIWorldPawnRequired ( int Subscreen )
{
	static UFunction* pFnIsUIWorldPawnRequired = NULL;

	if ( ! pFnIsUIWorldPawnRequired )
		pFnIsUIWorldPawnRequired = (UFunction*) UObject::GObjObjects()->Data[ 109895 ];

	Usfxgui_mplobby_execIsUIWorldPawnRequired_Parms IsUIWorldPawnRequired_Parms;
	IsUIWorldPawnRequired_Parms.Subscreen = Subscreen;

	this->ProcessEvent ( pFnIsUIWorldPawnRequired, &IsUIWorldPawnRequired_Parms, NULL );

	return IsUIWorldPawnRequired_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.LoadTab
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            NewTab                         ( CPF_Parm )

void Usfxgui_mplobby::LoadTab ( int NewTab )
{
	static UFunction* pFnLoadTab = NULL;

	if ( ! pFnLoadTab )
		pFnLoadTab = (UFunction*) UObject::GObjObjects()->Data[ 109965 ];

	Usfxgui_mplobby_execLoadTab_Parms LoadTab_Parms;
	LoadTab_Parms.NewTab = NewTab;

	this->ProcessEvent ( pFnLoadTab, &LoadTab_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.GetCurrentLobbyTab
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mplobby::GetCurrentLobbyTab ( )
{
	static UFunction* pFnGetCurrentLobbyTab = NULL;

	if ( ! pFnGetCurrentLobbyTab )
		pFnGetCurrentLobbyTab = (UFunction*) UObject::GObjObjects()->Data[ 109963 ];

	Usfxgui_mplobby_execGetCurrentLobbyTab_Parms GetCurrentLobbyTab_Parms;

	this->ProcessEvent ( pFnGetCurrentLobbyTab, &GetCurrentLobbyTab_Parms, NULL );

	return GetCurrentLobbyTab_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.AS_ExitMultiplayerCancelled
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::AS_ExitMultiplayerCancelled ( )
{
	static UFunction* pFnAS_ExitMultiplayerCancelled = NULL;

	if ( ! pFnAS_ExitMultiplayerCancelled )
		pFnAS_ExitMultiplayerCancelled = (UFunction*) UObject::GObjObjects()->Data[ 109962 ];

	Usfxgui_mplobby_execAS_ExitMultiplayerCancelled_Parms AS_ExitMultiplayerCancelled_Parms;

	this->ProcessEvent ( pFnAS_ExitMultiplayerCancelled, &AS_ExitMultiplayerCancelled_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.AS_ExitLobbyCancelled
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::AS_ExitLobbyCancelled ( )
{
	static UFunction* pFnAS_ExitLobbyCancelled = NULL;

	if ( ! pFnAS_ExitLobbyCancelled )
		pFnAS_ExitLobbyCancelled = (UFunction*) UObject::GObjObjects()->Data[ 109961 ];

	Usfxgui_mplobby_execAS_ExitLobbyCancelled_Parms AS_ExitLobbyCancelled_Parms;

	this->ProcessEvent ( pFnAS_ExitLobbyCancelled, &AS_ExitLobbyCancelled_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.AS_RefreshGalaxyAtWarMap
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::AS_RefreshGalaxyAtWarMap ( )
{
	static UFunction* pFnAS_RefreshGalaxyAtWarMap = NULL;

	if ( ! pFnAS_RefreshGalaxyAtWarMap )
		pFnAS_RefreshGalaxyAtWarMap = (UFunction*) UObject::GObjObjects()->Data[ 109918 ];

	Usfxgui_mplobby_execAS_RefreshGalaxyAtWarMap_Parms AS_RefreshGalaxyAtWarMap_Parms;

	this->ProcessEvent ( pFnAS_RefreshGalaxyAtWarMap, &AS_RefreshGalaxyAtWarMap_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.AS_RefreshAllSpeakerIcons
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< float >                VoiceData                      ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mplobby::AS_RefreshAllSpeakerIcons ( TArray< float > VoiceData )
{
	static UFunction* pFnAS_RefreshAllSpeakerIcons = NULL;

	if ( ! pFnAS_RefreshAllSpeakerIcons )
		pFnAS_RefreshAllSpeakerIcons = (UFunction*) UObject::GObjObjects()->Data[ 109936 ];

	Usfxgui_mplobby_execAS_RefreshAllSpeakerIcons_Parms AS_RefreshAllSpeakerIcons_Parms;
	memcpy ( &AS_RefreshAllSpeakerIcons_Parms.VoiceData, &VoiceData, 0xC );

	this->ProcessEvent ( pFnAS_RefreshAllSpeakerIcons, &AS_RefreshAllSpeakerIcons_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.AS_GetChallengeSetting
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mplobby::AS_GetChallengeSetting ( )
{
	static UFunction* pFnAS_GetChallengeSetting = NULL;

	if ( ! pFnAS_GetChallengeSetting )
		pFnAS_GetChallengeSetting = (UFunction*) UObject::GObjObjects()->Data[ 109957 ];

	Usfxgui_mplobby_execAS_GetChallengeSetting_Parms AS_GetChallengeSetting_Parms;

	this->ProcessEvent ( pFnAS_GetChallengeSetting, &AS_GetChallengeSetting_Parms, NULL );

	return AS_GetChallengeSetting_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.AS_GetEnemySetting
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mplobby::AS_GetEnemySetting ( )
{
	static UFunction* pFnAS_GetEnemySetting = NULL;

	if ( ! pFnAS_GetEnemySetting )
		pFnAS_GetEnemySetting = (UFunction*) UObject::GObjObjects()->Data[ 109955 ];

	Usfxgui_mplobby_execAS_GetEnemySetting_Parms AS_GetEnemySetting_Parms;

	this->ProcessEvent ( pFnAS_GetEnemySetting, &AS_GetEnemySetting_Parms, NULL );

	return AS_GetEnemySetting_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.AS_GetMapSetting
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mplobby::AS_GetMapSetting ( )
{
	static UFunction* pFnAS_GetMapSetting = NULL;

	if ( ! pFnAS_GetMapSetting )
		pFnAS_GetMapSetting = (UFunction*) UObject::GObjObjects()->Data[ 109953 ];

	Usfxgui_mplobby_execAS_GetMapSetting_Parms AS_GetMapSetting_Parms;

	this->ProcessEvent ( pFnAS_GetMapSetting, &AS_GetMapSetting_Parms, NULL );

	return AS_GetMapSetting_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.AS_GetPrivacySetting
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mplobby::AS_GetPrivacySetting ( )
{
	static UFunction* pFnAS_GetPrivacySetting = NULL;

	if ( ! pFnAS_GetPrivacySetting )
		pFnAS_GetPrivacySetting = (UFunction*) UObject::GObjObjects()->Data[ 109951 ];

	Usfxgui_mplobby_execAS_GetPrivacySetting_Parms AS_GetPrivacySetting_Parms;

	this->ProcessEvent ( pFnAS_GetPrivacySetting, &AS_GetPrivacySetting_Parms, NULL );

	return AS_GetPrivacySetting_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.AS_OnTabLoaded
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            Subscreen                      ( CPF_Parm )

void Usfxgui_mplobby::AS_OnTabLoaded ( int Subscreen )
{
	static UFunction* pFnAS_OnTabLoaded = NULL;

	if ( ! pFnAS_OnTabLoaded )
		pFnAS_OnTabLoaded = (UFunction*) UObject::GObjObjects()->Data[ 109949 ];

	Usfxgui_mplobby_execAS_OnTabLoaded_Parms AS_OnTabLoaded_Parms;
	AS_OnTabLoaded_Parms.Subscreen = Subscreen;

	this->ProcessEvent ( pFnAS_OnTabLoaded, &AS_OnTabLoaded_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.AS_RefreshScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::AS_RefreshScreen ( )
{
	static UFunction* pFnAS_RefreshScreen = NULL;

	if ( ! pFnAS_RefreshScreen )
		pFnAS_RefreshScreen = (UFunction*) UObject::GObjObjects()->Data[ 109927 ];

	Usfxgui_mplobby_execAS_RefreshScreen_Parms AS_RefreshScreen_Parms;

	this->ProcessEvent ( pFnAS_RefreshScreen, &AS_RefreshScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.ApplyTinting
// [0x00020002] 
// Parameters infos:
// class UObject*                 InSettings                     ( CPF_Parm )

void Usfxgui_mplobby::ApplyTinting ( class UObject* InSettings )
{
	static UFunction* pFnApplyTinting = NULL;

	if ( ! pFnApplyTinting )
		pFnApplyTinting = (UFunction*) UObject::GObjObjects()->Data[ 109944 ];

	Usfxgui_mplobby_execApplyTinting_Parms ApplyTinting_Parms;
	ApplyTinting_Parms.InSettings = InSettings;

	this->ProcessEvent ( pFnApplyTinting, &ApplyTinting_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.SetInitialPawnPosition
// [0x00020002] 
// Parameters infos:
// class UObject*                 Data                           ( CPF_Parm )

void Usfxgui_mplobby::SetInitialPawnPosition ( class UObject* Data )
{
	static UFunction* pFnSetInitialPawnPosition = NULL;

	if ( ! pFnSetInitialPawnPosition )
		pFnSetInitialPawnPosition = (UFunction*) UObject::GObjObjects()->Data[ 109940 ];

	Usfxgui_mplobby_execSetInitialPawnPosition_Parms SetInitialPawnPosition_Parms;
	SetInitialPawnPosition_Parms.Data = Data;

	this->ProcessEvent ( pFnSetInitialPawnPosition, &SetInitialPawnPosition_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.CleanupUIWorldPawn
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::CleanupUIWorldPawn ( )
{
	static UFunction* pFnCleanupUIWorldPawn = NULL;

	if ( ! pFnCleanupUIWorldPawn )
		pFnCleanupUIWorldPawn = (UFunction*) UObject::GObjObjects()->Data[ 109903 ];

	Usfxgui_mplobby_execCleanupUIWorldPawn_Parms CleanupUIWorldPawn_Parms;

	this->ProcessEvent ( pFnCleanupUIWorldPawn, &CleanupUIWorldPawn_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.SetupUIWorldPawn
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::SetupUIWorldPawn ( )
{
	static UFunction* pFnSetupUIWorldPawn = NULL;

	if ( ! pFnSetupUIWorldPawn )
		pFnSetupUIWorldPawn = (UFunction*) UObject::GObjObjects()->Data[ 109897 ];

	Usfxgui_mplobby_execSetupUIWorldPawn_Parms SetupUIWorldPawn_Parms;

	this->ProcessEvent ( pFnSetupUIWorldPawn, &SetupUIWorldPawn_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.RefreshAllSpeakerIcons
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::RefreshAllSpeakerIcons ( )
{
	static UFunction* pFnRefreshAllSpeakerIcons = NULL;

	if ( ! pFnRefreshAllSpeakerIcons )
		pFnRefreshAllSpeakerIcons = (UFunction*) UObject::GObjObjects()->Data[ 109911 ];

	Usfxgui_mplobby_execRefreshAllSpeakerIcons_Parms RefreshAllSpeakerIcons_Parms;

	this->ProcessEvent ( pFnRefreshAllSpeakerIcons, &RefreshAllSpeakerIcons_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.Refresh
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobby::Refresh ( )
{
	static UFunction* pFnRefresh = NULL;

	if ( ! pFnRefresh )
		pFnRefresh = (UFunction*) UObject::GObjObjects()->Data[ 109900 ];

	Usfxgui_mplobby_execRefresh_Parms Refresh_Parms;

	this->ProcessEvent ( pFnRefresh, &Refresh_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.GetGAWRatings
// [0x00020002] 
// Parameters infos:
// TArray< struct FGAWZoneGUIData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FGAWZoneGUIData > Usfxgui_mplobby::GetGAWRatings ( )
{
	static UFunction* pFnGetGAWRatings = NULL;

	if ( ! pFnGetGAWRatings )
		pFnGetGAWRatings = (UFunction*) UObject::GObjObjects()->Data[ 109921 ];

	Usfxgui_mplobby_execGetGAWRatings_Parms GetGAWRatings_Parms;

	this->ProcessEvent ( pFnGetGAWRatings, &GetGAWRatings_Parms, NULL );

	return GetGAWRatings_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.HasGAWRatingsError
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobby::HasGAWRatingsError ( )
{
	static UFunction* pFnHasGAWRatingsError = NULL;

	if ( ! pFnHasGAWRatingsError )
		pFnHasGAWRatingsError = (UFunction*) UObject::GObjObjects()->Data[ 109919 ];

	Usfxgui_mplobby_execHasGAWRatingsError_Parms HasGAWRatingsError_Parms;

	this->ProcessEvent ( pFnHasGAWRatingsError, &HasGAWRatingsError_Parms, NULL );

	return HasGAWRatingsError_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobby.OnGAWRequestFinished
// [0x00020002] 
// Parameters infos:
// TArray< struct FGAWZoneGUIData > ZoneData                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            Level                          ( CPF_Parm )
// int                            errorCode                      ( CPF_Parm )

void Usfxgui_mplobby::OnGAWRequestFinished ( TArray< struct FGAWZoneGUIData > ZoneData, int Level, int errorCode )
{
	static UFunction* pFnOnGAWRequestFinished = NULL;

	if ( ! pFnOnGAWRequestFinished )
		pFnOnGAWRequestFinished = (UFunction*) UObject::GObjObjects()->Data[ 109912 ];

	Usfxgui_mplobby_execOnGAWRequestFinished_Parms OnGAWRequestFinished_Parms;
	memcpy ( &OnGAWRequestFinished_Parms.ZoneData, &ZoneData, 0xC );
	OnGAWRequestFinished_Parms.Level = Level;
	OnGAWRequestFinished_Parms.errorCode = errorCode;

	this->ProcessEvent ( pFnOnGAWRequestFinished, &OnGAWRequestFinished_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void Usfxgui_mplobby::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 109904 ];

	Usfxgui_mplobby_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mplobby::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 109902 ];

	Usfxgui_mplobby_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobby.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mplobby::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 109893 ];

	Usfxgui_mplobby_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobbystatusbars.AS_Refresh
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobbystatusbars::AS_Refresh ( )
{
	static UFunction* pFnAS_Refresh = NULL;

	if ( ! pFnAS_Refresh )
		pFnAS_Refresh = (UFunction*) UObject::GObjObjects()->Data[ 110338 ];

	Usfxgui_mplobbystatusbars_execAS_Refresh_Parms AS_Refresh_Parms;

	this->ProcessEvent ( pFnAS_Refresh, &AS_Refresh_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobbystatusbars.ShouldShowMatchInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobbystatusbars::ShouldShowMatchInfo ( )
{
	static UFunction* pFnShouldShowMatchInfo = NULL;

	if ( ! pFnShouldShowMatchInfo )
		pFnShouldShowMatchInfo = (UFunction*) UObject::GObjObjects()->Data[ 110347 ];

	Usfxgui_mplobbystatusbars_execShouldShowMatchInfo_Parms ShouldShowMatchInfo_Parms;

	this->ProcessEvent ( pFnShouldShowMatchInfo, &ShouldShowMatchInfo_Parms, NULL );

	return ShouldShowMatchInfo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobbystatusbars.GetNumReadyPlayers
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mplobbystatusbars::GetNumReadyPlayers ( )
{
	static UFunction* pFnGetNumReadyPlayers = NULL;

	if ( ! pFnGetNumReadyPlayers )
		pFnGetNumReadyPlayers = (UFunction*) UObject::GObjObjects()->Data[ 110376 ];

	Usfxgui_mplobbystatusbars_execGetNumReadyPlayers_Parms GetNumReadyPlayers_Parms;

	this->ProcessEvent ( pFnGetNumReadyPlayers, &GetNumReadyPlayers_Parms, NULL );

	return GetNumReadyPlayers_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobbystatusbars.ShouldShowStatusBar
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobbystatusbars::ShouldShowStatusBar ( )
{
	static UFunction* pFnShouldShowStatusBar = NULL;

	if ( ! pFnShouldShowStatusBar )
		pFnShouldShowStatusBar = (UFunction*) UObject::GObjObjects()->Data[ 110345 ];

	Usfxgui_mplobbystatusbars_execShouldShowStatusBar_Parms ShouldShowStatusBar_Parms;

	this->ProcessEvent ( pFnShouldShowStatusBar, &ShouldShowStatusBar_Parms, NULL );

	return ShouldShowStatusBar_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobbystatusbars.IsReady
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mplobbystatusbars::IsReady ( )
{
	static UFunction* pFnIsReady = NULL;

	if ( ! pFnIsReady )
		pFnIsReady = (UFunction*) UObject::GObjObjects()->Data[ 110369 ];

	Usfxgui_mplobbystatusbars_execIsReady_Parms IsReady_Parms;

	this->ProcessEvent ( pFnIsReady, &IsReady_Parms, NULL );

	return IsReady_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobbystatusbars.GetReadyButtonString
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mplobbystatusbars::GetReadyButtonString ( )
{
	static UFunction* pFnGetReadyButtonString = NULL;

	if ( ! pFnGetReadyButtonString )
		pFnGetReadyButtonString = (UFunction*) UObject::GObjObjects()->Data[ 110365 ];

	Usfxgui_mplobbystatusbars_execGetReadyButtonString_Parms GetReadyButtonString_Parms;

	this->ProcessEvent ( pFnGetReadyButtonString, &GetReadyButtonString_Parms, NULL );

	return GetReadyButtonString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobbystatusbars.GetPlayerStatus
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mplobbystatusbars::GetPlayerStatus ( )
{
	static UFunction* pFnGetPlayerStatus = NULL;

	if ( ! pFnGetPlayerStatus )
		pFnGetPlayerStatus = (UFunction*) UObject::GObjObjects()->Data[ 110352 ];

	Usfxgui_mplobbystatusbars_execGetPlayerStatus_Parms GetPlayerStatus_Parms;

	this->ProcessEvent ( pFnGetPlayerStatus, &GetPlayerStatus_Parms, NULL );

	return GetPlayerStatus_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mplobbystatusbars.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void Usfxgui_mplobbystatusbars::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 110339 ];

	Usfxgui_mplobbystatusbars_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobbystatusbars.Refresh
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mplobbystatusbars::Refresh ( )
{
	static UFunction* pFnRefresh = NULL;

	if ( ! pFnRefresh )
		pFnRefresh = (UFunction*) UObject::GObjObjects()->Data[ 110337 ];

	Usfxgui_mplobbystatusbars_execRefresh_Parms Refresh_Parms;

	this->ProcessEvent ( pFnRefresh, &Refresh_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobbystatusbars.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mplobbystatusbars::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 110336 ];

	Usfxgui_mplobbystatusbars_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mplobbystatusbars.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mplobbystatusbars::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 110335 ];

	Usfxgui_mplobbystatusbars_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.AS_SetFocusToNameField
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpappearance::AS_SetFocusToNameField ( )
{
	static UFunction* pFnAS_SetFocusToNameField = NULL;

	if ( ! pFnAS_SetFocusToNameField )
		pFnAS_SetFocusToNameField = (UFunction*) UObject::GObjObjects()->Data[ 109613 ];

	Usfxgui_mpappearance_execAS_SetFocusToNameField_Parms AS_SetFocusToNameField_Parms;

	this->ProcessEvent ( pFnAS_SetFocusToNameField, &AS_SetFocusToNameField_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.AS_RefreshCurrentMenuItem
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpappearance::AS_RefreshCurrentMenuItem ( )
{
	static UFunction* pFnAS_RefreshCurrentMenuItem = NULL;

	if ( ! pFnAS_RefreshCurrentMenuItem )
		pFnAS_RefreshCurrentMenuItem = (UFunction*) UObject::GObjObjects()->Data[ 109612 ];

	Usfxgui_mpappearance_execAS_RefreshCurrentMenuItem_Parms AS_RefreshCurrentMenuItem_Parms;

	this->ProcessEvent ( pFnAS_RefreshCurrentMenuItem, &AS_RefreshCurrentMenuItem_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.AS_InitializeScreen
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpappearance::AS_InitializeScreen ( )
{
	static UFunction* pFnAS_InitializeScreen = NULL;

	if ( ! pFnAS_InitializeScreen )
		pFnAS_InitializeScreen = (UFunction*) UObject::GObjObjects()->Data[ 109611 ];

	Usfxgui_mpappearance_execAS_InitializeScreen_Parms AS_InitializeScreen_Parms;

	this->ProcessEvent ( pFnAS_InitializeScreen, &AS_InitializeScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.AS_RefreshCharacterName
// [0x00020002] 
// Parameters infos:
// struct FString                 NewName                        ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mpappearance::AS_RefreshCharacterName ( struct FString NewName )
{
	static UFunction* pFnAS_RefreshCharacterName = NULL;

	if ( ! pFnAS_RefreshCharacterName )
		pFnAS_RefreshCharacterName = (UFunction*) UObject::GObjObjects()->Data[ 109609 ];

	Usfxgui_mpappearance_execAS_RefreshCharacterName_Parms AS_RefreshCharacterName_Parms;
	memcpy ( &AS_RefreshCharacterName_Parms.NewName, &NewName, 0xC );

	this->ProcessEvent ( pFnAS_RefreshCharacterName, &AS_RefreshCharacterName_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.AS_AddTintSwatch
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )
// float                          fR                             ( CPF_Parm )
// float                          fX                             ( CPF_Parm )
// float                          fB                             ( CPF_Parm )

void Usfxgui_mpappearance::AS_AddTintSwatch ( int nID, float fR, float fX, float fB )
{
	static UFunction* pFnAS_AddTintSwatch = NULL;

	if ( ! pFnAS_AddTintSwatch )
		pFnAS_AddTintSwatch = (UFunction*) UObject::GObjObjects()->Data[ 109604 ];

	Usfxgui_mpappearance_execAS_AddTintSwatch_Parms AS_AddTintSwatch_Parms;
	AS_AddTintSwatch_Parms.nID = nID;
	AS_AddTintSwatch_Parms.fR = fR;
	AS_AddTintSwatch_Parms.fX = fX;
	AS_AddTintSwatch_Parms.fB = fB;

	this->ProcessEvent ( pFnAS_AddTintSwatch, &AS_AddTintSwatch_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void Usfxgui_mpappearance::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 109599 ];

	Usfxgui_mpappearance_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.HandleInputEvent
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

bool Usfxgui_mpappearance::eventHandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 109593 ];

	Usfxgui_mpappearance_eventHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );

	return HandleInputEvent_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.CanShowSkinTone
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpappearance::CanShowSkinTone ( )
{
	static UFunction* pFnCanShowSkinTone = NULL;

	if ( ! pFnCanShowSkinTone )
		pFnCanShowSkinTone = (UFunction*) UObject::GObjObjects()->Data[ 109591 ];

	Usfxgui_mpappearance_execCanShowSkinTone_Parms CanShowSkinTone_Parms;

	this->ProcessEvent ( pFnCanShowSkinTone, &CanShowSkinTone_Parms, NULL );

	return CanShowSkinTone_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.CanShowEmissive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpappearance::CanShowEmissive ( )
{
	static UFunction* pFnCanShowEmissive = NULL;

	if ( ! pFnCanShowEmissive )
		pFnCanShowEmissive = (UFunction*) UObject::GObjObjects()->Data[ 109589 ];

	Usfxgui_mpappearance_execCanShowEmissive_Parms CanShowEmissive_Parms;

	this->ProcessEvent ( pFnCanShowEmissive, &CanShowEmissive_Parms, NULL );

	return CanShowEmissive_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.CanShowPhong
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpappearance::CanShowPhong ( )
{
	static UFunction* pFnCanShowPhong = NULL;

	if ( ! pFnCanShowPhong )
		pFnCanShowPhong = (UFunction*) UObject::GObjObjects()->Data[ 109587 ];

	Usfxgui_mpappearance_execCanShowPhong_Parms CanShowPhong_Parms;

	this->ProcessEvent ( pFnCanShowPhong, &CanShowPhong_Parms, NULL );

	return CanShowPhong_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.CanShowPatternColor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpappearance::CanShowPatternColor ( )
{
	static UFunction* pFnCanShowPatternColor = NULL;

	if ( ! pFnCanShowPatternColor )
		pFnCanShowPatternColor = (UFunction*) UObject::GObjObjects()->Data[ 109585 ];

	Usfxgui_mpappearance_execCanShowPatternColor_Parms CanShowPatternColor_Parms;

	this->ProcessEvent ( pFnCanShowPatternColor, &CanShowPatternColor_Parms, NULL );

	return CanShowPatternColor_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.CanShowPattern
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpappearance::CanShowPattern ( )
{
	static UFunction* pFnCanShowPattern = NULL;

	if ( ! pFnCanShowPattern )
		pFnCanShowPattern = (UFunction*) UObject::GObjObjects()->Data[ 109583 ];

	Usfxgui_mpappearance_execCanShowPattern_Parms CanShowPattern_Parms;

	this->ProcessEvent ( pFnCanShowPattern, &CanShowPattern_Parms, NULL );

	return CanShowPattern_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.CanShowSecondaryColor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpappearance::CanShowSecondaryColor ( )
{
	static UFunction* pFnCanShowSecondaryColor = NULL;

	if ( ! pFnCanShowSecondaryColor )
		pFnCanShowSecondaryColor = (UFunction*) UObject::GObjObjects()->Data[ 109581 ];

	Usfxgui_mpappearance_execCanShowSecondaryColor_Parms CanShowSecondaryColor_Parms;

	this->ProcessEvent ( pFnCanShowSecondaryColor, &CanShowSecondaryColor_Parms, NULL );

	return CanShowSecondaryColor_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.CanShowPrimaryColor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpappearance::CanShowPrimaryColor ( )
{
	static UFunction* pFnCanShowPrimaryColor = NULL;

	if ( ! pFnCanShowPrimaryColor )
		pFnCanShowPrimaryColor = (UFunction*) UObject::GObjObjects()->Data[ 109579 ];

	Usfxgui_mpappearance_execCanShowPrimaryColor_Parms CanShowPrimaryColor_Parms;

	this->ProcessEvent ( pFnCanShowPrimaryColor, &CanShowPrimaryColor_Parms, NULL );

	return CanShowPrimaryColor_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetMenuItemState
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            RequiredLevel                  ( CPF_Parm )

unsigned char Usfxgui_mpappearance::GetMenuItemState ( int RequiredLevel )
{
	static UFunction* pFnGetMenuItemState = NULL;

	if ( ! pFnGetMenuItemState )
		pFnGetMenuItemState = (UFunction*) UObject::GObjObjects()->Data[ 109576 ];

	Usfxgui_mpappearance_execGetMenuItemState_Parms GetMenuItemState_Parms;
	GetMenuItemState_Parms.RequiredLevel = RequiredLevel;

	this->ProcessEvent ( pFnGetMenuItemState, &GetMenuItemState_Parms, NULL );

	return GetMenuItemState_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetSkinToneState
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char Usfxgui_mpappearance::GetSkinToneState ( )
{
	static UFunction* pFnGetSkinToneState = NULL;

	if ( ! pFnGetSkinToneState )
		pFnGetSkinToneState = (UFunction*) UObject::GObjObjects()->Data[ 109573 ];

	Usfxgui_mpappearance_execGetSkinToneState_Parms GetSkinToneState_Parms;

	this->ProcessEvent ( pFnGetSkinToneState, &GetSkinToneState_Parms, NULL );

	return GetSkinToneState_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetEmissiveState
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char Usfxgui_mpappearance::GetEmissiveState ( )
{
	static UFunction* pFnGetEmissiveState = NULL;

	if ( ! pFnGetEmissiveState )
		pFnGetEmissiveState = (UFunction*) UObject::GObjObjects()->Data[ 109570 ];

	Usfxgui_mpappearance_execGetEmissiveState_Parms GetEmissiveState_Parms;

	this->ProcessEvent ( pFnGetEmissiveState, &GetEmissiveState_Parms, NULL );

	return GetEmissiveState_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetPhongState
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char Usfxgui_mpappearance::GetPhongState ( )
{
	static UFunction* pFnGetPhongState = NULL;

	if ( ! pFnGetPhongState )
		pFnGetPhongState = (UFunction*) UObject::GObjObjects()->Data[ 109567 ];

	Usfxgui_mpappearance_execGetPhongState_Parms GetPhongState_Parms;

	this->ProcessEvent ( pFnGetPhongState, &GetPhongState_Parms, NULL );

	return GetPhongState_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetPatternColorState
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char Usfxgui_mpappearance::GetPatternColorState ( )
{
	static UFunction* pFnGetPatternColorState = NULL;

	if ( ! pFnGetPatternColorState )
		pFnGetPatternColorState = (UFunction*) UObject::GObjObjects()->Data[ 109564 ];

	Usfxgui_mpappearance_execGetPatternColorState_Parms GetPatternColorState_Parms;

	this->ProcessEvent ( pFnGetPatternColorState, &GetPatternColorState_Parms, NULL );

	return GetPatternColorState_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetPatternState
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char Usfxgui_mpappearance::GetPatternState ( )
{
	static UFunction* pFnGetPatternState = NULL;

	if ( ! pFnGetPatternState )
		pFnGetPatternState = (UFunction*) UObject::GObjObjects()->Data[ 109561 ];

	Usfxgui_mpappearance_execGetPatternState_Parms GetPatternState_Parms;

	this->ProcessEvent ( pFnGetPatternState, &GetPatternState_Parms, NULL );

	return GetPatternState_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetTint2State
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char Usfxgui_mpappearance::GetTint2State ( )
{
	static UFunction* pFnGetTint2State = NULL;

	if ( ! pFnGetTint2State )
		pFnGetTint2State = (UFunction*) UObject::GObjObjects()->Data[ 109558 ];

	Usfxgui_mpappearance_execGetTint2State_Parms GetTint2State_Parms;

	this->ProcessEvent ( pFnGetTint2State, &GetTint2State_Parms, NULL );

	return GetTint2State_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetTint1State
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char Usfxgui_mpappearance::GetTint1State ( )
{
	static UFunction* pFnGetTint1State = NULL;

	if ( ! pFnGetTint1State )
		pFnGetTint1State = (UFunction*) UObject::GObjObjects()->Data[ 109555 ];

	Usfxgui_mpappearance_execGetTint1State_Parms GetTint1State_Parms;

	this->ProcessEvent ( pFnGetTint1State, &GetTint1State_Parms, NULL );

	return GetTint1State_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.IsInDeployFlow
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpappearance::IsInDeployFlow ( )
{
	static UFunction* pFnIsInDeployFlow = NULL;

	if ( ! pFnIsInDeployFlow )
		pFnIsInDeployFlow = (UFunction*) UObject::GObjObjects()->Data[ 109553 ];

	Usfxgui_mpappearance_execIsInDeployFlow_Parms IsInDeployFlow_Parms;

	this->ProcessEvent ( pFnIsInDeployFlow, &IsInDeployFlow_Parms, NULL );

	return IsInDeployFlow_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.NameErrorCallback
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Usfxgui_mpappearance::NameErrorCallback ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnNameErrorCallback = NULL;

	if ( ! pFnNameErrorCallback )
		pFnNameErrorCallback = (UFunction*) UObject::GObjObjects()->Data[ 109550 ];

	Usfxgui_mpappearance_execNameErrorCallback_Parms NameErrorCallback_Parms;
	NameErrorCallback_Parms.bAPressed = bAPressed;
	NameErrorCallback_Parms.nContext = nContext;

	this->ProcessEvent ( pFnNameErrorCallback, &NameErrorCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.DisplayCharacterNameErrorBox
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  eResult                        ( CPF_Parm )

void Usfxgui_mpappearance::DisplayCharacterNameErrorBox ( unsigned char eResult )
{
	static UFunction* pFnDisplayCharacterNameErrorBox = NULL;

	if ( ! pFnDisplayCharacterNameErrorBox )
		pFnDisplayCharacterNameErrorBox = (UFunction*) UObject::GObjObjects()->Data[ 109470 ];

	Usfxgui_mpappearance_execDisplayCharacterNameErrorBox_Parms DisplayCharacterNameErrorBox_Parms;
	DisplayCharacterNameErrorBox_Parms.eResult = eResult;

	this->ProcessEvent ( pFnDisplayCharacterNameErrorBox, &DisplayCharacterNameErrorBox_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetMaxCharacterNameLength
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpappearance::GetMaxCharacterNameLength ( )
{
	static UFunction* pFnGetMaxCharacterNameLength = NULL;

	if ( ! pFnGetMaxCharacterNameLength )
		pFnGetMaxCharacterNameLength = (UFunction*) UObject::GObjObjects()->Data[ 109540 ];

	Usfxgui_mpappearance_execGetMaxCharacterNameLength_Parms GetMaxCharacterNameLength_Parms;

	this->ProcessEvent ( pFnGetMaxCharacterNameLength, &GetMaxCharacterNameLength_Parms, NULL );

	return GetMaxCharacterNameLength_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetSelectedKitName
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpappearance::GetSelectedKitName ( )
{
	static UFunction* pFnGetSelectedKitName = NULL;

	if ( ! pFnGetSelectedKitName )
		pFnGetSelectedKitName = (UFunction*) UObject::GObjObjects()->Data[ 109538 ];

	Usfxgui_mpappearance_execGetSelectedKitName_Parms GetSelectedKitName_Parms;

	this->ProcessEvent ( pFnGetSelectedKitName, &GetSelectedKitName_Parms, NULL );

	return GetSelectedKitName_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetSelectedCharacterClassAndLevel
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpappearance::GetSelectedCharacterClassAndLevel ( )
{
	static UFunction* pFnGetSelectedCharacterClassAndLevel = NULL;

	if ( ! pFnGetSelectedCharacterClassAndLevel )
		pFnGetSelectedCharacterClassAndLevel = (UFunction*) UObject::GObjObjects()->Data[ 109534 ];

	Usfxgui_mpappearance_execGetSelectedCharacterClassAndLevel_Parms GetSelectedCharacterClassAndLevel_Parms;

	this->ProcessEvent ( pFnGetSelectedCharacterClassAndLevel, &GetSelectedCharacterClassAndLevel_Parms, NULL );

	return GetSelectedCharacterClassAndLevel_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetSelectedCharacterName
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpappearance::GetSelectedCharacterName ( )
{
	static UFunction* pFnGetSelectedCharacterName = NULL;

	if ( ! pFnGetSelectedCharacterName )
		pFnGetSelectedCharacterName = (UFunction*) UObject::GObjObjects()->Data[ 109532 ];

	Usfxgui_mpappearance_execGetSelectedCharacterName_Parms GetSelectedCharacterName_Parms;

	this->ProcessEvent ( pFnGetSelectedCharacterName, &GetSelectedCharacterName_Parms, NULL );

	return GetSelectedCharacterName_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.ResetPawnToLastSelection
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpappearance::ResetPawnToLastSelection ( )
{
	static UFunction* pFnResetPawnToLastSelection = NULL;

	if ( ! pFnResetPawnToLastSelection )
		pFnResetPawnToLastSelection = (UFunction*) UObject::GObjObjects()->Data[ 109531 ];

	Usfxgui_mpappearance_execResetPawnToLastSelection_Parms ResetPawnToLastSelection_Parms;

	this->ProcessEvent ( pFnResetPawnToLastSelection, &ResetPawnToLastSelection_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.ResetPawn
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpappearance::ResetPawn ( )
{
	static UFunction* pFnResetPawn = NULL;

	if ( ! pFnResetPawn )
		pFnResetPawn = (UFunction*) UObject::GObjObjects()->Data[ 109468 ];

	Usfxgui_mpappearance_execResetPawn_Parms ResetPawn_Parms;

	this->ProcessEvent ( pFnResetPawn, &ResetPawn_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.ResetScreenInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpappearance::ResetScreenInfo ( )
{
	static UFunction* pFnResetScreenInfo = NULL;

	if ( ! pFnResetScreenInfo )
		pFnResetScreenInfo = (UFunction*) UObject::GObjObjects()->Data[ 109530 ];

	Usfxgui_mpappearance_execResetScreenInfo_Parms ResetScreenInfo_Parms;

	this->ProcessEvent ( pFnResetScreenInfo, &ResetScreenInfo_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.SetCharacterName
// [0x00020002] 
// Parameters infos:
// struct FString                 CharacterName                  ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mpappearance::SetCharacterName ( struct FString CharacterName )
{
	static UFunction* pFnSetCharacterName = NULL;

	if ( ! pFnSetCharacterName )
		pFnSetCharacterName = (UFunction*) UObject::GObjObjects()->Data[ 109528 ];

	Usfxgui_mpappearance_execSetCharacterName_Parms SetCharacterName_Parms;
	memcpy ( &SetCharacterName_Parms.CharacterName, &CharacterName, 0xC );

	this->ProcessEvent ( pFnSetCharacterName, &SetCharacterName_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.KeyboardNameEntryComplete
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bOK                            ( CPF_Parm )
// struct FString                 sName                          ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mpappearance::KeyboardNameEntryComplete ( unsigned long bOK, struct FString sName )
{
	static UFunction* pFnKeyboardNameEntryComplete = NULL;

	if ( ! pFnKeyboardNameEntryComplete )
		pFnKeyboardNameEntryComplete = (UFunction*) UObject::GObjObjects()->Data[ 109524 ];

	Usfxgui_mpappearance_execKeyboardNameEntryComplete_Parms KeyboardNameEntryComplete_Parms;
	KeyboardNameEntryComplete_Parms.bOK = bOK;
	memcpy ( &KeyboardNameEntryComplete_Parms.sName, &sName, 0xC );

	this->ProcessEvent ( pFnKeyboardNameEntryComplete, &KeyboardNameEntryComplete_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.ShowKeyboard
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpappearance::ShowKeyboard ( )
{
	static UFunction* pFnShowKeyboard = NULL;

	if ( ! pFnShowKeyboard )
		pFnShowKeyboard = (UFunction*) UObject::GObjObjects()->Data[ 109520 ];

	Usfxgui_mpappearance_execShowKeyboard_Parms ShowKeyboard_Parms;

	this->ProcessEvent ( pFnShowKeyboard, &ShowKeyboard_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetSelectedSkinToneID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpappearance::GetSelectedSkinToneID ( )
{
	static UFunction* pFnGetSelectedSkinToneID = NULL;

	if ( ! pFnGetSelectedSkinToneID )
		pFnGetSelectedSkinToneID = (UFunction*) UObject::GObjObjects()->Data[ 109518 ];

	Usfxgui_mpappearance_execGetSelectedSkinToneID_Parms GetSelectedSkinToneID_Parms;

	this->ProcessEvent ( pFnGetSelectedSkinToneID, &GetSelectedSkinToneID_Parms, NULL );

	return GetSelectedSkinToneID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangeSkinToneSelection
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangeSkinToneSelection ( int nID )
{
	static UFunction* pFnChangeSkinToneSelection = NULL;

	if ( ! pFnChangeSkinToneSelection )
		pFnChangeSkinToneSelection = (UFunction*) UObject::GObjObjects()->Data[ 109516 ];

	Usfxgui_mpappearance_execChangeSkinToneSelection_Parms ChangeSkinToneSelection_Parms;
	ChangeSkinToneSelection_Parms.nID = nID;

	this->ProcessEvent ( pFnChangeSkinToneSelection, &ChangeSkinToneSelection_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangePawnSkinTone
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangePawnSkinTone ( int nID )
{
	static UFunction* pFnChangePawnSkinTone = NULL;

	if ( ! pFnChangePawnSkinTone )
		pFnChangePawnSkinTone = (UFunction*) UObject::GObjObjects()->Data[ 109514 ];

	Usfxgui_mpappearance_execChangePawnSkinTone_Parms ChangePawnSkinTone_Parms;
	ChangePawnSkinTone_Parms.nID = nID;

	this->ProcessEvent ( pFnChangePawnSkinTone, &ChangePawnSkinTone_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetSelectedEmissiveID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpappearance::GetSelectedEmissiveID ( )
{
	static UFunction* pFnGetSelectedEmissiveID = NULL;

	if ( ! pFnGetSelectedEmissiveID )
		pFnGetSelectedEmissiveID = (UFunction*) UObject::GObjObjects()->Data[ 109512 ];

	Usfxgui_mpappearance_execGetSelectedEmissiveID_Parms GetSelectedEmissiveID_Parms;

	this->ProcessEvent ( pFnGetSelectedEmissiveID, &GetSelectedEmissiveID_Parms, NULL );

	return GetSelectedEmissiveID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangeEmissiveSelection
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangeEmissiveSelection ( int nID )
{
	static UFunction* pFnChangeEmissiveSelection = NULL;

	if ( ! pFnChangeEmissiveSelection )
		pFnChangeEmissiveSelection = (UFunction*) UObject::GObjObjects()->Data[ 109510 ];

	Usfxgui_mpappearance_execChangeEmissiveSelection_Parms ChangeEmissiveSelection_Parms;
	ChangeEmissiveSelection_Parms.nID = nID;

	this->ProcessEvent ( pFnChangeEmissiveSelection, &ChangeEmissiveSelection_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangePawnEmissive
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangePawnEmissive ( int nID )
{
	static UFunction* pFnChangePawnEmissive = NULL;

	if ( ! pFnChangePawnEmissive )
		pFnChangePawnEmissive = (UFunction*) UObject::GObjObjects()->Data[ 109508 ];

	Usfxgui_mpappearance_execChangePawnEmissive_Parms ChangePawnEmissive_Parms;
	ChangePawnEmissive_Parms.nID = nID;

	this->ProcessEvent ( pFnChangePawnEmissive, &ChangePawnEmissive_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetSelectedPhongID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpappearance::GetSelectedPhongID ( )
{
	static UFunction* pFnGetSelectedPhongID = NULL;

	if ( ! pFnGetSelectedPhongID )
		pFnGetSelectedPhongID = (UFunction*) UObject::GObjObjects()->Data[ 109506 ];

	Usfxgui_mpappearance_execGetSelectedPhongID_Parms GetSelectedPhongID_Parms;

	this->ProcessEvent ( pFnGetSelectedPhongID, &GetSelectedPhongID_Parms, NULL );

	return GetSelectedPhongID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangePhongSelection
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangePhongSelection ( int nID )
{
	static UFunction* pFnChangePhongSelection = NULL;

	if ( ! pFnChangePhongSelection )
		pFnChangePhongSelection = (UFunction*) UObject::GObjObjects()->Data[ 109504 ];

	Usfxgui_mpappearance_execChangePhongSelection_Parms ChangePhongSelection_Parms;
	ChangePhongSelection_Parms.nID = nID;

	this->ProcessEvent ( pFnChangePhongSelection, &ChangePhongSelection_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangePawnPhong
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangePawnPhong ( int nID )
{
	static UFunction* pFnChangePawnPhong = NULL;

	if ( ! pFnChangePawnPhong )
		pFnChangePawnPhong = (UFunction*) UObject::GObjObjects()->Data[ 109502 ];

	Usfxgui_mpappearance_execChangePawnPhong_Parms ChangePawnPhong_Parms;
	ChangePawnPhong_Parms.nID = nID;

	this->ProcessEvent ( pFnChangePawnPhong, &ChangePawnPhong_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetSelectedPatternID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpappearance::GetSelectedPatternID ( )
{
	static UFunction* pFnGetSelectedPatternID = NULL;

	if ( ! pFnGetSelectedPatternID )
		pFnGetSelectedPatternID = (UFunction*) UObject::GObjObjects()->Data[ 109500 ];

	Usfxgui_mpappearance_execGetSelectedPatternID_Parms GetSelectedPatternID_Parms;

	this->ProcessEvent ( pFnGetSelectedPatternID, &GetSelectedPatternID_Parms, NULL );

	return GetSelectedPatternID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangePatternSelection
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangePatternSelection ( int nID )
{
	static UFunction* pFnChangePatternSelection = NULL;

	if ( ! pFnChangePatternSelection )
		pFnChangePatternSelection = (UFunction*) UObject::GObjObjects()->Data[ 109498 ];

	Usfxgui_mpappearance_execChangePatternSelection_Parms ChangePatternSelection_Parms;
	ChangePatternSelection_Parms.nID = nID;

	this->ProcessEvent ( pFnChangePatternSelection, &ChangePatternSelection_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangePawnPattern
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangePawnPattern ( int nID )
{
	static UFunction* pFnChangePawnPattern = NULL;

	if ( ! pFnChangePawnPattern )
		pFnChangePawnPattern = (UFunction*) UObject::GObjObjects()->Data[ 109496 ];

	Usfxgui_mpappearance_execChangePawnPattern_Parms ChangePawnPattern_Parms;
	ChangePawnPattern_Parms.nID = nID;

	this->ProcessEvent ( pFnChangePawnPattern, &ChangePawnPattern_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetSelectedPatternColorID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpappearance::GetSelectedPatternColorID ( )
{
	static UFunction* pFnGetSelectedPatternColorID = NULL;

	if ( ! pFnGetSelectedPatternColorID )
		pFnGetSelectedPatternColorID = (UFunction*) UObject::GObjObjects()->Data[ 109494 ];

	Usfxgui_mpappearance_execGetSelectedPatternColorID_Parms GetSelectedPatternColorID_Parms;

	this->ProcessEvent ( pFnGetSelectedPatternColorID, &GetSelectedPatternColorID_Parms, NULL );

	return GetSelectedPatternColorID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangePatternColorSelection
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangePatternColorSelection ( int nID )
{
	static UFunction* pFnChangePatternColorSelection = NULL;

	if ( ! pFnChangePatternColorSelection )
		pFnChangePatternColorSelection = (UFunction*) UObject::GObjObjects()->Data[ 109492 ];

	Usfxgui_mpappearance_execChangePatternColorSelection_Parms ChangePatternColorSelection_Parms;
	ChangePatternColorSelection_Parms.nID = nID;

	this->ProcessEvent ( pFnChangePatternColorSelection, &ChangePatternColorSelection_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangePawnPatternColor
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangePawnPatternColor ( int nID )
{
	static UFunction* pFnChangePawnPatternColor = NULL;

	if ( ! pFnChangePawnPatternColor )
		pFnChangePawnPatternColor = (UFunction*) UObject::GObjObjects()->Data[ 109490 ];

	Usfxgui_mpappearance_execChangePawnPatternColor_Parms ChangePawnPatternColor_Parms;
	ChangePawnPatternColor_Parms.nID = nID;

	this->ProcessEvent ( pFnChangePawnPatternColor, &ChangePawnPatternColor_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetSelectedTint2ID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpappearance::GetSelectedTint2ID ( )
{
	static UFunction* pFnGetSelectedTint2ID = NULL;

	if ( ! pFnGetSelectedTint2ID )
		pFnGetSelectedTint2ID = (UFunction*) UObject::GObjObjects()->Data[ 109488 ];

	Usfxgui_mpappearance_execGetSelectedTint2ID_Parms GetSelectedTint2ID_Parms;

	this->ProcessEvent ( pFnGetSelectedTint2ID, &GetSelectedTint2ID_Parms, NULL );

	return GetSelectedTint2ID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangeTint2Selection
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangeTint2Selection ( int nID )
{
	static UFunction* pFnChangeTint2Selection = NULL;

	if ( ! pFnChangeTint2Selection )
		pFnChangeTint2Selection = (UFunction*) UObject::GObjObjects()->Data[ 109486 ];

	Usfxgui_mpappearance_execChangeTint2Selection_Parms ChangeTint2Selection_Parms;
	ChangeTint2Selection_Parms.nID = nID;

	this->ProcessEvent ( pFnChangeTint2Selection, &ChangeTint2Selection_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangePawnTint2
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangePawnTint2 ( int nID )
{
	static UFunction* pFnChangePawnTint2 = NULL;

	if ( ! pFnChangePawnTint2 )
		pFnChangePawnTint2 = (UFunction*) UObject::GObjObjects()->Data[ 109484 ];

	Usfxgui_mpappearance_execChangePawnTint2_Parms ChangePawnTint2_Parms;
	ChangePawnTint2_Parms.nID = nID;

	this->ProcessEvent ( pFnChangePawnTint2, &ChangePawnTint2_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetSelectedTint1ID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpappearance::GetSelectedTint1ID ( )
{
	static UFunction* pFnGetSelectedTint1ID = NULL;

	if ( ! pFnGetSelectedTint1ID )
		pFnGetSelectedTint1ID = (UFunction*) UObject::GObjObjects()->Data[ 109482 ];

	Usfxgui_mpappearance_execGetSelectedTint1ID_Parms GetSelectedTint1ID_Parms;

	this->ProcessEvent ( pFnGetSelectedTint1ID, &GetSelectedTint1ID_Parms, NULL );

	return GetSelectedTint1ID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangeTint1Selection
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangeTint1Selection ( int nID )
{
	static UFunction* pFnChangeTint1Selection = NULL;

	if ( ! pFnChangeTint1Selection )
		pFnChangeTint1Selection = (UFunction*) UObject::GObjObjects()->Data[ 109480 ];

	Usfxgui_mpappearance_execChangeTint1Selection_Parms ChangeTint1Selection_Parms;
	ChangeTint1Selection_Parms.nID = nID;

	this->ProcessEvent ( pFnChangeTint1Selection, &ChangeTint1Selection_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.ChangePawnTint1
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void Usfxgui_mpappearance::ChangePawnTint1 ( int nID )
{
	static UFunction* pFnChangePawnTint1 = NULL;

	if ( ! pFnChangePawnTint1 )
		pFnChangePawnTint1 = (UFunction*) UObject::GObjObjects()->Data[ 109478 ];

	Usfxgui_mpappearance_execChangePawnTint1_Parms ChangePawnTint1_Parms;
	ChangePawnTint1_Parms.nID = nID;

	this->ProcessEvent ( pFnChangePawnTint1, &ChangePawnTint1_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.ApplyTinting
// [0x00020002] 
// Parameters infos:
// class UObject*                 InSettings                     ( CPF_Parm )

void Usfxgui_mpappearance::ApplyTinting ( class UObject* InSettings )
{
	static UFunction* pFnApplyTinting = NULL;

	if ( ! pFnApplyTinting )
		pFnApplyTinting = (UFunction*) UObject::GObjObjects()->Data[ 109474 ];

	Usfxgui_mpappearance_execApplyTinting_Parms ApplyTinting_Parms;
	ApplyTinting_Parms.InSettings = InSettings;

	this->ProcessEvent ( pFnApplyTinting, &ApplyTinting_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.SetInitialPawnPosition
// [0x00020002] 
// Parameters infos:
// class UObject*                 Data                           ( CPF_Parm )

void Usfxgui_mpappearance::SetInitialPawnPosition ( class UObject* Data )
{
	static UFunction* pFnSetInitialPawnPosition = NULL;

	if ( ! pFnSetInitialPawnPosition )
		pFnSetInitialPawnPosition = (UFunction*) UObject::GObjObjects()->Data[ 109471 ];

	Usfxgui_mpappearance_execSetInitialPawnPosition_Parms SetInitialPawnPosition_Parms;
	SetInitialPawnPosition_Parms.Data = Data;

	this->ProcessEvent ( pFnSetInitialPawnPosition, &SetInitialPawnPosition_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.ConfirmButtonPressed
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpappearance::ConfirmButtonPressed ( )
{
	static UFunction* pFnConfirmButtonPressed = NULL;

	if ( ! pFnConfirmButtonPressed )
		pFnConfirmButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 109458 ];

	Usfxgui_mpappearance_execConfirmButtonPressed_Parms ConfirmButtonPressed_Parms;

	this->ProcessEvent ( pFnConfirmButtonPressed, &ConfirmButtonPressed_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.CancelConfirmCallback
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Usfxgui_mpappearance::CancelConfirmCallback ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnCancelConfirmCallback = NULL;

	if ( ! pFnCancelConfirmCallback )
		pFnCancelConfirmCallback = (UFunction*) UObject::GObjObjects()->Data[ 109465 ];

	Usfxgui_mpappearance_execCancelConfirmCallback_Parms CancelConfirmCallback_Parms;
	CancelConfirmCallback_Parms.bAPressed = bAPressed;
	CancelConfirmCallback_Parms.nContext = nContext;

	this->ProcessEvent ( pFnCancelConfirmCallback, &CancelConfirmCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.CancelScreen
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpappearance::CancelScreen ( )
{
	static UFunction* pFnCancelScreen = NULL;

	if ( ! pFnCancelScreen )
		pFnCancelScreen = (UFunction*) UObject::GObjObjects()->Data[ 109459 ];

	Usfxgui_mpappearance_execCancelScreen_Parms CancelScreen_Parms;

	this->ProcessEvent ( pFnCancelScreen, &CancelScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.BackButtonPressed
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpappearance::BackButtonPressed ( )
{
	static UFunction* pFnBackButtonPressed = NULL;

	if ( ! pFnBackButtonPressed )
		pFnBackButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 109455 ];

	Usfxgui_mpappearance_execBackButtonPressed_Parms BackButtonPressed_Parms;

	this->ProcessEvent ( pFnBackButtonPressed, &BackButtonPressed_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetIdxByAppearanceID
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Id                             ( CPF_Parm )
// TArray< struct FCustomizableElement > AppearanceData                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int Usfxgui_mpappearance::GetIdxByAppearanceID ( int Id, TArray< struct FCustomizableElement >* AppearanceData )
{
	static UFunction* pFnGetIdxByAppearanceID = NULL;

	if ( ! pFnGetIdxByAppearanceID )
		pFnGetIdxByAppearanceID = (UFunction*) UObject::GObjObjects()->Data[ 109447 ];

	Usfxgui_mpappearance_execGetIdxByAppearanceID_Parms GetIdxByAppearanceID_Parms;
	GetIdxByAppearanceID_Parms.Id = Id;

	this->ProcessEvent ( pFnGetIdxByAppearanceID, &GetIdxByAppearanceID_Parms, NULL );

	if ( AppearanceData )
		memcpy ( AppearanceData, &GetIdxByAppearanceID_Parms.AppearanceData, 0xC );

	return GetIdxByAppearanceID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetSkinToneSwatchData
// [0x00020002] 
// Parameters infos:
// TArray< struct FTintSwatchData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FTintSwatchData > Usfxgui_mpappearance::GetSkinToneSwatchData ( )
{
	static UFunction* pFnGetSkinToneSwatchData = NULL;

	if ( ! pFnGetSkinToneSwatchData )
		pFnGetSkinToneSwatchData = (UFunction*) UObject::GObjObjects()->Data[ 109444 ];

	Usfxgui_mpappearance_execGetSkinToneSwatchData_Parms GetSkinToneSwatchData_Parms;

	this->ProcessEvent ( pFnGetSkinToneSwatchData, &GetSkinToneSwatchData_Parms, NULL );

	return GetSkinToneSwatchData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetEmissiveSwatchData
// [0x00020002] 
// Parameters infos:
// TArray< struct FTintSwatchData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FTintSwatchData > Usfxgui_mpappearance::GetEmissiveSwatchData ( )
{
	static UFunction* pFnGetEmissiveSwatchData = NULL;

	if ( ! pFnGetEmissiveSwatchData )
		pFnGetEmissiveSwatchData = (UFunction*) UObject::GObjObjects()->Data[ 109441 ];

	Usfxgui_mpappearance_execGetEmissiveSwatchData_Parms GetEmissiveSwatchData_Parms;

	this->ProcessEvent ( pFnGetEmissiveSwatchData, &GetEmissiveSwatchData_Parms, NULL );

	return GetEmissiveSwatchData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetPhongSwatchData
// [0x00020002] 
// Parameters infos:
// TArray< struct FTintSwatchData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FTintSwatchData > Usfxgui_mpappearance::GetPhongSwatchData ( )
{
	static UFunction* pFnGetPhongSwatchData = NULL;

	if ( ! pFnGetPhongSwatchData )
		pFnGetPhongSwatchData = (UFunction*) UObject::GObjObjects()->Data[ 109438 ];

	Usfxgui_mpappearance_execGetPhongSwatchData_Parms GetPhongSwatchData_Parms;

	this->ProcessEvent ( pFnGetPhongSwatchData, &GetPhongSwatchData_Parms, NULL );

	return GetPhongSwatchData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetPatternColorSwatchData
// [0x00020002] 
// Parameters infos:
// TArray< struct FTintSwatchData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FTintSwatchData > Usfxgui_mpappearance::GetPatternColorSwatchData ( )
{
	static UFunction* pFnGetPatternColorSwatchData = NULL;

	if ( ! pFnGetPatternColorSwatchData )
		pFnGetPatternColorSwatchData = (UFunction*) UObject::GObjObjects()->Data[ 109435 ];

	Usfxgui_mpappearance_execGetPatternColorSwatchData_Parms GetPatternColorSwatchData_Parms;

	this->ProcessEvent ( pFnGetPatternColorSwatchData, &GetPatternColorSwatchData_Parms, NULL );

	return GetPatternColorSwatchData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetPatternData
// [0x00020002] 
// Parameters infos:
// TArray< struct FPatternData >  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FPatternData > Usfxgui_mpappearance::GetPatternData ( )
{
	static UFunction* pFnGetPatternData = NULL;

	if ( ! pFnGetPatternData )
		pFnGetPatternData = (UFunction*) UObject::GObjObjects()->Data[ 109432 ];

	Usfxgui_mpappearance_execGetPatternData_Parms GetPatternData_Parms;

	this->ProcessEvent ( pFnGetPatternData, &GetPatternData_Parms, NULL );

	return GetPatternData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetTint2SwatchData
// [0x00020002] 
// Parameters infos:
// TArray< struct FTintSwatchData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FTintSwatchData > Usfxgui_mpappearance::GetTint2SwatchData ( )
{
	static UFunction* pFnGetTint2SwatchData = NULL;

	if ( ! pFnGetTint2SwatchData )
		pFnGetTint2SwatchData = (UFunction*) UObject::GObjObjects()->Data[ 109429 ];

	Usfxgui_mpappearance_execGetTint2SwatchData_Parms GetTint2SwatchData_Parms;

	this->ProcessEvent ( pFnGetTint2SwatchData, &GetTint2SwatchData_Parms, NULL );

	return GetTint2SwatchData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetTint1SwatchData
// [0x00020002] 
// Parameters infos:
// TArray< struct FTintSwatchData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FTintSwatchData > Usfxgui_mpappearance::GetTint1SwatchData ( )
{
	static UFunction* pFnGetTint1SwatchData = NULL;

	if ( ! pFnGetTint1SwatchData )
		pFnGetTint1SwatchData = (UFunction*) UObject::GObjObjects()->Data[ 109426 ];

	Usfxgui_mpappearance_execGetTint1SwatchData_Parms GetTint1SwatchData_Parms;

	this->ProcessEvent ( pFnGetTint1SwatchData, &GetTint1SwatchData_Parms, NULL );

	return GetTint1SwatchData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.GetOriginalCharacterName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpappearance::GetOriginalCharacterName ( )
{
	static UFunction* pFnGetOriginalCharacterName = NULL;

	if ( ! pFnGetOriginalCharacterName )
		pFnGetOriginalCharacterName = (UFunction*) UObject::GObjObjects()->Data[ 109423 ];

	Usfxgui_mpappearance_execGetOriginalCharacterName_Parms GetOriginalCharacterName_Parms;

	this->ProcessEvent ( pFnGetOriginalCharacterName, &GetOriginalCharacterName_Parms, NULL );

	return GetOriginalCharacterName_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpappearance.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpappearance::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 109422 ];

	Usfxgui_mpappearance_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpappearance.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpappearance::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 109406 ];

	Usfxgui_mpappearance_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.AS_StartPromotionEvent
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpselectkit::AS_StartPromotionEvent ( )
{
	static UFunction* pFnAS_StartPromotionEvent = NULL;

	if ( ! pFnAS_StartPromotionEvent )
		pFnAS_StartPromotionEvent = (UFunction*) UObject::GObjObjects()->Data[ 110985 ];

	Usfxgui_mpselectkit_execAS_StartPromotionEvent_Parms AS_StartPromotionEvent_Parms;

	this->ProcessEvent ( pFnAS_StartPromotionEvent, &AS_StartPromotionEvent_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.AS_SetInputDisabled
// [0x00020002] 
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void Usfxgui_mpselectkit::AS_SetInputDisabled ( unsigned long B )
{
	static UFunction* pFnAS_SetInputDisabled = NULL;

	if ( ! pFnAS_SetInputDisabled )
		pFnAS_SetInputDisabled = (UFunction*) UObject::GObjObjects()->Data[ 110983 ];

	Usfxgui_mpselectkit_execAS_SetInputDisabled_Parms AS_SetInputDisabled_Parms;
	AS_SetInputDisabled_Parms.B = B;

	this->ProcessEvent ( pFnAS_SetInputDisabled, &AS_SetInputDisabled_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.AS_RefreshScreen
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpselectkit::AS_RefreshScreen ( )
{
	static UFunction* pFnAS_RefreshScreen = NULL;

	if ( ! pFnAS_RefreshScreen )
		pFnAS_RefreshScreen = (UFunction*) UObject::GObjObjects()->Data[ 110982 ];

	Usfxgui_mpselectkit_execAS_RefreshScreen_Parms AS_RefreshScreen_Parms;

	this->ProcessEvent ( pFnAS_RefreshScreen, &AS_RefreshScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.AS_InitializeScreen
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpselectkit::AS_InitializeScreen ( )
{
	static UFunction* pFnAS_InitializeScreen = NULL;

	if ( ! pFnAS_InitializeScreen )
		pFnAS_InitializeScreen = (UFunction*) UObject::GObjObjects()->Data[ 110981 ];

	Usfxgui_mpselectkit_execAS_InitializeScreen_Parms AS_InitializeScreen_Parms;

	this->ProcessEvent ( pFnAS_InitializeScreen, &AS_InitializeScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.BackWillExitMultiplayer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpselectkit::BackWillExitMultiplayer ( )
{
	static UFunction* pFnBackWillExitMultiplayer = NULL;

	if ( ! pFnBackWillExitMultiplayer )
		pFnBackWillExitMultiplayer = (UFunction*) UObject::GObjObjects()->Data[ 110978 ];

	Usfxgui_mpselectkit_execBackWillExitMultiplayer_Parms BackWillExitMultiplayer_Parms;

	this->ProcessEvent ( pFnBackWillExitMultiplayer, &BackWillExitMultiplayer_Parms, NULL );

	return BackWillExitMultiplayer_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpselectkit.GetClassPromotionString
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpselectkit::GetClassPromotionString ( )
{
	static UFunction* pFnGetClassPromotionString = NULL;

	if ( ! pFnGetClassPromotionString )
		pFnGetClassPromotionString = (UFunction*) UObject::GObjObjects()->Data[ 110980 ];

	Usfxgui_mpselectkit_execGetClassPromotionString_Parms GetClassPromotionString_Parms;

	this->ProcessEvent ( pFnGetClassPromotionString, &GetClassPromotionString_Parms, NULL );

	return GetClassPromotionString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpselectkit.GetPromotionN7RatingsBoost
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpselectkit::GetPromotionN7RatingsBoost ( )
{
	static UFunction* pFnGetPromotionN7RatingsBoost = NULL;

	if ( ! pFnGetPromotionN7RatingsBoost )
		pFnGetPromotionN7RatingsBoost = (UFunction*) UObject::GObjObjects()->Data[ 110974 ];

	Usfxgui_mpselectkit_execGetPromotionN7RatingsBoost_Parms GetPromotionN7RatingsBoost_Parms;

	this->ProcessEvent ( pFnGetPromotionN7RatingsBoost, &GetPromotionN7RatingsBoost_Parms, NULL );

	return GetPromotionN7RatingsBoost_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpselectkit.GetPromoteEventPauseTime
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpselectkit::GetPromoteEventPauseTime ( )
{
	static UFunction* pFnGetPromoteEventPauseTime = NULL;

	if ( ! pFnGetPromoteEventPauseTime )
		pFnGetPromoteEventPauseTime = (UFunction*) UObject::GObjObjects()->Data[ 110971 ];

	Usfxgui_mpselectkit_execGetPromoteEventPauseTime_Parms GetPromoteEventPauseTime_Parms;

	this->ProcessEvent ( pFnGetPromoteEventPauseTime, &GetPromoteEventPauseTime_Parms, NULL );

	return GetPromoteEventPauseTime_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpselectkit.GetLastHighlightedCharacter
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class Usfxmpcharacterrecord*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class Usfxmpcharacterrecord* Usfxgui_mpselectkit::GetLastHighlightedCharacter ( )
{
	static UFunction* pFnGetLastHighlightedCharacter = NULL;

	if ( ! pFnGetLastHighlightedCharacter )
		pFnGetLastHighlightedCharacter = (UFunction*) UObject::GObjObjects()->Data[ 110956 ];

	Usfxgui_mpselectkit_execGetLastHighlightedCharacter_Parms GetLastHighlightedCharacter_Parms;

	this->ProcessEvent ( pFnGetLastHighlightedCharacter, &GetLastHighlightedCharacter_Parms, NULL );

	return GetLastHighlightedCharacter_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpselectkit.SetLastHighlightedCharacter
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FName                   KitName                        ( CPF_Parm )

void Usfxgui_mpselectkit::SetLastHighlightedCharacter ( struct FName KitName )
{
	static UFunction* pFnSetLastHighlightedCharacter = NULL;

	if ( ! pFnSetLastHighlightedCharacter )
		pFnSetLastHighlightedCharacter = (UFunction*) UObject::GObjObjects()->Data[ 110889 ];

	Usfxgui_mpselectkit_execSetLastHighlightedCharacter_Parms SetLastHighlightedCharacter_Parms;
	memcpy ( &SetLastHighlightedCharacter_Parms.KitName, &KitName, 0x8 );

	this->ProcessEvent ( pFnSetLastHighlightedCharacter, &SetLastHighlightedCharacter_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.HasValidLastHighlightedCharacter
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpselectkit::HasValidLastHighlightedCharacter ( )
{
	static UFunction* pFnHasValidLastHighlightedCharacter = NULL;

	if ( ! pFnHasValidLastHighlightedCharacter )
		pFnHasValidLastHighlightedCharacter = (UFunction*) UObject::GObjObjects()->Data[ 110888 ];

	Usfxgui_mpselectkit_execHasValidLastHighlightedCharacter_Parms HasValidLastHighlightedCharacter_Parms;

	this->ProcessEvent ( pFnHasValidLastHighlightedCharacter, &HasValidLastHighlightedCharacter_Parms, NULL );

	return HasValidLastHighlightedCharacter_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpselectkit.IsSignedIn
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpselectkit::IsSignedIn ( )
{
	static UFunction* pFnIsSignedIn = NULL;

	if ( ! pFnIsSignedIn )
		pFnIsSignedIn = (UFunction*) UObject::GObjObjects()->Data[ 110959 ];

	Usfxgui_mpselectkit_execIsSignedIn_Parms IsSignedIn_Parms;

	this->ProcessEvent ( pFnIsSignedIn, &IsSignedIn_Parms, NULL );

	return IsSignedIn_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpselectkit.GetSelectedCharacterKit
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpselectkit::GetSelectedCharacterKit ( )
{
	static UFunction* pFnGetSelectedCharacterKit = NULL;

	if ( ! pFnGetSelectedCharacterKit )
		pFnGetSelectedCharacterKit = (UFunction*) UObject::GObjObjects()->Data[ 110957 ];

	Usfxgui_mpselectkit_execGetSelectedCharacterKit_Parms GetSelectedCharacterKit_Parms;

	this->ProcessEvent ( pFnGetSelectedCharacterKit, &GetSelectedCharacterKit_Parms, NULL );

	return GetSelectedCharacterKit_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpselectkit.GetSelectedCharacterClass
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpselectkit::GetSelectedCharacterClass ( )
{
	static UFunction* pFnGetSelectedCharacterClass = NULL;

	if ( ! pFnGetSelectedCharacterClass )
		pFnGetSelectedCharacterClass = (UFunction*) UObject::GObjObjects()->Data[ 110954 ];

	Usfxgui_mpselectkit_execGetSelectedCharacterClass_Parms GetSelectedCharacterClass_Parms;

	this->ProcessEvent ( pFnGetSelectedCharacterClass, &GetSelectedCharacterClass_Parms, NULL );

	return GetSelectedCharacterClass_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpselectkit.PromoteConfirmCallback
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Usfxgui_mpselectkit::PromoteConfirmCallback ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnPromoteConfirmCallback = NULL;

	if ( ! pFnPromoteConfirmCallback )
		pFnPromoteConfirmCallback = (UFunction*) UObject::GObjObjects()->Data[ 110951 ];

	Usfxgui_mpselectkit_execPromoteConfirmCallback_Parms PromoteConfirmCallback_Parms;
	PromoteConfirmCallback_Parms.bAPressed = bAPressed;
	PromoteConfirmCallback_Parms.nContext = nContext;

	this->ProcessEvent ( pFnPromoteConfirmCallback, &PromoteConfirmCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.PromoteClassWarningCallback
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Usfxgui_mpselectkit::PromoteClassWarningCallback ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnPromoteClassWarningCallback = NULL;

	if ( ! pFnPromoteClassWarningCallback )
		pFnPromoteClassWarningCallback = (UFunction*) UObject::GObjObjects()->Data[ 110945 ];

	Usfxgui_mpselectkit_execPromoteClassWarningCallback_Parms PromoteClassWarningCallback_Parms;
	PromoteClassWarningCallback_Parms.bAPressed = bAPressed;
	PromoteClassWarningCallback_Parms.nContext = nContext;

	this->ProcessEvent ( pFnPromoteClassWarningCallback, &PromoteClassWarningCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.PromoteClass
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 className                      ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mpselectkit::PromoteClass ( struct FString className )
{
	static UFunction* pFnPromoteClass = NULL;

	if ( ! pFnPromoteClass )
		pFnPromoteClass = (UFunction*) UObject::GObjObjects()->Data[ 110937 ];

	Usfxgui_mpselectkit_execPromoteClass_Parms PromoteClass_Parms;
	memcpy ( &PromoteClass_Parms.className, &className, 0xC );

	this->ProcessEvent ( pFnPromoteClass, &PromoteClass_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.HideWaitMessageBox
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpselectkit::HideWaitMessageBox ( )
{
	static UFunction* pFnHideWaitMessageBox = NULL;

	if ( ! pFnHideWaitMessageBox )
		pFnHideWaitMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 110921 ];

	Usfxgui_mpselectkit_execHideWaitMessageBox_Parms HideWaitMessageBox_Parms;

	this->ProcessEvent ( pFnHideWaitMessageBox, &HideWaitMessageBox_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.ShowWaitMessageBox
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// void*                          srMessage                      ( CPF_Parm )

void Usfxgui_mpselectkit::ShowWaitMessageBox ( void* srMessage )
{
	static UFunction* pFnShowWaitMessageBox = NULL;

	if ( ! pFnShowWaitMessageBox )
		pFnShowWaitMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 110919 ];

	Usfxgui_mpselectkit_execShowWaitMessageBox_Parms ShowWaitMessageBox_Parms;
	ShowWaitMessageBox_Parms.srMessage = srMessage;

	this->ProcessEvent ( pFnShowWaitMessageBox, &ShowWaitMessageBox_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.HideLoadingCharacterMessageBox
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpselectkit::HideLoadingCharacterMessageBox ( )
{
	static UFunction* pFnHideLoadingCharacterMessageBox = NULL;

	if ( ! pFnHideLoadingCharacterMessageBox )
		pFnHideLoadingCharacterMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 110934 ];

	Usfxgui_mpselectkit_execHideLoadingCharacterMessageBox_Parms HideLoadingCharacterMessageBox_Parms;

	this->ProcessEvent ( pFnHideLoadingCharacterMessageBox, &HideLoadingCharacterMessageBox_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.ShowLoadingCharacterMessageBox
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpselectkit::ShowLoadingCharacterMessageBox ( )
{
	static UFunction* pFnShowLoadingCharacterMessageBox = NULL;

	if ( ! pFnShowLoadingCharacterMessageBox )
		pFnShowLoadingCharacterMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 110930 ];

	Usfxgui_mpselectkit_execShowLoadingCharacterMessageBox_Parms ShowLoadingCharacterMessageBox_Parms;

	this->ProcessEvent ( pFnShowLoadingCharacterMessageBox, &ShowLoadingCharacterMessageBox_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.CanGoBack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpselectkit::CanGoBack ( )
{
	static UFunction* pFnCanGoBack = NULL;

	if ( ! pFnCanGoBack )
		pFnCanGoBack = (UFunction*) UObject::GObjObjects()->Data[ 110928 ];

	Usfxgui_mpselectkit_execCanGoBack_Parms CanGoBack_Parms;

	this->ProcessEvent ( pFnCanGoBack, &CanGoBack_Parms, NULL );

	return CanGoBack_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpselectkit.GoBack
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpselectkit::GoBack ( )
{
	static UFunction* pFnGoBack = NULL;

	if ( ! pFnGoBack )
		pFnGoBack = (UFunction*) UObject::GObjObjects()->Data[ 110927 ];

	Usfxgui_mpselectkit_execGoBack_Parms GoBack_Parms;

	this->ProcessEvent ( pFnGoBack, &GoBack_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpselectkit::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 110926 ];

	Usfxgui_mpselectkit_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.SelectKitAndProceed
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 KitName                        ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mpselectkit::SelectKitAndProceed ( struct FString KitName )
{
	static UFunction* pFnSelectKitAndProceed = NULL;

	if ( ! pFnSelectKitAndProceed )
		pFnSelectKitAndProceed = (UFunction*) UObject::GObjObjects()->Data[ 110924 ];

	Usfxgui_mpselectkit_execSelectKitAndProceed_Parms SelectKitAndProceed_Parms;
	memcpy ( &SelectKitAndProceed_Parms.KitName, &KitName, 0xC );

	this->ProcessEvent ( pFnSelectKitAndProceed, &SelectKitAndProceed_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.DeployKit
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 KitName                        ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mpselectkit::DeployKit ( struct FString KitName )
{
	static UFunction* pFnDeployKit = NULL;

	if ( ! pFnDeployKit )
		pFnDeployKit = (UFunction*) UObject::GObjObjects()->Data[ 110922 ];

	Usfxgui_mpselectkit_execDeployKit_Parms DeployKit_Parms;
	memcpy ( &DeployKit_Parms.KitName, &KitName, 0xC );

	this->ProcessEvent ( pFnDeployKit, &DeployKit_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void Usfxgui_mpselectkit::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 110916 ];

	Usfxgui_mpselectkit_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpselectkit.GetKitData
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FKitDisplayData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 className                      ( CPF_Parm | CPF_NeedCtorLink )

TArray< struct FKitDisplayData > Usfxgui_mpselectkit::GetKitData ( struct FString className )
{
	static UFunction* pFnGetKitData = NULL;

	if ( ! pFnGetKitData )
		pFnGetKitData = (UFunction*) UObject::GObjObjects()->Data[ 110905 ];

	Usfxgui_mpselectkit_execGetKitData_Parms GetKitData_Parms;
	memcpy ( &GetKitData_Parms.className, &className, 0xC );

	this->ProcessEvent ( pFnGetKitData, &GetKitData_Parms, NULL );

	return GetKitData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpselectkit.GetClassData
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FClassDisplayData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FClassDisplayData > Usfxgui_mpselectkit::GetClassData ( )
{
	static UFunction* pFnGetClassData = NULL;

	if ( ! pFnGetClassData )
		pFnGetClassData = (UFunction*) UObject::GObjObjects()->Data[ 110890 ];

	Usfxgui_mpselectkit_execGetClassData_Parms GetClassData_Parms;

	this->ProcessEvent ( pFnGetClassData, &GetClassData_Parms, NULL );

	return GetClassData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpselectkit.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpselectkit::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 110884 ];

	Usfxgui_mpselectkit_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetOverallMatchResults
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class USFXMatchResultsData*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXMatchResultsData* Usfxgui_mpmatchresults::GetOverallMatchResults ( )
{
	static UFunction* pFnGetOverallMatchResults = NULL;

	if ( ! pFnGetOverallMatchResults )
		pFnGetOverallMatchResults = (UFunction*) UObject::GObjObjects()->Data[ 110526 ];

	Usfxgui_mpmatchresults_execGetOverallMatchResults_Parms GetOverallMatchResults_Parms;

	this->ProcessEvent ( pFnGetOverallMatchResults, &GetOverallMatchResults_Parms, NULL );

	return GetOverallMatchResults_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.AS_InitializeScreen
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpmatchresults::AS_InitializeScreen ( )
{
	static UFunction* pFnAS_InitializeScreen = NULL;

	if ( ! pFnAS_InitializeScreen )
		pFnAS_InitializeScreen = (UFunction*) UObject::GObjObjects()->Data[ 110692 ];

	Usfxgui_mpmatchresults_execAS_InitializeScreen_Parms AS_InitializeScreen_Parms;

	this->ProcessEvent ( pFnAS_InitializeScreen, &AS_InitializeScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.StopXPProgressSound
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpmatchresults::StopXPProgressSound ( )
{
	static UFunction* pFnStopXPProgressSound = NULL;

	if ( ! pFnStopXPProgressSound )
		pFnStopXPProgressSound = (UFunction*) UObject::GObjObjects()->Data[ 110691 ];

	Usfxgui_mpmatchresults_execStopXPProgressSound_Parms StopXPProgressSound_Parms;

	this->ProcessEvent ( pFnStopXPProgressSound, &StopXPProgressSound_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.StartXPProgressSound
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpmatchresults::StartXPProgressSound ( )
{
	static UFunction* pFnStartXPProgressSound = NULL;

	if ( ! pFnStartXPProgressSound )
		pFnStartXPProgressSound = (UFunction*) UObject::GObjObjects()->Data[ 110690 ];

	Usfxgui_mpmatchresults_execStartXPProgressSound_Parms StartXPProgressSound_Parms;

	this->ProcessEvent ( pFnStartXPProgressSound, &StartXPProgressSound_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetLocalPlayerClassData
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )

struct FString Usfxgui_mpmatchresults::GetLocalPlayerClassData ( int nLevel )
{
	static UFunction* pFnGetLocalPlayerClassData = NULL;

	if ( ! pFnGetLocalPlayerClassData )
		pFnGetLocalPlayerClassData = (UFunction*) UObject::GObjObjects()->Data[ 110683 ];

	Usfxgui_mpmatchresults_execGetLocalPlayerClassData_Parms GetLocalPlayerClassData_Parms;
	GetLocalPlayerClassData_Parms.nLevel = nLevel;

	this->ProcessEvent ( pFnGetLocalPlayerClassData, &GetLocalPlayerClassData_Parms, NULL );

	return GetLocalPlayerClassData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetOverallRatingsString
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpmatchresults::GetOverallRatingsString ( )
{
	static UFunction* pFnGetOverallRatingsString = NULL;

	if ( ! pFnGetOverallRatingsString )
		pFnGetOverallRatingsString = (UFunction*) UObject::GObjObjects()->Data[ 110678 ];

	Usfxgui_mpmatchresults_execGetOverallRatingsString_Parms GetOverallRatingsString_Parms;

	this->ProcessEvent ( pFnGetOverallRatingsString, &GetOverallRatingsString_Parms, NULL );

	return GetOverallRatingsString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetMaxReadinessString
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpmatchresults::GetMaxReadinessString ( )
{
	static UFunction* pFnGetMaxReadinessString = NULL;

	if ( ! pFnGetMaxReadinessString )
		pFnGetMaxReadinessString = (UFunction*) UObject::GObjObjects()->Data[ 110671 ];

	Usfxgui_mpmatchresults_execGetMaxReadinessString_Parms GetMaxReadinessString_Parms;

	this->ProcessEvent ( pFnGetMaxReadinessString, &GetMaxReadinessString_Parms, NULL );

	return GetMaxReadinessString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.HasOverallRatingsIncrease
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpmatchresults::HasOverallRatingsIncrease ( )
{
	static UFunction* pFnHasOverallRatingsIncrease = NULL;

	if ( ! pFnHasOverallRatingsIncrease )
		pFnHasOverallRatingsIncrease = (UFunction*) UObject::GObjObjects()->Data[ 110668 ];

	Usfxgui_mpmatchresults_execHasOverallRatingsIncrease_Parms HasOverallRatingsIncrease_Parms;

	this->ProcessEvent ( pFnHasOverallRatingsIncrease, &HasOverallRatingsIncrease_Parms, NULL );

	return HasOverallRatingsIncrease_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetGAWMapString
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpmatchresults::GetGAWMapString ( )
{
	static UFunction* pFnGetGAWMapString = NULL;

	if ( ! pFnGetGAWMapString )
		pFnGetGAWMapString = (UFunction*) UObject::GObjObjects()->Data[ 110659 ];

	Usfxgui_mpmatchresults_execGetGAWMapString_Parms GetGAWMapString_Parms;

	this->ProcessEvent ( pFnGetGAWMapString, &GetGAWMapString_Parms, NULL );

	return GetGAWMapString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetGAWMapRatingIncrease
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpmatchresults::GetGAWMapRatingIncrease ( )
{
	static UFunction* pFnGetGAWMapRatingIncrease = NULL;

	if ( ! pFnGetGAWMapRatingIncrease )
		pFnGetGAWMapRatingIncrease = (UFunction*) UObject::GObjObjects()->Data[ 110656 ];

	Usfxgui_mpmatchresults_execGetGAWMapRatingIncrease_Parms GetGAWMapRatingIncrease_Parms;

	this->ProcessEvent ( pFnGetGAWMapRatingIncrease, &GetGAWMapRatingIncrease_Parms, NULL );

	return GetGAWMapRatingIncrease_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetGAWMapRating
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpmatchresults::GetGAWMapRating ( )
{
	static UFunction* pFnGetGAWMapRating = NULL;

	if ( ! pFnGetGAWMapRating )
		pFnGetGAWMapRating = (UFunction*) UObject::GObjObjects()->Data[ 110652 ];

	Usfxgui_mpmatchresults_execGetGAWMapRating_Parms GetGAWMapRating_Parms;

	this->ProcessEvent ( pFnGetGAWMapRating, &GetGAWMapRating_Parms, NULL );

	return GetGAWMapRating_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetGAWMapID
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char Usfxgui_mpmatchresults::GetGAWMapID ( )
{
	static UFunction* pFnGetGAWMapID = NULL;

	if ( ! pFnGetGAWMapID )
		pFnGetGAWMapID = (UFunction*) UObject::GObjObjects()->Data[ 110649 ];

	Usfxgui_mpmatchresults_execGetGAWMapID_Parms GetGAWMapID_Parms;

	this->ProcessEvent ( pFnGetGAWMapID, &GetGAWMapID_Parms, NULL );

	return GetGAWMapID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetLeveledUpString
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpmatchresults::GetLeveledUpString ( )
{
	static UFunction* pFnGetLeveledUpString = NULL;

	if ( ! pFnGetLeveledUpString )
		pFnGetLeveledUpString = (UFunction*) UObject::GObjObjects()->Data[ 110646 ];

	Usfxgui_mpmatchresults_execGetLeveledUpString_Parms GetLeveledUpString_Parms;

	this->ProcessEvent ( pFnGetLeveledUpString, &GetLeveledUpString_Parms, NULL );

	return GetLeveledUpString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.LeveledUp
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpmatchresults::LeveledUp ( )
{
	static UFunction* pFnLeveledUp = NULL;

	if ( ! pFnLeveledUp )
		pFnLeveledUp = (UFunction*) UObject::GObjObjects()->Data[ 110641 ];

	Usfxgui_mpmatchresults_execLeveledUp_Parms LeveledUp_Parms;

	this->ProcessEvent ( pFnLeveledUp, &LeveledUp_Parms, NULL );

	return LeveledUp_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetIntroEventPauseTime
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Usfxgui_mpmatchresults::GetIntroEventPauseTime ( )
{
	static UFunction* pFnGetIntroEventPauseTime = NULL;

	if ( ! pFnGetIntroEventPauseTime )
		pFnGetIntroEventPauseTime = (UFunction*) UObject::GObjObjects()->Data[ 110638 ];

	Usfxgui_mpmatchresults_execGetIntroEventPauseTime_Parms GetIntroEventPauseTime_Parms;

	this->ProcessEvent ( pFnGetIntroEventPauseTime, &GetIntroEventPauseTime_Parms, NULL );

	return GetIntroEventPauseTime_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.ShowGamercard
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nPlayerIndex                   ( CPF_Parm )

void Usfxgui_mpmatchresults::ShowGamercard ( int nPlayerIndex )
{
	static UFunction* pFnShowGamercard = NULL;

	if ( ! pFnShowGamercard )
		pFnShowGamercard = (UFunction*) UObject::GObjObjects()->Data[ 110634 ];

	Usfxgui_mpmatchresults_execShowGamercard_Parms ShowGamercard_Parms;
	ShowGamercard_Parms.nPlayerIndex = nPlayerIndex;

	this->ProcessEvent ( pFnShowGamercard, &ShowGamercard_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.OnContinue
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpmatchresults::OnContinue ( )
{
	static UFunction* pFnOnContinue = NULL;

	if ( ! pFnOnContinue )
		pFnOnContinue = (UFunction*) UObject::GObjObjects()->Data[ 110633 ];

	Usfxgui_mpmatchresults_execOnContinue_Parms OnContinue_Parms;

	this->ProcessEvent ( pFnOnContinue, &OnContinue_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetPlusFormattedValue
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nValue                         ( CPF_Parm )

struct FString Usfxgui_mpmatchresults::GetPlusFormattedValue ( int nValue )
{
	static UFunction* pFnGetPlusFormattedValue = NULL;

	if ( ! pFnGetPlusFormattedValue )
		pFnGetPlusFormattedValue = (UFunction*) UObject::GObjObjects()->Data[ 110628 ];

	Usfxgui_mpmatchresults_execGetPlusFormattedValue_Parms GetPlusFormattedValue_Parms;
	GetPlusFormattedValue_Parms.nValue = nValue;

	this->ProcessEvent ( pFnGetPlusFormattedValue, &GetPlusFormattedValue_Parms, NULL );

	return GetPlusFormattedValue_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetCurrentPlayerClassDataString
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )

struct FString Usfxgui_mpmatchresults::GetCurrentPlayerClassDataString ( int nLevel )
{
	static UFunction* pFnGetCurrentPlayerClassDataString = NULL;

	if ( ! pFnGetCurrentPlayerClassDataString )
		pFnGetCurrentPlayerClassDataString = (UFunction*) UObject::GObjObjects()->Data[ 110623 ];

	Usfxgui_mpmatchresults_execGetCurrentPlayerClassDataString_Parms GetCurrentPlayerClassDataString_Parms;
	GetCurrentPlayerClassDataString_Parms.nLevel = nLevel;

	this->ProcessEvent ( pFnGetCurrentPlayerClassDataString, &GetCurrentPlayerClassDataString_Parms, NULL );

	return GetCurrentPlayerClassDataString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetClassDataString
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )
// struct FName                   className                      ( CPF_Parm )

struct FString Usfxgui_mpmatchresults::GetClassDataString ( int nLevel, struct FName className )
{
	static UFunction* pFnGetClassDataString = NULL;

	if ( ! pFnGetClassDataString )
		pFnGetClassDataString = (UFunction*) UObject::GObjObjects()->Data[ 110616 ];

	Usfxgui_mpmatchresults_execGetClassDataString_Parms GetClassDataString_Parms;
	GetClassDataString_Parms.nLevel = nLevel;
	memcpy ( &GetClassDataString_Parms.className, &className, 0x8 );

	this->ProcessEvent ( pFnGetClassDataString, &GetClassDataString_Parms, NULL );

	return GetClassDataString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetFormattedXPStringPlus
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nXP                            ( CPF_Parm )

struct FString Usfxgui_mpmatchresults::GetFormattedXPStringPlus ( int nXP )
{
	static UFunction* pFnGetFormattedXPStringPlus = NULL;

	if ( ! pFnGetFormattedXPStringPlus )
		pFnGetFormattedXPStringPlus = (UFunction*) UObject::GObjObjects()->Data[ 110611 ];

	Usfxgui_mpmatchresults_execGetFormattedXPStringPlus_Parms GetFormattedXPStringPlus_Parms;
	GetFormattedXPStringPlus_Parms.nXP = nXP;

	this->ProcessEvent ( pFnGetFormattedXPStringPlus, &GetFormattedXPStringPlus_Parms, NULL );

	return GetFormattedXPStringPlus_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetFormattedXPString
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nXP                            ( CPF_Parm )

struct FString Usfxgui_mpmatchresults::GetFormattedXPString ( int nXP )
{
	static UFunction* pFnGetFormattedXPString = NULL;

	if ( ! pFnGetFormattedXPString )
		pFnGetFormattedXPString = (UFunction*) UObject::GObjObjects()->Data[ 110606 ];

	Usfxgui_mpmatchresults_execGetFormattedXPString_Parms GetFormattedXPString_Parms;
	GetFormattedXPString_Parms.nXP = nXP;

	this->ProcessEvent ( pFnGetFormattedXPString, &GetFormattedXPString_Parms, NULL );

	return GetFormattedXPString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetNextLevelString
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )

struct FString Usfxgui_mpmatchresults::GetNextLevelString ( int nLevel )
{
	static UFunction* pFnGetNextLevelString = NULL;

	if ( ! pFnGetNextLevelString )
		pFnGetNextLevelString = (UFunction*) UObject::GObjObjects()->Data[ 110601 ];

	Usfxgui_mpmatchresults_execGetNextLevelString_Parms GetNextLevelString_Parms;
	GetNextLevelString_Parms.nLevel = nLevel;

	this->ProcessEvent ( pFnGetNextLevelString, &GetNextLevelString_Parms, NULL );

	return GetNextLevelString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetMissionResult
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpmatchresults::GetMissionResult ( )
{
	static UFunction* pFnGetMissionResult = NULL;

	if ( ! pFnGetMissionResult )
		pFnGetMissionResult = (UFunction*) UObject::GObjObjects()->Data[ 110599 ];

	Usfxgui_mpmatchresults_execGetMissionResult_Parms GetMissionResult_Parms;

	this->ProcessEvent ( pFnGetMissionResult, &GetMissionResult_Parms, NULL );

	return GetMissionResult_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetLevelFromXP
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nXP                            ( CPF_Parm )

int Usfxgui_mpmatchresults::GetLevelFromXP ( int nXP )
{
	static UFunction* pFnGetLevelFromXP = NULL;

	if ( ! pFnGetLevelFromXP )
		pFnGetLevelFromXP = (UFunction*) UObject::GObjObjects()->Data[ 110595 ];

	Usfxgui_mpmatchresults_execGetLevelFromXP_Parms GetLevelFromXP_Parms;
	GetLevelFromXP_Parms.nXP = nXP;

	this->ProcessEvent ( pFnGetLevelFromXP, &GetLevelFromXP_Parms, NULL );

	return GetLevelFromXP_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetXPRequredForLevel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nLevel                         ( CPF_Parm )

int Usfxgui_mpmatchresults::GetXPRequredForLevel ( int nLevel )
{
	static UFunction* pFnGetXPRequredForLevel = NULL;

	if ( ! pFnGetXPRequredForLevel )
		pFnGetXPRequredForLevel = (UFunction*) UObject::GObjObjects()->Data[ 110591 ];

	Usfxgui_mpmatchresults_execGetXPRequredForLevel_Parms GetXPRequredForLevel_Parms;
	GetXPRequredForLevel_Parms.nLevel = nLevel;

	this->ProcessEvent ( pFnGetXPRequredForLevel, &GetXPRequredForLevel_Parms, NULL );

	return GetXPRequredForLevel_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetSquadBonusXP
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpmatchresults::GetSquadBonusXP ( )
{
	static UFunction* pFnGetSquadBonusXP = NULL;

	if ( ! pFnGetSquadBonusXP )
		pFnGetSquadBonusXP = (UFunction*) UObject::GObjObjects()->Data[ 110588 ];

	Usfxgui_mpmatchresults_execGetSquadBonusXP_Parms GetSquadBonusXP_Parms;

	this->ProcessEvent ( pFnGetSquadBonusXP, &GetSquadBonusXP_Parms, NULL );

	return GetSquadBonusXP_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetSquadTotalCredits
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpmatchresults::GetSquadTotalCredits ( )
{
	static UFunction* pFnGetSquadTotalCredits = NULL;

	if ( ! pFnGetSquadTotalCredits )
		pFnGetSquadTotalCredits = (UFunction*) UObject::GObjObjects()->Data[ 110585 ];

	Usfxgui_mpmatchresults_execGetSquadTotalCredits_Parms GetSquadTotalCredits_Parms;

	this->ProcessEvent ( pFnGetSquadTotalCredits, &GetSquadTotalCredits_Parms, NULL );

	return GetSquadTotalCredits_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetSquadTotalXP
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpmatchresults::GetSquadTotalXP ( )
{
	static UFunction* pFnGetSquadTotalXP = NULL;

	if ( ! pFnGetSquadTotalXP )
		pFnGetSquadTotalXP = (UFunction*) UObject::GObjObjects()->Data[ 110582 ];

	Usfxgui_mpmatchresults_execGetSquadTotalXP_Parms GetSquadTotalXP_Parms;

	this->ProcessEvent ( pFnGetSquadTotalXP, &GetSquadTotalXP_Parms, NULL );

	return GetSquadTotalXP_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetFinalExperience
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpmatchresults::GetFinalExperience ( )
{
	static UFunction* pFnGetFinalExperience = NULL;

	if ( ! pFnGetFinalExperience )
		pFnGetFinalExperience = (UFunction*) UObject::GObjObjects()->Data[ 110579 ];

	Usfxgui_mpmatchresults_execGetFinalExperience_Parms GetFinalExperience_Parms;

	this->ProcessEvent ( pFnGetFinalExperience, &GetFinalExperience_Parms, NULL );

	return GetFinalExperience_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetOriginalExperience
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpmatchresults::GetOriginalExperience ( )
{
	static UFunction* pFnGetOriginalExperience = NULL;

	if ( ! pFnGetOriginalExperience )
		pFnGetOriginalExperience = (UFunction*) UObject::GObjObjects()->Data[ 110576 ];

	Usfxgui_mpmatchresults_execGetOriginalExperience_Parms GetOriginalExperience_Parms;

	this->ProcessEvent ( pFnGetOriginalExperience, &GetOriginalExperience_Parms, NULL );

	return GetOriginalExperience_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetMatchTime
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpmatchresults::GetMatchTime ( )
{
	static UFunction* pFnGetMatchTime = NULL;

	if ( ! pFnGetMatchTime )
		pFnGetMatchTime = (UFunction*) UObject::GObjObjects()->Data[ 110574 ];

	Usfxgui_mpmatchresults_execGetMatchTime_Parms GetMatchTime_Parms;

	this->ProcessEvent ( pFnGetMatchTime, &GetMatchTime_Parms, NULL );

	return GetMatchTime_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetMatchWave
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpmatchresults::GetMatchWave ( )
{
	static UFunction* pFnGetMatchWave = NULL;

	if ( ! pFnGetMatchWave )
		pFnGetMatchWave = (UFunction*) UObject::GObjObjects()->Data[ 110572 ];

	Usfxgui_mpmatchresults_execGetMatchWave_Parms GetMatchWave_Parms;

	this->ProcessEvent ( pFnGetMatchWave, &GetMatchWave_Parms, NULL );

	return GetMatchWave_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetMatchChallenge
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpmatchresults::GetMatchChallenge ( )
{
	static UFunction* pFnGetMatchChallenge = NULL;

	if ( ! pFnGetMatchChallenge )
		pFnGetMatchChallenge = (UFunction*) UObject::GObjObjects()->Data[ 110566 ];

	Usfxgui_mpmatchresults_execGetMatchChallenge_Parms GetMatchChallenge_Parms;

	this->ProcessEvent ( pFnGetMatchChallenge, &GetMatchChallenge_Parms, NULL );

	return GetMatchChallenge_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetMatchEnemy
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpmatchresults::GetMatchEnemy ( )
{
	static UFunction* pFnGetMatchEnemy = NULL;

	if ( ! pFnGetMatchEnemy )
		pFnGetMatchEnemy = (UFunction*) UObject::GObjObjects()->Data[ 110560 ];

	Usfxgui_mpmatchresults_execGetMatchEnemy_Parms GetMatchEnemy_Parms;

	this->ProcessEvent ( pFnGetMatchEnemy, &GetMatchEnemy_Parms, NULL );

	return GetMatchEnemy_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetMatchMap
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpmatchresults::GetMatchMap ( )
{
	static UFunction* pFnGetMatchMap = NULL;

	if ( ! pFnGetMatchMap )
		pFnGetMatchMap = (UFunction*) UObject::GObjObjects()->Data[ 110557 ];

	Usfxgui_mpmatchresults_execGetMatchMap_Parms GetMatchMap_Parms;

	this->ProcessEvent ( pFnGetMatchMap, &GetMatchMap_Parms, NULL );

	return GetMatchMap_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetSquadMedals
// [0x00020002] 
// Parameters infos:
// TArray< struct FRewardMedalData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FRewardMedalData > Usfxgui_mpmatchresults::GetSquadMedals ( )
{
	static UFunction* pFnGetSquadMedals = NULL;

	if ( ! pFnGetSquadMedals )
		pFnGetSquadMedals = (UFunction*) UObject::GObjObjects()->Data[ 110549 ];

	Usfxgui_mpmatchresults_execGetSquadMedals_Parms GetSquadMedals_Parms;

	this->ProcessEvent ( pFnGetSquadMedals, &GetSquadMedals_Parms, NULL );

	return GetSquadMedals_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.ResultDataSort
// [0x00120002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FPlayerMatchResultData  A                              ( CPF_Parm | CPF_NeedCtorLink )
// struct FPlayerMatchResultData  B                              ( CPF_Parm | CPF_NeedCtorLink )

int Usfxgui_mpmatchresults::ResultDataSort ( struct FPlayerMatchResultData A, struct FPlayerMatchResultData B )
{
	static UFunction* pFnResultDataSort = NULL;

	if ( ! pFnResultDataSort )
		pFnResultDataSort = (UFunction*) UObject::GObjObjects()->Data[ 110545 ];

	Usfxgui_mpmatchresults_execResultDataSort_Parms ResultDataSort_Parms;
	memcpy ( &ResultDataSort_Parms.A, &A, 0x40 );
	memcpy ( &ResultDataSort_Parms.B, &B, 0x40 );

	this->ProcessEvent ( pFnResultDataSort, &ResultDataSort_Parms, NULL );

	return ResultDataSort_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetMedalDefinition
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MedalID                        ( CPF_Parm )
// struct FRewardMedalData        MedalData                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FMedalDefinition > MedalDefinitions               ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxgui_mpmatchresults::GetMedalDefinition ( int MedalID, struct FRewardMedalData* MedalData, TArray< struct FMedalDefinition >* MedalDefinitions )
{
	static UFunction* pFnGetMedalDefinition = NULL;

	if ( ! pFnGetMedalDefinition )
		pFnGetMedalDefinition = (UFunction*) UObject::GObjObjects()->Data[ 110533 ];

	Usfxgui_mpmatchresults_execGetMedalDefinition_Parms GetMedalDefinition_Parms;
	GetMedalDefinition_Parms.MedalID = MedalID;

	this->ProcessEvent ( pFnGetMedalDefinition, &GetMedalDefinition_Parms, NULL );

	if ( MedalData )
		memcpy ( MedalData, &GetMedalDefinition_Parms.MedalData, 0x18 );

	if ( MedalDefinitions )
		memcpy ( MedalDefinitions, &GetMedalDefinition_Parms.MedalDefinitions, 0xC );

	return GetMedalDefinition_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetSquadMedalDefinition
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MedalID                        ( CPF_Parm )
// struct FRewardMedalData        MedalData                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxgui_mpmatchresults::GetSquadMedalDefinition ( int MedalID, struct FRewardMedalData* MedalData )
{
	static UFunction* pFnGetSquadMedalDefinition = NULL;

	if ( ! pFnGetSquadMedalDefinition )
		pFnGetSquadMedalDefinition = (UFunction*) UObject::GObjObjects()->Data[ 110534 ];

	Usfxgui_mpmatchresults_execGetSquadMedalDefinition_Parms GetSquadMedalDefinition_Parms;
	GetSquadMedalDefinition_Parms.MedalID = MedalID;

	this->ProcessEvent ( pFnGetSquadMedalDefinition, &GetSquadMedalDefinition_Parms, NULL );

	if ( MedalData )
		memcpy ( MedalData, &GetSquadMedalDefinition_Parms.MedalData, 0x18 );

	return GetSquadMedalDefinition_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetPlayerMedalDefinition
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MedalID                        ( CPF_Parm )
// struct FRewardMedalData        MedalData                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxgui_mpmatchresults::GetPlayerMedalDefinition ( int MedalID, struct FRewardMedalData* MedalData )
{
	static UFunction* pFnGetPlayerMedalDefinition = NULL;

	if ( ! pFnGetPlayerMedalDefinition )
		pFnGetPlayerMedalDefinition = (UFunction*) UObject::GObjObjects()->Data[ 110528 ];

	Usfxgui_mpmatchresults_execGetPlayerMedalDefinition_Parms GetPlayerMedalDefinition_Parms;
	GetPlayerMedalDefinition_Parms.MedalID = MedalID;

	this->ProcessEvent ( pFnGetPlayerMedalDefinition, &GetPlayerMedalDefinition_Parms, NULL );

	if ( MedalData )
		memcpy ( MedalData, &GetPlayerMedalDefinition_Parms.MedalData, 0x18 );

	return GetPlayerMedalDefinition_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.GetPlayerData
// [0x00020002] 
// Parameters infos:
// TArray< struct FPlayerMatchResultData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FPlayerMatchResultData > Usfxgui_mpmatchresults::GetPlayerData ( )
{
	static UFunction* pFnGetPlayerData = NULL;

	if ( ! pFnGetPlayerData )
		pFnGetPlayerData = (UFunction*) UObject::GObjObjects()->Data[ 110513 ];

	Usfxgui_mpmatchresults_execGetPlayerData_Parms GetPlayerData_Parms;

	this->ProcessEvent ( pFnGetPlayerData, &GetPlayerData_Parms, NULL );

	return GetPlayerData_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpmatchresults::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 110512 ];

	Usfxgui_mpmatchresults_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchresults.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpmatchresults::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 110510 ];

	Usfxgui_mpmatchresults_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.AS_RefreshScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpmatchconsumables::AS_RefreshScreen ( )
{
	static UFunction* pFnAS_RefreshScreen = NULL;

	if ( ! pFnAS_RefreshScreen )
		pFnAS_RefreshScreen = (UFunction*) UObject::GObjObjects()->Data[ 110404 ];

	Usfxgui_mpmatchconsumables_execAS_RefreshScreen_Parms AS_RefreshScreen_Parms;

	this->ProcessEvent ( pFnAS_RefreshScreen, &AS_RefreshScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.GetGUICategoryFromSlotType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotType                       ( CPF_Parm )

unsigned char Usfxgui_mpmatchconsumables::GetGUICategoryFromSlotType ( int SlotType )
{
	static UFunction* pFnGetGUICategoryFromSlotType = NULL;

	if ( ! pFnGetGUICategoryFromSlotType )
		pFnGetGUICategoryFromSlotType = (UFunction*) UObject::GObjObjects()->Data[ 110488 ];

	Usfxgui_mpmatchconsumables_execGetGUICategoryFromSlotType_Parms GetGUICategoryFromSlotType_Parms;
	GetGUICategoryFromSlotType_Parms.SlotType = SlotType;

	this->ProcessEvent ( pFnGetGUICategoryFromSlotType, &GetGUICategoryFromSlotType_Parms, NULL );

	return GetGUICategoryFromSlotType_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.ClearNewFlagsForSlotType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            SlotType                       ( CPF_Parm )

void Usfxgui_mpmatchconsumables::ClearNewFlagsForSlotType ( int SlotType )
{
	static UFunction* pFnClearNewFlagsForSlotType = NULL;

	if ( ! pFnClearNewFlagsForSlotType )
		pFnClearNewFlagsForSlotType = (UFunction*) UObject::GObjObjects()->Data[ 110466 ];

	Usfxgui_mpmatchconsumables_execClearNewFlagsForSlotType_Parms ClearNewFlagsForSlotType_Parms;
	ClearNewFlagsForSlotType_Parms.SlotType = SlotType;

	this->ProcessEvent ( pFnClearNewFlagsForSlotType, &ClearNewFlagsForSlotType_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.HasNewConsumablesOfSlotType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotType                       ( CPF_Parm )

bool Usfxgui_mpmatchconsumables::HasNewConsumablesOfSlotType ( int SlotType )
{
	static UFunction* pFnHasNewConsumablesOfSlotType = NULL;

	if ( ! pFnHasNewConsumablesOfSlotType )
		pFnHasNewConsumablesOfSlotType = (UFunction*) UObject::GObjObjects()->Data[ 110483 ];

	Usfxgui_mpmatchconsumables_execHasNewConsumablesOfSlotType_Parms HasNewConsumablesOfSlotType_Parms;
	HasNewConsumablesOfSlotType_Parms.SlotType = SlotType;

	this->ProcessEvent ( pFnHasNewConsumablesOfSlotType, &HasNewConsumablesOfSlotType_Parms, NULL );

	return HasNewConsumablesOfSlotType_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.GetInGameConsumableInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FInGameConsumableInfo > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FInGameConsumableInfo > Usfxgui_mpmatchconsumables::GetInGameConsumableInfo ( )
{
	static UFunction* pFnGetInGameConsumableInfo = NULL;

	if ( ! pFnGetInGameConsumableInfo )
		pFnGetInGameConsumableInfo = (UFunction*) UObject::GObjObjects()->Data[ 110471 ];

	Usfxgui_mpmatchconsumables_execGetInGameConsumableInfo_Parms GetInGameConsumableInfo_Parms;

	this->ProcessEvent ( pFnGetInGameConsumableInfo, &GetInGameConsumableInfo_Parms, NULL );

	return GetInGameConsumableInfo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.ShowStoreScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpmatchconsumables::ShowStoreScreen ( )
{
	static UFunction* pFnShowStoreScreen = NULL;

	if ( ! pFnShowStoreScreen )
		pFnShowStoreScreen = (UFunction*) UObject::GObjObjects()->Data[ 110470 ];

	Usfxgui_mpmatchconsumables_execShowStoreScreen_Parms ShowStoreScreen_Parms;

	this->ProcessEvent ( pFnShowStoreScreen, &ShowStoreScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.GetSlotTypeForCategory
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Category                       ( CPF_Parm )

int Usfxgui_mpmatchconsumables::GetSlotTypeForCategory ( int Category )
{
	static UFunction* pFnGetSlotTypeForCategory = NULL;

	if ( ! pFnGetSlotTypeForCategory )
		pFnGetSlotTypeForCategory = (UFunction*) UObject::GObjObjects()->Data[ 110436 ];

	Usfxgui_mpmatchconsumables_execGetSlotTypeForCategory_Parms GetSlotTypeForCategory_Parms;
	GetSlotTypeForCategory_Parms.Category = Category;

	this->ProcessEvent ( pFnGetSlotTypeForCategory, &GetSlotTypeForCategory_Parms, NULL );

	return GetSlotTypeForCategory_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.ExitScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpmatchconsumables::ExitScreen ( )
{
	static UFunction* pFnExitScreen = NULL;

	if ( ! pFnExitScreen )
		pFnExitScreen = (UFunction*) UObject::GObjObjects()->Data[ 110465 ];

	Usfxgui_mpmatchconsumables_execExitScreen_Parms ExitScreen_Parms;

	this->ProcessEvent ( pFnExitScreen, &ExitScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.GetMaxActiveConsumables
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpmatchconsumables::GetMaxActiveConsumables ( )
{
	static UFunction* pFnGetMaxActiveConsumables = NULL;

	if ( ! pFnGetMaxActiveConsumables )
		pFnGetMaxActiveConsumables = (UFunction*) UObject::GObjObjects()->Data[ 110463 ];

	Usfxgui_mpmatchconsumables_execGetMaxActiveConsumables_Parms GetMaxActiveConsumables_Parms;

	this->ProcessEvent ( pFnGetMaxActiveConsumables, &GetMaxActiveConsumables_Parms, NULL );

	return GetMaxActiveConsumables_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.GetActiveConsumables
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FConsumableDisplayInfo > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FConsumableDisplayInfo > Usfxgui_mpmatchconsumables::GetActiveConsumables ( )
{
	static UFunction* pFnGetActiveConsumables = NULL;

	if ( ! pFnGetActiveConsumables )
		pFnGetActiveConsumables = (UFunction*) UObject::GObjObjects()->Data[ 110460 ];

	Usfxgui_mpmatchconsumables_execGetActiveConsumables_Parms GetActiveConsumables_Parms;

	this->ProcessEvent ( pFnGetActiveConsumables, &GetActiveConsumables_Parms, NULL );

	return GetActiveConsumables_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.UpdateActiveList
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpmatchconsumables::UpdateActiveList ( )
{
	static UFunction* pFnUpdateActiveList = NULL;

	if ( ! pFnUpdateActiveList )
		pFnUpdateActiveList = (UFunction*) UObject::GObjObjects()->Data[ 110403 ];

	Usfxgui_mpmatchconsumables_execUpdateActiveList_Parms UpdateActiveList_Parms;

	this->ProcessEvent ( pFnUpdateActiveList, &UpdateActiveList_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.DeactivateConsumablesOfSlotType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            SlotType                       ( CPF_Parm )

void Usfxgui_mpmatchconsumables::DeactivateConsumablesOfSlotType ( int SlotType )
{
	static UFunction* pFnDeactivateConsumablesOfSlotType = NULL;

	if ( ! pFnDeactivateConsumablesOfSlotType )
		pFnDeactivateConsumablesOfSlotType = (UFunction*) UObject::GObjObjects()->Data[ 110455 ];

	Usfxgui_mpmatchconsumables_execDeactivateConsumablesOfSlotType_Parms DeactivateConsumablesOfSlotType_Parms;
	DeactivateConsumablesOfSlotType_Parms.SlotType = SlotType;

	this->ProcessEvent ( pFnDeactivateConsumablesOfSlotType, &DeactivateConsumablesOfSlotType_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.SetConsumableActive
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            Id                             ( CPF_Parm )
// int                            Version                        ( CPF_Parm )
// unsigned long                  bActive                        ( CPF_Parm )

void Usfxgui_mpmatchconsumables::SetConsumableActive ( int Id, int Version, unsigned long bActive )
{
	static UFunction* pFnSetConsumableActive = NULL;

	if ( ! pFnSetConsumableActive )
		pFnSetConsumableActive = (UFunction*) UObject::GObjObjects()->Data[ 110449 ];

	Usfxgui_mpmatchconsumables_execSetConsumableActive_Parms SetConsumableActive_Parms;
	SetConsumableActive_Parms.Id = Id;
	SetConsumableActive_Parms.Version = Version;
	SetConsumableActive_Parms.bActive = bActive;

	this->ProcessEvent ( pFnSetConsumableActive, &SetConsumableActive_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.IsConsumableAvailable
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXGAWReinforcementBase* CardOwner                      ( CPF_Parm )
// int                            Id                             ( CPF_Parm )
// int                            Version                        ( CPF_Parm )
// int                            Category                       ( CPF_Parm )

bool Usfxgui_mpmatchconsumables::IsConsumableAvailable ( class USFXGAWReinforcementBase* CardOwner, int Id, int Version, int Category )
{
	static UFunction* pFnIsConsumableAvailable = NULL;

	if ( ! pFnIsConsumableAvailable )
		pFnIsConsumableAvailable = (UFunction*) UObject::GObjObjects()->Data[ 110420 ];

	Usfxgui_mpmatchconsumables_execIsConsumableAvailable_Parms IsConsumableAvailable_Parms;
	IsConsumableAvailable_Parms.CardOwner = CardOwner;
	IsConsumableAvailable_Parms.Id = Id;
	IsConsumableAvailable_Parms.Version = Version;
	IsConsumableAvailable_Parms.Category = Category;

	this->ProcessEvent ( pFnIsConsumableAvailable, &IsConsumableAvailable_Parms, NULL );

	return IsConsumableAvailable_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.GetConsumable
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FConsumableDisplayInfo  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Id                             ( CPF_Parm )
// int                            Version                        ( CPF_Parm )

struct FConsumableDisplayInfo Usfxgui_mpmatchconsumables::GetConsumable ( int Id, int Version )
{
	static UFunction* pFnGetConsumable = NULL;

	if ( ! pFnGetConsumable )
		pFnGetConsumable = (UFunction*) UObject::GObjObjects()->Data[ 110437 ];

	Usfxgui_mpmatchconsumables_execGetConsumable_Parms GetConsumable_Parms;
	GetConsumable_Parms.Id = Id;
	GetConsumable_Parms.Version = Version;

	this->ProcessEvent ( pFnGetConsumable, &GetConsumable_Parms, NULL );

	return GetConsumable_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.GetConsumableListFilteredBySlot
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FConsumableDisplayInfo > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            SlotIndex                      ( CPF_Parm )

TArray< struct FConsumableDisplayInfo > Usfxgui_mpmatchconsumables::GetConsumableListFilteredBySlot ( int SlotIndex )
{
	static UFunction* pFnGetConsumableListFilteredBySlot = NULL;

	if ( ! pFnGetConsumableListFilteredBySlot )
		pFnGetConsumableListFilteredBySlot = (UFunction*) UObject::GObjObjects()->Data[ 110428 ];

	Usfxgui_mpmatchconsumables_execGetConsumableListFilteredBySlot_Parms GetConsumableListFilteredBySlot_Parms;
	GetConsumableListFilteredBySlot_Parms.SlotIndex = SlotIndex;

	this->ProcessEvent ( pFnGetConsumableListFilteredBySlot, &GetConsumableListFilteredBySlot_Parms, NULL );

	return GetConsumableListFilteredBySlot_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.GetConsumableList
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FConsumableDisplayInfo > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FConsumableDisplayInfo > Usfxgui_mpmatchconsumables::GetConsumableList ( )
{
	static UFunction* pFnGetConsumableList = NULL;

	if ( ! pFnGetConsumableList )
		pFnGetConsumableList = (UFunction*) UObject::GObjObjects()->Data[ 110421 ];

	Usfxgui_mpmatchconsumables_execGetConsumableList_Parms GetConsumableList_Parms;

	this->ProcessEvent ( pFnGetConsumableList, &GetConsumableList_Parms, NULL );

	return GetConsumableList_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.GetDisplayInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FConsumableDisplayInfo  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            CardID                         ( CPF_Parm )
// struct FCardInfoData           CardData                       ( CPF_Parm | CPF_NeedCtorLink )

struct FConsumableDisplayInfo Usfxgui_mpmatchconsumables::GetDisplayInfo ( int CardID, struct FCardInfoData CardData )
{
	static UFunction* pFnGetDisplayInfo = NULL;

	if ( ! pFnGetDisplayInfo )
		pFnGetDisplayInfo = (UFunction*) UObject::GObjObjects()->Data[ 110407 ];

	Usfxgui_mpmatchconsumables_execGetDisplayInfo_Parms GetDisplayInfo_Parms;
	GetDisplayInfo_Parms.CardID = CardID;
	memcpy ( &GetDisplayInfo_Parms.CardData, &CardData, 0x68 );

	this->ProcessEvent ( pFnGetDisplayInfo, &GetDisplayInfo_Parms, NULL );

	return GetDisplayInfo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpmatchconsumables::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 110405 ];

	Usfxgui_mpmatchconsumables_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpmatchconsumables.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpmatchconsumables::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 110399 ];

	Usfxgui_mpmatchconsumables_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.AS_RefreshPCPoints
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpstore::AS_RefreshPCPoints ( )
{
	static UFunction* pFnAS_RefreshPCPoints = NULL;

	if ( ! pFnAS_RefreshPCPoints )
		pFnAS_RefreshPCPoints = (UFunction*) UObject::GObjObjects()->Data[ 111200 ];

	Usfxgui_mpstore_execAS_RefreshPCPoints_Parms AS_RefreshPCPoints_Parms;

	this->ProcessEvent ( pFnAS_RefreshPCPoints, &AS_RefreshPCPoints_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.AS_ScrollDetails
// [0x00020002] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void Usfxgui_mpstore::AS_ScrollDetails ( float fValue )
{
	static UFunction* pFnAS_ScrollDetails = NULL;

	if ( ! pFnAS_ScrollDetails )
		pFnAS_ScrollDetails = (UFunction*) UObject::GObjObjects()->Data[ 111198 ];

	Usfxgui_mpstore_execAS_ScrollDetails_Parms AS_ScrollDetails_Parms;
	AS_ScrollDetails_Parms.fValue = fValue;

	this->ProcessEvent ( pFnAS_ScrollDetails, &AS_ScrollDetails_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.AS_ShowRemoteStoreImage
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpstore::AS_ShowRemoteStoreImage ( )
{
	static UFunction* pFnAS_ShowRemoteStoreImage = NULL;

	if ( ! pFnAS_ShowRemoteStoreImage )
		pFnAS_ShowRemoteStoreImage = (UFunction*) UObject::GObjObjects()->Data[ 111197 ];

	Usfxgui_mpstore_execAS_ShowRemoteStoreImage_Parms AS_ShowRemoteStoreImage_Parms;

	this->ProcessEvent ( pFnAS_ShowRemoteStoreImage, &AS_ShowRemoteStoreImage_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.AS_ShowDefaultStoreImage
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpstore::AS_ShowDefaultStoreImage ( )
{
	static UFunction* pFnAS_ShowDefaultStoreImage = NULL;

	if ( ! pFnAS_ShowDefaultStoreImage )
		pFnAS_ShowDefaultStoreImage = (UFunction*) UObject::GObjObjects()->Data[ 111196 ];

	Usfxgui_mpstore_execAS_ShowDefaultStoreImage_Parms AS_ShowDefaultStoreImage_Parms;

	this->ProcessEvent ( pFnAS_ShowDefaultStoreImage, &AS_ShowDefaultStoreImage_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.AS_SetImageLoadingClipVisible
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void Usfxgui_mpstore::AS_SetImageLoadingClipVisible ( unsigned long bVisible )
{
	static UFunction* pFnAS_SetImageLoadingClipVisible = NULL;

	if ( ! pFnAS_SetImageLoadingClipVisible )
		pFnAS_SetImageLoadingClipVisible = (UFunction*) UObject::GObjObjects()->Data[ 111194 ];

	Usfxgui_mpstore_execAS_SetImageLoadingClipVisible_Parms AS_SetImageLoadingClipVisible_Parms;
	AS_SetImageLoadingClipVisible_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnAS_SetImageLoadingClipVisible, &AS_SetImageLoadingClipVisible_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.AS_SetInputEnabled
// [0x00020002] 
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void Usfxgui_mpstore::AS_SetInputEnabled ( unsigned long bEnabled )
{
	static UFunction* pFnAS_SetInputEnabled = NULL;

	if ( ! pFnAS_SetInputEnabled )
		pFnAS_SetInputEnabled = (UFunction*) UObject::GObjObjects()->Data[ 111192 ];

	Usfxgui_mpstore_execAS_SetInputEnabled_Parms AS_SetInputEnabled_Parms;
	AS_SetInputEnabled_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnAS_SetInputEnabled, &AS_SetInputEnabled_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.AS_SetListLoadingClipVisible
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void Usfxgui_mpstore::AS_SetListLoadingClipVisible ( unsigned long bVisible )
{
	static UFunction* pFnAS_SetListLoadingClipVisible = NULL;

	if ( ! pFnAS_SetListLoadingClipVisible )
		pFnAS_SetListLoadingClipVisible = (UFunction*) UObject::GObjObjects()->Data[ 111190 ];

	Usfxgui_mpstore_execAS_SetListLoadingClipVisible_Parms AS_SetListLoadingClipVisible_Parms;
	AS_SetListLoadingClipVisible_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnAS_SetListLoadingClipVisible, &AS_SetListLoadingClipVisible_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.AS_ClearScreen
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpstore::AS_ClearScreen ( )
{
	static UFunction* pFnAS_ClearScreen = NULL;

	if ( ! pFnAS_ClearScreen )
		pFnAS_ClearScreen = (UFunction*) UObject::GObjObjects()->Data[ 111189 ];

	Usfxgui_mpstore_execAS_ClearScreen_Parms AS_ClearScreen_Parms;

	this->ProcessEvent ( pFnAS_ClearScreen, &AS_ClearScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.AS_RefreshCredits
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpstore::AS_RefreshCredits ( )
{
	static UFunction* pFnAS_RefreshCredits = NULL;

	if ( ! pFnAS_RefreshCredits )
		pFnAS_RefreshCredits = (UFunction*) UObject::GObjObjects()->Data[ 111188 ];

	Usfxgui_mpstore_execAS_RefreshCredits_Parms AS_RefreshCredits_Parms;

	this->ProcessEvent ( pFnAS_RefreshCredits, &AS_RefreshCredits_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.AS_InitializeScreen
// [0x00020002] 
// Parameters infos:

void Usfxgui_mpstore::AS_InitializeScreen ( )
{
	static UFunction* pFnAS_InitializeScreen = NULL;

	if ( ! pFnAS_InitializeScreen )
		pFnAS_InitializeScreen = (UFunction*) UObject::GObjObjects()->Data[ 111187 ];

	Usfxgui_mpstore_execAS_InitializeScreen_Parms AS_InitializeScreen_Parms;

	this->ProcessEvent ( pFnAS_InitializeScreen, &AS_InitializeScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.ShowReinforcementsRevealScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bManualReveal                  ( CPF_Parm )

void Usfxgui_mpstore::ShowReinforcementsRevealScreen ( unsigned long bManualReveal )
{
	static UFunction* pFnShowReinforcementsRevealScreen = NULL;

	if ( ! pFnShowReinforcementsRevealScreen )
		pFnShowReinforcementsRevealScreen = (UFunction*) UObject::GObjObjects()->Data[ 111036 ];

	Usfxgui_mpstore_execShowReinforcementsRevealScreen_Parms ShowReinforcementsRevealScreen_Parms;
	ShowReinforcementsRevealScreen_Parms.bManualReveal = bManualReveal;

	this->ProcessEvent ( pFnShowReinforcementsRevealScreen, &ShowReinforcementsRevealScreen_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.CanManuallyShowReinforcementsRevealScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpstore::CanManuallyShowReinforcementsRevealScreen ( )
{
	static UFunction* pFnCanManuallyShowReinforcementsRevealScreen = NULL;

	if ( ! pFnCanManuallyShowReinforcementsRevealScreen )
		pFnCanManuallyShowReinforcementsRevealScreen = (UFunction*) UObject::GObjObjects()->Data[ 111204 ];

	Usfxgui_mpstore_execCanManuallyShowReinforcementsRevealScreen_Parms CanManuallyShowReinforcementsRevealScreen_Parms;

	this->ProcessEvent ( pFnCanManuallyShowReinforcementsRevealScreen, &CanManuallyShowReinforcementsRevealScreen_Parms, NULL );

	return CanManuallyShowReinforcementsRevealScreen_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.CheckIfSignedInFailSafe
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpstore::CheckIfSignedInFailSafe ( )
{
	static UFunction* pFnCheckIfSignedInFailSafe = NULL;

	if ( ! pFnCheckIfSignedInFailSafe )
		pFnCheckIfSignedInFailSafe = (UFunction*) UObject::GObjObjects()->Data[ 111114 ];

	Usfxgui_mpstore_execCheckIfSignedInFailSafe_Parms CheckIfSignedInFailSafe_Parms;

	this->ProcessEvent ( pFnCheckIfSignedInFailSafe, &CheckIfSignedInFailSafe_Parms, NULL );

	return CheckIfSignedInFailSafe_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.IsReady
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpstore::IsReady ( )
{
	static UFunction* pFnIsReady = NULL;

	if ( ! pFnIsReady )
		pFnIsReady = (UFunction*) UObject::GObjObjects()->Data[ 111183 ];

	Usfxgui_mpstore_execIsReady_Parms IsReady_Parms;

	this->ProcessEvent ( pFnIsReady, &IsReady_Parms, NULL );

	return IsReady_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.CanSetReady
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxgui_mpstore::CanSetReady ( )
{
	static UFunction* pFnCanSetReady = NULL;

	if ( ! pFnCanSetReady )
		pFnCanSetReady = (UFunction*) UObject::GObjObjects()->Data[ 111181 ];

	Usfxgui_mpstore_execCanSetReady_Parms CanSetReady_Parms;

	this->ProcessEvent ( pFnCanSetReady, &CanSetReady_Parms, NULL );

	return CanSetReady_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.HandleInputEvent
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

bool Usfxgui_mpstore::eventHandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 111177 ];

	Usfxgui_mpstore_eventHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );

	return HandleInputEvent_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.GetAvailablePCPoints
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpstore::GetAvailablePCPoints ( )
{
	static UFunction* pFnGetAvailablePCPoints = NULL;

	if ( ! pFnGetAvailablePCPoints )
		pFnGetAvailablePCPoints = (UFunction*) UObject::GObjObjects()->Data[ 111175 ];

	Usfxgui_mpstore_execGetAvailablePCPoints_Parms GetAvailablePCPoints_Parms;

	this->ProcessEvent ( pFnGetAvailablePCPoints, &GetAvailablePCPoints_Parms, NULL );

	return GetAvailablePCPoints_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.ErrorDialogCallback
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Usfxgui_mpstore::ErrorDialogCallback ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnErrorDialogCallback = NULL;

	if ( ! pFnErrorDialogCallback )
		pFnErrorDialogCallback = (UFunction*) UObject::GObjObjects()->Data[ 111172 ];

	Usfxgui_mpstore_execErrorDialogCallback_Parms ErrorDialogCallback_Parms;
	ErrorDialogCallback_Parms.bAPressed = bAPressed;
	ErrorDialogCallback_Parms.nContext = nContext;

	this->ProcessEvent ( pFnErrorDialogCallback, &ErrorDialogCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.ShowFatalErrorDialog
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mpstore::ShowFatalErrorDialog ( struct FString ErrorMessage )
{
	static UFunction* pFnShowFatalErrorDialog = NULL;

	if ( ! pFnShowFatalErrorDialog )
		pFnShowFatalErrorDialog = (UFunction*) UObject::GObjObjects()->Data[ 111168 ];

	Usfxgui_mpstore_execShowFatalErrorDialog_Parms ShowFatalErrorDialog_Parms;
	memcpy ( &ShowFatalErrorDialog_Parms.ErrorMessage, &ErrorMessage, 0xC );

	this->ProcessEvent ( pFnShowFatalErrorDialog, &ShowFatalErrorDialog_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.FinishPurchase
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpstore::FinishPurchase ( )
{
	static UFunction* pFnFinishPurchase = NULL;

	if ( ! pFnFinishPurchase )
		pFnFinishPurchase = (UFunction*) UObject::GObjObjects()->Data[ 111155 ];

	Usfxgui_mpstore_execFinishPurchase_Parms FinishPurchase_Parms;

	this->ProcessEvent ( pFnFinishPurchase, &FinishPurchase_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.OnPurchaseItemCallback
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Usfxgui_mpstore::OnPurchaseItemCallback ( int nResult )
{
	static UFunction* pFnOnPurchaseItemCallback = NULL;

	if ( ! pFnOnPurchaseItemCallback )
		pFnOnPurchaseItemCallback = (UFunction*) UObject::GObjObjects()->Data[ 111162 ];

	Usfxgui_mpstore_execOnPurchaseItemCallback_Parms OnPurchaseItemCallback_Parms;
	OnPurchaseItemCallback_Parms.nResult = nResult;

	this->ProcessEvent ( pFnOnPurchaseItemCallback, &OnPurchaseItemCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.PurchaseItemFromPlatform
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemId                         ( CPF_Parm )

bool Usfxgui_mpstore::PurchaseItemFromPlatform ( int ItemId )
{
	static UFunction* pFnPurchaseItemFromPlatform = NULL;

	if ( ! pFnPurchaseItemFromPlatform )
		pFnPurchaseItemFromPlatform = (UFunction*) UObject::GObjObjects()->Data[ 111116 ];

	Usfxgui_mpstore_execPurchaseItemFromPlatform_Parms PurchaseItemFromPlatform_Parms;
	PurchaseItemFromPlatform_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnPurchaseItemFromPlatform, &PurchaseItemFromPlatform_Parms, NULL );

	return PurchaseItemFromPlatform_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.OnPurchaseCreditsErrorDialogFinished
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Usfxgui_mpstore::OnPurchaseCreditsErrorDialogFinished ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnOnPurchaseCreditsErrorDialogFinished = NULL;

	if ( ! pFnOnPurchaseCreditsErrorDialogFinished )
		pFnOnPurchaseCreditsErrorDialogFinished = (UFunction*) UObject::GObjObjects()->Data[ 111152 ];

	Usfxgui_mpstore_execOnPurchaseCreditsErrorDialogFinished_Parms OnPurchaseCreditsErrorDialogFinished_Parms;
	OnPurchaseCreditsErrorDialogFinished_Parms.bAPressed = bAPressed;
	OnPurchaseCreditsErrorDialogFinished_Parms.nContext = nContext;

	this->ProcessEvent ( pFnOnPurchaseCreditsErrorDialogFinished, &OnPurchaseCreditsErrorDialogFinished_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.OnPurchaseCreditsCallback
// [0x00020002] 
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Usfxgui_mpstore::OnPurchaseCreditsCallback ( int nResult )
{
	static UFunction* pFnOnPurchaseCreditsCallback = NULL;

	if ( ! pFnOnPurchaseCreditsCallback )
		pFnOnPurchaseCreditsCallback = (UFunction*) UObject::GObjObjects()->Data[ 111149 ];

	Usfxgui_mpstore_execOnPurchaseCreditsCallback_Parms OnPurchaseCreditsCallback_Parms;
	OnPurchaseCreditsCallback_Parms.nResult = nResult;

	this->ProcessEvent ( pFnOnPurchaseCreditsCallback, &OnPurchaseCreditsCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.DoCreditPurchase
// [0x00020002] 
// Parameters infos:
// int                            ItemId                         ( CPF_Parm )

void Usfxgui_mpstore::DoCreditPurchase ( int ItemId )
{
	static UFunction* pFnDoCreditPurchase = NULL;

	if ( ! pFnDoCreditPurchase )
		pFnDoCreditPurchase = (UFunction*) UObject::GObjObjects()->Data[ 111146 ];

	Usfxgui_mpstore_execDoCreditPurchase_Parms DoCreditPurchase_Parms;
	DoCreditPurchase_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnDoCreditPurchase, &DoCreditPurchase_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.PurchaseCreditsCallback
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Usfxgui_mpstore::PurchaseCreditsCallback ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnPurchaseCreditsCallback = NULL;

	if ( ! pFnPurchaseCreditsCallback )
		pFnPurchaseCreditsCallback = (UFunction*) UObject::GObjObjects()->Data[ 111143 ];

	Usfxgui_mpstore_execPurchaseCreditsCallback_Parms PurchaseCreditsCallback_Parms;
	PurchaseCreditsCallback_Parms.bAPressed = bAPressed;
	PurchaseCreditsCallback_Parms.nContext = nContext;

	this->ProcessEvent ( pFnPurchaseCreditsCallback, &PurchaseCreditsCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.PurchaseItemWithCredits
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ItemId                         ( CPF_Parm )

void Usfxgui_mpstore::PurchaseItemWithCredits ( int ItemId )
{
	static UFunction* pFnPurchaseItemWithCredits = NULL;

	if ( ! pFnPurchaseItemWithCredits )
		pFnPurchaseItemWithCredits = (UFunction*) UObject::GObjObjects()->Data[ 111115 ];

	Usfxgui_mpstore_execPurchaseItemWithCredits_Parms PurchaseItemWithCredits_Parms;
	PurchaseItemWithCredits_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnPurchaseItemWithCredits, &PurchaseItemWithCredits_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.OnPurchaseChoiceCallback
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UBioSFHandler_MessageBox* oMsgBox                        ( CPF_Parm )
// int                            nChoiceID                      ( CPF_Parm )
// unsigned long                  bCancelled                     ( CPF_Parm )

void Usfxgui_mpstore::OnPurchaseChoiceCallback ( class UBioSFHandler_MessageBox* oMsgBox, int nChoiceID, unsigned long bCancelled )
{
	static UFunction* pFnOnPurchaseChoiceCallback = NULL;

	if ( ! pFnOnPurchaseChoiceCallback )
		pFnOnPurchaseChoiceCallback = (UFunction*) UObject::GObjObjects()->Data[ 111130 ];

	Usfxgui_mpstore_execOnPurchaseChoiceCallback_Parms OnPurchaseChoiceCallback_Parms;
	OnPurchaseChoiceCallback_Parms.oMsgBox = oMsgBox;
	OnPurchaseChoiceCallback_Parms.nChoiceID = nChoiceID;
	OnPurchaseChoiceCallback_Parms.bCancelled = bCancelled;

	this->ProcessEvent ( pFnOnPurchaseChoiceCallback, &OnPurchaseChoiceCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.PCPurchaseConfirmationCallback
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void Usfxgui_mpstore::PCPurchaseConfirmationCallback ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnPCPurchaseConfirmationCallback = NULL;

	if ( ! pFnPCPurchaseConfirmationCallback )
		pFnPCPurchaseConfirmationCallback = (UFunction*) UObject::GObjObjects()->Data[ 111127 ];

	Usfxgui_mpstore_execPCPurchaseConfirmationCallback_Parms PCPurchaseConfirmationCallback_Parms;
	PCPurchaseConfirmationCallback_Parms.bAPressed = bAPressed;
	PCPurchaseConfirmationCallback_Parms.nContext = nContext;

	this->ProcessEvent ( pFnPCPurchaseConfirmationCallback, &PCPurchaseConfirmationCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.ConfirmPCPlatformPurchase
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ItemId                         ( CPF_Parm )

void Usfxgui_mpstore::ConfirmPCPlatformPurchase ( int ItemId )
{
	static UFunction* pFnConfirmPCPlatformPurchase = NULL;

	if ( ! pFnConfirmPCPlatformPurchase )
		pFnConfirmPCPlatformPurchase = (UFunction*) UObject::GObjObjects()->Data[ 111117 ];

	Usfxgui_mpstore_execConfirmPCPlatformPurchase_Parms ConfirmPCPlatformPurchase_Parms;
	ConfirmPCPlatformPurchase_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnConfirmPCPlatformPurchase, &ConfirmPCPlatformPurchase_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.PurchaseItem
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ItemId                         ( CPF_Parm )

void Usfxgui_mpstore::PurchaseItem ( int ItemId )
{
	static UFunction* pFnPurchaseItem = NULL;

	if ( ! pFnPurchaseItem )
		pFnPurchaseItem = (UFunction*) UObject::GObjObjects()->Data[ 111106 ];

	Usfxgui_mpstore_execPurchaseItem_Parms PurchaseItem_Parms;
	PurchaseItem_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnPurchaseItem, &PurchaseItem_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.CanPurchaseItem
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemId                         ( CPF_Parm )

bool Usfxgui_mpstore::CanPurchaseItem ( int ItemId )
{
	static UFunction* pFnCanPurchaseItem = NULL;

	if ( ! pFnCanPurchaseItem )
		pFnCanPurchaseItem = (UFunction*) UObject::GObjObjects()->Data[ 111098 ];

	Usfxgui_mpstore_execCanPurchaseItem_Parms CanPurchaseItem_Parms;
	CanPurchaseItem_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnCanPurchaseItem, &CanPurchaseItem_Parms, NULL );

	return CanPurchaseItem_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.CanPurchaseItemWithCredits
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemId                         ( CPF_Parm )

bool Usfxgui_mpstore::CanPurchaseItemWithCredits ( int ItemId )
{
	static UFunction* pFnCanPurchaseItemWithCredits = NULL;

	if ( ! pFnCanPurchaseItemWithCredits )
		pFnCanPurchaseItemWithCredits = (UFunction*) UObject::GObjObjects()->Data[ 111086 ];

	Usfxgui_mpstore_execCanPurchaseItemWithCredits_Parms CanPurchaseItemWithCredits_Parms;
	CanPurchaseItemWithCredits_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnCanPurchaseItemWithCredits, &CanPurchaseItemWithCredits_Parms, NULL );

	return CanPurchaseItemWithCredits_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.GetPlatformCostString
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            ItemId                         ( CPF_Parm )

struct FString Usfxgui_mpstore::GetPlatformCostString ( int ItemId )
{
	static UFunction* pFnGetPlatformCostString = NULL;

	if ( ! pFnGetPlatformCostString )
		pFnGetPlatformCostString = (UFunction*) UObject::GObjObjects()->Data[ 111091 ];

	Usfxgui_mpstore_execGetPlatformCostString_Parms GetPlatformCostString_Parms;
	GetPlatformCostString_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnGetPlatformCostString, &GetPlatformCostString_Parms, NULL );

	return GetPlatformCostString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.IsItemFree
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemId                         ( CPF_Parm )

bool Usfxgui_mpstore::IsItemFree ( int ItemId )
{
	static UFunction* pFnIsItemFree = NULL;

	if ( ! pFnIsItemFree )
		pFnIsItemFree = (UFunction*) UObject::GObjObjects()->Data[ 111088 ];

	Usfxgui_mpstore_execIsItemFree_Parms IsItemFree_Parms;
	IsItemFree_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnIsItemFree, &IsItemFree_Parms, NULL );

	return IsItemFree_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.GetCreditCostString
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            ItemId                         ( CPF_Parm )

struct FString Usfxgui_mpstore::GetCreditCostString ( int ItemId )
{
	static UFunction* pFnGetCreditCostString = NULL;

	if ( ! pFnGetCreditCostString )
		pFnGetCreditCostString = (UFunction*) UObject::GObjObjects()->Data[ 111079 ];

	Usfxgui_mpstore_execGetCreditCostString_Parms GetCreditCostString_Parms;
	GetCreditCostString_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnGetCreditCostString, &GetCreditCostString_Parms, NULL );

	return GetCreditCostString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.GetExpirationTimeString
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            ItemId                         ( CPF_Parm )

struct FString Usfxgui_mpstore::GetExpirationTimeString ( int ItemId )
{
	static UFunction* pFnGetExpirationTimeString = NULL;

	if ( ! pFnGetExpirationTimeString )
		pFnGetExpirationTimeString = (UFunction*) UObject::GObjObjects()->Data[ 111067 ];

	Usfxgui_mpstore_execGetExpirationTimeString_Parms GetExpirationTimeString_Parms;
	GetExpirationTimeString_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnGetExpirationTimeString, &GetExpirationTimeString_Parms, NULL );

	return GetExpirationTimeString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.SetRemoteImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ImagePath                      ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mpstore::SetRemoteImage ( struct FString ImagePath )
{
	static UFunction* pFnSetRemoteImage = NULL;

	if ( ! pFnSetRemoteImage )
		pFnSetRemoteImage = (UFunction*) UObject::GObjObjects()->Data[ 111064 ];

	Usfxgui_mpstore_execSetRemoteImage_Parms SetRemoteImage_Parms;
	memcpy ( &SetRemoteImage_Parms.ImagePath, &ImagePath, 0xC );

	this->ProcessEvent ( pFnSetRemoteImage, &SetRemoteImage_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.OnImageRequestComplete
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FSFXOnlineImageRequest  request                        ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mpstore::OnImageRequestComplete ( struct FSFXOnlineImageRequest request )
{
	static UFunction* pFnOnImageRequestComplete = NULL;

	if ( ! pFnOnImageRequestComplete )
		pFnOnImageRequestComplete = (UFunction*) UObject::GObjObjects()->Data[ 111059 ];

	Usfxgui_mpstore_execOnImageRequestComplete_Parms OnImageRequestComplete_Parms;
	memcpy ( &OnImageRequestComplete_Parms.request, &request, 0x18 );

	this->ProcessEvent ( pFnOnImageRequestComplete, &OnImageRequestComplete_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.GetStoreItems
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FStoreGUIData > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FStoreGUIData > Usfxgui_mpstore::GetStoreItems ( )
{
	static UFunction* pFnGetStoreItems = NULL;

	if ( ! pFnGetStoreItems )
		pFnGetStoreItems = (UFunction*) UObject::GObjObjects()->Data[ 111053 ];

	Usfxgui_mpstore_execGetStoreItems_Parms GetStoreItems_Parms;

	this->ProcessEvent ( pFnGetStoreItems, &GetStoreItems_Parms, NULL );

	return GetStoreItems_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.GetTotalCreditString
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxgui_mpstore::GetTotalCreditString ( )
{
	static UFunction* pFnGetTotalCreditString = NULL;

	if ( ! pFnGetTotalCreditString )
		pFnGetTotalCreditString = (UFunction*) UObject::GObjObjects()->Data[ 111051 ];

	Usfxgui_mpstore_execGetTotalCreditString_Parms GetTotalCreditString_Parms;

	this->ProcessEvent ( pFnGetTotalCreditString, &GetTotalCreditString_Parms, NULL );

	return GetTotalCreditString_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.GetInitialSelectedID
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxgui_mpstore::GetInitialSelectedID ( )
{
	static UFunction* pFnGetInitialSelectedID = NULL;

	if ( ! pFnGetInitialSelectedID )
		pFnGetInitialSelectedID = (UFunction*) UObject::GObjObjects()->Data[ 111049 ];

	Usfxgui_mpstore_execGetInitialSelectedID_Parms GetInitialSelectedID_Parms;

	this->ProcessEvent ( pFnGetInitialSelectedID, &GetInitialSelectedID_Parms, NULL );

	return GetInitialSelectedID_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxgui_mpstore.SetInitialSelectedStoreID
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            StoreID                        ( CPF_Parm )

void Usfxgui_mpstore::SetInitialSelectedStoreID ( int StoreID )
{
	static UFunction* pFnSetInitialSelectedStoreID = NULL;

	if ( ! pFnSetInitialSelectedStoreID )
		pFnSetInitialSelectedStoreID = (UFunction*) UObject::GObjObjects()->Data[ 111047 ];

	Usfxgui_mpstore_execSetInitialSelectedStoreID_Parms SetInitialSelectedStoreID_Parms;
	SetInitialSelectedStoreID_Parms.StoreID = StoreID;

	this->ProcessEvent ( pFnSetInitialSelectedStoreID, &SetInitialSelectedStoreID_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.Exit
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpstore::Exit ( )
{
	static UFunction* pFnExit = NULL;

	if ( ! pFnExit )
		pFnExit = (UFunction*) UObject::GObjObjects()->Data[ 111044 ];

	Usfxgui_mpstore_execExit_Parms Exit_Parms;

	this->ProcessEvent ( pFnExit, &Exit_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpstore::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 111042 ];

	Usfxgui_mpstore_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.PurchaseErrorCallback
// [0x00020001] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm )

void Usfxgui_mpstore::PurchaseErrorCallback ( unsigned long bAPressed, int nIndex )
{
	static UFunction* pFnPurchaseErrorCallback = NULL;

	if ( ! pFnPurchaseErrorCallback )
		pFnPurchaseErrorCallback = (UFunction*) UObject::GObjObjects()->Data[ 111039 ];

	Usfxgui_mpstore_execPurchaseErrorCallback_Parms PurchaseErrorCallback_Parms;
	PurchaseErrorCallback_Parms.bAPressed = bAPressed;
	PurchaseErrorCallback_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnPurchaseErrorCallback, &PurchaseErrorCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.FinishInitialization
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void Usfxgui_mpstore::FinishInitialization ( int nResult )
{
	static UFunction* pFnFinishInitialization = NULL;

	if ( ! pFnFinishInitialization )
		pFnFinishInitialization = (UFunction*) UObject::GObjObjects()->Data[ 111023 ];

	Usfxgui_mpstore_execFinishInitialization_Parms FinishInitialization_Parms;
	FinishInitialization_Parms.nResult = nResult;

	this->ProcessEvent ( pFnFinishInitialization, &FinishInitialization_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.RetryFinishInitialization
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mpstore::RetryFinishInitialization ( )
{
	static UFunction* pFnRetryFinishInitialization = NULL;

	if ( ! pFnRetryFinishInitialization )
		pFnRetryFinishInitialization = (UFunction*) UObject::GObjObjects()->Data[ 111028 ];

	Usfxgui_mpstore_execRetryFinishInitialization_Parms RetryFinishInitialization_Parms;

	this->ProcessEvent ( pFnRetryFinishInitialization, &RetryFinishInitialization_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.OnWalletBalanceRequestFinished
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  Success                        ( CPF_Parm )
// int                            walletBalance                  ( CPF_Parm )

void Usfxgui_mpstore::OnWalletBalanceRequestFinished ( unsigned long Success, int walletBalance )
{
	static UFunction* pFnOnWalletBalanceRequestFinished = NULL;

	if ( ! pFnOnWalletBalanceRequestFinished )
		pFnOnWalletBalanceRequestFinished = (UFunction*) UObject::GObjObjects()->Data[ 111024 ];

	Usfxgui_mpstore_execOnWalletBalanceRequestFinished_Parms OnWalletBalanceRequestFinished_Parms;
	OnWalletBalanceRequestFinished_Parms.Success = Success;
	OnWalletBalanceRequestFinished_Parms.walletBalance = walletBalance;

	this->ProcessEvent ( pFnOnWalletBalanceRequestFinished, &OnWalletBalanceRequestFinished_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mpstore::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 111017 ];

	Usfxgui_mpstore_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.ClearQueuedNotification
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   MessageBoxName                 ( CPF_Parm )

void Usfxgui_mpstore::ClearQueuedNotification ( struct FName MessageBoxName )
{
	static UFunction* pFnClearQueuedNotification = NULL;

	if ( ! pFnClearQueuedNotification )
		pFnClearQueuedNotification = (UFunction*) UObject::GObjObjects()->Data[ 111015 ];

	Usfxgui_mpstore_execClearQueuedNotification_Parms ClearQueuedNotification_Parms;
	memcpy ( &ClearQueuedNotification_Parms.MessageBoxName, &MessageBoxName, 0x8 );

	this->ProcessEvent ( pFnClearQueuedNotification, &ClearQueuedNotification_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.QueuedNotificationCallback
// [0x00020001] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm )

void Usfxgui_mpstore::QueuedNotificationCallback ( unsigned long bAPressed, int nIndex )
{
	static UFunction* pFnQueuedNotificationCallback = NULL;

	if ( ! pFnQueuedNotificationCallback )
		pFnQueuedNotificationCallback = (UFunction*) UObject::GObjObjects()->Data[ 111012 ];

	Usfxgui_mpstore_execQueuedNotificationCallback_Parms QueuedNotificationCallback_Parms;
	QueuedNotificationCallback_Parms.bAPressed = bAPressed;
	QueuedNotificationCallback_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnQueuedNotificationCallback, &QueuedNotificationCallback_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.ShowQueuedNotification
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   MessageBoxName                 ( CPF_Parm )
// void*                          srText                         ( CPF_Parm )

void Usfxgui_mpstore::ShowQueuedNotification ( struct FName MessageBoxName, void* srText )
{
	static UFunction* pFnShowQueuedNotification = NULL;

	if ( ! pFnShowQueuedNotification )
		pFnShowQueuedNotification = (UFunction*) UObject::GObjObjects()->Data[ 111008 ];

	Usfxgui_mpstore_execShowQueuedNotification_Parms ShowQueuedNotification_Parms;
	memcpy ( &ShowQueuedNotification_Parms.MessageBoxName, &MessageBoxName, 0x8 );
	ShowQueuedNotification_Parms.srText = srText;

	this->ProcessEvent ( pFnShowQueuedNotification, &ShowQueuedNotification_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mpstore.ShowNotification
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// void*                          srText                         ( CPF_Parm )

void Usfxgui_mpstore::ShowNotification ( void* srText )
{
	static UFunction* pFnShowNotification = NULL;

	if ( ! pFnShowNotification )
		pFnShowNotification = (UFunction*) UObject::GObjObjects()->Data[ 111004 ];

	Usfxgui_mpstore_execShowNotification_Parms ShowNotification_Parms;
	ShowNotification_Parms.srText = srText;

	this->ProcessEvent ( pFnShowNotification, &ShowNotification_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppromotion.AS_SetImageVisible
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void Usfxgui_mppromotion::AS_SetImageVisible ( unsigned long bVisible )
{
	static UFunction* pFnAS_SetImageVisible = NULL;

	if ( ! pFnAS_SetImageVisible )
		pFnAS_SetImageVisible = (UFunction*) UObject::GObjObjects()->Data[ 110790 ];

	Usfxgui_mppromotion_execAS_SetImageVisible_Parms AS_SetImageVisible_Parms;
	AS_SetImageVisible_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnAS_SetImageVisible, &AS_SetImageVisible_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppromotion.AS_SetLoadingClipVisible
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void Usfxgui_mppromotion::AS_SetLoadingClipVisible ( unsigned long bVisible )
{
	static UFunction* pFnAS_SetLoadingClipVisible = NULL;

	if ( ! pFnAS_SetLoadingClipVisible )
		pFnAS_SetLoadingClipVisible = (UFunction*) UObject::GObjObjects()->Data[ 110788 ];

	Usfxgui_mppromotion_execAS_SetLoadingClipVisible_Parms AS_SetLoadingClipVisible_Parms;
	AS_SetLoadingClipVisible_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnAS_SetLoadingClipVisible, &AS_SetLoadingClipVisible_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppromotion.AS_SetPromotionalText
// [0x00020002] 
// Parameters infos:
// struct FString                 PromotTitle                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 PromoText                      ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mppromotion::AS_SetPromotionalText ( struct FString PromotTitle, struct FString PromoText )
{
	static UFunction* pFnAS_SetPromotionalText = NULL;

	if ( ! pFnAS_SetPromotionalText )
		pFnAS_SetPromotionalText = (UFunction*) UObject::GObjObjects()->Data[ 110785 ];

	Usfxgui_mppromotion_execAS_SetPromotionalText_Parms AS_SetPromotionalText_Parms;
	memcpy ( &AS_SetPromotionalText_Parms.PromotTitle, &PromotTitle, 0xC );
	memcpy ( &AS_SetPromotionalText_Parms.PromoText, &PromoText, 0xC );

	this->ProcessEvent ( pFnAS_SetPromotionalText, &AS_SetPromotionalText_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppromotion.OnReinforcements
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mppromotion::OnReinforcements ( )
{
	static UFunction* pFnOnReinforcements = NULL;

	if ( ! pFnOnReinforcements )
		pFnOnReinforcements = (UFunction*) UObject::GObjObjects()->Data[ 110782 ];

	Usfxgui_mppromotion_execOnReinforcements_Parms OnReinforcements_Parms;

	this->ProcessEvent ( pFnOnReinforcements, &OnReinforcements_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppromotion.OnContinue
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxgui_mppromotion::OnContinue ( )
{
	static UFunction* pFnOnContinue = NULL;

	if ( ! pFnOnContinue )
		pFnOnContinue = (UFunction*) UObject::GObjObjects()->Data[ 110781 ];

	Usfxgui_mppromotion_execOnContinue_Parms OnContinue_Parms;

	this->ProcessEvent ( pFnOnContinue, &OnContinue_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppromotion.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mppromotion::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 110780 ];

	Usfxgui_mppromotion_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppromotion.OnRequestComplete
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FSFXOnlineImageRequest  Image                          ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mppromotion::OnRequestComplete ( struct FSFXOnlineImageRequest Image )
{
	static UFunction* pFnOnRequestComplete = NULL;

	if ( ! pFnOnRequestComplete )
		pFnOnRequestComplete = (UFunction*) UObject::GObjObjects()->Data[ 110776 ];

	Usfxgui_mppromotion_execOnRequestComplete_Parms OnRequestComplete_Parms;
	memcpy ( &OnRequestComplete_Parms.Image, &Image, 0x18 );

	this->ProcessEvent ( pFnOnRequestComplete, &OnRequestComplete_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppromotion.RequestImage
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ImageURL                       ( CPF_Parm | CPF_NeedCtorLink )

void Usfxgui_mppromotion::RequestImage ( struct FString ImageURL )
{
	static UFunction* pFnRequestImage = NULL;

	if ( ! pFnRequestImage )
		pFnRequestImage = (UFunction*) UObject::GObjObjects()->Data[ 110774 ];

	Usfxgui_mppromotion_execRequestImage_Parms RequestImage_Parms;
	memcpy ( &RequestImage_Parms.ImageURL, &ImageURL, 0xC );

	this->ProcessEvent ( pFnRequestImage, &RequestImage_Parms, NULL );
};

// Function sfxgamempcontent.sfxgui_mppromotion.OnStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxgui_mppromotion::eventOnStart ( )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 110770 ];

	Usfxgui_mppromotion_eventOnStart_Parms OnStart_Parms;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable.ShouldUsePower
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxpowercustomactionmp_consumable::eventShouldUsePower ( class AActor* Target, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 112502 ];

	Usfxpowercustomactionmp_consumable_eventShouldUsePower_Parms ShouldUsePower_Parms;
	ShouldUsePower_Parms.Target = Target;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePower_Parms.sOptionalInfo, 0xC );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable.GetHUDWheelIconInfo
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString Usfxpowercustomactionmp_consumable::eventGetHUDWheelIconInfo ( )
{
	static UFunction* pFnGetHUDWheelIconInfo = NULL;

	if ( ! pFnGetHUDWheelIconInfo )
		pFnGetHUDWheelIconInfo = (UFunction*) UObject::GObjObjects()->Data[ 112500 ];

	Usfxpowercustomactionmp_consumable_eventGetHUDWheelIconInfo_Parms GetHUDWheelIconInfo_Parms;

	this->ProcessEvent ( pFnGetHUDWheelIconInfo, &GetHUDWheelIconInfo_Parms, NULL );

	return GetHUDWheelIconInfo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable.CanUsePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool Usfxpowercustomactionmp_consumable::CanUsePower ( class AActor* oTarget )
{
	static UFunction* pFnCanUsePower = NULL;

	if ( ! pFnCanUsePower )
		pFnCanUsePower = (UFunction*) UObject::GObjObjects()->Data[ 112496 ];

	Usfxpowercustomactionmp_consumable_execCanUsePower_Parms CanUsePower_Parms;
	CanUsePower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanUsePower, &CanUsePower_Parms, NULL );

	return CanUsePower_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable.AddAvailableCharges
// [0x00020102] 
// Parameters infos:
// int                            Quantity                       ( CPF_Parm )

void Usfxpowercustomactionmp_consumable::AddAvailableCharges ( int Quantity )
{
	static UFunction* pFnAddAvailableCharges = NULL;

	if ( ! pFnAddAvailableCharges )
		pFnAddAvailableCharges = (UFunction*) UObject::GObjObjects()->Data[ 112493 ];

	Usfxpowercustomactionmp_consumable_execAddAvailableCharges_Parms AddAvailableCharges_Parms;
	AddAvailableCharges_Parms.Quantity = Quantity;

	this->ProcessEvent ( pFnAddAvailableCharges, &AddAvailableCharges_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable.UseConsumable
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void Usfxpowercustomactionmp_consumable::UseConsumable ( )
{
	static UFunction* pFnUseConsumable = NULL;

	if ( ! pFnUseConsumable )
		pFnUseConsumable = (UFunction*) UObject::GObjObjects()->Data[ 112488 ];

	Usfxpowercustomactionmp_consumable_execUseConsumable_Parms UseConsumable_Parms;

	this->ProcessEvent ( pFnUseConsumable, &UseConsumable_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable.GetChargeCount
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxpowercustomactionmp_consumable::GetChargeCount ( )
{
	static UFunction* pFnGetChargeCount = NULL;

	if ( ! pFnGetChargeCount )
		pFnGetChargeCount = (UFunction*) UObject::GObjObjects()->Data[ 112482 ];

	Usfxpowercustomactionmp_consumable_execGetChargeCount_Parms GetChargeCount_Parms;

	this->ProcessEvent ( pFnGetChargeCount, &GetChargeCount_Parms, NULL );

	return GetChargeCount_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable.HasCharges
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxpowercustomactionmp_consumable::HasCharges ( )
{
	static UFunction* pFnHasCharges = NULL;

	if ( ! pFnHasCharges )
		pFnHasCharges = (UFunction*) UObject::GObjObjects()->Data[ 112474 ];

	Usfxpowercustomactionmp_consumable_execHasCharges_Parms HasCharges_Parms;

	this->ProcessEvent ( pFnHasCharges, &HasCharges_Parms, NULL );

	return HasCharges_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable.OnPowersLoaded
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_consumable::OnPowersLoaded ( )
{
	static UFunction* pFnOnPowersLoaded = NULL;

	if ( ! pFnOnPowersLoaded )
		pFnOnPowersLoaded = (UFunction*) UObject::GObjObjects()->Data[ 112473 ];

	Usfxpowercustomactionmp_consumable_execOnPowersLoaded_Parms OnPowersLoaded_Parms;

	this->ProcessEvent ( pFnOnPowersLoaded, &OnPowersLoaded_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManager.DrawActorLog
// [0x00020002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// class ABioHUD*                 H                              ( CPF_Parm )

void ASFXVocalizationManagerMP::DrawActorLog ( class AActor* oActor, class ABioHUD* H )
{
	static UFunction* pFnDrawActorLog = NULL;

	if ( ! pFnDrawActorLog )
		pFnDrawActorLog = (UFunction*) UObject::GObjObjects()->Data[ 44887 ];

	ASFXVocalizationManagerMP_execDrawActorLog_Parms DrawActorLog_Parms;
	DrawActorLog_Parms.oActor = oActor;
	DrawActorLog_Parms.H = H;

	this->ProcessEvent ( pFnDrawActorLog, &DrawActorLog_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManager.DebugDraw
// [0x00020002] 
// Parameters infos:
// class ABioHUD*                 H                              ( CPF_Parm )

void ASFXVocalizationManagerMP::DebugDraw ( class ABioHUD* H )
{
	static UFunction* pFnDebugDraw = NULL;

	if ( ! pFnDebugDraw )
		pFnDebugDraw = (UFunction*) UObject::GObjObjects()->Data[ 44881 ];

	ASFXVocalizationManagerMP_execDebugDraw_Parms DebugDraw_Parms;
	DebugDraw_Parms.H = H;

	this->ProcessEvent ( pFnDebugDraw, &DebugDraw_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManager.TickEvents
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXVocalizationManagerMP::eventTickEvents ( float DeltaTime )
{
	static UFunction* pFnTickEvents = NULL;

	if ( ! pFnTickEvents )
		pFnTickEvents = (UFunction*) UObject::GObjObjects()->Data[ 44874 ];

	ASFXVocalizationManagerMP_eventTickEvents_Parms TickEvents_Parms;
	TickEvents_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickEvents, &TickEvents_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManager.PlaySFXVocalizationSLineInternal
// [0x00484902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Speaker                        ( CPF_Parm )
// float                          DelaySec                       ( CPF_OptionalParm | CPF_Parm )
// struct FSFXVocalizationEvent   E                              ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FSFXVocalizationLine    LineToPlay                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ASFXVocalizationManagerMP::eventPlaySFXVocalizationSLineInternal ( class ABioPawn* Speaker, float DelaySec, struct FSFXVocalizationEvent* E, struct FSFXVocalizationLine* LineToPlay )
{
	static UFunction* pFnPlaySFXVocalizationSLineInternal = NULL;

	if ( ! pFnPlaySFXVocalizationSLineInternal )
		pFnPlaySFXVocalizationSLineInternal = (UFunction*) UObject::GObjObjects()->Data[ 44868 ];

	ASFXVocalizationManagerMP_eventPlaySFXVocalizationSLineInternal_Parms PlaySFXVocalizationSLineInternal_Parms;
	PlaySFXVocalizationSLineInternal_Parms.Speaker = Speaker;
	PlaySFXVocalizationSLineInternal_Parms.DelaySec = DelaySec;

	this->ProcessEvent ( pFnPlaySFXVocalizationSLineInternal, &PlaySFXVocalizationSLineInternal_Parms, NULL );

	if ( E )
		memcpy ( E, &PlaySFXVocalizationSLineInternal_Parms.E, 0x18 );

	if ( LineToPlay )
		memcpy ( LineToPlay, &PlaySFXVocalizationSLineInternal_Parms.LineToPlay, 0x1C );

	return PlaySFXVocalizationSLineInternal_Parms.ReturnValue;
};

// Function SFXGame.SFXVocalizationManager.TriggerVocalizationEvent
// [0x00824003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  Id                             ( CPF_Parm )
// class ABioPawn*                inInstigator                   ( CPF_Parm )
// class ABioPawn*                Recipient                      ( CPF_OptionalParm | CPF_Parm )
// class ABioPawn*                ReferringTo                    ( CPF_OptionalParm | CPF_Parm )
// float                          DelaySec                       ( CPF_OptionalParm | CPF_Parm )
// float                          fChanceToPlayModifier          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReplicated                    ( CPF_OptionalParm | CPF_Parm )

void ASFXVocalizationManagerMP::TriggerVocalizationEvent ( unsigned char Id, class ABioPawn* inInstigator, class ABioPawn* Recipient, class ABioPawn* ReferringTo, float DelaySec, float fChanceToPlayModifier, unsigned long bReplicated )
{
	static UFunction* pFnTriggerVocalizationEvent = NULL;

	if ( ! pFnTriggerVocalizationEvent )
		pFnTriggerVocalizationEvent = (UFunction*) UObject::GObjObjects()->Data[ 44853 ];

	ASFXVocalizationManagerMP_execTriggerVocalizationEvent_Parms TriggerVocalizationEvent_Parms;
	TriggerVocalizationEvent_Parms.Id = Id;
	TriggerVocalizationEvent_Parms.inInstigator = inInstigator;
	TriggerVocalizationEvent_Parms.Recipient = Recipient;
	TriggerVocalizationEvent_Parms.ReferringTo = ReferringTo;
	TriggerVocalizationEvent_Parms.DelaySec = DelaySec;
	TriggerVocalizationEvent_Parms.fChanceToPlayModifier = fChanceToPlayModifier;
	TriggerVocalizationEvent_Parms.bReplicated = bReplicated;

	this->ProcessEvent ( pFnTriggerVocalizationEvent, &TriggerVocalizationEvent_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManager.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXVocalizationManagerMP::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 44852 ];

	ASFXVocalizationManagerMP_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_rocket.CanUsePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool Usfxpowercustomactionmp_consumable_rocket::CanUsePower ( class AActor* oTarget )
{
	static UFunction* pFnCanUsePower = NULL;

	if ( ! pFnCanUsePower )
		pFnCanUsePower = (UFunction*) UObject::GObjObjects()->Data[ 112583 ];

	Usfxpowercustomactionmp_consumable_rocket_execCanUsePower_Parms CanUsePower_Parms;
	CanUsePower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanUsePower, &CanUsePower_Parms, NULL );

	return CanUsePower_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_rocket.SetWeaponAmmoFromPower
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void Usfxpowercustomactionmp_consumable_rocket::SetWeaponAmmoFromPower ( )
{
	static UFunction* pFnSetWeaponAmmoFromPower = NULL;

	if ( ! pFnSetWeaponAmmoFromPower )
		pFnSetWeaponAmmoFromPower = (UFunction*) UObject::GObjObjects()->Data[ 112579 ];

	Usfxpowercustomactionmp_consumable_rocket_execSetWeaponAmmoFromPower_Parms SetWeaponAmmoFromPower_Parms;

	this->ProcessEvent ( pFnSetWeaponAmmoFromPower, &SetWeaponAmmoFromPower_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_rocket.AddAvailableCharges
// [0x00020102] 
// Parameters infos:
// int                            Quantity                       ( CPF_Parm )

void Usfxpowercustomactionmp_consumable_rocket::AddAvailableCharges ( int Quantity )
{
	static UFunction* pFnAddAvailableCharges = NULL;

	if ( ! pFnAddAvailableCharges )
		pFnAddAvailableCharges = (UFunction*) UObject::GObjObjects()->Data[ 112580 ];

	Usfxpowercustomactionmp_consumable_rocket_execAddAvailableCharges_Parms AddAvailableCharges_Parms;
	AddAvailableCharges_Parms.Quantity = Quantity;

	this->ProcessEvent ( pFnAddAvailableCharges, &AddAvailableCharges_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_rocket.OnImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxpowercustomactionmp_consumable_rocket::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 112568 ];

	Usfxpowercustomactionmp_consumable_rocket_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_rocket.RocketConfirmationFromServer
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_consumable_rocket::RocketConfirmationFromServer ( )
{
	static UFunction* pFnRocketConfirmationFromServer = NULL;

	if ( ! pFnRocketConfirmationFromServer )
		pFnRocketConfirmationFromServer = (UFunction*) UObject::GObjObjects()->Data[ 112578 ];

	Usfxpowercustomactionmp_consumable_rocket_execRocketConfirmationFromServer_Parms RocketConfirmationFromServer_Parms;

	this->ProcessEvent ( pFnRocketConfirmationFromServer, &RocketConfirmationFromServer_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_rocket.OnPawnLoadedWeapons
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_consumable_rocket::OnPawnLoadedWeapons ( )
{
	static UFunction* pFnOnPawnLoadedWeapons = NULL;

	if ( ! pFnOnPawnLoadedWeapons )
		pFnOnPawnLoadedWeapons = (UFunction*) UObject::GObjObjects()->Data[ 112565 ];

	Usfxpowercustomactionmp_consumable_rocket_execOnPawnLoadedWeapons_Parms OnPawnLoadedWeapons_Parms;

	this->ProcessEvent ( pFnOnPawnLoadedWeapons, &OnPawnLoadedWeapons_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_rocket.GetWeapon
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ASFXHeavyWeapon*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXHeavyWeapon* Usfxpowercustomactionmp_consumable_rocket::GetWeapon ( )
{
	static UFunction* pFnGetWeapon = NULL;

	if ( ! pFnGetWeapon )
		pFnGetWeapon = (UFunction*) UObject::GObjObjects()->Data[ 112562 ];

	Usfxpowercustomactionmp_consumable_rocket_execGetWeapon_Parms GetWeapon_Parms;

	this->ProcessEvent ( pFnGetWeapon, &GetWeapon_Parms, NULL );

	return GetWeapon_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_shield.RemoveImmunity
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void Usfxpowercustomactionmp_consumable_shield::RemoveImmunity ( )
{
	static UFunction* pFnRemoveImmunity = NULL;

	if ( ! pFnRemoveImmunity )
		pFnRemoveImmunity = (UFunction*) UObject::GObjObjects()->Data[ 112604 ];

	Usfxpowercustomactionmp_consumable_shield_execRemoveImmunity_Parms RemoveImmunity_Parms;

	this->ProcessEvent ( pFnRemoveImmunity, &RemoveImmunity_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_shield.StopShieldVFX
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void Usfxpowercustomactionmp_consumable_shield::StopShieldVFX ( )
{
	static UFunction* pFnStopShieldVFX = NULL;

	if ( ! pFnStopShieldVFX )
		pFnStopShieldVFX = (UFunction*) UObject::GObjObjects()->Data[ 112603 ];

	Usfxpowercustomactionmp_consumable_shield_execStopShieldVFX_Parms StopShieldVFX_Parms;

	this->ProcessEvent ( pFnStopShieldVFX, &StopShieldVFX_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_shield.OnImpact
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxpowercustomactionmp_consumable_shield::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 112589 ];

	Usfxpowercustomactionmp_consumable_shield_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_ammo.CanUsePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool Usfxpowercustomactionmp_consumable_ammo::CanUsePower ( class AActor* oTarget )
{
	static UFunction* pFnCanUsePower = NULL;

	if ( ! pFnCanUsePower )
		pFnCanUsePower = (UFunction*) UObject::GObjObjects()->Data[ 112520 ];

	Usfxpowercustomactionmp_consumable_ammo_execCanUsePower_Parms CanUsePower_Parms;
	CanUsePower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanUsePower, &CanUsePower_Parms, NULL );

	return CanUsePower_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_ammo.OnImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxpowercustomactionmp_consumable_ammo::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 112507 ];

	Usfxpowercustomactionmp_consumable_ammo_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_revive.OnImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxpowercustomactionmp_consumable_revive::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 112540 ];

	Usfxpowercustomactionmp_consumable_revive_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_revive.StartPower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_consumable_revive::StartPower ( )
{
	static UFunction* pFnStartPower = NULL;

	if ( ! pFnStartPower )
		pFnStartPower = (UFunction*) UObject::GObjObjects()->Data[ 112539 ];

	Usfxpowercustomactionmp_consumable_revive_execStartPower_Parms StartPower_Parms;

	this->ProcessEvent ( pFnStartPower, &StartPower_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_revive.CanUsePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool Usfxpowercustomactionmp_consumable_revive::CanUsePower ( class AActor* oTarget )
{
	static UFunction* pFnCanUsePower = NULL;

	if ( ! pFnCanUsePower )
		pFnCanUsePower = (UFunction*) UObject::GObjObjects()->Data[ 112534 ];

	Usfxpowercustomactionmp_consumable_revive_execCanUsePower_Parms CanUsePower_Parms;
	CanUsePower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanUsePower, &CanUsePower_Parms, NULL );

	return CanUsePower_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_consumable_revive.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool Usfxpowercustomactionmp_consumable_revive::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 112538 ];

	Usfxpowercustomactionmp_consumable_revive_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXHintSystemMP.Objective30sHint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXHintSystemMP::Objective30sHint ( )
{
	static UFunction* pFnObjective30sHint = NULL;

	if ( ! pFnObjective30sHint )
		pFnObjective30sHint = (UFunction*) UObject::GObjObjects()->Data[ 111260 ];

	USFXHintSystemMP_execObjective30sHint_Parms Objective30sHint_Parms;

	this->ProcessEvent ( pFnObjective30sHint, &Objective30sHint_Parms, NULL );

	return Objective30sHint_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXHintSystemMP.ReviveSystemHint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXHintSystemMP::ReviveSystemHint ( )
{
	static UFunction* pFnReviveSystemHint = NULL;

	if ( ! pFnReviveSystemHint )
		pFnReviveSystemHint = (UFunction*) UObject::GObjObjects()->Data[ 111257 ];

	USFXHintSystemMP_execReviveSystemHint_Parms ReviveSystemHint_Parms;

	this->ProcessEvent ( pFnReviveSystemHint, &ReviveSystemHint_Parms, NULL );

	return ReviveSystemHint_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXHintSystemMP.DyingHint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXHintSystemMP::DyingHint ( )
{
	static UFunction* pFnDyingHint = NULL;

	if ( ! pFnDyingHint )
		pFnDyingHint = (UFunction*) UObject::GObjObjects()->Data[ 111253 ];

	USFXHintSystemMP_execDyingHint_Parms DyingHint_Parms;

	this->ProcessEvent ( pFnDyingHint, &DyingHint_Parms, NULL );

	return DyingHint_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXHintSystemMP.ObjectiveHint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXHintSystemMP::ObjectiveHint ( )
{
	static UFunction* pFnObjectiveHint = NULL;

	if ( ! pFnObjectiveHint )
		pFnObjectiveHint = (UFunction*) UObject::GObjObjects()->Data[ 111248 ];

	USFXHintSystemMP_execObjectiveHint_Parms ObjectiveHint_Parms;

	this->ProcessEvent ( pFnObjectiveHint, &ObjectiveHint_Parms, NULL );

	return ObjectiveHint_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXHintSystemMP.SwapWeapons
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXHintSystemMP::SwapWeapons ( )
{
	static UFunction* pFnSwapWeapons = NULL;

	if ( ! pFnSwapWeapons )
		pFnSwapWeapons = (UFunction*) UObject::GObjObjects()->Data[ 111246 ];

	USFXHintSystemMP_execSwapWeapons_Parms SwapWeapons_Parms;

	this->ProcessEvent ( pFnSwapWeapons, &SwapWeapons_Parms, NULL );

	return SwapWeapons_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXHintSystemMP.ReviveOtherHint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXHintSystemMP::ReviveOtherHint ( )
{
	static UFunction* pFnReviveOtherHint = NULL;

	if ( ! pFnReviveOtherHint )
		pFnReviveOtherHint = (UFunction*) UObject::GObjObjects()->Data[ 111244 ];

	USFXHintSystemMP_execReviveOtherHint_Parms ReviveOtherHint_Parms;

	this->ProcessEvent ( pFnReviveOtherHint, &ReviveOtherHint_Parms, NULL );

	return ReviveOtherHint_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXHintSystemMP.UseObjectiveHint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXHintSystemMP::UseObjectiveHint ( )
{
	static UFunction* pFnUseObjectiveHint = NULL;

	if ( ! pFnUseObjectiveHint )
		pFnUseObjectiveHint = (UFunction*) UObject::GObjObjects()->Data[ 111242 ];

	USFXHintSystemMP_execUseObjectiveHint_Parms UseObjectiveHint_Parms;

	this->ProcessEvent ( pFnUseObjectiveHint, &UseObjectiveHint_Parms, NULL );

	return UseObjectiveHint_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXHintSystemMP.UseAmmoHint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXHintSystemMP::UseAmmoHint ( )
{
	static UFunction* pFnUseAmmoHint = NULL;

	if ( ! pFnUseAmmoHint )
		pFnUseAmmoHint = (UFunction*) UObject::GObjObjects()->Data[ 111240 ];

	USFXHintSystemMP_execUseAmmoHint_Parms UseAmmoHint_Parms;

	this->ProcessEvent ( pFnUseAmmoHint, &UseAmmoHint_Parms, NULL );

	return UseAmmoHint_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXHintSystemMP.UseReviveHint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXHintSystemMP::UseReviveHint ( )
{
	static UFunction* pFnUseReviveHint = NULL;

	if ( ! pFnUseReviveHint )
		pFnUseReviveHint = (UFunction*) UObject::GObjObjects()->Data[ 111238 ];

	USFXHintSystemMP_execUseReviveHint_Parms UseReviveHint_Parms;

	this->ProcessEvent ( pFnUseReviveHint, &UseReviveHint_Parms, NULL );

	return UseReviveHint_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXHintSystemMP.CacheCurrentState
// [0x00020002] 
// Parameters infos:

void USFXHintSystemMP::CacheCurrentState ( )
{
	static UFunction* pFnCacheCurrentState = NULL;

	if ( ! pFnCacheCurrentState )
		pFnCacheCurrentState = (UFunction*) UObject::GObjObjects()->Data[ 111215 ];

	USFXHintSystemMP_execCacheCurrentState_Parms CacheCurrentState_Parms;

	this->ProcessEvent ( pFnCacheCurrentState, &CacheCurrentState_Parms, NULL );
};

// Function sfxgamempcontent.SFXHintSystemMP.AddNotification_SupplyDrop
// [0x00020002] 
// Parameters infos:
// struct FCardInfoData           CardData                       ( CPF_Parm | CPF_NeedCtorLink )

void USFXHintSystemMP::AddNotification_SupplyDrop ( struct FCardInfoData CardData )
{
	static UFunction* pFnAddNotification_SupplyDrop = NULL;

	if ( ! pFnAddNotification_SupplyDrop )
		pFnAddNotification_SupplyDrop = (UFunction*) UObject::GObjObjects()->Data[ 111211 ];

	USFXHintSystemMP_execAddNotification_SupplyDrop_Parms AddNotification_SupplyDrop_Parms;
	memcpy ( &AddNotification_SupplyDrop_Parms.CardData, &CardData, 0x68 );

	this->ProcessEvent ( pFnAddNotification_SupplyDrop, &AddNotification_SupplyDrop_Parms, NULL );
};

// Function Engine.LocalMessage.PartiallyDuplicates
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch1                        ( CPF_Parm )
// int                            Switch2                        ( CPF_Parm )
// class UObject*                 OptionalObject1                ( CPF_Parm )
// class UObject*                 OptionalObject2                ( CPF_Parm )

bool USFXMessageMP::PartiallyDuplicates ( int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2 )
{
	static UFunction* pFnPartiallyDuplicates = NULL;

	if ( ! pFnPartiallyDuplicates )
		pFnPartiallyDuplicates = (UFunction*) UObject::GObjObjects()->Data[ 14611 ];

	USFXMessageMP_execPartiallyDuplicates_Parms PartiallyDuplicates_Parms;
	PartiallyDuplicates_Parms.Switch1 = Switch1;
	PartiallyDuplicates_Parms.Switch2 = Switch2;
	PartiallyDuplicates_Parms.OptionalObject1 = OptionalObject1;
	PartiallyDuplicates_Parms.OptionalObject2 = OptionalObject2;

	this->ProcessEvent ( pFnPartiallyDuplicates, &PartiallyDuplicates_Parms, NULL );

	return PartiallyDuplicates_Parms.ReturnValue;
};

// Function Engine.LocalMessage.IsKeyObjectiveMessage
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

bool USFXMessageMP::IsKeyObjectiveMessage ( int Switch )
{
	static UFunction* pFnIsKeyObjectiveMessage = NULL;

	if ( ! pFnIsKeyObjectiveMessage )
		pFnIsKeyObjectiveMessage = (UFunction*) UObject::GObjObjects()->Data[ 16321 ];

	USFXMessageMP_execIsKeyObjectiveMessage_Parms IsKeyObjectiveMessage_Parms;
	IsKeyObjectiveMessage_Parms.Switch = Switch;

	this->ProcessEvent ( pFnIsKeyObjectiveMessage, &IsKeyObjectiveMessage_Parms, NULL );

	return IsKeyObjectiveMessage_Parms.ReturnValue;
};

// Function Engine.LocalMessage.IsConsoleMessage
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

bool USFXMessageMP::IsConsoleMessage ( int Switch )
{
	static UFunction* pFnIsConsoleMessage = NULL;

	if ( ! pFnIsConsoleMessage )
		pFnIsConsoleMessage = (UFunction*) UObject::GObjObjects()->Data[ 16317 ];

	USFXMessageMP_execIsConsoleMessage_Parms IsConsoleMessage_Parms;
	IsConsoleMessage_Parms.Switch = Switch;

	this->ProcessEvent ( pFnIsConsoleMessage, &IsConsoleMessage_Parms, NULL );

	return IsConsoleMessage_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetLifeTime
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

float USFXMessageMP::GetLifeTime ( int Switch )
{
	static UFunction* pFnGetLifeTime = NULL;

	if ( ! pFnGetLifeTime )
		pFnGetLifeTime = (UFunction*) UObject::GObjObjects()->Data[ 16314 ];

	USFXMessageMP_execGetLifeTime_Parms GetLifeTime_Parms;
	GetLifeTime_Parms.Switch = Switch;

	this->ProcessEvent ( pFnGetLifeTime, &GetLifeTime_Parms, NULL );

	return GetLifeTime_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetFontSize
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI1                    ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI2                    ( CPF_Parm )
// class APlayerReplicationInfo*  LocalPlayer                    ( CPF_Parm )

int USFXMessageMP::GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer )
{
	static UFunction* pFnGetFontSize = NULL;

	if ( ! pFnGetFontSize )
		pFnGetFontSize = (UFunction*) UObject::GObjObjects()->Data[ 16307 ];

	USFXMessageMP_execGetFontSize_Parms GetFontSize_Parms;
	GetFontSize_Parms.Switch = Switch;
	GetFontSize_Parms.RelatedPRI1 = RelatedPRI1;
	GetFontSize_Parms.RelatedPRI2 = RelatedPRI2;
	GetFontSize_Parms.LocalPlayer = LocalPlayer;

	this->ProcessEvent ( pFnGetFontSize, &GetFontSize_Parms, NULL );

	return GetFontSize_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetPos
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )
// class AHUD*                    myHUD                          ( CPF_Parm )

float USFXMessageMP::GetPos ( int Switch, class AHUD* myHUD )
{
	static UFunction* pFnGetPos = NULL;

	if ( ! pFnGetPos )
		pFnGetPos = (UFunction*) UObject::GObjObjects()->Data[ 16302 ];

	USFXMessageMP_execGetPos_Parms GetPos_Parms;
	GetPos_Parms.Switch = Switch;
	GetPos_Parms.myHUD = myHUD;

	this->ProcessEvent ( pFnGetPos, &GetPos_Parms, NULL );

	return GetPos_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetColor
// [0x00026002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FColor USFXMessageMP::GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetColor = NULL;

	if ( ! pFnGetColor )
		pFnGetColor = (UFunction*) UObject::GObjObjects()->Data[ 16296 ];

	USFXMessageMP_execGetColor_Parms GetColor_Parms;
	GetColor_Parms.Switch = Switch;
	GetColor_Parms.RelatedPRI = RelatedPRI;
	GetColor_Parms.RelatedPRI01 = RelatedPRI01;
	GetColor_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetColor, &GetColor_Parms, NULL );

	return GetColor_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetConsoleColor
// [0x00022002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_Parm )

struct FColor USFXMessageMP::GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI )
{
	static UFunction* pFnGetConsoleColor = NULL;

	if ( ! pFnGetConsoleColor )
		pFnGetConsoleColor = (UFunction*) UObject::GObjObjects()->Data[ 14591 ];

	USFXMessageMP_execGetConsoleColor_Parms GetConsoleColor_Parms;
	GetConsoleColor_Parms.RelatedPRI = RelatedPRI;

	this->ProcessEvent ( pFnGetConsoleColor, &GetConsoleColor_Parms, NULL );

	return GetConsoleColor_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString USFXMessageMP::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 16287 ];

	USFXMessageMP_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Engine.LocalMessage.ClientReceive
// [0x00026002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void USFXMessageMP::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = (UFunction*) UObject::GObjObjects()->Data[ 16280 ];

	USFXMessageMP_execClientReceive_Parms ClientReceive_Parms;
	ClientReceive_Parms.P = P;
	ClientReceive_Parms.Switch = Switch;
	ClientReceive_Parms.RelatedPRI = RelatedPRI;
	ClientReceive_Parms.RelatedPRI01 = RelatedPRI01;
	ClientReceive_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.DropGun
// [0x00020000] 
// Parameters infos:

void Asfxweapon_heavy_consumablerocketlauncher::DropGun ( )
{
	static UFunction* pFnDropGun = NULL;

	if ( ! pFnDropGun )
		pFnDropGun = (UFunction*) UObject::GObjObjects()->Data[ 113593 ];

	Asfxweapon_heavy_consumablerocketlauncher_execDropGun_Parms DropGun_Parms;

	this->ProcessEvent ( pFnDropGun, &DropGun_Parms, NULL );
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.InitializeWeapon
// [0x00020102] 
// Parameters infos:

void Asfxweapon_heavy_consumablerocketlauncher::InitializeWeapon ( )
{
	static UFunction* pFnInitializeWeapon = NULL;

	if ( ! pFnInitializeWeapon )
		pFnInitializeWeapon = (UFunction*) UObject::GObjObjects()->Data[ 113592 ];

	Asfxweapon_heavy_consumablerocketlauncher_execInitializeWeapon_Parms InitializeWeapon_Parms;

	this->ProcessEvent ( pFnInitializeWeapon, &InitializeWeapon_Parms, NULL );
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.PutDownWeapon
// [0x00020102] 
// Parameters infos:

void Asfxweapon_heavy_consumablerocketlauncher::PutDownWeapon ( )
{
	static UFunction* pFnPutDownWeapon = NULL;

	if ( ! pFnPutDownWeapon )
		pFnPutDownWeapon = (UFunction*) UObject::GObjObjects()->Data[ 113591 ];

	Asfxweapon_heavy_consumablerocketlauncher_execPutDownWeapon_Parms PutDownWeapon_Parms;

	this->ProcessEvent ( pFnPutDownWeapon, &PutDownWeapon_Parms, NULL );
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.ConsumeAmmo
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void Asfxweapon_heavy_consumablerocketlauncher::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 113589 ];

	Asfxweapon_heavy_consumablerocketlauncher_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.ShutOffAllEmitters
// [0x00020102] 
// Parameters infos:

void Asfxweapon_heavy_consumablerocketlauncher::ShutOffAllEmitters ( )
{
	static UFunction* pFnShutOffAllEmitters = NULL;

	if ( ! pFnShutOffAllEmitters )
		pFnShutOffAllEmitters = (UFunction*) UObject::GObjObjects()->Data[ 113587 ];

	Asfxweapon_heavy_consumablerocketlauncher_execShutOffAllEmitters_Parms ShutOffAllEmitters_Parms;

	this->ProcessEvent ( pFnShutOffAllEmitters, &ShutOffAllEmitters_Parms, NULL );
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.FireAmmunition
// [0x00820102] 
// Parameters infos:

void Asfxweapon_heavy_consumablerocketlauncher::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 113583 ];

	Asfxweapon_heavy_consumablerocketlauncher_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.StopChargeEffects
// [0x00020102] 
// Parameters infos:

void Asfxweapon_heavy_consumablerocketlauncher::StopChargeEffects ( )
{
	static UFunction* pFnStopChargeEffects = NULL;

	if ( ! pFnStopChargeEffects )
		pFnStopChargeEffects = (UFunction*) UObject::GObjObjects()->Data[ 113581 ];

	Asfxweapon_heavy_consumablerocketlauncher_execStopChargeEffects_Parms StopChargeEffects_Parms;

	this->ProcessEvent ( pFnStopChargeEffects, &StopChargeEffects_Parms, NULL );
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.StartChargeEffects
// [0x00820102] 
// Parameters infos:

void Asfxweapon_heavy_consumablerocketlauncher::StartChargeEffects ( )
{
	static UFunction* pFnStartChargeEffects = NULL;

	if ( ! pFnStartChargeEffects )
		pFnStartChargeEffects = (UFunction*) UObject::GObjObjects()->Data[ 113574 ];

	Asfxweapon_heavy_consumablerocketlauncher_execStartChargeEffects_Parms StartChargeEffects_Parms;

	this->ProcessEvent ( pFnStartChargeEffects, &StartChargeEffects_Parms, NULL );
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.ServerCurrentWeapon
// [0x002200C2] 
// Parameters infos:
// class AWeapon*                 ClientCurrentWeapon            ( CPF_Parm )

void Asfxweapon_heavy_consumablerocketlauncher::ServerCurrentWeapon ( class AWeapon* ClientCurrentWeapon )
{
	static UFunction* pFnServerCurrentWeapon = NULL;

	if ( ! pFnServerCurrentWeapon )
		pFnServerCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 113577 ];

	Asfxweapon_heavy_consumablerocketlauncher_execServerCurrentWeapon_Parms ServerCurrentWeapon_Parms;
	ServerCurrentWeapon_Parms.ClientCurrentWeapon = ClientCurrentWeapon;

	this->ProcessEvent ( pFnServerCurrentWeapon, &ServerCurrentWeapon_Parms, NULL );
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.ClientRocketFired
// [0x010201C2] 
// Parameters infos:

void Asfxweapon_heavy_consumablerocketlauncher::ClientRocketFired ( )
{
	static UFunction* pFnClientRocketFired = NULL;

	if ( ! pFnClientRocketFired )
		pFnClientRocketFired = (UFunction*) UObject::GObjObjects()->Data[ 113594 ];

	Asfxweapon_heavy_consumablerocketlauncher_execClientRocketFired_Parms ClientRocketFired_Parms;

	this->ProcessEvent ( pFnClientRocketFired, &ClientRocketFired_Parms, NULL );
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.ServerPlayNoAmmoEffects
// [0x00220042] 
// Parameters infos:

void Asfxweapon_heavy_consumablerocketlauncher::ServerPlayNoAmmoEffects ( )
{
	static UFunction* pFnServerPlayNoAmmoEffects = NULL;

	if ( ! pFnServerPlayNoAmmoEffects )
		pFnServerPlayNoAmmoEffects = (UFunction*) UObject::GObjObjects()->Data[ 113573 ];

	Asfxweapon_heavy_consumablerocketlauncher_execServerPlayNoAmmoEffects_Parms ServerPlayNoAmmoEffects_Parms;

	this->ProcessEvent ( pFnServerPlayNoAmmoEffects, &ServerPlayNoAmmoEffects_Parms, NULL );
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void Asfxweapon_heavy_consumablerocketlauncher::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 113571 ];

	Asfxweapon_heavy_consumablerocketlauncher_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool Asfxweapon_heavy_consumablerocketlauncher::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 113567 ];

	Asfxweapon_heavy_consumablerocketlauncher_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxweapon_heavy_consumablerocketlauncher.GetAmmoCountInMagazine
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Asfxweapon_heavy_consumablerocketlauncher::GetAmmoCountInMagazine ( )
{
	static UFunction* pFnGetAmmoCountInMagazine = NULL;

	if ( ! pFnGetAmmoCountInMagazine )
		pFnGetAmmoCountInMagazine = (UFunction*) UObject::GObjObjects()->Data[ 113564 ];

	Asfxweapon_heavy_consumablerocketlauncher_execGetAmmoCountInMagazine_Parms GetAmmoCountInMagazine_Parms;

	this->ProcessEvent ( pFnGetAmmoCountInMagazine, &GetAmmoCountInMagazine_Parms, NULL );

	return GetAmmoCountInMagazine_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXProjectile_ConsumableRocket.ProjectileHurtRadius
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          InDamageAmount                 ( CPF_Parm )
// float                          InDamageRadius                 ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool ASFXProjectile_ConsumableRocket::ProjectileHurtRadius ( float InDamageAmount, float InDamageRadius, float Momentum, struct FVector HurtOrigin, struct FVector HitNormal )
{
	static UFunction* pFnProjectileHurtRadius = NULL;

	if ( ! pFnProjectileHurtRadius )
		pFnProjectileHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 113009 ];

	ASFXProjectile_ConsumableRocket_execProjectileHurtRadius_Parms ProjectileHurtRadius_Parms;
	ProjectileHurtRadius_Parms.InDamageAmount = InDamageAmount;
	ProjectileHurtRadius_Parms.InDamageRadius = InDamageRadius;
	ProjectileHurtRadius_Parms.Momentum = Momentum;
	memcpy ( &ProjectileHurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	memcpy ( &ProjectileHurtRadius_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProjectileHurtRadius, &ProjectileHurtRadius_Parms, NULL );

	return ProjectileHurtRadius_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXProjectile_ConsumableRocket.GetFarDamage
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXProjectile_ConsumableRocket::GetFarDamage ( )
{
	static UFunction* pFnGetFarDamage = NULL;

	if ( ! pFnGetFarDamage )
		pFnGetFarDamage = (UFunction*) UObject::GObjObjects()->Data[ 112998 ];

	ASFXProjectile_ConsumableRocket_execGetFarDamage_Parms GetFarDamage_Parms;

	this->ProcessEvent ( pFnGetFarDamage, &GetFarDamage_Parms, NULL );

	return GetFarDamage_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXProjectile_ConsumableRocket.GetCappedDamageRadius
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXProjectile_ConsumableRocket::GetCappedDamageRadius ( )
{
	static UFunction* pFnGetCappedDamageRadius = NULL;

	if ( ! pFnGetCappedDamageRadius )
		pFnGetCappedDamageRadius = (UFunction*) UObject::GObjObjects()->Data[ 112997 ];

	ASFXProjectile_ConsumableRocket_execGetCappedDamageRadius_Parms GetCappedDamageRadius_Parms;

	this->ProcessEvent ( pFnGetCappedDamageRadius, &GetCappedDamageRadius_Parms, NULL );

	return GetCappedDamageRadius_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXProjectile_ConsumableRocket.GetDamageRadius
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXProjectile_ConsumableRocket::GetDamageRadius ( )
{
	static UFunction* pFnGetDamageRadius = NULL;

	if ( ! pFnGetDamageRadius )
		pFnGetDamageRadius = (UFunction*) UObject::GObjObjects()->Data[ 112999 ];

	ASFXProjectile_ConsumableRocket_execGetDamageRadius_Parms GetDamageRadius_Parms;

	this->ProcessEvent ( pFnGetDamageRadius, &GetDamageRadius_Parms, NULL );

	return GetDamageRadius_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXProjectile_ConsumableRocket.DoImpact
// [0x00420002] 
// Parameters infos:
// class AActor*                  InImpactedActor                ( CPF_Parm )
// class AController*             InInstigatorController         ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          InDamageRadius                 ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )

void ASFXProjectile_ConsumableRocket::DoImpact ( class AActor* InImpactedActor, class AController* InInstigatorController, float BaseDamage, float InDamageRadius, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnDoImpact = NULL;

	if ( ! pFnDoImpact )
		pFnDoImpact = (UFunction*) UObject::GObjObjects()->Data[ 112982 ];

	ASFXProjectile_ConsumableRocket_execDoImpact_Parms DoImpact_Parms;
	DoImpact_Parms.InImpactedActor = InImpactedActor;
	DoImpact_Parms.InInstigatorController = InInstigatorController;
	DoImpact_Parms.BaseDamage = BaseDamage;
	DoImpact_Parms.InDamageRadius = InDamageRadius;
	DoImpact_Parms.Momentum = Momentum;
	memcpy ( &DoImpact_Parms.HurtOrigin, &HurtOrigin, 0xC );
	DoImpact_Parms.bFullDamage = bFullDamage;

	this->ProcessEvent ( pFnDoImpact, &DoImpact_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &DoImpact_Parms.HitInfo, 0x1C );
};

// Function sfxgamempcontent.SFXProjectile_ConsumableRocket.Explode
// [0x00820102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_ConsumableRocket::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 112971 ];

	ASFXProjectile_ConsumableRocket_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.StartAutoBots
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXWave_Horde_Cerberus::StartAutoBots ( )
{
	static UFunction* pFnStartAutoBots = NULL;

	if ( ! pFnStartAutoBots )
		pFnStartAutoBots = (UFunction*) UObject::GObjObjects()->Data[ 113152 ];

	USFXWave_Horde_Cerberus_execStartAutoBots_Parms StartAutoBots_Parms;

	this->ProcessEvent ( pFnStartAutoBots, &StartAutoBots_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.GetScoreBudget
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXWave_Horde_Cerberus::GetScoreBudget ( )
{
	static UFunction* pFnGetScoreBudget = NULL;

	if ( ! pFnGetScoreBudget )
		pFnGetScoreBudget = (UFunction*) UObject::GObjObjects()->Data[ 113316 ];

	USFXWave_Horde_Cerberus_execGetScoreBudget_Parms GetScoreBudget_Parms;

	this->ProcessEvent ( pFnGetScoreBudget, &GetScoreBudget_Parms, NULL );

	return GetScoreBudget_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.CalculateSpawnedEnemyCost
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWave_Horde_Cerberus::CalculateSpawnedEnemyCost ( )
{
	static UFunction* pFnCalculateSpawnedEnemyCost = NULL;

	if ( ! pFnCalculateSpawnedEnemyCost )
		pFnCalculateSpawnedEnemyCost = (UFunction*) UObject::GObjObjects()->Data[ 113312 ];

	USFXWave_Horde_Cerberus_execCalculateSpawnedEnemyCost_Parms CalculateSpawnedEnemyCost_Parms;

	this->ProcessEvent ( pFnCalculateSpawnedEnemyCost, &CalculateSpawnedEnemyCost_Parms, NULL );

	return CalculateSpawnedEnemyCost_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.PawnRevived
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void USFXWave_Horde_Cerberus::PawnRevived ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnRevived = NULL;

	if ( ! pFnPawnRevived )
		pFnPawnRevived = (UFunction*) UObject::GObjObjects()->Data[ 113308 ];

	USFXWave_Horde_Cerberus_execPawnRevived_Parms PawnRevived_Parms;
	PawnRevived_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnRevived, &PawnRevived_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.GetEnemySpawnInfoForEnemyType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FEnemySpawnInfo         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   EnemyType                      ( CPF_Parm )

struct FEnemySpawnInfo USFXWave_Horde_Cerberus::GetEnemySpawnInfoForEnemyType ( struct FName EnemyType )
{
	static UFunction* pFnGetEnemySpawnInfoForEnemyType = NULL;

	if ( ! pFnGetEnemySpawnInfoForEnemyType )
		pFnGetEnemySpawnInfoForEnemyType = (UFunction*) UObject::GObjObjects()->Data[ 113151 ];

	USFXWave_Horde_Cerberus_execGetEnemySpawnInfoForEnemyType_Parms GetEnemySpawnInfoForEnemyType_Parms;
	memcpy ( &GetEnemySpawnInfoForEnemyType_Parms.EnemyType, &EnemyType, 0x8 );

	this->ProcessEvent ( pFnGetEnemySpawnInfoForEnemyType, &GetEnemySpawnInfoForEnemyType_Parms, NULL );

	return GetEnemySpawnInfoForEnemyType_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.StopSpawningNewEnemies
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXWave_Horde_Cerberus::StopSpawningNewEnemies ( )
{
	static UFunction* pFnStopSpawningNewEnemies = NULL;

	if ( ! pFnStopSpawningNewEnemies )
		pFnStopSpawningNewEnemies = (UFunction*) UObject::GObjObjects()->Data[ 113304 ];

	USFXWave_Horde_Cerberus_execStopSpawningNewEnemies_Parms StopSpawningNewEnemies_Parms;

	this->ProcessEvent ( pFnStopSpawningNewEnemies, &StopSpawningNewEnemies_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.SetEndlessWaves
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  Endless                        ( CPF_Parm )

void USFXWave_Horde_Cerberus::SetEndlessWaves ( unsigned long Endless )
{
	static UFunction* pFnSetEndlessWaves = NULL;

	if ( ! pFnSetEndlessWaves )
		pFnSetEndlessWaves = (UFunction*) UObject::GObjObjects()->Data[ 108141 ];

	USFXWave_Horde_Cerberus_execSetEndlessWaves_Parms SetEndlessWaves_Parms;
	SetEndlessWaves_Parms.Endless = Endless;

	this->ProcessEvent ( pFnSetEndlessWaves, &SetEndlessWaves_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.EnemyBudgetRemaining
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Cerberus::EnemyBudgetRemaining ( )
{
	static UFunction* pFnEnemyBudgetRemaining = NULL;

	if ( ! pFnEnemyBudgetRemaining )
		pFnEnemyBudgetRemaining = (UFunction*) UObject::GObjObjects()->Data[ 113251 ];

	USFXWave_Horde_Cerberus_execEnemyBudgetRemaining_Parms EnemyBudgetRemaining_Parms;

	this->ProcessEvent ( pFnEnemyBudgetRemaining, &EnemyBudgetRemaining_Parms, NULL );

	return EnemyBudgetRemaining_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.GetCreatureWaveCost
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

int USFXWave_Horde_Cerberus::GetCreatureWaveCost ( class APawn* P )
{
	static UFunction* pFnGetCreatureWaveCost = NULL;

	if ( ! pFnGetCreatureWaveCost )
		pFnGetCreatureWaveCost = (UFunction*) UObject::GObjObjects()->Data[ 113298 ];

	USFXWave_Horde_Cerberus_execGetCreatureWaveCost_Parms GetCreatureWaveCost_Parms;
	GetCreatureWaveCost_Parms.P = P;

	this->ProcessEvent ( pFnGetCreatureWaveCost, &GetCreatureWaveCost_Parms, NULL );

	return GetCreatureWaveCost_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.TriggerWaveEndEvent
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void USFXWave_Horde_Cerberus::TriggerWaveEndEvent ( int Wave )
{
	static UFunction* pFnTriggerWaveEndEvent = NULL;

	if ( ! pFnTriggerWaveEndEvent )
		pFnTriggerWaveEndEvent = (UFunction*) UObject::GObjObjects()->Data[ 113290 ];

	USFXWave_Horde_Cerberus_execTriggerWaveEndEvent_Parms TriggerWaveEndEvent_Parms;
	TriggerWaveEndEvent_Parms.Wave = Wave;

	this->ProcessEvent ( pFnTriggerWaveEndEvent, &TriggerWaveEndEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.TriggerEnemyKilledEvent
// [0x00020002] 
// Parameters infos:
// class APawn*                   Killed                         ( CPF_Parm )
// class APawn*                   Killer                         ( CPF_Parm )

void USFXWave_Horde_Cerberus::TriggerEnemyKilledEvent ( class APawn* Killed, class APawn* Killer )
{
	static UFunction* pFnTriggerEnemyKilledEvent = NULL;

	if ( ! pFnTriggerEnemyKilledEvent )
		pFnTriggerEnemyKilledEvent = (UFunction*) UObject::GObjObjects()->Data[ 113282 ];

	USFXWave_Horde_Cerberus_execTriggerEnemyKilledEvent_Parms TriggerEnemyKilledEvent_Parms;
	TriggerEnemyKilledEvent_Parms.Killed = Killed;
	TriggerEnemyKilledEvent_Parms.Killer = Killer;

	this->ProcessEvent ( pFnTriggerEnemyKilledEvent, &TriggerEnemyKilledEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.TriggerWaveStartEvent
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void USFXWave_Horde_Cerberus::TriggerWaveStartEvent ( int Wave )
{
	static UFunction* pFnTriggerWaveStartEvent = NULL;

	if ( ! pFnTriggerWaveStartEvent )
		pFnTriggerWaveStartEvent = (UFunction*) UObject::GObjObjects()->Data[ 113274 ];

	USFXWave_Horde_Cerberus_execTriggerWaveStartEvent_Parms TriggerWaveStartEvent_Parms;
	TriggerWaveStartEvent_Parms.Wave = Wave;

	this->ProcessEvent ( pFnTriggerWaveStartEvent, &TriggerWaveStartEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.ShouldSpawnSquad
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Cerberus::ShouldSpawnSquad ( )
{
	static UFunction* pFnShouldSpawnSquad = NULL;

	if ( ! pFnShouldSpawnSquad )
		pFnShouldSpawnSquad = (UFunction*) UObject::GObjObjects()->Data[ 113253 ];

	USFXWave_Horde_Cerberus_execShouldSpawnSquad_Parms ShouldSpawnSquad_Parms;

	this->ProcessEvent ( pFnShouldSpawnSquad, &ShouldSpawnSquad_Parms, NULL );

	return ShouldSpawnSquad_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.GetPlayerCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWave_Horde_Cerberus::GetPlayerCount ( )
{
	static UFunction* pFnGetPlayerCount = NULL;

	if ( ! pFnGetPlayerCount )
		pFnGetPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 113267 ];

	USFXWave_Horde_Cerberus_execGetPlayerCount_Parms GetPlayerCount_Parms;

	this->ProcessEvent ( pFnGetPlayerCount, &GetPlayerCount_Parms, NULL );

	return GetPlayerCount_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.PawnDied
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )
// class ABioPawn*                Killer                         ( CPF_OptionalParm | CPF_Parm )

void USFXWave_Horde_Cerberus::PawnDied ( class ABioPawn* Pawn, class ABioPawn* Killer )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 113261 ];

	USFXWave_Horde_Cerberus_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.Pawn = Pawn;
	PawnDied_Parms.Killer = Killer;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.ActivateEnemyObjectiveMarkers
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde_Cerberus::ActivateEnemyObjectiveMarkers ( )
{
	static UFunction* pFnActivateEnemyObjectiveMarkers = NULL;

	if ( ! pFnActivateEnemyObjectiveMarkers )
		pFnActivateEnemyObjectiveMarkers = (UFunction*) UObject::GObjObjects()->Data[ 113258 ];

	USFXWave_Horde_Cerberus_execActivateEnemyObjectiveMarkers_Parms ActivateEnemyObjectiveMarkers_Parms;

	this->ProcessEvent ( pFnActivateEnemyObjectiveMarkers, &ActivateEnemyObjectiveMarkers_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.UpdateObjectiveStatus
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde_Cerberus::UpdateObjectiveStatus ( )
{
	static UFunction* pFnUpdateObjectiveStatus = NULL;

	if ( ! pFnUpdateObjectiveStatus )
		pFnUpdateObjectiveStatus = (UFunction*) UObject::GObjObjects()->Data[ 113254 ];

	USFXWave_Horde_Cerberus_execUpdateObjectiveStatus_Parms UpdateObjectiveStatus_Parms;

	this->ProcessEvent ( pFnUpdateObjectiveStatus, &UpdateObjectiveStatus_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.SpawnHorde
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde_Cerberus::SpawnHorde ( )
{
	static UFunction* pFnSpawnHorde = NULL;

	if ( ! pFnSpawnHorde )
		pFnSpawnHorde = (UFunction*) UObject::GObjObjects()->Data[ 113249 ];

	USFXWave_Horde_Cerberus_execSpawnHorde_Parms SpawnHorde_Parms;

	this->ProcessEvent ( pFnSpawnHorde, &SpawnHorde_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.SpawnEnemy
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void USFXWave_Horde_Cerberus::SpawnEnemy ( int Index )
{
	static UFunction* pFnSpawnEnemy = NULL;

	if ( ! pFnSpawnEnemy )
		pFnSpawnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 113242 ];

	USFXWave_Horde_Cerberus_execSpawnEnemy_Parms SpawnEnemy_Parms;
	SpawnEnemy_Parms.Index = Index;

	this->ProcessEvent ( pFnSpawnEnemy, &SpawnEnemy_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.AreRemainingEnemiesOnMyTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Cerberus::AreRemainingEnemiesOnMyTeam ( )
{
	static UFunction* pFnAreRemainingEnemiesOnMyTeam = NULL;

	if ( ! pFnAreRemainingEnemiesOnMyTeam )
		pFnAreRemainingEnemiesOnMyTeam = (UFunction*) UObject::GObjObjects()->Data[ 113239 ];

	USFXWave_Horde_Cerberus_execAreRemainingEnemiesOnMyTeam_Parms AreRemainingEnemiesOnMyTeam_Parms;

	this->ProcessEvent ( pFnAreRemainingEnemiesOnMyTeam, &AreRemainingEnemiesOnMyTeam_Parms, NULL );

	return AreRemainingEnemiesOnMyTeam_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.ChooseEnemyToSpawn
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWave_Horde_Cerberus::ChooseEnemyToSpawn ( )
{
	static UFunction* pFnChooseEnemyToSpawn = NULL;

	if ( ! pFnChooseEnemyToSpawn )
		pFnChooseEnemyToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 113228 ];

	USFXWave_Horde_Cerberus_execChooseEnemyToSpawn_Parms ChooseEnemyToSpawn_Parms;

	this->ProcessEvent ( pFnChooseEnemyToSpawn, &ChooseEnemyToSpawn_Parms, NULL );

	return ChooseEnemyToSpawn_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.ChooseSquadToSpawn
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Cerberus::ChooseSquadToSpawn ( )
{
	static UFunction* pFnChooseSquadToSpawn = NULL;

	if ( ! pFnChooseSquadToSpawn )
		pFnChooseSquadToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 113223 ];

	USFXWave_Horde_Cerberus_execChooseSquadToSpawn_Parms ChooseSquadToSpawn_Parms;

	this->ProcessEvent ( pFnChooseSquadToSpawn, &ChooseSquadToSpawn_Parms, NULL );

	return ChooseSquadToSpawn_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.CanEnemyUseSpawnPoint
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EnemyClass                     ( CPF_Parm )
// float                          EnemyRadius                    ( CPF_Parm )
// float                          EnemyHeight                    ( CPF_Parm )
// class ANavigationPoint*        NavPoint                       ( CPF_Parm )

bool USFXWave_Horde_Cerberus::CanEnemyUseSpawnPoint ( class UClass* EnemyClass, float EnemyRadius, float EnemyHeight, class ANavigationPoint* NavPoint )
{
	static UFunction* pFnCanEnemyUseSpawnPoint = NULL;

	if ( ! pFnCanEnemyUseSpawnPoint )
		pFnCanEnemyUseSpawnPoint = (UFunction*) UObject::GObjObjects()->Data[ 113203 ];

	USFXWave_Horde_Cerberus_execCanEnemyUseSpawnPoint_Parms CanEnemyUseSpawnPoint_Parms;
	CanEnemyUseSpawnPoint_Parms.EnemyClass = EnemyClass;
	CanEnemyUseSpawnPoint_Parms.EnemyRadius = EnemyRadius;
	CanEnemyUseSpawnPoint_Parms.EnemyHeight = EnemyHeight;
	CanEnemyUseSpawnPoint_Parms.NavPoint = NavPoint;

	this->ProcessEvent ( pFnCanEnemyUseSpawnPoint, &CanEnemyUseSpawnPoint_Parms, NULL );

	return CanEnemyUseSpawnPoint_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.RateEnemyStart
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        NavPoint                       ( CPF_Parm )
// float                          EnemyRadius                    ( CPF_Parm )
// float                          EnemyHeight                    ( CPF_Parm )
// class UClass*                  EnemyClass                     ( CPF_Parm )
// unsigned long                  bDoTraceCheck                  ( CPF_Parm )

float USFXWave_Horde_Cerberus::RateEnemyStart ( class ANavigationPoint* NavPoint, float EnemyRadius, float EnemyHeight, class UClass* EnemyClass, unsigned long bDoTraceCheck )
{
	static UFunction* pFnRateEnemyStart = NULL;

	if ( ! pFnRateEnemyStart )
		pFnRateEnemyStart = (UFunction*) UObject::GObjObjects()->Data[ 113186 ];

	USFXWave_Horde_Cerberus_execRateEnemyStart_Parms RateEnemyStart_Parms;
	RateEnemyStart_Parms.NavPoint = NavPoint;
	RateEnemyStart_Parms.EnemyRadius = EnemyRadius;
	RateEnemyStart_Parms.EnemyHeight = EnemyHeight;
	RateEnemyStart_Parms.EnemyClass = EnemyClass;
	RateEnemyStart_Parms.bDoTraceCheck = bDoTraceCheck;

	this->ProcessEvent ( pFnRateEnemyStart, &RateEnemyStart_Parms, NULL );

	return RateEnemyStart_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.ChooseEnemyStart
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EnemyClass                     ( CPF_Parm )

class ANavigationPoint* USFXWave_Horde_Cerberus::ChooseEnemyStart ( class UClass* EnemyClass )
{
	static UFunction* pFnChooseEnemyStart = NULL;

	if ( ! pFnChooseEnemyStart )
		pFnChooseEnemyStart = (UFunction*) UObject::GObjObjects()->Data[ 113171 ];

	USFXWave_Horde_Cerberus_execChooseEnemyStart_Parms ChooseEnemyStart_Parms;
	ChooseEnemyStart_Parms.EnemyClass = EnemyClass;

	this->ProcessEvent ( pFnChooseEnemyStart, &ChooseEnemyStart_Parms, NULL );

	return ChooseEnemyStart_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.FinishWave
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde_Cerberus::FinishWave ( )
{
	static UFunction* pFnFinishWave = NULL;

	if ( ! pFnFinishWave )
		pFnFinishWave = (UFunction*) UObject::GObjObjects()->Data[ 113168 ];

	USFXWave_Horde_Cerberus_execFinishWave_Parms FinishWave_Parms;

	this->ProcessEvent ( pFnFinishWave, &FinishWave_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.BeginWave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Cerberus::BeginWave ( )
{
	static UFunction* pFnBeginWave = NULL;

	if ( ! pFnBeginWave )
		pFnBeginWave = (UFunction*) UObject::GObjObjects()->Data[ 113159 ];

	USFXWave_Horde_Cerberus_execBeginWave_Parms BeginWave_Parms;

	this->ProcessEvent ( pFnBeginWave, &BeginWave_Parms, NULL );

	return BeginWave_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.GetEnemyArray
// [0x00420002] 
// Parameters infos:
// TArray< struct FEnemyWaveInfo > EnemyArray                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXWave_Horde_Cerberus::GetEnemyArray ( TArray< struct FEnemyWaveInfo >* EnemyArray )
{
	static UFunction* pFnGetEnemyArray = NULL;

	if ( ! pFnGetEnemyArray )
		pFnGetEnemyArray = (UFunction*) UObject::GObjObjects()->Data[ 113153 ];

	USFXWave_Horde_Cerberus_execGetEnemyArray_Parms GetEnemyArray_Parms;

	this->ProcessEvent ( pFnGetEnemyArray, &GetEnemyArray_Parms, NULL );

	if ( EnemyArray )
		memcpy ( EnemyArray, &GetEnemyArray_Parms.EnemyArray, 0xC );
};

// Function sfxgamempcontent.SFXWave_Horde.InitializeWave
// [0x00020002] 
// Parameters infos:
// class ASFXWaveManager*         OwnerManager                   ( CPF_Parm )

void USFXWave_Horde_Cerberus::InitializeWave ( class ASFXWaveManager* OwnerManager )
{
	static UFunction* pFnInitializeWave = NULL;

	if ( ! pFnInitializeWave )
		pFnInitializeWave = (UFunction*) UObject::GObjObjects()->Data[ 113141 ];

	USFXWave_Horde_Cerberus_execInitializeWave_Parms InitializeWave_Parms;
	InitializeWave_Parms.OwnerManager = OwnerManager;

	this->ProcessEvent ( pFnInitializeWave, &InitializeWave_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.StartAutoBots
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXWave_Horde_Geth::StartAutoBots ( )
{
	static UFunction* pFnStartAutoBots = NULL;

	if ( ! pFnStartAutoBots )
		pFnStartAutoBots = (UFunction*) UObject::GObjObjects()->Data[ 113152 ];

	USFXWave_Horde_Geth_execStartAutoBots_Parms StartAutoBots_Parms;

	this->ProcessEvent ( pFnStartAutoBots, &StartAutoBots_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.GetScoreBudget
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXWave_Horde_Geth::GetScoreBudget ( )
{
	static UFunction* pFnGetScoreBudget = NULL;

	if ( ! pFnGetScoreBudget )
		pFnGetScoreBudget = (UFunction*) UObject::GObjObjects()->Data[ 113316 ];

	USFXWave_Horde_Geth_execGetScoreBudget_Parms GetScoreBudget_Parms;

	this->ProcessEvent ( pFnGetScoreBudget, &GetScoreBudget_Parms, NULL );

	return GetScoreBudget_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.CalculateSpawnedEnemyCost
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWave_Horde_Geth::CalculateSpawnedEnemyCost ( )
{
	static UFunction* pFnCalculateSpawnedEnemyCost = NULL;

	if ( ! pFnCalculateSpawnedEnemyCost )
		pFnCalculateSpawnedEnemyCost = (UFunction*) UObject::GObjObjects()->Data[ 113312 ];

	USFXWave_Horde_Geth_execCalculateSpawnedEnemyCost_Parms CalculateSpawnedEnemyCost_Parms;

	this->ProcessEvent ( pFnCalculateSpawnedEnemyCost, &CalculateSpawnedEnemyCost_Parms, NULL );

	return CalculateSpawnedEnemyCost_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.PawnRevived
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void USFXWave_Horde_Geth::PawnRevived ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnRevived = NULL;

	if ( ! pFnPawnRevived )
		pFnPawnRevived = (UFunction*) UObject::GObjObjects()->Data[ 113308 ];

	USFXWave_Horde_Geth_execPawnRevived_Parms PawnRevived_Parms;
	PawnRevived_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnRevived, &PawnRevived_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.GetEnemySpawnInfoForEnemyType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FEnemySpawnInfo         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   EnemyType                      ( CPF_Parm )

struct FEnemySpawnInfo USFXWave_Horde_Geth::GetEnemySpawnInfoForEnemyType ( struct FName EnemyType )
{
	static UFunction* pFnGetEnemySpawnInfoForEnemyType = NULL;

	if ( ! pFnGetEnemySpawnInfoForEnemyType )
		pFnGetEnemySpawnInfoForEnemyType = (UFunction*) UObject::GObjObjects()->Data[ 113151 ];

	USFXWave_Horde_Geth_execGetEnemySpawnInfoForEnemyType_Parms GetEnemySpawnInfoForEnemyType_Parms;
	memcpy ( &GetEnemySpawnInfoForEnemyType_Parms.EnemyType, &EnemyType, 0x8 );

	this->ProcessEvent ( pFnGetEnemySpawnInfoForEnemyType, &GetEnemySpawnInfoForEnemyType_Parms, NULL );

	return GetEnemySpawnInfoForEnemyType_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.StopSpawningNewEnemies
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXWave_Horde_Geth::StopSpawningNewEnemies ( )
{
	static UFunction* pFnStopSpawningNewEnemies = NULL;

	if ( ! pFnStopSpawningNewEnemies )
		pFnStopSpawningNewEnemies = (UFunction*) UObject::GObjObjects()->Data[ 113304 ];

	USFXWave_Horde_Geth_execStopSpawningNewEnemies_Parms StopSpawningNewEnemies_Parms;

	this->ProcessEvent ( pFnStopSpawningNewEnemies, &StopSpawningNewEnemies_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.SetEndlessWaves
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  Endless                        ( CPF_Parm )

void USFXWave_Horde_Geth::SetEndlessWaves ( unsigned long Endless )
{
	static UFunction* pFnSetEndlessWaves = NULL;

	if ( ! pFnSetEndlessWaves )
		pFnSetEndlessWaves = (UFunction*) UObject::GObjObjects()->Data[ 108141 ];

	USFXWave_Horde_Geth_execSetEndlessWaves_Parms SetEndlessWaves_Parms;
	SetEndlessWaves_Parms.Endless = Endless;

	this->ProcessEvent ( pFnSetEndlessWaves, &SetEndlessWaves_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.EnemyBudgetRemaining
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Geth::EnemyBudgetRemaining ( )
{
	static UFunction* pFnEnemyBudgetRemaining = NULL;

	if ( ! pFnEnemyBudgetRemaining )
		pFnEnemyBudgetRemaining = (UFunction*) UObject::GObjObjects()->Data[ 113251 ];

	USFXWave_Horde_Geth_execEnemyBudgetRemaining_Parms EnemyBudgetRemaining_Parms;

	this->ProcessEvent ( pFnEnemyBudgetRemaining, &EnemyBudgetRemaining_Parms, NULL );

	return EnemyBudgetRemaining_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.GetCreatureWaveCost
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

int USFXWave_Horde_Geth::GetCreatureWaveCost ( class APawn* P )
{
	static UFunction* pFnGetCreatureWaveCost = NULL;

	if ( ! pFnGetCreatureWaveCost )
		pFnGetCreatureWaveCost = (UFunction*) UObject::GObjObjects()->Data[ 113298 ];

	USFXWave_Horde_Geth_execGetCreatureWaveCost_Parms GetCreatureWaveCost_Parms;
	GetCreatureWaveCost_Parms.P = P;

	this->ProcessEvent ( pFnGetCreatureWaveCost, &GetCreatureWaveCost_Parms, NULL );

	return GetCreatureWaveCost_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.TriggerWaveEndEvent
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void USFXWave_Horde_Geth::TriggerWaveEndEvent ( int Wave )
{
	static UFunction* pFnTriggerWaveEndEvent = NULL;

	if ( ! pFnTriggerWaveEndEvent )
		pFnTriggerWaveEndEvent = (UFunction*) UObject::GObjObjects()->Data[ 113290 ];

	USFXWave_Horde_Geth_execTriggerWaveEndEvent_Parms TriggerWaveEndEvent_Parms;
	TriggerWaveEndEvent_Parms.Wave = Wave;

	this->ProcessEvent ( pFnTriggerWaveEndEvent, &TriggerWaveEndEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.TriggerEnemyKilledEvent
// [0x00020002] 
// Parameters infos:
// class APawn*                   Killed                         ( CPF_Parm )
// class APawn*                   Killer                         ( CPF_Parm )

void USFXWave_Horde_Geth::TriggerEnemyKilledEvent ( class APawn* Killed, class APawn* Killer )
{
	static UFunction* pFnTriggerEnemyKilledEvent = NULL;

	if ( ! pFnTriggerEnemyKilledEvent )
		pFnTriggerEnemyKilledEvent = (UFunction*) UObject::GObjObjects()->Data[ 113282 ];

	USFXWave_Horde_Geth_execTriggerEnemyKilledEvent_Parms TriggerEnemyKilledEvent_Parms;
	TriggerEnemyKilledEvent_Parms.Killed = Killed;
	TriggerEnemyKilledEvent_Parms.Killer = Killer;

	this->ProcessEvent ( pFnTriggerEnemyKilledEvent, &TriggerEnemyKilledEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.TriggerWaveStartEvent
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void USFXWave_Horde_Geth::TriggerWaveStartEvent ( int Wave )
{
	static UFunction* pFnTriggerWaveStartEvent = NULL;

	if ( ! pFnTriggerWaveStartEvent )
		pFnTriggerWaveStartEvent = (UFunction*) UObject::GObjObjects()->Data[ 113274 ];

	USFXWave_Horde_Geth_execTriggerWaveStartEvent_Parms TriggerWaveStartEvent_Parms;
	TriggerWaveStartEvent_Parms.Wave = Wave;

	this->ProcessEvent ( pFnTriggerWaveStartEvent, &TriggerWaveStartEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.ShouldSpawnSquad
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Geth::ShouldSpawnSquad ( )
{
	static UFunction* pFnShouldSpawnSquad = NULL;

	if ( ! pFnShouldSpawnSquad )
		pFnShouldSpawnSquad = (UFunction*) UObject::GObjObjects()->Data[ 113253 ];

	USFXWave_Horde_Geth_execShouldSpawnSquad_Parms ShouldSpawnSquad_Parms;

	this->ProcessEvent ( pFnShouldSpawnSquad, &ShouldSpawnSquad_Parms, NULL );

	return ShouldSpawnSquad_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.GetPlayerCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWave_Horde_Geth::GetPlayerCount ( )
{
	static UFunction* pFnGetPlayerCount = NULL;

	if ( ! pFnGetPlayerCount )
		pFnGetPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 113267 ];

	USFXWave_Horde_Geth_execGetPlayerCount_Parms GetPlayerCount_Parms;

	this->ProcessEvent ( pFnGetPlayerCount, &GetPlayerCount_Parms, NULL );

	return GetPlayerCount_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.PawnDied
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )
// class ABioPawn*                Killer                         ( CPF_OptionalParm | CPF_Parm )

void USFXWave_Horde_Geth::PawnDied ( class ABioPawn* Pawn, class ABioPawn* Killer )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 113261 ];

	USFXWave_Horde_Geth_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.Pawn = Pawn;
	PawnDied_Parms.Killer = Killer;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.ActivateEnemyObjectiveMarkers
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde_Geth::ActivateEnemyObjectiveMarkers ( )
{
	static UFunction* pFnActivateEnemyObjectiveMarkers = NULL;

	if ( ! pFnActivateEnemyObjectiveMarkers )
		pFnActivateEnemyObjectiveMarkers = (UFunction*) UObject::GObjObjects()->Data[ 113258 ];

	USFXWave_Horde_Geth_execActivateEnemyObjectiveMarkers_Parms ActivateEnemyObjectiveMarkers_Parms;

	this->ProcessEvent ( pFnActivateEnemyObjectiveMarkers, &ActivateEnemyObjectiveMarkers_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.UpdateObjectiveStatus
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde_Geth::UpdateObjectiveStatus ( )
{
	static UFunction* pFnUpdateObjectiveStatus = NULL;

	if ( ! pFnUpdateObjectiveStatus )
		pFnUpdateObjectiveStatus = (UFunction*) UObject::GObjObjects()->Data[ 113254 ];

	USFXWave_Horde_Geth_execUpdateObjectiveStatus_Parms UpdateObjectiveStatus_Parms;

	this->ProcessEvent ( pFnUpdateObjectiveStatus, &UpdateObjectiveStatus_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.SpawnHorde
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde_Geth::SpawnHorde ( )
{
	static UFunction* pFnSpawnHorde = NULL;

	if ( ! pFnSpawnHorde )
		pFnSpawnHorde = (UFunction*) UObject::GObjObjects()->Data[ 113249 ];

	USFXWave_Horde_Geth_execSpawnHorde_Parms SpawnHorde_Parms;

	this->ProcessEvent ( pFnSpawnHorde, &SpawnHorde_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.SpawnEnemy
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void USFXWave_Horde_Geth::SpawnEnemy ( int Index )
{
	static UFunction* pFnSpawnEnemy = NULL;

	if ( ! pFnSpawnEnemy )
		pFnSpawnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 113242 ];

	USFXWave_Horde_Geth_execSpawnEnemy_Parms SpawnEnemy_Parms;
	SpawnEnemy_Parms.Index = Index;

	this->ProcessEvent ( pFnSpawnEnemy, &SpawnEnemy_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.AreRemainingEnemiesOnMyTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Geth::AreRemainingEnemiesOnMyTeam ( )
{
	static UFunction* pFnAreRemainingEnemiesOnMyTeam = NULL;

	if ( ! pFnAreRemainingEnemiesOnMyTeam )
		pFnAreRemainingEnemiesOnMyTeam = (UFunction*) UObject::GObjObjects()->Data[ 113239 ];

	USFXWave_Horde_Geth_execAreRemainingEnemiesOnMyTeam_Parms AreRemainingEnemiesOnMyTeam_Parms;

	this->ProcessEvent ( pFnAreRemainingEnemiesOnMyTeam, &AreRemainingEnemiesOnMyTeam_Parms, NULL );

	return AreRemainingEnemiesOnMyTeam_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.ChooseEnemyToSpawn
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWave_Horde_Geth::ChooseEnemyToSpawn ( )
{
	static UFunction* pFnChooseEnemyToSpawn = NULL;

	if ( ! pFnChooseEnemyToSpawn )
		pFnChooseEnemyToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 113228 ];

	USFXWave_Horde_Geth_execChooseEnemyToSpawn_Parms ChooseEnemyToSpawn_Parms;

	this->ProcessEvent ( pFnChooseEnemyToSpawn, &ChooseEnemyToSpawn_Parms, NULL );

	return ChooseEnemyToSpawn_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.ChooseSquadToSpawn
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Geth::ChooseSquadToSpawn ( )
{
	static UFunction* pFnChooseSquadToSpawn = NULL;

	if ( ! pFnChooseSquadToSpawn )
		pFnChooseSquadToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 113223 ];

	USFXWave_Horde_Geth_execChooseSquadToSpawn_Parms ChooseSquadToSpawn_Parms;

	this->ProcessEvent ( pFnChooseSquadToSpawn, &ChooseSquadToSpawn_Parms, NULL );

	return ChooseSquadToSpawn_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.CanEnemyUseSpawnPoint
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EnemyClass                     ( CPF_Parm )
// float                          EnemyRadius                    ( CPF_Parm )
// float                          EnemyHeight                    ( CPF_Parm )
// class ANavigationPoint*        NavPoint                       ( CPF_Parm )

bool USFXWave_Horde_Geth::CanEnemyUseSpawnPoint ( class UClass* EnemyClass, float EnemyRadius, float EnemyHeight, class ANavigationPoint* NavPoint )
{
	static UFunction* pFnCanEnemyUseSpawnPoint = NULL;

	if ( ! pFnCanEnemyUseSpawnPoint )
		pFnCanEnemyUseSpawnPoint = (UFunction*) UObject::GObjObjects()->Data[ 113203 ];

	USFXWave_Horde_Geth_execCanEnemyUseSpawnPoint_Parms CanEnemyUseSpawnPoint_Parms;
	CanEnemyUseSpawnPoint_Parms.EnemyClass = EnemyClass;
	CanEnemyUseSpawnPoint_Parms.EnemyRadius = EnemyRadius;
	CanEnemyUseSpawnPoint_Parms.EnemyHeight = EnemyHeight;
	CanEnemyUseSpawnPoint_Parms.NavPoint = NavPoint;

	this->ProcessEvent ( pFnCanEnemyUseSpawnPoint, &CanEnemyUseSpawnPoint_Parms, NULL );

	return CanEnemyUseSpawnPoint_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.RateEnemyStart
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        NavPoint                       ( CPF_Parm )
// float                          EnemyRadius                    ( CPF_Parm )
// float                          EnemyHeight                    ( CPF_Parm )
// class UClass*                  EnemyClass                     ( CPF_Parm )
// unsigned long                  bDoTraceCheck                  ( CPF_Parm )

float USFXWave_Horde_Geth::RateEnemyStart ( class ANavigationPoint* NavPoint, float EnemyRadius, float EnemyHeight, class UClass* EnemyClass, unsigned long bDoTraceCheck )
{
	static UFunction* pFnRateEnemyStart = NULL;

	if ( ! pFnRateEnemyStart )
		pFnRateEnemyStart = (UFunction*) UObject::GObjObjects()->Data[ 113186 ];

	USFXWave_Horde_Geth_execRateEnemyStart_Parms RateEnemyStart_Parms;
	RateEnemyStart_Parms.NavPoint = NavPoint;
	RateEnemyStart_Parms.EnemyRadius = EnemyRadius;
	RateEnemyStart_Parms.EnemyHeight = EnemyHeight;
	RateEnemyStart_Parms.EnemyClass = EnemyClass;
	RateEnemyStart_Parms.bDoTraceCheck = bDoTraceCheck;

	this->ProcessEvent ( pFnRateEnemyStart, &RateEnemyStart_Parms, NULL );

	return RateEnemyStart_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.ChooseEnemyStart
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EnemyClass                     ( CPF_Parm )

class ANavigationPoint* USFXWave_Horde_Geth::ChooseEnemyStart ( class UClass* EnemyClass )
{
	static UFunction* pFnChooseEnemyStart = NULL;

	if ( ! pFnChooseEnemyStart )
		pFnChooseEnemyStart = (UFunction*) UObject::GObjObjects()->Data[ 113171 ];

	USFXWave_Horde_Geth_execChooseEnemyStart_Parms ChooseEnemyStart_Parms;
	ChooseEnemyStart_Parms.EnemyClass = EnemyClass;

	this->ProcessEvent ( pFnChooseEnemyStart, &ChooseEnemyStart_Parms, NULL );

	return ChooseEnemyStart_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.FinishWave
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde_Geth::FinishWave ( )
{
	static UFunction* pFnFinishWave = NULL;

	if ( ! pFnFinishWave )
		pFnFinishWave = (UFunction*) UObject::GObjObjects()->Data[ 113168 ];

	USFXWave_Horde_Geth_execFinishWave_Parms FinishWave_Parms;

	this->ProcessEvent ( pFnFinishWave, &FinishWave_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.BeginWave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Geth::BeginWave ( )
{
	static UFunction* pFnBeginWave = NULL;

	if ( ! pFnBeginWave )
		pFnBeginWave = (UFunction*) UObject::GObjObjects()->Data[ 113159 ];

	USFXWave_Horde_Geth_execBeginWave_Parms BeginWave_Parms;

	this->ProcessEvent ( pFnBeginWave, &BeginWave_Parms, NULL );

	return BeginWave_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.GetEnemyArray
// [0x00420002] 
// Parameters infos:
// TArray< struct FEnemyWaveInfo > EnemyArray                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXWave_Horde_Geth::GetEnemyArray ( TArray< struct FEnemyWaveInfo >* EnemyArray )
{
	static UFunction* pFnGetEnemyArray = NULL;

	if ( ! pFnGetEnemyArray )
		pFnGetEnemyArray = (UFunction*) UObject::GObjObjects()->Data[ 113153 ];

	USFXWave_Horde_Geth_execGetEnemyArray_Parms GetEnemyArray_Parms;

	this->ProcessEvent ( pFnGetEnemyArray, &GetEnemyArray_Parms, NULL );

	if ( EnemyArray )
		memcpy ( EnemyArray, &GetEnemyArray_Parms.EnemyArray, 0xC );
};

// Function sfxgamempcontent.SFXWave_Horde.InitializeWave
// [0x00020002] 
// Parameters infos:
// class ASFXWaveManager*         OwnerManager                   ( CPF_Parm )

void USFXWave_Horde_Geth::InitializeWave ( class ASFXWaveManager* OwnerManager )
{
	static UFunction* pFnInitializeWave = NULL;

	if ( ! pFnInitializeWave )
		pFnInitializeWave = (UFunction*) UObject::GObjObjects()->Data[ 113141 ];

	USFXWave_Horde_Geth_execInitializeWave_Parms InitializeWave_Parms;
	InitializeWave_Parms.OwnerManager = OwnerManager;

	this->ProcessEvent ( pFnInitializeWave, &InitializeWave_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.StartAutoBots
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXWave_Horde_Reaper::StartAutoBots ( )
{
	static UFunction* pFnStartAutoBots = NULL;

	if ( ! pFnStartAutoBots )
		pFnStartAutoBots = (UFunction*) UObject::GObjObjects()->Data[ 113152 ];

	USFXWave_Horde_Reaper_execStartAutoBots_Parms StartAutoBots_Parms;

	this->ProcessEvent ( pFnStartAutoBots, &StartAutoBots_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.GetScoreBudget
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXWave_Horde_Reaper::GetScoreBudget ( )
{
	static UFunction* pFnGetScoreBudget = NULL;

	if ( ! pFnGetScoreBudget )
		pFnGetScoreBudget = (UFunction*) UObject::GObjObjects()->Data[ 113316 ];

	USFXWave_Horde_Reaper_execGetScoreBudget_Parms GetScoreBudget_Parms;

	this->ProcessEvent ( pFnGetScoreBudget, &GetScoreBudget_Parms, NULL );

	return GetScoreBudget_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.CalculateSpawnedEnemyCost
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWave_Horde_Reaper::CalculateSpawnedEnemyCost ( )
{
	static UFunction* pFnCalculateSpawnedEnemyCost = NULL;

	if ( ! pFnCalculateSpawnedEnemyCost )
		pFnCalculateSpawnedEnemyCost = (UFunction*) UObject::GObjObjects()->Data[ 113312 ];

	USFXWave_Horde_Reaper_execCalculateSpawnedEnemyCost_Parms CalculateSpawnedEnemyCost_Parms;

	this->ProcessEvent ( pFnCalculateSpawnedEnemyCost, &CalculateSpawnedEnemyCost_Parms, NULL );

	return CalculateSpawnedEnemyCost_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.PawnRevived
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void USFXWave_Horde_Reaper::PawnRevived ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnRevived = NULL;

	if ( ! pFnPawnRevived )
		pFnPawnRevived = (UFunction*) UObject::GObjObjects()->Data[ 113308 ];

	USFXWave_Horde_Reaper_execPawnRevived_Parms PawnRevived_Parms;
	PawnRevived_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnRevived, &PawnRevived_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.GetEnemySpawnInfoForEnemyType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FEnemySpawnInfo         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   EnemyType                      ( CPF_Parm )

struct FEnemySpawnInfo USFXWave_Horde_Reaper::GetEnemySpawnInfoForEnemyType ( struct FName EnemyType )
{
	static UFunction* pFnGetEnemySpawnInfoForEnemyType = NULL;

	if ( ! pFnGetEnemySpawnInfoForEnemyType )
		pFnGetEnemySpawnInfoForEnemyType = (UFunction*) UObject::GObjObjects()->Data[ 113151 ];

	USFXWave_Horde_Reaper_execGetEnemySpawnInfoForEnemyType_Parms GetEnemySpawnInfoForEnemyType_Parms;
	memcpy ( &GetEnemySpawnInfoForEnemyType_Parms.EnemyType, &EnemyType, 0x8 );

	this->ProcessEvent ( pFnGetEnemySpawnInfoForEnemyType, &GetEnemySpawnInfoForEnemyType_Parms, NULL );

	return GetEnemySpawnInfoForEnemyType_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.StopSpawningNewEnemies
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXWave_Horde_Reaper::StopSpawningNewEnemies ( )
{
	static UFunction* pFnStopSpawningNewEnemies = NULL;

	if ( ! pFnStopSpawningNewEnemies )
		pFnStopSpawningNewEnemies = (UFunction*) UObject::GObjObjects()->Data[ 113304 ];

	USFXWave_Horde_Reaper_execStopSpawningNewEnemies_Parms StopSpawningNewEnemies_Parms;

	this->ProcessEvent ( pFnStopSpawningNewEnemies, &StopSpawningNewEnemies_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.SetEndlessWaves
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  Endless                        ( CPF_Parm )

void USFXWave_Horde_Reaper::SetEndlessWaves ( unsigned long Endless )
{
	static UFunction* pFnSetEndlessWaves = NULL;

	if ( ! pFnSetEndlessWaves )
		pFnSetEndlessWaves = (UFunction*) UObject::GObjObjects()->Data[ 108141 ];

	USFXWave_Horde_Reaper_execSetEndlessWaves_Parms SetEndlessWaves_Parms;
	SetEndlessWaves_Parms.Endless = Endless;

	this->ProcessEvent ( pFnSetEndlessWaves, &SetEndlessWaves_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.EnemyBudgetRemaining
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Reaper::EnemyBudgetRemaining ( )
{
	static UFunction* pFnEnemyBudgetRemaining = NULL;

	if ( ! pFnEnemyBudgetRemaining )
		pFnEnemyBudgetRemaining = (UFunction*) UObject::GObjObjects()->Data[ 113251 ];

	USFXWave_Horde_Reaper_execEnemyBudgetRemaining_Parms EnemyBudgetRemaining_Parms;

	this->ProcessEvent ( pFnEnemyBudgetRemaining, &EnemyBudgetRemaining_Parms, NULL );

	return EnemyBudgetRemaining_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.GetCreatureWaveCost
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

int USFXWave_Horde_Reaper::GetCreatureWaveCost ( class APawn* P )
{
	static UFunction* pFnGetCreatureWaveCost = NULL;

	if ( ! pFnGetCreatureWaveCost )
		pFnGetCreatureWaveCost = (UFunction*) UObject::GObjObjects()->Data[ 113298 ];

	USFXWave_Horde_Reaper_execGetCreatureWaveCost_Parms GetCreatureWaveCost_Parms;
	GetCreatureWaveCost_Parms.P = P;

	this->ProcessEvent ( pFnGetCreatureWaveCost, &GetCreatureWaveCost_Parms, NULL );

	return GetCreatureWaveCost_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.TriggerWaveEndEvent
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void USFXWave_Horde_Reaper::TriggerWaveEndEvent ( int Wave )
{
	static UFunction* pFnTriggerWaveEndEvent = NULL;

	if ( ! pFnTriggerWaveEndEvent )
		pFnTriggerWaveEndEvent = (UFunction*) UObject::GObjObjects()->Data[ 113290 ];

	USFXWave_Horde_Reaper_execTriggerWaveEndEvent_Parms TriggerWaveEndEvent_Parms;
	TriggerWaveEndEvent_Parms.Wave = Wave;

	this->ProcessEvent ( pFnTriggerWaveEndEvent, &TriggerWaveEndEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.TriggerEnemyKilledEvent
// [0x00020002] 
// Parameters infos:
// class APawn*                   Killed                         ( CPF_Parm )
// class APawn*                   Killer                         ( CPF_Parm )

void USFXWave_Horde_Reaper::TriggerEnemyKilledEvent ( class APawn* Killed, class APawn* Killer )
{
	static UFunction* pFnTriggerEnemyKilledEvent = NULL;

	if ( ! pFnTriggerEnemyKilledEvent )
		pFnTriggerEnemyKilledEvent = (UFunction*) UObject::GObjObjects()->Data[ 113282 ];

	USFXWave_Horde_Reaper_execTriggerEnemyKilledEvent_Parms TriggerEnemyKilledEvent_Parms;
	TriggerEnemyKilledEvent_Parms.Killed = Killed;
	TriggerEnemyKilledEvent_Parms.Killer = Killer;

	this->ProcessEvent ( pFnTriggerEnemyKilledEvent, &TriggerEnemyKilledEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.TriggerWaveStartEvent
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void USFXWave_Horde_Reaper::TriggerWaveStartEvent ( int Wave )
{
	static UFunction* pFnTriggerWaveStartEvent = NULL;

	if ( ! pFnTriggerWaveStartEvent )
		pFnTriggerWaveStartEvent = (UFunction*) UObject::GObjObjects()->Data[ 113274 ];

	USFXWave_Horde_Reaper_execTriggerWaveStartEvent_Parms TriggerWaveStartEvent_Parms;
	TriggerWaveStartEvent_Parms.Wave = Wave;

	this->ProcessEvent ( pFnTriggerWaveStartEvent, &TriggerWaveStartEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.ShouldSpawnSquad
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Reaper::ShouldSpawnSquad ( )
{
	static UFunction* pFnShouldSpawnSquad = NULL;

	if ( ! pFnShouldSpawnSquad )
		pFnShouldSpawnSquad = (UFunction*) UObject::GObjObjects()->Data[ 113253 ];

	USFXWave_Horde_Reaper_execShouldSpawnSquad_Parms ShouldSpawnSquad_Parms;

	this->ProcessEvent ( pFnShouldSpawnSquad, &ShouldSpawnSquad_Parms, NULL );

	return ShouldSpawnSquad_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.GetPlayerCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWave_Horde_Reaper::GetPlayerCount ( )
{
	static UFunction* pFnGetPlayerCount = NULL;

	if ( ! pFnGetPlayerCount )
		pFnGetPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 113267 ];

	USFXWave_Horde_Reaper_execGetPlayerCount_Parms GetPlayerCount_Parms;

	this->ProcessEvent ( pFnGetPlayerCount, &GetPlayerCount_Parms, NULL );

	return GetPlayerCount_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.PawnDied
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )
// class ABioPawn*                Killer                         ( CPF_OptionalParm | CPF_Parm )

void USFXWave_Horde_Reaper::PawnDied ( class ABioPawn* Pawn, class ABioPawn* Killer )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 113261 ];

	USFXWave_Horde_Reaper_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.Pawn = Pawn;
	PawnDied_Parms.Killer = Killer;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.ActivateEnemyObjectiveMarkers
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde_Reaper::ActivateEnemyObjectiveMarkers ( )
{
	static UFunction* pFnActivateEnemyObjectiveMarkers = NULL;

	if ( ! pFnActivateEnemyObjectiveMarkers )
		pFnActivateEnemyObjectiveMarkers = (UFunction*) UObject::GObjObjects()->Data[ 113258 ];

	USFXWave_Horde_Reaper_execActivateEnemyObjectiveMarkers_Parms ActivateEnemyObjectiveMarkers_Parms;

	this->ProcessEvent ( pFnActivateEnemyObjectiveMarkers, &ActivateEnemyObjectiveMarkers_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.UpdateObjectiveStatus
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde_Reaper::UpdateObjectiveStatus ( )
{
	static UFunction* pFnUpdateObjectiveStatus = NULL;

	if ( ! pFnUpdateObjectiveStatus )
		pFnUpdateObjectiveStatus = (UFunction*) UObject::GObjObjects()->Data[ 113254 ];

	USFXWave_Horde_Reaper_execUpdateObjectiveStatus_Parms UpdateObjectiveStatus_Parms;

	this->ProcessEvent ( pFnUpdateObjectiveStatus, &UpdateObjectiveStatus_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.SpawnHorde
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde_Reaper::SpawnHorde ( )
{
	static UFunction* pFnSpawnHorde = NULL;

	if ( ! pFnSpawnHorde )
		pFnSpawnHorde = (UFunction*) UObject::GObjObjects()->Data[ 113249 ];

	USFXWave_Horde_Reaper_execSpawnHorde_Parms SpawnHorde_Parms;

	this->ProcessEvent ( pFnSpawnHorde, &SpawnHorde_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.SpawnEnemy
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void USFXWave_Horde_Reaper::SpawnEnemy ( int Index )
{
	static UFunction* pFnSpawnEnemy = NULL;

	if ( ! pFnSpawnEnemy )
		pFnSpawnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 113242 ];

	USFXWave_Horde_Reaper_execSpawnEnemy_Parms SpawnEnemy_Parms;
	SpawnEnemy_Parms.Index = Index;

	this->ProcessEvent ( pFnSpawnEnemy, &SpawnEnemy_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.AreRemainingEnemiesOnMyTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Reaper::AreRemainingEnemiesOnMyTeam ( )
{
	static UFunction* pFnAreRemainingEnemiesOnMyTeam = NULL;

	if ( ! pFnAreRemainingEnemiesOnMyTeam )
		pFnAreRemainingEnemiesOnMyTeam = (UFunction*) UObject::GObjObjects()->Data[ 113239 ];

	USFXWave_Horde_Reaper_execAreRemainingEnemiesOnMyTeam_Parms AreRemainingEnemiesOnMyTeam_Parms;

	this->ProcessEvent ( pFnAreRemainingEnemiesOnMyTeam, &AreRemainingEnemiesOnMyTeam_Parms, NULL );

	return AreRemainingEnemiesOnMyTeam_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.ChooseEnemyToSpawn
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWave_Horde_Reaper::ChooseEnemyToSpawn ( )
{
	static UFunction* pFnChooseEnemyToSpawn = NULL;

	if ( ! pFnChooseEnemyToSpawn )
		pFnChooseEnemyToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 113228 ];

	USFXWave_Horde_Reaper_execChooseEnemyToSpawn_Parms ChooseEnemyToSpawn_Parms;

	this->ProcessEvent ( pFnChooseEnemyToSpawn, &ChooseEnemyToSpawn_Parms, NULL );

	return ChooseEnemyToSpawn_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.ChooseSquadToSpawn
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Reaper::ChooseSquadToSpawn ( )
{
	static UFunction* pFnChooseSquadToSpawn = NULL;

	if ( ! pFnChooseSquadToSpawn )
		pFnChooseSquadToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 113223 ];

	USFXWave_Horde_Reaper_execChooseSquadToSpawn_Parms ChooseSquadToSpawn_Parms;

	this->ProcessEvent ( pFnChooseSquadToSpawn, &ChooseSquadToSpawn_Parms, NULL );

	return ChooseSquadToSpawn_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.CanEnemyUseSpawnPoint
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EnemyClass                     ( CPF_Parm )
// float                          EnemyRadius                    ( CPF_Parm )
// float                          EnemyHeight                    ( CPF_Parm )
// class ANavigationPoint*        NavPoint                       ( CPF_Parm )

bool USFXWave_Horde_Reaper::CanEnemyUseSpawnPoint ( class UClass* EnemyClass, float EnemyRadius, float EnemyHeight, class ANavigationPoint* NavPoint )
{
	static UFunction* pFnCanEnemyUseSpawnPoint = NULL;

	if ( ! pFnCanEnemyUseSpawnPoint )
		pFnCanEnemyUseSpawnPoint = (UFunction*) UObject::GObjObjects()->Data[ 113203 ];

	USFXWave_Horde_Reaper_execCanEnemyUseSpawnPoint_Parms CanEnemyUseSpawnPoint_Parms;
	CanEnemyUseSpawnPoint_Parms.EnemyClass = EnemyClass;
	CanEnemyUseSpawnPoint_Parms.EnemyRadius = EnemyRadius;
	CanEnemyUseSpawnPoint_Parms.EnemyHeight = EnemyHeight;
	CanEnemyUseSpawnPoint_Parms.NavPoint = NavPoint;

	this->ProcessEvent ( pFnCanEnemyUseSpawnPoint, &CanEnemyUseSpawnPoint_Parms, NULL );

	return CanEnemyUseSpawnPoint_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.RateEnemyStart
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        NavPoint                       ( CPF_Parm )
// float                          EnemyRadius                    ( CPF_Parm )
// float                          EnemyHeight                    ( CPF_Parm )
// class UClass*                  EnemyClass                     ( CPF_Parm )
// unsigned long                  bDoTraceCheck                  ( CPF_Parm )

float USFXWave_Horde_Reaper::RateEnemyStart ( class ANavigationPoint* NavPoint, float EnemyRadius, float EnemyHeight, class UClass* EnemyClass, unsigned long bDoTraceCheck )
{
	static UFunction* pFnRateEnemyStart = NULL;

	if ( ! pFnRateEnemyStart )
		pFnRateEnemyStart = (UFunction*) UObject::GObjObjects()->Data[ 113186 ];

	USFXWave_Horde_Reaper_execRateEnemyStart_Parms RateEnemyStart_Parms;
	RateEnemyStart_Parms.NavPoint = NavPoint;
	RateEnemyStart_Parms.EnemyRadius = EnemyRadius;
	RateEnemyStart_Parms.EnemyHeight = EnemyHeight;
	RateEnemyStart_Parms.EnemyClass = EnemyClass;
	RateEnemyStart_Parms.bDoTraceCheck = bDoTraceCheck;

	this->ProcessEvent ( pFnRateEnemyStart, &RateEnemyStart_Parms, NULL );

	return RateEnemyStart_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.ChooseEnemyStart
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EnemyClass                     ( CPF_Parm )

class ANavigationPoint* USFXWave_Horde_Reaper::ChooseEnemyStart ( class UClass* EnemyClass )
{
	static UFunction* pFnChooseEnemyStart = NULL;

	if ( ! pFnChooseEnemyStart )
		pFnChooseEnemyStart = (UFunction*) UObject::GObjObjects()->Data[ 113171 ];

	USFXWave_Horde_Reaper_execChooseEnemyStart_Parms ChooseEnemyStart_Parms;
	ChooseEnemyStart_Parms.EnemyClass = EnemyClass;

	this->ProcessEvent ( pFnChooseEnemyStart, &ChooseEnemyStart_Parms, NULL );

	return ChooseEnemyStart_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.FinishWave
// [0x00020002] 
// Parameters infos:

void USFXWave_Horde_Reaper::FinishWave ( )
{
	static UFunction* pFnFinishWave = NULL;

	if ( ! pFnFinishWave )
		pFnFinishWave = (UFunction*) UObject::GObjObjects()->Data[ 113168 ];

	USFXWave_Horde_Reaper_execFinishWave_Parms FinishWave_Parms;

	this->ProcessEvent ( pFnFinishWave, &FinishWave_Parms, NULL );
};

// Function sfxgamempcontent.SFXWave_Horde.BeginWave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXWave_Horde_Reaper::BeginWave ( )
{
	static UFunction* pFnBeginWave = NULL;

	if ( ! pFnBeginWave )
		pFnBeginWave = (UFunction*) UObject::GObjObjects()->Data[ 113159 ];

	USFXWave_Horde_Reaper_execBeginWave_Parms BeginWave_Parms;

	this->ProcessEvent ( pFnBeginWave, &BeginWave_Parms, NULL );

	return BeginWave_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXWave_Horde.GetEnemyArray
// [0x00420002] 
// Parameters infos:
// TArray< struct FEnemyWaveInfo > EnemyArray                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXWave_Horde_Reaper::GetEnemyArray ( TArray< struct FEnemyWaveInfo >* EnemyArray )
{
	static UFunction* pFnGetEnemyArray = NULL;

	if ( ! pFnGetEnemyArray )
		pFnGetEnemyArray = (UFunction*) UObject::GObjObjects()->Data[ 113153 ];

	USFXWave_Horde_Reaper_execGetEnemyArray_Parms GetEnemyArray_Parms;

	this->ProcessEvent ( pFnGetEnemyArray, &GetEnemyArray_Parms, NULL );

	if ( EnemyArray )
		memcpy ( EnemyArray, &GetEnemyArray_Parms.EnemyArray, 0xC );
};

// Function sfxgamempcontent.SFXWave_Horde.InitializeWave
// [0x00020002] 
// Parameters infos:
// class ASFXWaveManager*         OwnerManager                   ( CPF_Parm )

void USFXWave_Horde_Reaper::InitializeWave ( class ASFXWaveManager* OwnerManager )
{
	static UFunction* pFnInitializeWave = NULL;

	if ( ! pFnInitializeWave )
		pFnInitializeWave = (UFunction*) UObject::GObjObjects()->Data[ 113141 ];

	USFXWave_Horde_Reaper_execInitializeWave_Parms InitializeWave_Parms;
	InitializeWave_Parms.OwnerManager = OwnerManager;

	this->ProcessEvent ( pFnInitializeWave, &InitializeWave_Parms, NULL );
};

// Function sfxgamempcontent.SFXCustomAction_PickupRetrieveObject.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PickupRetrieveObject::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 129204 ];

	USFXCustomAction_PickupRetrieveObject_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamempcontent.SFXCustomAction_PickupRetrieveObject.CheckFiring
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PickupRetrieveObject::CheckFiring ( )
{
	static UFunction* pFnCheckFiring = NULL;

	if ( ! pFnCheckFiring )
		pFnCheckFiring = (UFunction*) UObject::GObjObjects()->Data[ 129203 ];

	USFXCustomAction_PickupRetrieveObject_execCheckFiring_Parms CheckFiring_Parms;

	this->ProcessEvent ( pFnCheckFiring, &CheckFiring_Parms, NULL );
};

// Function sfxgamempcontent.SFXCustomAction_PickupRetrieveObject.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PickupRetrieveObject::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 129191 ];

	USFXCustomAction_PickupRetrieveObject_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamempcontent.SFXCustomAction_DisarmObject.BodyStanceAnimEndNotification
// [0x00020000] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_DisarmObject::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 129182 ];

	USFXCustomAction_DisarmObject_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function sfxgamempcontent.SFXCustomAction_DisarmObject.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_DisarmObject::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 129177 ];

	USFXCustomAction_DisarmObject_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamempcontent.SFXCustomAction_DisarmObject.DisarmSuccess
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_DisarmObject::DisarmSuccess ( )
{
	static UFunction* pFnDisarmSuccess = NULL;

	if ( ! pFnDisarmSuccess )
		pFnDisarmSuccess = (UFunction*) UObject::GObjObjects()->Data[ 129175 ];

	USFXCustomAction_DisarmObject_execDisarmSuccess_Parms DisarmSuccess_Parms;

	this->ProcessEvent ( pFnDisarmSuccess, &DisarmSuccess_Parms, NULL );
};

// Function sfxgamempcontent.SFXCustomAction_DisarmObject.CheckFiring
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_DisarmObject::CheckFiring ( )
{
	static UFunction* pFnCheckFiring = NULL;

	if ( ! pFnCheckFiring )
		pFnCheckFiring = (UFunction*) UObject::GObjObjects()->Data[ 129174 ];

	USFXCustomAction_DisarmObject_execCheckFiring_Parms CheckFiring_Parms;

	this->ProcessEvent ( pFnCheckFiring, &CheckFiring_Parms, NULL );
};

// Function sfxgamempcontent.SFXCustomAction_DisarmObject.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_DisarmObject::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 129169 ];

	USFXCustomAction_DisarmObject_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerStaggerMP::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_PlayerStaggerMP_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_PlayerStaggerMP::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_PlayerStaggerMP_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStaggerMP::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_PlayerStaggerMP_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerStaggerMP::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_PlayerStaggerMP_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStaggerMP::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_PlayerStaggerMP_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStaggerMP::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_PlayerStaggerMP_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStaggerMP::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_PlayerStaggerMP_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerStaggerMP::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_PlayerStaggerMP_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerStaggerMP::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_PlayerStaggerMP_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.sfxpowercustomaction.GetSaveGamePowerState
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXPowerCustomActionMP_ConsumableAmmoPower::GetSaveGamePowerState ( )
{
	static UFunction* pFnGetSaveGamePowerState = NULL;

	if ( ! pFnGetSaveGamePowerState )
		pFnGetSaveGamePowerState = (UFunction*) UObject::GObjObjects()->Data[ 82415 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetSaveGamePowerState_Parms GetSaveGamePowerState_Parms;

	this->ProcessEvent ( pFnGetSaveGamePowerState, &GetSaveGamePowerState_Parms, NULL );

	return GetSaveGamePowerState_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.SetSaveGamePowerState
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nState                         ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::SetSaveGamePowerState ( int nState )
{
	static UFunction* pFnSetSaveGamePowerState = NULL;

	if ( ! pFnSetSaveGamePowerState )
		pFnSetSaveGamePowerState = (UFunction*) UObject::GObjObjects()->Data[ 82413 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execSetSaveGamePowerState_Parms SetSaveGamePowerState_Parms;
	SetSaveGamePowerState_Parms.nState = nState;

	this->ProcessEvent ( pFnSetSaveGamePowerState, &SetSaveGamePowerState_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetUniquePowerPlayerVariable
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName USFXPowerCustomActionMP_ConsumableAmmoPower::GetUniquePowerPlayerVariable ( )
{
	static UFunction* pFnGetUniquePowerPlayerVariable = NULL;

	if ( ! pFnGetUniquePowerPlayerVariable )
		pFnGetUniquePowerPlayerVariable = (UFunction*) UObject::GObjObjects()->Data[ 82411 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetUniquePowerPlayerVariable_Parms GetUniquePowerPlayerVariable_Parms;

	this->ProcessEvent ( pFnGetUniquePowerPlayerVariable, &GetUniquePowerPlayerVariable_Parms, NULL );

	return GetUniquePowerPlayerVariable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.RestoreSaveState
// [0x00020000] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::RestoreSaveState ( )
{
	static UFunction* pFnRestoreSaveState = NULL;

	if ( ! pFnRestoreSaveState )
		pFnRestoreSaveState = (UFunction*) UObject::GObjObjects()->Data[ 82410 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execRestoreSaveState_Parms RestoreSaveState_Parms;

	this->ProcessEvent ( pFnRestoreSaveState, &RestoreSaveState_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicationDecodeDelayAndResistance
// [0x00420002] 
// Parameters infos:
// int                            EncodedData                    ( CPF_Parm )
// float                          fDelay                         ( CPF_Parm | CPF_OutParm )
// unsigned char                  Resistance                     ( CPF_Parm | CPF_OutParm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ReplicationDecodeDelayAndResistance ( int EncodedData, float* fDelay, unsigned char* Resistance )
{
	static UFunction* pFnReplicationDecodeDelayAndResistance = NULL;

	if ( ! pFnReplicationDecodeDelayAndResistance )
		pFnReplicationDecodeDelayAndResistance = (UFunction*) UObject::GObjObjects()->Data[ 82406 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execReplicationDecodeDelayAndResistance_Parms ReplicationDecodeDelayAndResistance_Parms;
	ReplicationDecodeDelayAndResistance_Parms.EncodedData = EncodedData;

	this->ProcessEvent ( pFnReplicationDecodeDelayAndResistance, &ReplicationDecodeDelayAndResistance_Parms, NULL );

	if ( fDelay )
		*fDelay = ReplicationDecodeDelayAndResistance_Parms.fDelay;

	if ( Resistance )
		*Resistance = ReplicationDecodeDelayAndResistance_Parms.Resistance;
};

// Function SFXGame.sfxpowercustomaction.ReplicationEncodeDelayAndResistance
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDelay                         ( CPF_Parm )
// unsigned char                  Resistance                     ( CPF_Parm )

int USFXPowerCustomActionMP_ConsumableAmmoPower::ReplicationEncodeDelayAndResistance ( float fDelay, unsigned char Resistance )
{
	static UFunction* pFnReplicationEncodeDelayAndResistance = NULL;

	if ( ! pFnReplicationEncodeDelayAndResistance )
		pFnReplicationEncodeDelayAndResistance = (UFunction*) UObject::GObjObjects()->Data[ 82402 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execReplicationEncodeDelayAndResistance_Parms ReplicationEncodeDelayAndResistance_Parms;
	ReplicationEncodeDelayAndResistance_Parms.fDelay = fDelay;
	ReplicationEncodeDelayAndResistance_Parms.Resistance = Resistance;

	this->ProcessEvent ( pFnReplicationEncodeDelayAndResistance, &ReplicationEncodeDelayAndResistance_Parms, NULL );

	return ReplicationEncodeDelayAndResistance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.OnSourcePowerBioticDetonation
// [0x00020000] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::OnSourcePowerBioticDetonation ( )
{
	static UFunction* pFnOnSourcePowerBioticDetonation = NULL;

	if ( ! pFnOnSourcePowerBioticDetonation )
		pFnOnSourcePowerBioticDetonation = (UFunction*) UObject::GObjObjects()->Data[ 82401 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execOnSourcePowerBioticDetonation_Parms OnSourcePowerBioticDetonation_Parms;

	this->ProcessEvent ( pFnOnSourcePowerBioticDetonation, &OnSourcePowerBioticDetonation_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerComboClassFromUniqueID
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )

struct FString USFXPowerCustomActionMP_ConsumableAmmoPower::GetPowerComboClassFromUniqueID ( int PowerComboTypeUniqueID )
{
	static UFunction* pFnGetPowerComboClassFromUniqueID = NULL;

	if ( ! pFnGetPowerComboClassFromUniqueID )
		pFnGetPowerComboClassFromUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 82398 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetPowerComboClassFromUniqueID_Parms GetPowerComboClassFromUniqueID_Parms;
	GetPowerComboClassFromUniqueID_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;

	this->ProcessEvent ( pFnGetPowerComboClassFromUniqueID, &GetPowerComboClassFromUniqueID_Parms, NULL );

	return GetPowerComboClassFromUniqueID_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPowerComboTypeUniqueIDFromClass
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 className                      ( CPF_Parm | CPF_NeedCtorLink )

int USFXPowerCustomActionMP_ConsumableAmmoPower::GetPowerComboTypeUniqueIDFromClass ( struct FString className )
{
	static UFunction* pFnGetPowerComboTypeUniqueIDFromClass = NULL;

	if ( ! pFnGetPowerComboTypeUniqueIDFromClass )
		pFnGetPowerComboTypeUniqueIDFromClass = (UFunction*) UObject::GObjObjects()->Data[ 69117 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetPowerComboTypeUniqueIDFromClass_Parms GetPowerComboTypeUniqueIDFromClass_Parms;
	memcpy ( &GetPowerComboTypeUniqueIDFromClass_Parms.className, &className, 0xC );

	this->ProcessEvent ( pFnGetPowerComboTypeUniqueIDFromClass, &GetPowerComboTypeUniqueIDFromClass_Parms, NULL );

	return GetPowerComboTypeUniqueIDFromClass_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerComboImpactFromEffect
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// struct FString                 EffectClassName                ( CPF_Parm | CPF_NeedCtorLink )
// float                          DetonatorPowerRank             ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ClientDoPowerComboImpactFromEffect ( class AActor* oTarget, int CustomActionReactionType, struct FString EffectClassName, float DetonatorPowerRank, int MiscFlags )
{
	static UFunction* pFnClientDoPowerComboImpactFromEffect = NULL;

	if ( ! pFnClientDoPowerComboImpactFromEffect )
		pFnClientDoPowerComboImpactFromEffect = (UFunction*) UObject::GObjObjects()->Data[ 82387 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execClientDoPowerComboImpactFromEffect_Parms ClientDoPowerComboImpactFromEffect_Parms;
	ClientDoPowerComboImpactFromEffect_Parms.oTarget = oTarget;
	ClientDoPowerComboImpactFromEffect_Parms.CustomActionReactionType = CustomActionReactionType;
	memcpy ( &ClientDoPowerComboImpactFromEffect_Parms.EffectClassName, &EffectClassName, 0xC );
	ClientDoPowerComboImpactFromEffect_Parms.DetonatorPowerRank = DetonatorPowerRank;
	ClientDoPowerComboImpactFromEffect_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnClientDoPowerComboImpactFromEffect, &ClientDoPowerComboImpactFromEffect_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerCombo
// [0x00020002] 
// Parameters infos:
// class UClass*                  EffectClass                    ( CPF_Parm )
// int                            SourcePowerID                  ( CPF_Parm )
// class ABioPawn*                SourcePowerInstigator          ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ClientDoPowerCombo ( class UClass* EffectClass, int SourcePowerID, class ABioPawn* SourcePowerInstigator, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnClientDoPowerCombo = NULL;

	if ( ! pFnClientDoPowerCombo )
		pFnClientDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82375 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execClientDoPowerCombo_Parms ClientDoPowerCombo_Parms;
	ClientDoPowerCombo_Parms.EffectClass = EffectClass;
	ClientDoPowerCombo_Parms.SourcePowerID = SourcePowerID;
	ClientDoPowerCombo_Parms.SourcePowerInstigator = SourcePowerInstigator;
	ClientDoPowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &ClientDoPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoPowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnClientDoPowerCombo, &ClientDoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerCombo
// [0x00020002] 
// Parameters infos:
// class Usfxgameeffect_powercombo* ComboEffect                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ReplicatePowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnReplicatePowerCombo = NULL;

	if ( ! pFnReplicatePowerCombo )
		pFnReplicatePowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82370 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execReplicatePowerCombo_Parms ReplicatePowerCombo_Parms;
	ReplicatePowerCombo_Parms.ComboEffect = ComboEffect;
	ReplicatePowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &ReplicatePowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicatePowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnReplicatePowerCombo, &ReplicatePowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DelayedDoPowerCombo
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::DelayedDoPowerCombo ( )
{
	static UFunction* pFnDelayedDoPowerCombo = NULL;

	if ( ! pFnDelayedDoPowerCombo )
		pFnDelayedDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82369 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execDelayedDoPowerCombo_Parms DelayedDoPowerCombo_Parms;

	this->ProcessEvent ( pFnDelayedDoPowerCombo, &DelayedDoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DoPowerCombo
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// class Usfxgameeffect_powercombo* ComboEffect                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// unsigned long                  bDelayed                       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::DoPowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal, unsigned long bDelayed )
{
	static UFunction* pFnDoPowerCombo = NULL;

	if ( ! pFnDoPowerCombo )
		pFnDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82357 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execDoPowerCombo_Parms DoPowerCombo_Parms;
	DoPowerCombo_Parms.ComboEffect = ComboEffect;
	DoPowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &DoPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoPowerCombo_Parms.HitNormal, &HitNormal, 0xC );
	DoPowerCombo_Parms.bDelayed = bDelayed;

	this->ProcessEvent ( pFnDoPowerCombo, &DoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CheckForPowerCombo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// unsigned char                  Resistance                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::CheckForPowerCombo ( class AActor* Target, unsigned char Resistance, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnCheckForPowerCombo = NULL;

	if ( ! pFnCheckForPowerCombo )
		pFnCheckForPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82021 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execCheckForPowerCombo_Parms CheckForPowerCombo_Parms;
	CheckForPowerCombo_Parms.Target = Target;
	CheckForPowerCombo_Parms.Resistance = Resistance;
	memcpy ( &CheckForPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &CheckForPowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnCheckForPowerCombo, &CheckForPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.AddComboEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class Usfxgameeffect_powercombo* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// class UClass*                  ComboClass                     ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )

class Usfxgameeffect_powercombo* USFXPowerCustomActionMP_ConsumableAmmoPower::AddComboEffect ( class AActor* Target, class UClass* ComboClass, float Duration )
{
	static UFunction* pFnAddComboEffect = NULL;

	if ( ! pFnAddComboEffect )
		pFnAddComboEffect = (UFunction*) UObject::GObjObjects()->Data[ 82341 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execAddComboEffect_Parms AddComboEffect_Parms;
	AddComboEffect_Parms.Target = Target;
	AddComboEffect_Parms.ComboClass = ComboClass;
	AddComboEffect_Parms.Duration = Duration;

	this->ProcessEvent ( pFnAddComboEffect, &AddComboEffect_Parms, NULL );

	return AddComboEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 82338 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CombatEnded
// [0x00020000] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::CombatEnded ( )
{
	static UFunction* pFnCombatEnded = NULL;

	if ( ! pFnCombatEnded )
		pFnCombatEnded = (UFunction*) UObject::GObjObjects()->Data[ 82337 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execCombatEnded_Parms CombatEnded_Parms;

	this->ProcessEvent ( pFnCombatEnded, &CombatEnded_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplaceAnimSetWithDynamic
// [0x00020002] 
// Parameters infos:
// class UAnimSet*                DynAnimSet                     ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ReplaceAnimSetWithDynamic ( class UAnimSet* DynAnimSet )
{
	static UFunction* pFnReplaceAnimSetWithDynamic = NULL;

	if ( ! pFnReplaceAnimSetWithDynamic )
		pFnReplaceAnimSetWithDynamic = (UFunction*) UObject::GObjObjects()->Data[ 82335 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execReplaceAnimSetWithDynamic_Parms ReplaceAnimSetWithDynamic_Parms;
	ReplaceAnimSetWithDynamic_Parms.DynAnimSet = DynAnimSet;

	this->ProcessEvent ( pFnReplaceAnimSetWithDynamic, &ReplaceAnimSetWithDynamic_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerAnimInfo
// [0x00420002] 
// Parameters infos:
// class UAnimSet*                AnimSet                        ( CPF_Parm | CPF_OutParm )
// TArray< struct FName >         AnimNames                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerCustomActionMP_ConsumableAmmoPower::GetPowerAnimInfo ( class UAnimSet** AnimSet, TArray< struct FName >* AnimNames )
{
	static UFunction* pFnGetPowerAnimInfo = NULL;

	if ( ! pFnGetPowerAnimInfo )
		pFnGetPowerAnimInfo = (UFunction*) UObject::GObjObjects()->Data[ 82330 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetPowerAnimInfo_Parms GetPowerAnimInfo_Parms;

	this->ProcessEvent ( pFnGetPowerAnimInfo, &GetPowerAnimInfo_Parms, NULL );

	if ( AnimSet )
		*AnimSet = GetPowerAnimInfo_Parms.AnimSet;

	if ( AnimNames )
		memcpy ( AnimNames, &GetPowerAnimInfo_Parms.AnimNames, 0xC );
};

// Function SFXGame.sfxpowercustomaction.CleanUpProjectile
// [0x00024002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::CleanUpProjectile ( class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnCleanUpProjectile = NULL;

	if ( ! pFnCleanUpProjectile )
		pFnCleanUpProjectile = (UFunction*) UObject::GObjObjects()->Data[ 82325 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execCleanUpProjectile_Parms CleanUpProjectile_Parms;
	CleanUpProjectile_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnCleanUpProjectile, &CleanUpProjectile_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerComboImpact
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// float                          PowerRank                      ( CPF_Parm )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ReplicatePowerComboImpact ( class ABioPawn* Target, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags )
{
	static UFunction* pFnReplicatePowerComboImpact = NULL;

	if ( ! pFnReplicatePowerComboImpact )
		pFnReplicatePowerComboImpact = (UFunction*) UObject::GObjObjects()->Data[ 82319 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execReplicatePowerComboImpact_Parms ReplicatePowerComboImpact_Parms;
	ReplicatePowerComboImpact_Parms.Target = Target;
	ReplicatePowerComboImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ReplicatePowerComboImpact_Parms.PowerRank = PowerRank;
	ReplicatePowerComboImpact_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;
	ReplicatePowerComboImpact_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnReplicatePowerComboImpact, &ReplicatePowerComboImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ReplicatePowerSubsequentImpact ( class ABioPawn* Target, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnReplicatePowerSubsequentImpact = NULL;

	if ( ! pFnReplicatePowerSubsequentImpact )
		pFnReplicatePowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 82312 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execReplicatePowerSubsequentImpact_Parms ReplicatePowerSubsequentImpact_Parms;
	ReplicatePowerSubsequentImpact_Parms.Target = Target;
	ReplicatePowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ReplicatePowerSubsequentImpact_Parms.Duration = Duration;
	ReplicatePowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ReplicatePowerSubsequentImpact_Parms.Delay = Delay;
	ReplicatePowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnReplicatePowerSubsequentImpact, &ReplicatePowerSubsequentImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicateImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnReplicateImpact = NULL;

	if ( ! pFnReplicateImpact )
		pFnReplicateImpact = (UFunction*) UObject::GObjObjects()->Data[ 82305 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execReplicateImpact_Parms ReplicateImpact_Parms;
	ReplicateImpact_Parms.Target = Target;
	ReplicateImpact_Parms.ImpactCount = ImpactCount;
	ReplicateImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ReplicateImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicateImpact_Parms.HitNormal, &HitNormal, 0xC );
	ReplicateImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnReplicateImpact, &ReplicateImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoCustomAction
// [0x00024002] 
// Parameters infos:
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ClientDoCustomAction ( unsigned long bForced )
{
	static UFunction* pFnClientDoCustomAction = NULL;

	if ( ! pFnClientDoCustomAction )
		pFnClientDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 82303 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execClientDoCustomAction_Parms ClientDoCustomAction_Parms;
	ClientDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnClientDoCustomAction, &ClientDoCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.Replicate
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::Replicate ( )
{
	static UFunction* pFnReplicate = NULL;

	if ( ! pFnReplicate )
		pFnReplicate = (UFunction*) UObject::GObjObjects()->Data[ 82302 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execReplicate_Parms Replicate_Parms;

	this->ProcessEvent ( pFnReplicate, &Replicate_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayPowerScreenShake
// [0x00820002] 
// Parameters infos:
// class UClass*                  ScreenShakeClass               ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::PlayPowerScreenShake ( class UClass* ScreenShakeClass, struct FVector HitLocation )
{
	static UFunction* pFnPlayPowerScreenShake = NULL;

	if ( ! pFnPlayPowerScreenShake )
		pFnPlayPowerScreenShake = (UFunction*) UObject::GObjObjects()->Data[ 82293 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execPlayPowerScreenShake_Parms PlayPowerScreenShake_Parms;
	PlayPowerScreenShake_Parms.ScreenShakeClass = ScreenShakeClass;
	memcpy ( &PlayPowerScreenShake_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayPowerScreenShake, &PlayPowerScreenShake_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayPowerControllerRumble
// [0x00020002] 
// Parameters infos:
// class UClass*                  RumbleClass                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::PlayPowerControllerRumble ( class UClass* RumbleClass, struct FVector HitLocation )
{
	static UFunction* pFnPlayPowerControllerRumble = NULL;

	if ( ! pFnPlayPowerControllerRumble )
		pFnPlayPowerControllerRumble = (UFunction*) UObject::GObjObjects()->Data[ 82283 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execPlayPowerControllerRumble_Parms PlayPowerControllerRumble_Parms;
	PlayPowerControllerRumble_Parms.RumbleClass = RumbleClass;
	memcpy ( &PlayPowerControllerRumble_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayPowerControllerRumble, &PlayPowerControllerRumble_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetDefaultClientEffectParams
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USFXPowerCustomActionMP_ConsumableAmmoPower::GetDefaultClientEffectParams ( )
{
	static UFunction* pFnGetDefaultClientEffectParams = NULL;

	if ( ! pFnGetDefaultClientEffectParams )
		pFnGetDefaultClientEffectParams = (UFunction*) UObject::GObjObjects()->Data[ 82280 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetDefaultClientEffectParams_Parms GetDefaultClientEffectParams_Parms;

	this->ProcessEvent ( pFnGetDefaultClientEffectParams, &GetDefaultClientEffectParams_Parms, NULL );

	return GetDefaultClientEffectParams_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AddEvolvedRankBonus
// [0x00420002] 
// Parameters infos:
// float                          Bonus                          ( CPF_Parm )
// struct FPowerData              Data                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerCustomActionMP_ConsumableAmmoPower::AddEvolvedRankBonus ( float Bonus, struct FPowerData* Data )
{
	static UFunction* pFnAddEvolvedRankBonus = NULL;

	if ( ! pFnAddEvolvedRankBonus )
		pFnAddEvolvedRankBonus = (UFunction*) UObject::GObjObjects()->Data[ 82276 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execAddEvolvedRankBonus_Parms AddEvolvedRankBonus_Parms;
	AddEvolvedRankBonus_Parms.Bonus = Bonus;

	this->ProcessEvent ( pFnAddEvolvedRankBonus, &AddEvolvedRankBonus_Parms, NULL );

	if ( Data )
		memcpy ( Data, &AddEvolvedRankBonus_Parms.Data, 0x30 );
};

// Function SFXGame.sfxpowercustomaction.ApplyForceToActor
// [0x00020002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 vForce                         ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ApplyForceToActor ( class AActor* oActor, struct FVector vForce )
{
	static UFunction* pFnApplyForceToActor = NULL;

	if ( ! pFnApplyForceToActor )
		pFnApplyForceToActor = (UFunction*) UObject::GObjObjects()->Data[ 82271 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execApplyForceToActor_Parms ApplyForceToActor_Parms;
	ApplyForceToActor_Parms.oActor = oActor;
	memcpy ( &ApplyForceToActor_Parms.vForce, &vForce, 0xC );

	this->ProcessEvent ( pFnApplyForceToActor, &ApplyForceToActor_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ApplyShieldBonus
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// float                          fShieldValue                   ( CPF_Parm )
// unsigned long                  bShieldValueIsPercent          ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// struct FName                   Category                       ( CPF_Parm )
// unsigned long                  bRemoveEffectWhenShieldsDown   ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ApplyShieldBonus ( class ABioPawn* oPawn, float fShieldValue, unsigned long bShieldValueIsPercent, float fDuration, struct FName Category, unsigned long bRemoveEffectWhenShieldsDown )
{
	static UFunction* pFnApplyShieldBonus = NULL;

	if ( ! pFnApplyShieldBonus )
		pFnApplyShieldBonus = (UFunction*) UObject::GObjObjects()->Data[ 82262 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execApplyShieldBonus_Parms ApplyShieldBonus_Parms;
	ApplyShieldBonus_Parms.oPawn = oPawn;
	ApplyShieldBonus_Parms.fShieldValue = fShieldValue;
	ApplyShieldBonus_Parms.bShieldValueIsPercent = bShieldValueIsPercent;
	ApplyShieldBonus_Parms.fDuration = fDuration;
	memcpy ( &ApplyShieldBonus_Parms.Category, &Category, 0x8 );
	ApplyShieldBonus_Parms.bRemoveEffectWhenShieldsDown = bRemoveEffectWhenShieldsDown;

	this->ProcessEvent ( pFnApplyShieldBonus, &ApplyShieldBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ApplyHealthBonus
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// float                          fHealthValue                   ( CPF_Parm )
// unsigned long                  bHealthValueIsPercent          ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// struct FName                   Category                       ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ApplyHealthBonus ( class ABioPawn* oPawn, float fHealthValue, unsigned long bHealthValueIsPercent, float fDuration, struct FName Category )
{
	static UFunction* pFnApplyHealthBonus = NULL;

	if ( ! pFnApplyHealthBonus )
		pFnApplyHealthBonus = (UFunction*) UObject::GObjObjects()->Data[ 82254 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execApplyHealthBonus_Parms ApplyHealthBonus_Parms;
	ApplyHealthBonus_Parms.oPawn = oPawn;
	ApplyHealthBonus_Parms.fHealthValue = fHealthValue;
	ApplyHealthBonus_Parms.bHealthValueIsPercent = bHealthValueIsPercent;
	ApplyHealthBonus_Parms.fDuration = fDuration;
	memcpy ( &ApplyHealthBonus_Parms.Category, &Category, 0x8 );

	this->ProcessEvent ( pFnApplyHealthBonus, &ApplyHealthBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayParticleSystemOnSocket
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UParticleSystem*         PS_Template                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FName                   SocketName                     ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::PlayParticleSystemOnSocket ( class UParticleSystem* PS_Template, class ABioPawn* TargetPawn, struct FName SocketName, struct FRotator Rotation )
{
	static UFunction* pFnPlayParticleSystemOnSocket = NULL;

	if ( ! pFnPlayParticleSystemOnSocket )
		pFnPlayParticleSystemOnSocket = (UFunction*) UObject::GObjObjects()->Data[ 67470 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execPlayParticleSystemOnSocket_Parms PlayParticleSystemOnSocket_Parms;
	PlayParticleSystemOnSocket_Parms.PS_Template = PS_Template;
	PlayParticleSystemOnSocket_Parms.TargetPawn = TargetPawn;
	memcpy ( &PlayParticleSystemOnSocket_Parms.SocketName, &SocketName, 0x8 );
	memcpy ( &PlayParticleSystemOnSocket_Parms.Rotation, &Rotation, 0xC );

	this->ProcessEvent ( pFnPlayParticleSystemOnSocket, &PlayParticleSystemOnSocket_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.HasRemainingShieldOfType
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )
// class UClass*                  ShieldClass                    ( CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::HasRemainingShieldOfType ( class ABioPawn* oPawn, class UClass* ShieldClass )
{
	static UFunction* pFnHasRemainingShieldOfType = NULL;

	if ( ! pFnHasRemainingShieldOfType )
		pFnHasRemainingShieldOfType = (UFunction*) UObject::GObjObjects()->Data[ 82243 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execHasRemainingShieldOfType_Parms HasRemainingShieldOfType_Parms;
	HasRemainingShieldOfType_Parms.oPawn = oPawn;
	HasRemainingShieldOfType_Parms.ShieldClass = ShieldClass;

	this->ProcessEvent ( pFnHasRemainingShieldOfType, &HasRemainingShieldOfType_Parms, NULL );

	return HasRemainingShieldOfType_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsPlaceable
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::IsPlaceable ( class AActor* oImpacted )
{
	static UFunction* pFnIsPlaceable = NULL;

	if ( ! pFnIsPlaceable )
		pFnIsPlaceable = (UFunction*) UObject::GObjObjects()->Data[ 82240 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execIsPlaceable_Parms IsPlaceable_Parms;
	IsPlaceable_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsPlaceable, &IsPlaceable_Parms, NULL );

	return IsPlaceable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyPermanentGameEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class UClass*                  className                      ( CPF_Parm )
// float                          fEffectValue                   ( CPF_Parm )
// struct FName                   nmCategory                     ( CPF_Parm )
// class AController*             Instigator                     ( CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::ApplyPermanentGameEffect ( class AActor* oTarget, class UClass* className, float fEffectValue, struct FName nmCategory, class AController* Instigator )
{
	static UFunction* pFnApplyPermanentGameEffect = NULL;

	if ( ! pFnApplyPermanentGameEffect )
		pFnApplyPermanentGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 82231 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execApplyPermanentGameEffect_Parms ApplyPermanentGameEffect_Parms;
	ApplyPermanentGameEffect_Parms.oTarget = oTarget;
	ApplyPermanentGameEffect_Parms.className = className;
	ApplyPermanentGameEffect_Parms.fEffectValue = fEffectValue;
	memcpy ( &ApplyPermanentGameEffect_Parms.nmCategory, &nmCategory, 0x8 );
	ApplyPermanentGameEffect_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnApplyPermanentGameEffect, &ApplyPermanentGameEffect_Parms, NULL );

	return ApplyPermanentGameEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyTemporaryGameEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class UClass*                  className                      ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// float                          fEffectValue                   ( CPF_Parm )
// struct FName                   nmCategory                     ( CPF_Parm )
// class AController*             Instigator                     ( CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::ApplyTemporaryGameEffect ( class AActor* oTarget, class UClass* className, float fDuration, float fEffectValue, struct FName nmCategory, class AController* Instigator )
{
	static UFunction* pFnApplyTemporaryGameEffect = NULL;

	if ( ! pFnApplyTemporaryGameEffect )
		pFnApplyTemporaryGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 67380 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execApplyTemporaryGameEffect_Parms ApplyTemporaryGameEffect_Parms;
	ApplyTemporaryGameEffect_Parms.oTarget = oTarget;
	ApplyTemporaryGameEffect_Parms.className = className;
	ApplyTemporaryGameEffect_Parms.fDuration = fDuration;
	ApplyTemporaryGameEffect_Parms.fEffectValue = fEffectValue;
	memcpy ( &ApplyTemporaryGameEffect_Parms.nmCategory, &nmCategory, 0x8 );
	ApplyTemporaryGameEffect_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnApplyTemporaryGameEffect, &ApplyTemporaryGameEffect_Parms, NULL );

	return ApplyTemporaryGameEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsOfRace
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// unsigned char                  eRace                          ( CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::IsOfRace ( class AActor* oImpacted, unsigned char eRace )
{
	static UFunction* pFnIsOfRace = NULL;

	if ( ! pFnIsOfRace )
		pFnIsOfRace = (UFunction*) UObject::GObjObjects()->Data[ 82218 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execIsOfRace_Parms IsOfRace_Parms;
	IsOfRace_Parms.oImpacted = oImpacted;
	IsOfRace_Parms.eRace = eRace;

	this->ProcessEvent ( pFnIsOfRace, &IsOfRace_Parms, NULL );

	return IsOfRace_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.CanBeRagdolledByPowers
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::CanBeRagdolledByPowers ( class ABioPawn* oPawn )
{
	static UFunction* pFnCanBeRagdolledByPowers = NULL;

	if ( ! pFnCanBeRagdolledByPowers )
		pFnCanBeRagdolledByPowers = (UFunction*) UObject::GObjObjects()->Data[ 82215 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execCanBeRagdolledByPowers_Parms CanBeRagdolledByPowers_Parms;
	CanBeRagdolledByPowers_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnCanBeRagdolledByPowers, &CanBeRagdolledByPowers_Parms, NULL );

	return CanBeRagdolledByPowers_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ImpactPlaceable
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// float                          PlotPlaceableDamage            ( CPF_Parm )
// unsigned long                  bForceDamage                   ( CPF_OptionalParm | CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::ImpactPlaceable ( class AActor* oCaster, class AActor* oImpacted, struct FVector Momentum, float PlotPlaceableDamage, unsigned long bForceDamage )
{
	static UFunction* pFnImpactPlaceable = NULL;

	if ( ! pFnImpactPlaceable )
		pFnImpactPlaceable = (UFunction*) UObject::GObjObjects()->Data[ 82203 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execImpactPlaceable_Parms ImpactPlaceable_Parms;
	ImpactPlaceable_Parms.oCaster = oCaster;
	ImpactPlaceable_Parms.oImpacted = oImpacted;
	memcpy ( &ImpactPlaceable_Parms.Momentum, &Momentum, 0xC );
	ImpactPlaceable_Parms.PlotPlaceableDamage = PlotPlaceableDamage;
	ImpactPlaceable_Parms.bForceDamage = bForceDamage;

	this->ProcessEvent ( pFnImpactPlaceable, &ImpactPlaceable_Parms, NULL );

	return ImpactPlaceable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPhysicsLevelResistance
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

float USFXPowerCustomActionMP_ConsumableAmmoPower::GetPhysicsLevelResistance ( class AActor* oTarget )
{
	static UFunction* pFnGetPhysicsLevelResistance = NULL;

	if ( ! pFnGetPhysicsLevelResistance )
		pFnGetPhysicsLevelResistance = (UFunction*) UObject::GObjObjects()->Data[ 82198 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetPhysicsLevelResistance_Parms GetPhysicsLevelResistance_Parms;
	GetPhysicsLevelResistance_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnGetPhysicsLevelResistance, &GetPhysicsLevelResistance_Parms, NULL );

	return GetPhysicsLevelResistance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPhysicsLevel
// [0x00026002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// unsigned long                  bIgnoreResistance              ( CPF_OptionalParm | CPF_Parm )

int USFXPowerCustomActionMP_ConsumableAmmoPower::GetPhysicsLevel ( class AActor* oImpacted, unsigned long bIgnoreResistance )
{
	static UFunction* pFnGetPhysicsLevel = NULL;

	if ( ! pFnGetPhysicsLevel )
		pFnGetPhysicsLevel = (UFunction*) UObject::GObjObjects()->Data[ 82192 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetPhysicsLevel_Parms GetPhysicsLevel_Parms;
	GetPhysicsLevel_Parms.oImpacted = oImpacted;
	GetPhysicsLevel_Parms.bIgnoreResistance = bIgnoreResistance;

	this->ProcessEvent ( pFnGetPhysicsLevel, &GetPhysicsLevel_Parms, NULL );

	return GetPhysicsLevel_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsMachineRace
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::IsMachineRace ( class AActor* oImpacted )
{
	static UFunction* pFnIsMachineRace = NULL;

	if ( ! pFnIsMachineRace )
		pFnIsMachineRace = (UFunction*) UObject::GObjObjects()->Data[ 82188 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execIsMachineRace_Parms IsMachineRace_Parms;
	IsMachineRace_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsMachineRace, &IsMachineRace_Parms, NULL );

	return IsMachineRace_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ShouldUsePowerOnShields
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::ShouldUsePowerOnShields ( class ABioPawn* Target, class UClass* DamageType, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePowerOnShields = NULL;

	if ( ! pFnShouldUsePowerOnShields )
		pFnShouldUsePowerOnShields = (UFunction*) UObject::GObjObjects()->Data[ 82180 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execShouldUsePowerOnShields_Parms ShouldUsePowerOnShields_Parms;
	ShouldUsePowerOnShields_Parms.Target = Target;
	ShouldUsePowerOnShields_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnShouldUsePowerOnShields, &ShouldUsePowerOnShields_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePowerOnShields_Parms.sOptionalInfo, 0xC );

	return ShouldUsePowerOnShields_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.RagdollPhysicsImpact
// [0x00020002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )
// class AActor*                  oImpactActor                   ( CPF_Parm )
// struct FVector                 vImpactDir                     ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::RagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir )
{
	static UFunction* pFnRagdollPhysicsImpact = NULL;

	if ( ! pFnRagdollPhysicsImpact )
		pFnRagdollPhysicsImpact = (UFunction*) UObject::GObjObjects()->Data[ 82166 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execRagdollPhysicsImpact_Parms RagdollPhysicsImpact_Parms;
	RagdollPhysicsImpact_Parms.oPawn = oPawn;
	RagdollPhysicsImpact_Parms.oImpactActor = oImpactActor;
	memcpy ( &RagdollPhysicsImpact_Parms.vImpactDir, &vImpactDir, 0xC );

	this->ProcessEvent ( pFnRagdollPhysicsImpact, &RagdollPhysicsImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CanImpactActor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::CanImpactActor ( class AActor* oActor )
{
	static UFunction* pFnCanImpactActor = NULL;

	if ( ! pFnCanImpactActor )
		pFnCanImpactActor = (UFunction*) UObject::GObjObjects()->Data[ 82163 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execCanImpactActor_Parms CanImpactActor_Parms;
	CanImpactActor_Parms.oActor = oActor;

	this->ProcessEvent ( pFnCanImpactActor, &CanImpactActor_Parms, NULL );

	return CanImpactActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AddActorToImpactedList
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 vImpactLocation                ( CPF_Parm )
// TArray< class AActor* >        ImpactedActors                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::AddActorToImpactedList ( class AActor* oActor, struct FVector vImpactLocation, TArray< class AActor* >* ImpactedActors )
{
	static UFunction* pFnAddActorToImpactedList = NULL;

	if ( ! pFnAddActorToImpactedList )
		pFnAddActorToImpactedList = (UFunction*) UObject::GObjObjects()->Data[ 82152 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execAddActorToImpactedList_Parms AddActorToImpactedList_Parms;
	AddActorToImpactedList_Parms.oActor = oActor;
	memcpy ( &AddActorToImpactedList_Parms.vImpactLocation, &vImpactLocation, 0xC );

	this->ProcessEvent ( pFnAddActorToImpactedList, &AddActorToImpactedList_Parms, NULL );

	if ( ImpactedActors )
		memcpy ( ImpactedActors, &AddActorToImpactedList_Parms.ImpactedActors, 0xC );

	return AddActorToImpactedList_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.DetonationHitsTarget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FAreaEffectParameters   DetonationParams               ( CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::DetonationHitsTarget ( struct FVector HitLocation, float MaxRange, class AActor* HitActor, struct FAreaEffectParameters DetonationParams )
{
	static UFunction* pFnDetonationHitsTarget = NULL;

	if ( ! pFnDetonationHitsTarget )
		pFnDetonationHitsTarget = (UFunction*) UObject::GObjObjects()->Data[ 81999 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execDetonationHitsTarget_Parms DetonationHitsTarget_Parms;
	memcpy ( &DetonationHitsTarget_Parms.HitLocation, &HitLocation, 0xC );
	DetonationHitsTarget_Parms.MaxRange = MaxRange;
	DetonationHitsTarget_Parms.HitActor = HitActor;
	memcpy ( &DetonationHitsTarget_Parms.DetonationParams, &DetonationParams, 0x20 );

	this->ProcessEvent ( pFnDetonationHitsTarget, &DetonationHitsTarget_Parms, NULL );

	return DetonationHitsTarget_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetNearbyActors
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// TArray< class AActor* >        ImpactedActors                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::GetNearbyActors ( struct FVector HitLocation, float Radius, float MaxRange, struct FAreaEffectParameters Param, TArray< class AActor* >* ImpactedActors )
{
	static UFunction* pFnGetNearbyActors = NULL;

	if ( ! pFnGetNearbyActors )
		pFnGetNearbyActors = (UFunction*) UObject::GObjObjects()->Data[ 67385 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetNearbyActors_Parms GetNearbyActors_Parms;
	memcpy ( &GetNearbyActors_Parms.HitLocation, &HitLocation, 0xC );
	GetNearbyActors_Parms.Radius = Radius;
	GetNearbyActors_Parms.MaxRange = MaxRange;
	memcpy ( &GetNearbyActors_Parms.Param, &Param, 0x20 );

	this->ProcessEvent ( pFnGetNearbyActors, &GetNearbyActors_Parms, NULL );

	if ( ImpactedActors )
		memcpy ( ImpactedActors, &GetNearbyActors_Parms.ImpactedActors, 0xC );

	return GetNearbyActors_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyBonusToParameter
// [0x00424002] 
// Parameters infos:
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )
// struct FPowerData              Parameter                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ApplyBonusToParameter ( class USFXGameEffect* Bonus, unsigned long bRemove, struct FPowerData* Parameter )
{
	static UFunction* pFnApplyBonusToParameter = NULL;

	if ( ! pFnApplyBonusToParameter )
		pFnApplyBonusToParameter = (UFunction*) UObject::GObjObjects()->Data[ 82130 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execApplyBonusToParameter_Parms ApplyBonusToParameter_Parms;
	ApplyBonusToParameter_Parms.Bonus = Bonus;
	ApplyBonusToParameter_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonusToParameter, &ApplyBonusToParameter_Parms, NULL );

	if ( Parameter )
		memcpy ( Parameter, &ApplyBonusToParameter_Parms.Parameter, 0x30 );
};

// Function SFXGame.sfxpowercustomaction.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 82126 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayImpactEffects
// [0x00020002] 
// Parameters infos:
// class AActor*                  oImpacted                      ( CPF_Parm )
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// struct FVector                 ImpactNormal                   ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::PlayImpactEffects ( class AActor* oImpacted, struct FVector ImpactLocation, struct FVector ImpactNormal )
{
	static UFunction* pFnPlayImpactEffects = NULL;

	if ( ! pFnPlayImpactEffects )
		pFnPlayImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 82120 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execPlayImpactEffects_Parms PlayImpactEffects_Parms;
	PlayImpactEffects_Parms.oImpacted = oImpacted;
	memcpy ( &PlayImpactEffects_Parms.ImpactLocation, &ImpactLocation, 0xC );
	memcpy ( &PlayImpactEffects_Parms.ImpactNormal, &ImpactNormal, 0xC );

	this->ProcessEvent ( pFnPlayImpactEffects, &PlayImpactEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayImpactSounds
// [0x00420002] 
// Parameters infos:
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// class UWwiseEvent*             BaseSound                      ( CPF_Parm )
// TArray< struct FEvolvedSoundStruct > EvolvedSounds                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerCustomActionMP_ConsumableAmmoPower::PlayImpactSounds ( struct FVector ImpactLocation, class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds )
{
	static UFunction* pFnPlayImpactSounds = NULL;

	if ( ! pFnPlayImpactSounds )
		pFnPlayImpactSounds = (UFunction*) UObject::GObjObjects()->Data[ 82113 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execPlayImpactSounds_Parms PlayImpactSounds_Parms;
	memcpy ( &PlayImpactSounds_Parms.ImpactLocation, &ImpactLocation, 0xC );
	PlayImpactSounds_Parms.BaseSound = BaseSound;

	this->ProcessEvent ( pFnPlayImpactSounds, &PlayImpactSounds_Parms, NULL );

	if ( EvolvedSounds )
		memcpy ( EvolvedSounds, &PlayImpactSounds_Parms.EvolvedSounds, 0xC );
};

// Function SFXGame.sfxpowercustomaction.PlayCasterSounds
// [0x00420002] 
// Parameters infos:
// class UWwiseEvent*             BaseSound                      ( CPF_Parm )
// TArray< struct FEvolvedSoundStruct > EvolvedSounds                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerCustomActionMP_ConsumableAmmoPower::PlayCasterSounds ( class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds )
{
	static UFunction* pFnPlayCasterSounds = NULL;

	if ( ! pFnPlayCasterSounds )
		pFnPlayCasterSounds = (UFunction*) UObject::GObjObjects()->Data[ 82107 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execPlayCasterSounds_Parms PlayCasterSounds_Parms;
	PlayCasterSounds_Parms.BaseSound = BaseSound;

	this->ProcessEvent ( pFnPlayCasterSounds, &PlayCasterSounds_Parms, NULL );

	if ( EvolvedSounds )
		memcpy ( EvolvedSounds, &PlayCasterSounds_Parms.EvolvedSounds, 0xC );
};

// Function SFXGame.sfxpowercustomaction.PlayDetonationEffects
// [0x00024002] 
// Parameters infos:
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// struct FVector                 ImpactNormal                   ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::PlayDetonationEffects ( struct FVector ImpactLocation, struct FVector ImpactNormal, class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnPlayDetonationEffects = NULL;

	if ( ! pFnPlayDetonationEffects )
		pFnPlayDetonationEffects = (UFunction*) UObject::GObjObjects()->Data[ 82095 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execPlayDetonationEffects_Parms PlayDetonationEffects_Parms;
	memcpy ( &PlayDetonationEffects_Parms.ImpactLocation, &ImpactLocation, 0xC );
	memcpy ( &PlayDetonationEffects_Parms.ImpactNormal, &ImpactNormal, 0xC );
	PlayDetonationEffects_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnPlayDetonationEffects, &PlayDetonationEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayReleaseEffects
// [0x00820002] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::PlayReleaseEffects ( )
{
	static UFunction* pFnPlayReleaseEffects = NULL;

	if ( ! pFnPlayReleaseEffects )
		pFnPlayReleaseEffects = (UFunction*) UObject::GObjObjects()->Data[ 82091 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execPlayReleaseEffects_Parms PlayReleaseEffects_Parms;

	this->ProcessEvent ( pFnPlayReleaseEffects, &PlayReleaseEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.OnImpact
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 82084 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetImpactForce
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

float USFXPowerCustomActionMP_ConsumableAmmoPower::GetImpactForce ( class AActor* oImpacted )
{
	static UFunction* pFnGetImpactForce = NULL;

	if ( ! pFnGetImpactForce )
		pFnGetImpactForce = (UFunction*) UObject::GObjObjects()->Data[ 82081 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetImpactForce_Parms GetImpactForce_Parms;
	GetImpactForce_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactForce, &GetImpactForce_Parms, NULL );

	return GetImpactForce_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetNonRagdollDamageType
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* USFXPowerCustomActionMP_ConsumableAmmoPower::GetNonRagdollDamageType ( )
{
	static UFunction* pFnGetNonRagdollDamageType = NULL;

	if ( ! pFnGetNonRagdollDamageType )
		pFnGetNonRagdollDamageType = (UFunction*) UObject::GObjObjects()->Data[ 82078 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetNonRagdollDamageType_Parms GetNonRagdollDamageType_Parms;

	this->ProcessEvent ( pFnGetNonRagdollDamageType, &GetNonRagdollDamageType_Parms, NULL );

	return GetNonRagdollDamageType_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetImpactDamage
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm | CPF_OutParm )

float USFXPowerCustomActionMP_ConsumableAmmoPower::GetImpactDamage ( class AActor* oImpacted, class UClass** DamageType )
{
	static UFunction* pFnGetImpactDamage = NULL;

	if ( ! pFnGetImpactDamage )
		pFnGetImpactDamage = (UFunction*) UObject::GObjObjects()->Data[ 82073 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetImpactDamage_Parms GetImpactDamage_Parms;
	GetImpactDamage_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactDamage, &GetImpactDamage_Parms, NULL );

	if ( DamageType )
		*DamageType = GetImpactDamage_Parms.DamageType;

	return GetImpactDamage_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.DoAreaExplosionForActor
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 location                       ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          fForce                         ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// int                            MaxRagdollOverride             ( CPF_Parm )
// struct FScriptDelegate         ImpactCallback                 ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  MaxRagdollDmgTypeOverride      ( CPF_OptionalParm | CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::DoAreaExplosionForActor ( class AActor* oActor, struct FVector location, int ImpactCount, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxRagdollOverride, struct FScriptDelegate ImpactCallback, class UClass* MaxRagdollDmgTypeOverride )
{
	static UFunction* pFnDoAreaExplosionForActor = NULL;

	if ( ! pFnDoAreaExplosionForActor )
		pFnDoAreaExplosionForActor = (UFunction*) UObject::GObjObjects()->Data[ 67390 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execDoAreaExplosionForActor_Parms DoAreaExplosionForActor_Parms;
	DoAreaExplosionForActor_Parms.oActor = oActor;
	memcpy ( &DoAreaExplosionForActor_Parms.location, &location, 0xC );
	DoAreaExplosionForActor_Parms.ImpactCount = ImpactCount;
	DoAreaExplosionForActor_Parms.fDamage = fDamage;
	DoAreaExplosionForActor_Parms.DamageType = DamageType;
	DoAreaExplosionForActor_Parms.fForce = fForce;
	memcpy ( &DoAreaExplosionForActor_Parms.Param, &Param, 0x20 );
	DoAreaExplosionForActor_Parms.MaxRagdollOverride = MaxRagdollOverride;
	memcpy ( &DoAreaExplosionForActor_Parms.ImpactCallback, &ImpactCallback, 0xC );
	DoAreaExplosionForActor_Parms.MaxRagdollDmgTypeOverride = MaxRagdollDmgTypeOverride;

	this->ProcessEvent ( pFnDoAreaExplosionForActor, &DoAreaExplosionForActor_Parms, NULL );

	return DoAreaExplosionForActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AreaExplosion
// [0x00024002] 
// Parameters infos:
// struct FVector                 location                       ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          fForce                         ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// int                            MaxImpactCount                 ( CPF_Parm )
// struct FScriptDelegate         ImpactCallback                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            MaxRagdollOverride             ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  MaxRagdollDmgTypeOverride      ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::AreaExplosion ( struct FVector location, float fRadius, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxImpactCount, struct FScriptDelegate ImpactCallback, int MaxRagdollOverride, class UClass* MaxRagdollDmgTypeOverride )
{
	static UFunction* pFnAreaExplosion = NULL;

	if ( ! pFnAreaExplosion )
		pFnAreaExplosion = (UFunction*) UObject::GObjObjects()->Data[ 82042 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execAreaExplosion_Parms AreaExplosion_Parms;
	memcpy ( &AreaExplosion_Parms.location, &location, 0xC );
	AreaExplosion_Parms.fRadius = fRadius;
	AreaExplosion_Parms.fDamage = fDamage;
	AreaExplosion_Parms.DamageType = DamageType;
	AreaExplosion_Parms.fForce = fForce;
	memcpy ( &AreaExplosion_Parms.Param, &Param, 0x20 );
	AreaExplosion_Parms.MaxImpactCount = MaxImpactCount;
	memcpy ( &AreaExplosion_Parms.ImpactCallback, &ImpactCallback, 0xC );
	AreaExplosion_Parms.MaxRagdollOverride = MaxRagdollOverride;
	AreaExplosion_Parms.MaxRagdollDmgTypeOverride = MaxRagdollDmgTypeOverride;

	this->ProcessEvent ( pFnAreaExplosion, &AreaExplosion_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerSubsequentImpact
// [0x00024000] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 82035 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerComboImpact
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// float                          PowerRank                      ( CPF_Parm )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ClientDoPowerComboImpact ( class AActor* oActor, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags )
{
	static UFunction* pFnClientDoPowerComboImpact = NULL;

	if ( ! pFnClientDoPowerComboImpact )
		pFnClientDoPowerComboImpact = (UFunction*) UObject::GObjObjects()->Data[ 53812 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execClientDoPowerComboImpact_Parms ClientDoPowerComboImpact_Parms;
	ClientDoPowerComboImpact_Parms.oActor = oActor;
	ClientDoPowerComboImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerComboImpact_Parms.PowerRank = PowerRank;
	ClientDoPowerComboImpact_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;
	ClientDoPowerComboImpact_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnClientDoPowerComboImpact, &ClientDoPowerComboImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 82022 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DoPowerDetonatedForActor
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            nImpactCount                   ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::DoPowerDetonatedForActor ( class AActor* oActor, struct FVector HitLocation, struct FVector HitNormal, int nImpactCount, unsigned long bFirstTarget, class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnDoPowerDetonatedForActor = NULL;

	if ( ! pFnDoPowerDetonatedForActor )
		pFnDoPowerDetonatedForActor = (UFunction*) UObject::GObjObjects()->Data[ 82002 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execDoPowerDetonatedForActor_Parms DoPowerDetonatedForActor_Parms;
	DoPowerDetonatedForActor_Parms.oActor = oActor;
	memcpy ( &DoPowerDetonatedForActor_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoPowerDetonatedForActor_Parms.HitNormal, &HitNormal, 0xC );
	DoPowerDetonatedForActor_Parms.nImpactCount = nImpactCount;
	DoPowerDetonatedForActor_Parms.bFirstTarget = bFirstTarget;
	DoPowerDetonatedForActor_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnDoPowerDetonatedForActor, &DoPowerDetonatedForActor_Parms, NULL );

	return DoPowerDetonatedForActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.OnPowerDetonated
// [0x00024002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor )
{
	static UFunction* pFnOnPowerDetonated = NULL;

	if ( ! pFnOnPowerDetonated )
		pFnOnPowerDetonated = (UFunction*) UObject::GObjObjects()->Data[ 81986 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execOnPowerDetonated_Parms OnPowerDetonated_Parms;
	memcpy ( &OnPowerDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerDetonated_Parms.HitNormal, &HitNormal, 0xC );
	OnPowerDetonated_Parms.oProjectile = oProjectile;
	OnPowerDetonated_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnOnPowerDetonated, &OnPowerDetonated_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseBuffPower
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::ReleaseBuffPower ( )
{
	static UFunction* pFnReleaseBuffPower = NULL;

	if ( ! pFnReleaseBuffPower )
		pFnReleaseBuffPower = (UFunction*) UObject::GObjObjects()->Data[ 81980 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execReleaseBuffPower_Parms ReleaseBuffPower_Parms;

	this->ProcessEvent ( pFnReleaseBuffPower, &ReleaseBuffPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseMeleePower
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::ReleaseMeleePower ( )
{
	static UFunction* pFnReleaseMeleePower = NULL;

	if ( ! pFnReleaseMeleePower )
		pFnReleaseMeleePower = (UFunction*) UObject::GObjObjects()->Data[ 81979 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execReleaseMeleePower_Parms ReleaseMeleePower_Parms;

	this->ProcessEvent ( pFnReleaseMeleePower, &ReleaseMeleePower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseInstantPower
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::ReleaseInstantPower ( )
{
	static UFunction* pFnReleaseInstantPower = NULL;

	if ( ! pFnReleaseInstantPower )
		pFnReleaseInstantPower = (UFunction*) UObject::GObjObjects()->Data[ 81974 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execReleaseInstantPower_Parms ReleaseInstantPower_Parms;

	this->ProcessEvent ( pFnReleaseInstantPower, &ReleaseInstantPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.OnClientPowerProjectileSpawned
// [0x00020002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* NewProjectile                  ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::OnClientPowerProjectileSpawned ( class ASFXProjectile_PowerCustomAction* NewProjectile )
{
	static UFunction* pFnOnClientPowerProjectileSpawned = NULL;

	if ( ! pFnOnClientPowerProjectileSpawned )
		pFnOnClientPowerProjectileSpawned = (UFunction*) UObject::GObjObjects()->Data[ 81971 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execOnClientPowerProjectileSpawned_Parms OnClientPowerProjectileSpawned_Parms;
	OnClientPowerProjectileSpawned_Parms.NewProjectile = NewProjectile;

	this->ProcessEvent ( pFnOnClientPowerProjectileSpawned, &OnClientPowerProjectileSpawned_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseProjectilePower
// [0x00020002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXProjectile_PowerCustomAction* USFXPowerCustomActionMP_ConsumableAmmoPower::ReleaseProjectilePower ( )
{
	static UFunction* pFnReleaseProjectilePower = NULL;

	if ( ! pFnReleaseProjectilePower )
		pFnReleaseProjectilePower = (UFunction*) UObject::GObjObjects()->Data[ 81956 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execReleaseProjectilePower_Parms ReleaseProjectilePower_Parms;

	this->ProcessEvent ( pFnReleaseProjectilePower, &ReleaseProjectilePower_Parms, NULL );

	return ReleaseProjectilePower_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetProjectileAttachPoint
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AttachPoint                    ( CPF_Parm | CPF_OutParm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::GetProjectileAttachPoint ( struct FVector* AttachPoint )
{
	static UFunction* pFnGetProjectileAttachPoint = NULL;

	if ( ! pFnGetProjectileAttachPoint )
		pFnGetProjectileAttachPoint = (UFunction*) UObject::GObjObjects()->Data[ 55631 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetProjectileAttachPoint_Parms GetProjectileAttachPoint_Parms;

	this->ProcessEvent ( pFnGetProjectileAttachPoint, &GetProjectileAttachPoint_Parms, NULL );

	if ( AttachPoint )
		memcpy ( AttachPoint, &GetProjectileAttachPoint_Parms.AttachPoint, 0xC );

	return GetProjectileAttachPoint_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ReleasePower
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::ReleasePower ( )
{
	static UFunction* pFnReleasePower = NULL;

	if ( ! pFnReleasePower )
		pFnReleasePower = (UFunction*) UObject::GObjObjects()->Data[ 81949 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execReleasePower_Parms ReleasePower_Parms;

	this->ProcessEvent ( pFnReleasePower, &ReleasePower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ResetPowerCooldown
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::ResetPowerCooldown ( )
{
	static UFunction* pFnResetPowerCooldown = NULL;

	if ( ! pFnResetPowerCooldown )
		pFnResetPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81948 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execResetPowerCooldown_Parms ResetPowerCooldown_Parms;

	this->ProcessEvent ( pFnResetPowerCooldown, &ResetPowerCooldown_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartPowerCooldown
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::StartPowerCooldown ( )
{
	static UFunction* pFnStartPowerCooldown = NULL;

	if ( ! pFnStartPowerCooldown )
		pFnStartPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81945 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execStartPowerCooldown_Parms StartPowerCooldown_Parms;

	this->ProcessEvent ( pFnStartPowerCooldown, &StartPowerCooldown_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerCooldown
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXPowerCustomActionMP_ConsumableAmmoPower::GetPowerCooldown ( )
{
	static UFunction* pFnGetPowerCooldown = NULL;

	if ( ! pFnGetPowerCooldown )
		pFnGetPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81943 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetPowerCooldown_Parms GetPowerCooldown_Parms;

	this->ProcessEvent ( pFnGetPowerCooldown, &GetPowerCooldown_Parms, NULL );

	return GetPowerCooldown_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.TickCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::eventTickCustomAction ( float fDeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81938 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_eventTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXPowerCustomActionMP_ConsumableAmmoPower::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 81932 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81926 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.EndThisCustomAction
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::EndThisCustomAction ( )
{
	static UFunction* pFnEndThisCustomAction = NULL;

	if ( ! pFnEndThisCustomAction )
		pFnEndThisCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81925 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execEndThisCustomAction_Parms EndThisCustomAction_Parms;

	this->ProcessEvent ( pFnEndThisCustomAction, &EndThisCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayBodyStance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBodyStance             BodyStance                     ( CPF_Parm | CPF_NeedCtorLink )
// float                          fStanceBlendInTime             ( CPF_Parm )
// float                          fStanceBlendOutTime            ( CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::PlayBodyStance ( struct FBodyStance BodyStance, float fStanceBlendInTime, float fStanceBlendOutTime )
{
	static UFunction* pFnPlayBodyStance = NULL;

	if ( ! pFnPlayBodyStance )
		pFnPlayBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 81917 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execPlayBodyStance_Parms PlayBodyStance_Parms;
	memcpy ( &PlayBodyStance_Parms.BodyStance, &BodyStance, 0xC );
	PlayBodyStance_Parms.fStanceBlendInTime = fStanceBlendInTime;
	PlayBodyStance_Parms.fStanceBlendOutTime = fStanceBlendOutTime;

	this->ProcessEvent ( pFnPlayBodyStance, &PlayBodyStance_Parms, NULL );

	return PlayBodyStance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.StartCastAnimations
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::StartCastAnimations ( )
{
	static UFunction* pFnStartCastAnimations = NULL;

	if ( ! pFnStartCastAnimations )
		pFnStartCastAnimations = (UFunction*) UObject::GObjObjects()->Data[ 81911 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execStartCastAnimations_Parms StartCastAnimations_Parms;

	this->ProcessEvent ( pFnStartCastAnimations, &StartCastAnimations_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartPower
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::StartPower ( )
{
	static UFunction* pFnStartPower = NULL;

	if ( ! pFnStartPower )
		pFnStartPower = (UFunction*) UObject::GObjObjects()->Data[ 81904 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execStartPower_Parms StartPower_Parms;

	this->ProcessEvent ( pFnStartPower, &StartPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_ConsumableAmmoPower::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81892 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ChangeCoverAction
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::ChangeCoverAction ( )
{
	static UFunction* pFnChangeCoverAction = NULL;

	if ( ! pFnChangeCoverAction )
		pFnChangeCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 81887 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execChangeCoverAction_Parms ChangeCoverAction_Parms;

	this->ProcessEvent ( pFnChangeCoverAction, &ChangeCoverAction_Parms, NULL );

	return ChangeCoverAction_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetCurrentBodyStance
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXPowerCustomActionMP_ConsumableAmmoPower::GetCurrentBodyStance ( )
{
	static UFunction* pFnGetCurrentBodyStance = NULL;

	if ( ! pFnGetCurrentBodyStance )
		pFnGetCurrentBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 81884 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execGetCurrentBodyStance_Parms GetCurrentBodyStance_Parms;

	this->ProcessEvent ( pFnGetCurrentBodyStance, &GetCurrentBodyStance_Parms, NULL );

	return GetCurrentBodyStance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.LoadAnimSet
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::LoadAnimSet ( )
{
	static UFunction* pFnLoadAnimSet = NULL;

	if ( ! pFnLoadAnimSet )
		pFnLoadAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 81880 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execLoadAnimSet_Parms LoadAnimSet_Parms;

	this->ProcessEvent ( pFnLoadAnimSet, &LoadAnimSet_Parms, NULL );

	return LoadAnimSet_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.CanUsePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::CanUsePower ( class AActor* oTarget )
{
	static UFunction* pFnCanUsePower = NULL;

	if ( ! pFnCanUsePower )
		pFnCanUsePower = (UFunction*) UObject::GObjObjects()->Data[ 55613 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execCanUsePower_Parms CanUsePower_Parms;
	CanUsePower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanUsePower, &CanUsePower_Parms, NULL );

	return CanUsePower_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool USFXPowerCustomActionMP_ConsumableAmmoPower::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81868 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerCustomActionMP_ConsumableAmmoPower::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 81862 ];

	USFXPowerCustomActionMP_ConsumableAmmoPower_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.CombatEnded
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_singularity::CombatEnded ( )
{
	static UFunction* pFnCombatEnded = NULL;

	if ( ! pFnCombatEnded )
		pFnCombatEnded = (UFunction*) UObject::GObjObjects()->Data[ 128788 ];

	Usfxpowercustomactionmp_singularity_execCombatEnded_Parms CombatEnded_Parms;

	this->ProcessEvent ( pFnCombatEnded, &CombatEnded_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_singularity::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 128787 ];

	Usfxpowercustomactionmp_singularity_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnOwnerDestroyed
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_singularity::OnOwnerDestroyed ( )
{
	static UFunction* pFnOnOwnerDestroyed = NULL;

	if ( ! pFnOnOwnerDestroyed )
		pFnOnOwnerDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 128786 ];

	Usfxpowercustomactionmp_singularity_execOnOwnerDestroyed_Parms OnOwnerDestroyed_Parms;

	this->ProcessEvent ( pFnOnOwnerDestroyed, &OnOwnerDestroyed_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.DoJoinInProgress
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_singularity::DoJoinInProgress ( )
{
	static UFunction* pFnDoJoinInProgress = NULL;

	if ( ! pFnDoJoinInProgress )
		pFnDoJoinInProgress = (UFunction*) UObject::GObjObjects()->Data[ 128785 ];

	Usfxpowercustomactionmp_singularity_execDoJoinInProgress_Parms DoJoinInProgress_Parms;

	this->ProcessEvent ( pFnDoJoinInProgress, &DoJoinInProgress_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ClientDoPowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomactionmp_singularity::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 128778 ];

	Usfxpowercustomactionmp_singularity_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomactionmp_singularity::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 128774 ];

	Usfxpowercustomactionmp_singularity_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomactionmp_singularity::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 128772 ];

	Usfxpowercustomactionmp_singularity_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void Usfxpowercustomactionmp_singularity::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 128765 ];

	Usfxpowercustomactionmp_singularity_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ShouldUsePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxpowercustomactionmp_singularity::ShouldUsePower ( class AActor* Target, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 128759 ];

	Usfxpowercustomactionmp_singularity_execShouldUsePower_Parms ShouldUsePower_Parms;
	ShouldUsePower_Parms.Target = Target;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePower_Parms.sOptionalInfo, 0xC );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnPowerRankIncreased
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_singularity::OnPowerRankIncreased ( )
{
	static UFunction* pFnOnPowerRankIncreased = NULL;

	if ( ! pFnOnPowerRankIncreased )
		pFnOnPowerRankIncreased = (UFunction*) UObject::GObjObjects()->Data[ 128758 ];

	Usfxpowercustomactionmp_singularity_execOnPowerRankIncreased_Parms OnPowerRankIncreased_Parms;

	this->ProcessEvent ( pFnOnPowerRankIncreased, &OnPowerRankIncreased_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnRagdollPhysicsImpact
// [0x00020002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )
// class AActor*                  oImpactActor                   ( CPF_Parm )
// struct FVector                 vImpactDir                     ( CPF_Parm )

void Usfxpowercustomactionmp_singularity::OnRagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir )
{
	static UFunction* pFnOnRagdollPhysicsImpact = NULL;

	if ( ! pFnOnRagdollPhysicsImpact )
		pFnOnRagdollPhysicsImpact = (UFunction*) UObject::GObjObjects()->Data[ 128754 ];

	Usfxpowercustomactionmp_singularity_execOnRagdollPhysicsImpact_Parms OnRagdollPhysicsImpact_Parms;
	OnRagdollPhysicsImpact_Parms.oPawn = oPawn;
	OnRagdollPhysicsImpact_Parms.oImpactActor = oImpactActor;
	memcpy ( &OnRagdollPhysicsImpact_Parms.vImpactDir, &vImpactDir, 0xC );

	this->ProcessEvent ( pFnOnRagdollPhysicsImpact, &OnRagdollPhysicsImpact_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.SpawnSingularityVFX
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxpowercustomactionmp_singularity::SpawnSingularityVFX ( )
{
	static UFunction* pFnSpawnSingularityVFX = NULL;

	if ( ! pFnSpawnSingularityVFX )
		pFnSpawnSingularityVFX = (UFunction*) UObject::GObjObjects()->Data[ 128749 ];

	Usfxpowercustomactionmp_singularity_execSpawnSingularityVFX_Parms SpawnSingularityVFX_Parms;

	this->ProcessEvent ( pFnSpawnSingularityVFX, &SpawnSingularityVFX_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.SpawnSingularity
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_singularity::SpawnSingularity ( )
{
	static UFunction* pFnSpawnSingularity = NULL;

	if ( ! pFnSpawnSingularity )
		pFnSpawnSingularity = (UFunction*) UObject::GObjObjects()->Data[ 128746 ];

	Usfxpowercustomactionmp_singularity_execSpawnSingularity_Parms SpawnSingularity_Parms;

	this->ProcessEvent ( pFnSpawnSingularity, &SpawnSingularity_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnExplosionImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxpowercustomactionmp_singularity::OnExplosionImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnExplosionImpact = NULL;

	if ( ! pFnOnExplosionImpact )
		pFnOnExplosionImpact = (UFunction*) UObject::GObjObjects()->Data[ 128747 ];

	Usfxpowercustomactionmp_singularity_execOnExplosionImpact_Parms OnExplosionImpact_Parms;
	OnExplosionImpact_Parms.Resistance = Resistance;
	OnExplosionImpact_Parms.oImpacted = oImpacted;
	OnExplosionImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnExplosionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnExplosionImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnExplosionImpact, &OnExplosionImpact_Parms, NULL );

	return OnExplosionImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.SingularityExplosion
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_singularity::SingularityExplosion ( )
{
	static UFunction* pFnSingularityExplosion = NULL;

	if ( ! pFnSingularityExplosion )
		pFnSingularityExplosion = (UFunction*) UObject::GObjObjects()->Data[ 128739 ];

	Usfxpowercustomactionmp_singularity_execSingularityExplosion_Parms SingularityExplosion_Parms;

	this->ProcessEvent ( pFnSingularityExplosion, &SingularityExplosion_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.Internal_TurnOffSingularity
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_singularity::Internal_TurnOffSingularity ( )
{
	static UFunction* pFnInternal_TurnOffSingularity = NULL;

	if ( ! pFnInternal_TurnOffSingularity )
		pFnInternal_TurnOffSingularity = (UFunction*) UObject::GObjObjects()->Data[ 128733 ];

	Usfxpowercustomactionmp_singularity_execInternal_TurnOffSingularity_Parms Internal_TurnOffSingularity_Parms;

	this->ProcessEvent ( pFnInternal_TurnOffSingularity, &Internal_TurnOffSingularity_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.TurnOffSingularity
// [0x00024002] 
// Parameters infos:
// unsigned long                  bDoReplication                 ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomactionmp_singularity::TurnOffSingularity ( unsigned long bDoReplication )
{
	static UFunction* pFnTurnOffSingularity = NULL;

	if ( ! pFnTurnOffSingularity )
		pFnTurnOffSingularity = (UFunction*) UObject::GObjObjects()->Data[ 128731 ];

	Usfxpowercustomactionmp_singularity_execTurnOffSingularity_Parms TurnOffSingularity_Parms;
	TurnOffSingularity_Parms.bDoReplication = bDoReplication;

	this->ProcessEvent ( pFnTurnOffSingularity, &TurnOffSingularity_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.CanPutInSingularity
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool Usfxpowercustomactionmp_singularity::CanPutInSingularity ( class AActor* oActor )
{
	static UFunction* pFnCanPutInSingularity = NULL;

	if ( ! pFnCanPutInSingularity )
		pFnCanPutInSingularity = (UFunction*) UObject::GObjObjects()->Data[ 128726 ];

	Usfxpowercustomactionmp_singularity_execCanPutInSingularity_Parms CanPutInSingularity_Parms;
	CanPutInSingularity_Parms.oActor = oActor;

	this->ProcessEvent ( pFnCanPutInSingularity, &CanPutInSingularity_Parms, NULL );

	return CanPutInSingularity_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnGameEffectEnded
// [0x00020002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )

void Usfxpowercustomactionmp_singularity::OnGameEffectEnded ( class AActor* oActor )
{
	static UFunction* pFnOnGameEffectEnded = NULL;

	if ( ! pFnOnGameEffectEnded )
		pFnOnGameEffectEnded = (UFunction*) UObject::GObjObjects()->Data[ 128724 ];

	Usfxpowercustomactionmp_singularity_execOnGameEffectEnded_Parms OnGameEffectEnded_Parms;
	OnGameEffectEnded_Parms.oActor = oActor;

	this->ProcessEvent ( pFnOnGameEffectEnded, &OnGameEffectEnded_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ImpactNewTarget
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool Usfxpowercustomactionmp_singularity::ImpactNewTarget ( class AActor* oImpacted )
{
	static UFunction* pFnImpactNewTarget = NULL;

	if ( ! pFnImpactNewTarget )
		pFnImpactNewTarget = (UFunction*) UObject::GObjObjects()->Data[ 128701 ];

	Usfxpowercustomactionmp_singularity_execImpactNewTarget_Parms ImpactNewTarget_Parms;
	ImpactNewTarget_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnImpactNewTarget, &ImpactNewTarget_Parms, NULL );

	return ImpactNewTarget_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ApplyBioticComboEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool Usfxpowercustomactionmp_singularity::ApplyBioticComboEffect ( class AActor* oTarget )
{
	static UFunction* pFnApplyBioticComboEffect = NULL;

	if ( ! pFnApplyBioticComboEffect )
		pFnApplyBioticComboEffect = (UFunction*) UObject::GObjObjects()->Data[ 128717 ];

	Usfxpowercustomactionmp_singularity_execApplyBioticComboEffect_Parms ApplyBioticComboEffect_Parms;
	ApplyBioticComboEffect_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnApplyBioticComboEffect, &ApplyBioticComboEffect_Parms, NULL );

	return ApplyBioticComboEffect_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.TickCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void Usfxpowercustomactionmp_singularity::eventTickCustomAction ( float fDeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128679 ];

	Usfxpowercustomactionmp_singularity_eventTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomactionmp_singularity::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 128672 ];

	Usfxpowercustomactionmp_singularity_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnPowerDetonated
// [0x00024002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomactionmp_singularity::OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor )
{
	static UFunction* pFnOnPowerDetonated = NULL;

	if ( ! pFnOnPowerDetonated )
		pFnOnPowerDetonated = (UFunction*) UObject::GObjObjects()->Data[ 128663 ];

	Usfxpowercustomactionmp_singularity_execOnPowerDetonated_Parms OnPowerDetonated_Parms;
	memcpy ( &OnPowerDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerDetonated_Parms.HitNormal, &HitNormal, 0xC );
	OnPowerDetonated_Parms.oProjectile = oProjectile;
	OnPowerDetonated_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnOnPowerDetonated, &OnPowerDetonated_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ReleasePower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_singularity::ReleasePower ( )
{
	static UFunction* pFnReleasePower = NULL;

	if ( ! pFnReleasePower )
		pFnReleasePower = (UFunction*) UObject::GObjObjects()->Data[ 128661 ];

	Usfxpowercustomactionmp_singularity_execReleasePower_Parms ReleasePower_Parms;

	this->ProcessEvent ( pFnReleasePower, &ReleasePower_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.GetImpactForce
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

float Usfxpowercustomactionmp_singularity::GetImpactForce ( class AActor* oImpacted )
{
	static UFunction* pFnGetImpactForce = NULL;

	if ( ! pFnGetImpactForce )
		pFnGetImpactForce = (UFunction*) UObject::GObjObjects()->Data[ 128658 ];

	Usfxpowercustomactionmp_singularity_execGetImpactForce_Parms GetImpactForce_Parms;
	GetImpactForce_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactForce, &GetImpactForce_Parms, NULL );

	return GetImpactForce_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.StartCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_singularity::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128655 ];

	Usfxpowercustomactionmp_singularity_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnPowersLoaded
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_singularity::OnPowersLoaded ( )
{
	static UFunction* pFnOnPowersLoaded = NULL;

	if ( ! pFnOnPowersLoaded )
		pFnOnPowersLoaded = (UFunction*) UObject::GObjObjects()->Data[ 128656 ];

	Usfxpowercustomactionmp_singularity_execOnPowersLoaded_Parms OnPowersLoaded_Parms;

	this->ProcessEvent ( pFnOnPowersLoaded, &OnPowersLoaded_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_Warp::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 129004 ];

	USFXPowerCustomActionMP_Warp_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_Warp::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 129000 ];

	USFXPowerCustomActionMP_Warp_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_Warp::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 128998 ];

	USFXPowerCustomActionMP_Warp_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void USFXPowerCustomActionMP_Warp::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 128991 ];

	USFXPowerCustomActionMP_Warp_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.ShouldUsePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomActionMP_Warp::ShouldUsePower ( class AActor* Target, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 128986 ];

	USFXPowerCustomActionMP_Warp_execShouldUsePower_Parms ShouldUsePower_Parms;
	ShouldUsePower_Parms.Target = Target;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePower_Parms.sOptionalInfo, 0xC );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.PlayImpactEffects
// [0x00020002] 
// Parameters infos:
// class AActor*                  oImpacted                      ( CPF_Parm )
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// struct FVector                 ImpactNormal                   ( CPF_Parm )

void USFXPowerCustomActionMP_Warp::PlayImpactEffects ( class AActor* oImpacted, struct FVector ImpactLocation, struct FVector ImpactNormal )
{
	static UFunction* pFnPlayImpactEffects = NULL;

	if ( ! pFnPlayImpactEffects )
		pFnPlayImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 128982 ];

	USFXPowerCustomActionMP_Warp_execPlayImpactEffects_Parms PlayImpactEffects_Parms;
	PlayImpactEffects_Parms.oImpacted = oImpacted;
	memcpy ( &PlayImpactEffects_Parms.ImpactLocation, &ImpactLocation, 0xC );
	memcpy ( &PlayImpactEffects_Parms.ImpactNormal, &ImpactNormal, 0xC );

	this->ProcessEvent ( pFnPlayImpactEffects, &PlayImpactEffects_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.OnImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXPowerCustomActionMP_Warp::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 128957 ];

	USFXPowerCustomActionMP_Warp_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.GetTotalDamage
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm | CPF_OutParm )

float USFXPowerCustomActionMP_Warp::GetTotalDamage ( class AActor* oImpacted, class UClass** DamageType )
{
	static UFunction* pFnGetTotalDamage = NULL;

	if ( ! pFnGetTotalDamage )
		pFnGetTotalDamage = (UFunction*) UObject::GObjObjects()->Data[ 128953 ];

	USFXPowerCustomActionMP_Warp_execGetTotalDamage_Parms GetTotalDamage_Parms;
	GetTotalDamage_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetTotalDamage, &GetTotalDamage_Parms, NULL );

	if ( DamageType )
		*DamageType = GetTotalDamage_Parms.DamageType;

	return GetTotalDamage_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.GetImpactDamage
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm | CPF_OutParm )

float USFXPowerCustomActionMP_Warp::GetImpactDamage ( class AActor* oImpacted, class UClass** DamageType )
{
	static UFunction* pFnGetImpactDamage = NULL;

	if ( ! pFnGetImpactDamage )
		pFnGetImpactDamage = (UFunction*) UObject::GObjObjects()->Data[ 128948 ];

	USFXPowerCustomActionMP_Warp_execGetImpactDamage_Parms GetImpactDamage_Parms;
	GetImpactDamage_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactDamage, &GetImpactDamage_Parms, NULL );

	if ( DamageType )
		*DamageType = GetImpactDamage_Parms.DamageType;

	return GetImpactDamage_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_Shockwave::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 128630 ];

	USFXPowerCustomActionMP_Shockwave_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_Shockwave::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 128626 ];

	USFXPowerCustomActionMP_Shockwave_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_Shockwave::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 128623 ];

	USFXPowerCustomActionMP_Shockwave_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void USFXPowerCustomActionMP_Shockwave::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 128617 ];

	USFXPowerCustomActionMP_Shockwave_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.ShouldUsePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomActionMP_Shockwave::ShouldUsePower ( class AActor* Target, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 128611 ];

	USFXPowerCustomActionMP_Shockwave_execShouldUsePower_Parms ShouldUsePower_Parms;
	ShouldUsePower_Parms.Target = Target;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePower_Parms.sOptionalInfo, 0xC );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.OnRagdollPhysicsImpact
// [0x00020002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )
// class AActor*                  oImpactActor                   ( CPF_Parm )
// struct FVector                 vImpactDir                     ( CPF_Parm )

void USFXPowerCustomActionMP_Shockwave::OnRagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir )
{
	static UFunction* pFnOnRagdollPhysicsImpact = NULL;

	if ( ! pFnOnRagdollPhysicsImpact )
		pFnOnRagdollPhysicsImpact = (UFunction*) UObject::GObjObjects()->Data[ 128606 ];

	USFXPowerCustomActionMP_Shockwave_execOnRagdollPhysicsImpact_Parms OnRagdollPhysicsImpact_Parms;
	OnRagdollPhysicsImpact_Parms.oPawn = oPawn;
	OnRagdollPhysicsImpact_Parms.oImpactActor = oImpactActor;
	memcpy ( &OnRagdollPhysicsImpact_Parms.vImpactDir, &vImpactDir, 0xC );

	this->ProcessEvent ( pFnOnRagdollPhysicsImpact, &OnRagdollPhysicsImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.ClientDoPowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_Shockwave::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 128598 ];

	USFXPowerCustomActionMP_Shockwave_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.DoSubsequentImpact
// [0x00020002] 
// Parameters infos:
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// int                            nImpactCount                   ( CPF_Parm )

void USFXPowerCustomActionMP_Shockwave::DoSubsequentImpact ( class AActor* HitActor, struct FVector ImpactLocation, int nImpactCount )
{
	static UFunction* pFnDoSubsequentImpact = NULL;

	if ( ! pFnDoSubsequentImpact )
		pFnDoSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 128576 ];

	USFXPowerCustomActionMP_Shockwave_execDoSubsequentImpact_Parms DoSubsequentImpact_Parms;
	DoSubsequentImpact_Parms.HitActor = HitActor;
	memcpy ( &DoSubsequentImpact_Parms.ImpactLocation, &ImpactLocation, 0xC );
	DoSubsequentImpact_Parms.nImpactCount = nImpactCount;

	this->ProcessEvent ( pFnDoSubsequentImpact, &DoSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.DoImpact
// [0x00020002] 
// Parameters infos:
// struct FVector                 location                       ( CPF_Parm )
// struct FRotator                ProjectileRotation             ( CPF_Parm )

void USFXPowerCustomActionMP_Shockwave::DoImpact ( struct FVector location, struct FRotator ProjectileRotation )
{
	static UFunction* pFnDoImpact = NULL;

	if ( ! pFnDoImpact )
		pFnDoImpact = (UFunction*) UObject::GObjObjects()->Data[ 128564 ];

	USFXPowerCustomActionMP_Shockwave_execDoImpact_Parms DoImpact_Parms;
	memcpy ( &DoImpact_Parms.location, &location, 0xC );
	memcpy ( &DoImpact_Parms.ProjectileRotation, &ProjectileRotation, 0xC );

	this->ProcessEvent ( pFnDoImpact, &DoImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.OnPowerDetonated
// [0x00024000] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_Shockwave::OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor )
{
	static UFunction* pFnOnPowerDetonated = NULL;

	if ( ! pFnOnPowerDetonated )
		pFnOnPowerDetonated = (UFunction*) UObject::GObjObjects()->Data[ 128559 ];

	USFXPowerCustomActionMP_Shockwave_execOnPowerDetonated_Parms OnPowerDetonated_Parms;
	memcpy ( &OnPowerDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerDetonated_Parms.HitNormal, &HitNormal, 0xC );
	OnPowerDetonated_Parms.oProjectile = oProjectile;
	OnPowerDetonated_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnOnPowerDetonated, &OnPowerDetonated_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.ReleaseProjectilePower
// [0x00020002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXProjectile_PowerCustomAction* USFXPowerCustomActionMP_Shockwave::ReleaseProjectilePower ( )
{
	static UFunction* pFnReleaseProjectilePower = NULL;

	if ( ! pFnReleaseProjectilePower )
		pFnReleaseProjectilePower = (UFunction*) UObject::GObjObjects()->Data[ 128549 ];

	USFXPowerCustomActionMP_Shockwave_execReleaseProjectilePower_Parms ReleaseProjectilePower_Parms;

	this->ProcessEvent ( pFnReleaseProjectilePower, &ReleaseProjectilePower_Parms, NULL );

	return ReleaseProjectilePower_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_passivebase.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_humanpassive::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 129534 ];

	Usfxpowercustomactionmp_humanpassive_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_passivebase.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomactionmp_humanpassive::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 129532 ];

	Usfxpowercustomactionmp_humanpassive_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_passivebase.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void Usfxpowercustomactionmp_humanpassive::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 129525 ];

	Usfxpowercustomactionmp_humanpassive_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_passivebase.ApplyGlobalBonus
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_humanpassive::ApplyGlobalBonus ( )
{
	static UFunction* pFnApplyGlobalBonus = NULL;

	if ( ! pFnApplyGlobalBonus )
		pFnApplyGlobalBonus = (UFunction*) UObject::GObjObjects()->Data[ 129517 ];

	Usfxpowercustomactionmp_humanpassive_execApplyGlobalBonus_Parms ApplyGlobalBonus_Parms;

	this->ProcessEvent ( pFnApplyGlobalBonus, &ApplyGlobalBonus_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_passivebase.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_passivebase::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 129534 ];

	Usfxpowercustomactionmp_passivebase_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_passivebase.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomactionmp_passivebase::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 129532 ];

	Usfxpowercustomactionmp_passivebase_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_passivebase.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void Usfxpowercustomactionmp_passivebase::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 129525 ];

	Usfxpowercustomactionmp_passivebase_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_passivebase.ApplyGlobalBonus
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_passivebase::ApplyGlobalBonus ( )
{
	static UFunction* pFnApplyGlobalBonus = NULL;

	if ( ! pFnApplyGlobalBonus )
		pFnApplyGlobalBonus = (UFunction*) UObject::GObjObjects()->Data[ 129517 ];

	Usfxpowercustomactionmp_passivebase_execApplyGlobalBonus_Parms ApplyGlobalBonus_Parms;

	this->ProcessEvent ( pFnApplyGlobalBonus, &ApplyGlobalBonus_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_HumanMeleePassive_Adept::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 129504 ];

	USFXPowerCustomActionMP_HumanMeleePassive_Adept_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_HumanMeleePassive_Adept::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 129500 ];

	USFXPowerCustomActionMP_HumanMeleePassive_Adept_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_HumanMeleePassive_Adept::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 129498 ];

	USFXPowerCustomActionMP_HumanMeleePassive_Adept_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void USFXPowerCustomActionMP_HumanMeleePassive_Adept::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 129492 ];

	USFXPowerCustomActionMP_HumanMeleePassive_Adept_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.ApplyGlobalBonus
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_HumanMeleePassive_Adept::ApplyGlobalBonus ( )
{
	static UFunction* pFnApplyGlobalBonus = NULL;

	if ( ! pFnApplyGlobalBonus )
		pFnApplyGlobalBonus = (UFunction*) UObject::GObjObjects()->Data[ 129488 ];

	USFXPowerCustomActionMP_HumanMeleePassive_Adept_execApplyGlobalBonus_Parms ApplyGlobalBonus_Parms;

	this->ProcessEvent ( pFnApplyGlobalBonus, &ApplyGlobalBonus_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_HumanMeleePassiveBase::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 129504 ];

	USFXPowerCustomActionMP_HumanMeleePassiveBase_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_HumanMeleePassiveBase::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 129500 ];

	USFXPowerCustomActionMP_HumanMeleePassiveBase_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_HumanMeleePassiveBase::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 129498 ];

	USFXPowerCustomActionMP_HumanMeleePassiveBase_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void USFXPowerCustomActionMP_HumanMeleePassiveBase::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 129492 ];

	USFXPowerCustomActionMP_HumanMeleePassiveBase_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.ApplyGlobalBonus
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_HumanMeleePassiveBase::ApplyGlobalBonus ( )
{
	static UFunction* pFnApplyGlobalBonus = NULL;

	if ( ! pFnApplyGlobalBonus )
		pFnApplyGlobalBonus = (UFunction*) UObject::GObjObjects()->Data[ 129488 ];

	USFXPowerCustomActionMP_HumanMeleePassiveBase_execApplyGlobalBonus_Parms ApplyGlobalBonus_Parms;

	this->ProcessEvent ( pFnApplyGlobalBonus, &ApplyGlobalBonus_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_MeleePassiveBase::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 129504 ];

	USFXPowerCustomActionMP_MeleePassiveBase_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_MeleePassiveBase::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 129500 ];

	USFXPowerCustomActionMP_MeleePassiveBase_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomActionMP_MeleePassiveBase::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 129498 ];

	USFXPowerCustomActionMP_MeleePassiveBase_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void USFXPowerCustomActionMP_MeleePassiveBase::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 129492 ];

	USFXPowerCustomActionMP_MeleePassiveBase_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamempcontent.SFXPowerCustomActionMP_MeleePassiveBase.ApplyGlobalBonus
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomActionMP_MeleePassiveBase::ApplyGlobalBonus ( )
{
	static UFunction* pFnApplyGlobalBonus = NULL;

	if ( ! pFnApplyGlobalBonus )
		pFnApplyGlobalBonus = (UFunction*) UObject::GObjObjects()->Data[ 129488 ];

	USFXPowerCustomActionMP_MeleePassiveBase_execApplyGlobalBonus_Parms ApplyGlobalBonus_Parms;

	this->ProcessEvent ( pFnApplyGlobalBonus, &ApplyGlobalBonus_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_disarm_base.SetOwningWave
// [0x00020102] 
// Parameters infos:
// class Usfxwave_operation*      NewOwner                       ( CPF_Parm )

void Asfxobjective_disarm_base::SetOwningWave ( class Usfxwave_operation* NewOwner )
{
	static UFunction* pFnSetOwningWave = NULL;

	if ( ! pFnSetOwningWave )
		pFnSetOwningWave = (UFunction*) UObject::GObjObjects()->Data[ 129349 ];

	Asfxobjective_disarm_base_execSetOwningWave_Parms SetOwningWave_Parms;
	SetOwningWave_Parms.NewOwner = NewOwner;

	this->ProcessEvent ( pFnSetOwningWave, &SetOwningWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_disarm_base.DisarmBomb
// [0x00020102] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )

void Asfxobjective_disarm_base::DisarmBomb ( class ABioPawn* oPawn )
{
	static UFunction* pFnDisarmBomb = NULL;

	if ( ! pFnDisarmBomb )
		pFnDisarmBomb = (UFunction*) UObject::GObjObjects()->Data[ 129347 ];

	Asfxobjective_disarm_base_execDisarmBomb_Parms DisarmBomb_Parms;
	DisarmBomb_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnDisarmBomb, &DisarmBomb_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_disarm_base.Used
// [0x00020002] 
// Parameters infos:
// class AActor*                  User                           ( CPF_Parm )

void Asfxobjective_disarm_base::Used ( class AActor* User )
{
	static UFunction* pFnUsed = NULL;

	if ( ! pFnUsed )
		pFnUsed = (UFunction*) UObject::GObjObjects()->Data[ 129341 ];

	Asfxobjective_disarm_base_execUsed_Parms Used_Parms;
	Used_Parms.User = User;

	this->ProcessEvent ( pFnUsed, &Used_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_disarm_base.Deactivate
// [0x00020102] 
// Parameters infos:

void Asfxobjective_disarm_base::Deactivate ( )
{
	static UFunction* pFnDeactivate = NULL;

	if ( ! pFnDeactivate )
		pFnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 129339 ];

	Asfxobjective_disarm_base_execDeactivate_Parms Deactivate_Parms;

	this->ProcessEvent ( pFnDeactivate, &Deactivate_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_disarm_base.ActivateObjective
// [0x00020102] 
// Parameters infos:

void Asfxobjective_disarm_base::ActivateObjective ( )
{
	static UFunction* pFnActivateObjective = NULL;

	if ( ! pFnActivateObjective )
		pFnActivateObjective = (UFunction*) UObject::GObjObjects()->Data[ 129337 ];

	Asfxobjective_disarm_base_execActivateObjective_Parms ActivateObjective_Parms;

	this->ProcessEvent ( pFnActivateObjective, &ActivateObjective_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_disarm_base.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxobjective_disarm_base::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 129335 ];

	Asfxobjective_disarm_base_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_disarm_base.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void Asfxobjective_disarm_base::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 129332 ];

	Asfxobjective_disarm_base_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.SetOwningWave
// [0x00020102] 
// Parameters infos:
// class Usfxwave_operation*      NewOwner                       ( CPF_Parm )

void Asfxobjective_retrieve_pickupobject::SetOwningWave ( class Usfxwave_operation* NewOwner )
{
	static UFunction* pFnSetOwningWave = NULL;

	if ( ! pFnSetOwningWave )
		pFnSetOwningWave = (UFunction*) UObject::GObjObjects()->Data[ 129444 ];

	Asfxobjective_retrieve_pickupobject_execSetOwningWave_Parms SetOwningWave_Parms;
	SetOwningWave_Parms.NewOwner = NewOwner;

	this->ProcessEvent ( pFnSetOwningWave, &SetOwningWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void Asfxobjective_retrieve_pickupobject::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 129443 ];

	Asfxobjective_retrieve_pickupobject_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.RemovePickupObject
// [0x00020102] 
// Parameters infos:

void Asfxobjective_retrieve_pickupobject::RemovePickupObject ( )
{
	static UFunction* pFnRemovePickupObject = NULL;

	if ( ! pFnRemovePickupObject )
		pFnRemovePickupObject = (UFunction*) UObject::GObjObjects()->Data[ 129438 ];

	Asfxobjective_retrieve_pickupobject_execRemovePickupObject_Parms RemovePickupObject_Parms;

	this->ProcessEvent ( pFnRemovePickupObject, &RemovePickupObject_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.ObjectDroppedOff
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void Asfxobjective_retrieve_pickupobject::ObjectDroppedOff ( )
{
	static UFunction* pFnObjectDroppedOff = NULL;

	if ( ! pFnObjectDroppedOff )
		pFnObjectDroppedOff = (UFunction*) UObject::GObjObjects()->Data[ 129380 ];

	Asfxobjective_retrieve_pickupobject_execObjectDroppedOff_Parms ObjectDroppedOff_Parms;

	this->ProcessEvent ( pFnObjectDroppedOff, &ObjectDroppedOff_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.DropObject
// [0x00020102] 
// Parameters infos:

void Asfxobjective_retrieve_pickupobject::DropObject ( )
{
	static UFunction* pFnDropObject = NULL;

	if ( ! pFnDropObject )
		pFnDropObject = (UFunction*) UObject::GObjObjects()->Data[ 129435 ];

	Asfxobjective_retrieve_pickupobject_execDropObject_Parms DropObject_Parms;

	this->ProcessEvent ( pFnDropObject, &DropObject_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.PickUpObject
// [0x00020102] 
// Parameters infos:
// class ASFXPawn_Player*         Player                         ( CPF_Parm )

void Asfxobjective_retrieve_pickupobject::PickUpObject ( class ASFXPawn_Player* Player )
{
	static UFunction* pFnPickUpObject = NULL;

	if ( ! pFnPickUpObject )
		pFnPickUpObject = (UFunction*) UObject::GObjObjects()->Data[ 129426 ];

	Asfxobjective_retrieve_pickupobject_execPickUpObject_Parms PickUpObject_Parms;
	PickUpObject_Parms.Player = Player;

	this->ProcessEvent ( pFnPickUpObject, &PickUpObject_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.PawnDowned
// [0x00020102] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void Asfxobjective_retrieve_pickupobject::PawnDowned ( class ABioPawn* Pawn )
{
	static UFunction* pFnPawnDowned = NULL;

	if ( ! pFnPawnDowned )
		pFnPawnDowned = (UFunction*) UObject::GObjObjects()->Data[ 129424 ];

	Asfxobjective_retrieve_pickupobject_execPawnDowned_Parms PawnDowned_Parms;
	PawnDowned_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnPawnDowned, &PawnDowned_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.OnPickedUp
// [0x00020102] 
// Parameters infos:
// class ASFXPawn_Player*         Player                         ( CPF_Parm )

void Asfxobjective_retrieve_pickupobject::OnPickedUp ( class ASFXPawn_Player* Player )
{
	static UFunction* pFnOnPickedUp = NULL;

	if ( ! pFnOnPickedUp )
		pFnOnPickedUp = (UFunction*) UObject::GObjObjects()->Data[ 129418 ];

	Asfxobjective_retrieve_pickupobject_execOnPickedUp_Parms OnPickedUp_Parms;
	OnPickedUp_Parms.Player = Player;

	this->ProcessEvent ( pFnOnPickedUp, &OnPickedUp_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.Used
// [0x00020002] 
// Parameters infos:
// class AActor*                  User                           ( CPF_Parm )

void Asfxobjective_retrieve_pickupobject::Used ( class AActor* User )
{
	static UFunction* pFnUsed = NULL;

	if ( ! pFnUsed )
		pFnUsed = (UFunction*) UObject::GObjObjects()->Data[ 129413 ];

	Asfxobjective_retrieve_pickupobject_execUsed_Parms Used_Parms;
	Used_Parms.User = User;

	this->ProcessEvent ( pFnUsed, &Used_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.Deactivate
// [0x00020102] 
// Parameters infos:

void Asfxobjective_retrieve_pickupobject::Deactivate ( )
{
	static UFunction* pFnDeactivate = NULL;

	if ( ! pFnDeactivate )
		pFnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 129411 ];

	Asfxobjective_retrieve_pickupobject_execDeactivate_Parms Deactivate_Parms;

	this->ProcessEvent ( pFnDeactivate, &Deactivate_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.ActivateObjective
// [0x00020102] 
// Parameters infos:

void Asfxobjective_retrieve_pickupobject::ActivateObjective ( )
{
	static UFunction* pFnActivateObjective = NULL;

	if ( ! pFnActivateObjective )
		pFnActivateObjective = (UFunction*) UObject::GObjObjects()->Data[ 129409 ];

	Asfxobjective_retrieve_pickupobject_execActivateObjective_Parms ActivateObjective_Parms;

	this->ProcessEvent ( pFnActivateObjective, &ActivateObjective_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.SetObjectiveData
// [0x00020002] 
// Parameters infos:
// class USFXOperation_ObjectiveData* ObjData                        ( CPF_Parm )

void Asfxobjective_retrieve_pickupobject::SetObjectiveData ( class USFXOperation_ObjectiveData* ObjData )
{
	static UFunction* pFnSetObjectiveData = NULL;

	if ( ! pFnSetObjectiveData )
		pFnSetObjectiveData = (UFunction*) UObject::GObjObjects()->Data[ 129407 ];

	Asfxobjective_retrieve_pickupobject_execSetObjectiveData_Parms SetObjectiveData_Parms;
	SetObjectiveData_Parms.ObjData = ObjData;

	this->ProcessEvent ( pFnSetObjectiveData, &SetObjectiveData_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxobjective_retrieve_pickupobject::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 129405 ];

	Asfxobjective_retrieve_pickupobject_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.ClientPickupObjectEvent
// [0x00020102] 
// Parameters infos:

void Asfxobjective_retrieve_pickupobject::ClientPickupObjectEvent ( )
{
	static UFunction* pFnClientPickupObjectEvent = NULL;

	if ( ! pFnClientPickupObjectEvent )
		pFnClientPickupObjectEvent = (UFunction*) UObject::GObjObjects()->Data[ 129403 ];

	Asfxobjective_retrieve_pickupobject_execClientPickupObjectEvent_Parms ClientPickupObjectEvent_Parms;

	this->ProcessEvent ( pFnClientPickupObjectEvent, &ClientPickupObjectEvent_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.ReplicatePickupObjectEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  EPOEvent                       ( CPF_Parm )
// class ASFXPawn_Player*         PickupPawn                     ( CPF_Parm )

void Asfxobjective_retrieve_pickupobject::ReplicatePickupObjectEvent ( unsigned char EPOEvent, class ASFXPawn_Player* PickupPawn )
{
	static UFunction* pFnReplicatePickupObjectEvent = NULL;

	if ( ! pFnReplicatePickupObjectEvent )
		pFnReplicatePickupObjectEvent = (UFunction*) UObject::GObjObjects()->Data[ 129399 ];

	Asfxobjective_retrieve_pickupobject_execReplicatePickupObjectEvent_Parms ReplicatePickupObjectEvent_Parms;
	ReplicatePickupObjectEvent_Parms.EPOEvent = EPOEvent;
	ReplicatePickupObjectEvent_Parms.PickupPawn = PickupPawn;

	this->ProcessEvent ( pFnReplicatePickupObjectEvent, &ReplicatePickupObjectEvent_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_pickupobject.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void Asfxobjective_retrieve_pickupobject::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 129396 ];

	Asfxobjective_retrieve_pickupobject_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.OnUpdate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_MatchConsumable_AmmoPower::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 129258 ];

	USFXGameEffect_MatchConsumable_AmmoPower_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.GetDamageVocProbabilityMod
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXGameEffect_MatchConsumable_AmmoPower::GetDamageVocProbabilityMod ( )
{
	static UFunction* pFnGetDamageVocProbabilityMod = NULL;

	if ( ! pFnGetDamageVocProbabilityMod )
		pFnGetDamageVocProbabilityMod = (UFunction*) UObject::GObjObjects()->Data[ 129255 ];

	USFXGameEffect_MatchConsumable_AmmoPower_execGetDamageVocProbabilityMod_Parms GetDamageVocProbabilityMod_Parms;

	this->ProcessEvent ( pFnGetDamageVocProbabilityMod, &GetDamageVocProbabilityMod_Parms, NULL );

	return GetDamageVocProbabilityMod_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.OnWeaponUnequip
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void USFXGameEffect_MatchConsumable_AmmoPower::OnWeaponUnequip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponUnequip = NULL;

	if ( ! pFnOnWeaponUnequip )
		pFnOnWeaponUnequip = (UFunction*) UObject::GObjObjects()->Data[ 129253 ];

	USFXGameEffect_MatchConsumable_AmmoPower_execOnWeaponUnequip_Parms OnWeaponUnequip_Parms;
	OnWeaponUnequip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponUnequip, &OnWeaponUnequip_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.OnWeaponEquip
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void USFXGameEffect_MatchConsumable_AmmoPower::OnWeaponEquip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponEquip = NULL;

	if ( ! pFnOnWeaponEquip )
		pFnOnWeaponEquip = (UFunction*) UObject::GObjObjects()->Data[ 129251 ];

	USFXGameEffect_MatchConsumable_AmmoPower_execOnWeaponEquip_Parms OnWeaponEquip_Parms;
	OnWeaponEquip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponEquip, &OnWeaponEquip_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.OnWeaponReload
// [0x00020000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void USFXGameEffect_MatchConsumable_AmmoPower::OnWeaponReload ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponReload = NULL;

	if ( ! pFnOnWeaponReload )
		pFnOnWeaponReload = (UFunction*) UObject::GObjObjects()->Data[ 129249 ];

	USFXGameEffect_MatchConsumable_AmmoPower_execOnWeaponReload_Parms OnWeaponReload_Parms;
	OnWeaponReload_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponReload, &OnWeaponReload_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.OnWeaponImpact
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void USFXGameEffect_MatchConsumable_AmmoPower::OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact )
{
	static UFunction* pFnOnWeaponImpact = NULL;

	if ( ! pFnOnWeaponImpact )
		pFnOnWeaponImpact = (UFunction*) UObject::GObjObjects()->Data[ 129245 ];

	USFXGameEffect_MatchConsumable_AmmoPower_execOnWeaponImpact_Parms OnWeaponImpact_Parms;
	OnWeaponImpact_Parms.Weapon = Weapon;
	memcpy ( &OnWeaponImpact_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnOnWeaponImpact, &OnWeaponImpact_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.GetHitTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

class AActor* USFXGameEffect_MatchConsumable_AmmoPower::GetHitTarget ( struct FImpactInfo Impact )
{
	static UFunction* pFnGetHitTarget = NULL;

	if ( ! pFnGetHitTarget )
		pFnGetHitTarget = (UFunction*) UObject::GObjObjects()->Data[ 129241 ];

	USFXGameEffect_MatchConsumable_AmmoPower_execGetHitTarget_Parms GetHitTarget_Parms;
	memcpy ( &GetHitTarget_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnGetHitTarget, &GetHitTarget_Parms, NULL );

	return GetHitTarget_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.GetBulletsPerSecond
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

float USFXGameEffect_MatchConsumable_AmmoPower::GetBulletsPerSecond ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnGetBulletsPerSecond = NULL;

	if ( ! pFnGetBulletsPerSecond )
		pFnGetBulletsPerSecond = (UFunction*) UObject::GObjObjects()->Data[ 129236 ];

	USFXGameEffect_MatchConsumable_AmmoPower_execGetBulletsPerSecond_Parms GetBulletsPerSecond_Parms;
	GetBulletsPerSecond_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnGetBulletsPerSecond, &GetBulletsPerSecond_Parms, NULL );

	return GetBulletsPerSecond_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.GetWeaponDamage
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

float USFXGameEffect_MatchConsumable_AmmoPower::GetWeaponDamage ( class ASFXWeapon* Weapon, struct FImpactInfo Impact )
{
	static UFunction* pFnGetWeaponDamage = NULL;

	if ( ! pFnGetWeaponDamage )
		pFnGetWeaponDamage = (UFunction*) UObject::GObjObjects()->Data[ 129231 ];

	USFXGameEffect_MatchConsumable_AmmoPower_execGetWeaponDamage_Parms GetWeaponDamage_Parms;
	GetWeaponDamage_Parms.Weapon = Weapon;
	memcpy ( &GetWeaponDamage_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnGetWeaponDamage, &GetWeaponDamage_Parms, NULL );

	return GetWeaponDamage_Parms.ReturnValue;
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.RemoveFromWeapon
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void USFXGameEffect_MatchConsumable_AmmoPower::RemoveFromWeapon ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnRemoveFromWeapon = NULL;

	if ( ! pFnRemoveFromWeapon )
		pFnRemoveFromWeapon = (UFunction*) UObject::GObjObjects()->Data[ 129229 ];

	USFXGameEffect_MatchConsumable_AmmoPower_execRemoveFromWeapon_Parms RemoveFromWeapon_Parms;
	RemoveFromWeapon_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnRemoveFromWeapon, &RemoveFromWeapon_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.ApplyToWeapon
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void USFXGameEffect_MatchConsumable_AmmoPower::ApplyToWeapon ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnApplyToWeapon = NULL;

	if ( ! pFnApplyToWeapon )
		pFnApplyToWeapon = (UFunction*) UObject::GObjObjects()->Data[ 129224 ];

	USFXGameEffect_MatchConsumable_AmmoPower_execApplyToWeapon_Parms ApplyToWeapon_Parms;
	ApplyToWeapon_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnApplyToWeapon, &ApplyToWeapon_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_MatchConsumable_AmmoPower::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 129221 ];

	USFXGameEffect_MatchConsumable_AmmoPower_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.SetupFromWeapon
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_MatchConsumable_AmmoPower::SetupFromWeapon ( )
{
	static UFunction* pFnSetupFromWeapon = NULL;

	if ( ! pFnSetupFromWeapon )
		pFnSetupFromWeapon = (UFunction*) UObject::GObjObjects()->Data[ 129218 ];

	USFXGameEffect_MatchConsumable_AmmoPower_execSetupFromWeapon_Parms SetupFromWeapon_Parms;

	this->ProcessEvent ( pFnSetupFromWeapon, &SetupFromWeapon_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_MatchConsumable_AmmoPower::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 129214 ];

	USFXGameEffect_MatchConsumable_AmmoPower_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower_Cryo.DoFreezeEffect
// [0x00824002] 
// Parameters infos:
// class ABioPawn*                oHitPawn                       ( CPF_Parm )
// float                          fDelay                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )
// unsigned char                  ForcedResistance               ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_MatchConsumable_AmmoPower_Cryo::DoFreezeEffect ( class ABioPawn* oHitPawn, float fDelay, struct FVector HitLocation, struct FVector HitNormal, unsigned long bForced, unsigned char ForcedResistance )
{
	static UFunction* pFnDoFreezeEffect = NULL;

	if ( ! pFnDoFreezeEffect )
		pFnDoFreezeEffect = (UFunction*) UObject::GObjObjects()->Data[ 129281 ];

	USFXGameEffect_MatchConsumable_AmmoPower_Cryo_execDoFreezeEffect_Parms DoFreezeEffect_Parms;
	DoFreezeEffect_Parms.oHitPawn = oHitPawn;
	DoFreezeEffect_Parms.fDelay = fDelay;
	memcpy ( &DoFreezeEffect_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoFreezeEffect_Parms.HitNormal, &HitNormal, 0xC );
	DoFreezeEffect_Parms.bForced = bForced;
	DoFreezeEffect_Parms.ForcedResistance = ForcedResistance;

	this->ProcessEvent ( pFnDoFreezeEffect, &DoFreezeEffect_Parms, NULL );
};

// Function sfxgamempcontent.SFXGameEffect_MatchConsumable_AmmoPower_Cryo.OnWeaponImpact
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void USFXGameEffect_MatchConsumable_AmmoPower_Cryo::OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact )
{
	static UFunction* pFnOnWeaponImpact = NULL;

	if ( ! pFnOnWeaponImpact )
		pFnOnWeaponImpact = (UFunction*) UObject::GObjObjects()->Data[ 129273 ];

	USFXGameEffect_MatchConsumable_AmmoPower_Cryo_execOnWeaponImpact_Parms OnWeaponImpact_Parms;
	OnWeaponImpact_Parms.Weapon = Weapon;
	memcpy ( &OnWeaponImpact_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnOnWeaponImpact, &OnWeaponImpact_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameeffect_matchconsumable_ammopower_disruptor.StunEnemy
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )

void Usfxgameeffect_matchconsumable_ammopower_disruptor::StunEnemy ( class ABioPawn* oPawn )
{
	static UFunction* pFnStunEnemy = NULL;

	if ( ! pFnStunEnemy )
		pFnStunEnemy = (UFunction*) UObject::GObjObjects()->Data[ 129325 ];

	Usfxgameeffect_matchconsumable_ammopower_disruptor_execStunEnemy_Parms StunEnemy_Parms;
	StunEnemy_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnStunEnemy, &StunEnemy_Parms, NULL );
};

// Function sfxgamempcontent.sfxgameeffect_matchconsumable_ammopower_disruptor.OnWeaponImpact
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void Usfxgameeffect_matchconsumable_ammopower_disruptor::OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact )
{
	static UFunction* pFnOnWeaponImpact = NULL;

	if ( ! pFnOnWeaponImpact )
		pFnOnWeaponImpact = (UFunction*) UObject::GObjObjects()->Data[ 129306 ];

	Usfxgameeffect_matchconsumable_ammopower_disruptor_execOnWeaponImpact_Parms OnWeaponImpact_Parms;
	OnWeaponImpact_Parms.Weapon = Weapon;
	memcpy ( &OnWeaponImpact_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnOnWeaponImpact, &OnWeaponImpact_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_dropofflocation.SetOwningWave
// [0x00020102] 
// Parameters infos:
// class Usfxwave_operation*      NewOwner                       ( CPF_Parm )

void Asfxobjective_retrieve_dropofflocation::SetOwningWave ( class Usfxwave_operation* NewOwner )
{
	static UFunction* pFnSetOwningWave = NULL;

	if ( ! pFnSetOwningWave )
		pFnSetOwningWave = (UFunction*) UObject::GObjObjects()->Data[ 129381 ];

	Asfxobjective_retrieve_dropofflocation_execSetOwningWave_Parms SetOwningWave_Parms;
	SetOwningWave_Parms.NewOwner = NewOwner;

	this->ProcessEvent ( pFnSetOwningWave, &SetOwningWave_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_dropofflocation.ObjectDroppedOff
// [0x00020102] 
// Parameters infos:
// class Asfxobjective_retrieve_pickupobject* PickUpObject                   ( CPF_Parm )

void Asfxobjective_retrieve_dropofflocation::ObjectDroppedOff ( class Asfxobjective_retrieve_pickupobject* PickUpObject )
{
	static UFunction* pFnObjectDroppedOff = NULL;

	if ( ! pFnObjectDroppedOff )
		pFnObjectDroppedOff = (UFunction*) UObject::GObjObjects()->Data[ 129378 ];

	Asfxobjective_retrieve_dropofflocation_execObjectDroppedOff_Parms ObjectDroppedOff_Parms;
	ObjectDroppedOff_Parms.PickUpObject = PickUpObject;

	this->ProcessEvent ( pFnObjectDroppedOff, &ObjectDroppedOff_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_dropofflocation.ObjectPickedUp
// [0x00020002] 
// Parameters infos:
// class ASFXPawn_Player*         Player                         ( CPF_Parm )

void Asfxobjective_retrieve_dropofflocation::ObjectPickedUp ( class ASFXPawn_Player* Player )
{
	static UFunction* pFnObjectPickedUp = NULL;

	if ( ! pFnObjectPickedUp )
		pFnObjectPickedUp = (UFunction*) UObject::GObjObjects()->Data[ 129374 ];

	Asfxobjective_retrieve_dropofflocation_execObjectPickedUp_Parms ObjectPickedUp_Parms;
	ObjectPickedUp_Parms.Player = Player;

	this->ProcessEvent ( pFnObjectPickedUp, &ObjectPickedUp_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_dropofflocation.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void Asfxobjective_retrieve_dropofflocation::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 129365 ];

	Asfxobjective_retrieve_dropofflocation_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_dropofflocation.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void Asfxobjective_retrieve_dropofflocation::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 129364 ];

	Asfxobjective_retrieve_dropofflocation_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function sfxgamempcontent.sfxobjective_retrieve_dropofflocation.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxobjective_retrieve_dropofflocation::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 129357 ];

	Asfxobjective_retrieve_dropofflocation_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.HealthFailsafe
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::HealthFailsafe ( )
{
	static UFunction* pFnHealthFailsafe = NULL;

	if ( ! pFnHealthFailsafe )
		pFnHealthFailsafe = (UFunction*) UObject::GObjObjects()->Data[ 112047 ];

	ASFXPawn_PlayerMP_Adept_execHealthFailsafe_Parms HealthFailsafe_Parms;

	this->ProcessEvent ( pFnHealthFailsafe, &HealthFailsafe_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.RagdollFailsafe
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::RagdollFailsafe ( )
{
	static UFunction* pFnRagdollFailsafe = NULL;

	if ( ! pFnRagdollFailsafe )
		pFnRagdollFailsafe = (UFunction*) UObject::GObjObjects()->Data[ 112045 ];

	ASFXPawn_PlayerMP_Adept_execRagdollFailsafe_Parms RagdollFailsafe_Parms;

	this->ProcessEvent ( pFnRagdollFailsafe, &RagdollFailsafe_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ResetSyncMovementFailsafeInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::ResetSyncMovementFailsafeInfo ( )
{
	static UFunction* pFnResetSyncMovementFailsafeInfo = NULL;

	if ( ! pFnResetSyncMovementFailsafeInfo )
		pFnResetSyncMovementFailsafeInfo = (UFunction*) UObject::GObjObjects()->Data[ 112046 ];

	ASFXPawn_PlayerMP_Adept_execResetSyncMovementFailsafeInfo_Parms ResetSyncMovementFailsafeInfo_Parms;

	this->ProcessEvent ( pFnResetSyncMovementFailsafeInfo, &ResetSyncMovementFailsafeInfo_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ProcessSyncMovementFailsafe
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::ProcessSyncMovementFailsafe ( )
{
	static UFunction* pFnProcessSyncMovementFailsafe = NULL;

	if ( ! pFnProcessSyncMovementFailsafe )
		pFnProcessSyncMovementFailsafe = (UFunction*) UObject::GObjObjects()->Data[ 112059 ];

	ASFXPawn_PlayerMP_Adept_execProcessSyncMovementFailsafe_Parms ProcessSyncMovementFailsafe_Parms;

	this->ProcessEvent ( pFnProcessSyncMovementFailsafe, &ProcessSyncMovementFailsafe_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXPawn_PlayerMP_Adept::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 112060 ];

	ASFXPawn_PlayerMP_Adept_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CanDoCustomAction
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            CAction                        ( CPF_Parm )
// class APawn*                   Sync                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )
// int                            PowerCustomAction              ( CPF_OptionalParm | CPF_Parm )

bool ASFXPawn_PlayerMP_Adept::eventCanDoCustomAction ( int CAction, class APawn* Sync, unsigned long bForced, int PowerCustomAction )
{
	static UFunction* pFnCanDoCustomAction = NULL;

	if ( ! pFnCanDoCustomAction )
		pFnCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 112039 ];

	ASFXPawn_PlayerMP_Adept_eventCanDoCustomAction_Parms CanDoCustomAction_Parms;
	CanDoCustomAction_Parms.CAction = CAction;
	CanDoCustomAction_Parms.Sync = Sync;
	CanDoCustomAction_Parms.bForced = bForced;
	CanDoCustomAction_Parms.PowerCustomAction = PowerCustomAction;

	this->ProcessEvent ( pFnCanDoCustomAction, &CanDoCustomAction_Parms, NULL );

	return CanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.ShouldShowHUDGrenadeCounter
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXPawn_PlayerMP_Adept::ShouldShowHUDGrenadeCounter ( )
{
	static UFunction* pFnShouldShowHUDGrenadeCounter = NULL;

	if ( ! pFnShouldShowHUDGrenadeCounter )
		pFnShouldShowHUDGrenadeCounter = (UFunction*) UObject::GObjObjects()->Data[ 112037 ];

	ASFXPawn_PlayerMP_Adept_execShouldShowHUDGrenadeCounter_Parms ShouldShowHUDGrenadeCounter_Parms;

	this->ProcessEvent ( pFnShouldShowHUDGrenadeCounter, &ShouldShowHUDGrenadeCounter_Parms, NULL );

	return ShouldShowHUDGrenadeCounter_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.UpdateGameEffects
// [0x00020100] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::UpdateGameEffects ( )
{
	static UFunction* pFnUpdateGameEffects = NULL;

	if ( ! pFnUpdateGameEffects )
		pFnUpdateGameEffects = (UFunction*) UObject::GObjObjects()->Data[ 112036 ];

	ASFXPawn_PlayerMP_Adept_execUpdateGameEffects_Parms UpdateGameEffects_Parms;

	this->ProcessEvent ( pFnUpdateGameEffects, &UpdateGameEffects_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.GetUIAppearanceTag
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName ASFXPawn_PlayerMP_Adept::GetUIAppearanceTag ( )
{
	static UFunction* pFnGetUIAppearanceTag = NULL;

	if ( ! pFnGetUIAppearanceTag )
		pFnGetUIAppearanceTag = (UFunction*) UObject::GObjObjects()->Data[ 112034 ];

	ASFXPawn_PlayerMP_Adept_execGetUIAppearanceTag_Parms GetUIAppearanceTag_Parms;

	this->ProcessEvent ( pFnGetUIAppearanceTag, &GetUIAppearanceTag_Parms, NULL );

	return GetUIAppearanceTag_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.Destroyed
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 112027 ];

	ASFXPawn_PlayerMP_Adept_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXPawn_PlayerMP_Adept::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 112020 ];

	ASFXPawn_PlayerMP_Adept_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.SetExecutioner
// [0x00020002] 
// Parameters infos:
// class APawn*                   Killer                         ( CPF_Parm )

void ASFXPawn_PlayerMP_Adept::SetExecutioner ( class APawn* Killer )
{
	static UFunction* pFnSetExecutioner = NULL;

	if ( ! pFnSetExecutioner )
		pFnSetExecutioner = (UFunction*) UObject::GObjObjects()->Data[ 112018 ];

	ASFXPawn_PlayerMP_Adept_execSetExecutioner_Parms SetExecutioner_Parms;
	SetExecutioner_Parms.Killer = Killer;

	this->ProcessEvent ( pFnSetExecutioner, &SetExecutioner_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.AttemptKillingBlow
// [0x00020002] 
// Parameters infos:
// class APawn*                   Killer                         ( CPF_Parm )

void ASFXPawn_PlayerMP_Adept::AttemptKillingBlow ( class APawn* Killer )
{
	static UFunction* pFnAttemptKillingBlow = NULL;

	if ( ! pFnAttemptKillingBlow )
		pFnAttemptKillingBlow = (UFunction*) UObject::GObjObjects()->Data[ 112015 ];

	ASFXPawn_PlayerMP_Adept_execAttemptKillingBlow_Parms AttemptKillingBlow_Parms;
	AttemptKillingBlow_Parms.Killer = Killer;

	this->ProcessEvent ( pFnAttemptKillingBlow, &AttemptKillingBlow_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.UpdateMappedPowerDisplay
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::UpdateMappedPowerDisplay ( )
{
	static UFunction* pFnUpdateMappedPowerDisplay = NULL;

	if ( ! pFnUpdateMappedPowerDisplay )
		pFnUpdateMappedPowerDisplay = (UFunction*) UObject::GObjObjects()->Data[ 112011 ];

	ASFXPawn_PlayerMP_Adept_execUpdateMappedPowerDisplay_Parms UpdateMappedPowerDisplay_Parms;

	this->ProcessEvent ( pFnUpdateMappedPowerDisplay, &UpdateMappedPowerDisplay_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CanPlayDeathEffect
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXPawn_PlayerMP_Adept::CanPlayDeathEffect ( )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 112009 ];

	ASFXPawn_PlayerMP_Adept_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.UseReviveConsumablePower
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::UseReviveConsumablePower ( )
{
	static UFunction* pFnUseReviveConsumablePower = NULL;

	if ( ! pFnUseReviveConsumablePower )
		pFnUseReviveConsumablePower = (UFunction*) UObject::GObjObjects()->Data[ 112006 ];

	ASFXPawn_PlayerMP_Adept_execUseReviveConsumablePower_Parms UseReviveConsumablePower_Parms;

	this->ProcessEvent ( pFnUseReviveConsumablePower, &UseReviveConsumablePower_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.AutoMapPC
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::AutoMapPC ( )
{
	static UFunction* pFnAutoMapPC = NULL;

	if ( ! pFnAutoMapPC )
		pFnAutoMapPC = (UFunction*) UObject::GObjObjects()->Data[ 111997 ];

	ASFXPawn_PlayerMP_Adept_execAutoMapPC_Parms AutoMapPC_Parms;

	this->ProcessEvent ( pFnAutoMapPC, &AutoMapPC_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.AutoMapXbox
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::AutoMapXbox ( )
{
	static UFunction* pFnAutoMapXbox = NULL;

	if ( ! pFnAutoMapXbox )
		pFnAutoMapXbox = (UFunction*) UObject::GObjObjects()->Data[ 111995 ];

	ASFXPawn_PlayerMP_Adept_execAutoMapXbox_Parms AutoMapXbox_Parms;

	this->ProcessEvent ( pFnAutoMapXbox, &AutoMapXbox_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ShouldTossWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              ChkWeapon                      ( CPF_Parm )
// class ASFXWeapon*              NewWeapon                      ( CPF_Parm )

bool ASFXPawn_PlayerMP_Adept::ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon )
{
	static UFunction* pFnShouldTossWeapon = NULL;

	if ( ! pFnShouldTossWeapon )
		pFnShouldTossWeapon = (UFunction*) UObject::GObjObjects()->Data[ 111991 ];

	ASFXPawn_PlayerMP_Adept_execShouldTossWeapon_Parms ShouldTossWeapon_Parms;
	ShouldTossWeapon_Parms.ChkWeapon = ChkWeapon;
	ShouldTossWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnShouldTossWeapon, &ShouldTossWeapon_Parms, NULL );

	return ShouldTossWeapon_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.InCombat
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXPawn_PlayerMP_Adept::InCombat ( )
{
	static UFunction* pFnInCombat = NULL;

	if ( ! pFnInCombat )
		pFnInCombat = (UFunction*) UObject::GObjObjects()->Data[ 111989 ];

	ASFXPawn_PlayerMP_Adept_execInCombat_Parms InCombat_Parms;

	this->ProcessEvent ( pFnInCombat, &InCombat_Parms, NULL );

	return InCombat_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool ASFXPawn_PlayerMP_Adept::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 111983 ];

	ASFXPawn_PlayerMP_Adept_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ASFXPawn_PlayerMP_Adept::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 111980 ];

	ASFXPawn_PlayerMP_Adept_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.LoadWeaponModData
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::LoadWeaponModData ( )
{
	static UFunction* pFnLoadWeaponModData = NULL;

	if ( ! pFnLoadWeaponModData )
		pFnLoadWeaponModData = (UFunction*) UObject::GObjObjects()->Data[ 111970 ];

	ASFXPawn_PlayerMP_Adept_execLoadWeaponModData_Parms LoadWeaponModData_Parms;

	this->ProcessEvent ( pFnLoadWeaponModData, &LoadWeaponModData_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.LoadPowerData
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::LoadPowerData ( )
{
	static UFunction* pFnLoadPowerData = NULL;

	if ( ! pFnLoadPowerData )
		pFnLoadPowerData = (UFunction*) UObject::GObjObjects()->Data[ 111955 ];

	ASFXPawn_PlayerMP_Adept_execLoadPowerData_Parms LoadPowerData_Parms;

	this->ProcessEvent ( pFnLoadPowerData, &LoadPowerData_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.IsTestFrameworkSetupComplete
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXPawn_PlayerMP_Adept::IsTestFrameworkSetupComplete ( )
{
	static UFunction* pFnIsTestFrameworkSetupComplete = NULL;

	if ( ! pFnIsTestFrameworkSetupComplete )
		pFnIsTestFrameworkSetupComplete = (UFunction*) UObject::GObjObjects()->Data[ 111953 ];

	ASFXPawn_PlayerMP_Adept_execIsTestFrameworkSetupComplete_Parms IsTestFrameworkSetupComplete_Parms;

	this->ProcessEvent ( pFnIsTestFrameworkSetupComplete, &IsTestFrameworkSetupComplete_Parms, NULL );

	return IsTestFrameworkSetupComplete_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.LoadWeapons
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::LoadWeapons ( )
{
	static UFunction* pFnLoadWeapons = NULL;

	if ( ! pFnLoadWeapons )
		pFnLoadWeapons = (UFunction*) UObject::GObjObjects()->Data[ 111945 ];

	ASFXPawn_PlayerMP_Adept_execLoadWeapons_Parms LoadWeapons_Parms;

	this->ProcessEvent ( pFnLoadWeapons, &LoadWeapons_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CreateWeapons
// [0x00024002] 
// Parameters infos:
// class USFXLoadoutData*         ChkLoadout                     ( CPF_Parm )
// unsigned long                  bForceFromEngineLoadout        ( CPF_OptionalParm | CPF_Parm )

void ASFXPawn_PlayerMP_Adept::CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout )
{
	static UFunction* pFnCreateWeapons = NULL;

	if ( ! pFnCreateWeapons )
		pFnCreateWeapons = (UFunction*) UObject::GObjObjects()->Data[ 111942 ];

	ASFXPawn_PlayerMP_Adept_execCreateWeapons_Parms CreateWeapons_Parms;
	CreateWeapons_Parms.ChkLoadout = ChkLoadout;
	CreateWeapons_Parms.bForceFromEngineLoadout = bForceFromEngineLoadout;

	this->ProcessEvent ( pFnCreateWeapons, &CreateWeapons_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.GetFullName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXPawn_PlayerMP_Adept::GetFullName ( )
{
	static UFunction* pFnGetFullName = NULL;

	if ( ! pFnGetFullName )
		pFnGetFullName = (UFunction*) UObject::GObjObjects()->Data[ 111940 ];

	ASFXPawn_PlayerMP_Adept_execGetFullName_Parms GetFullName_Parms;

	this->ProcessEvent ( pFnGetFullName, &GetFullName_Parms, NULL );

	return GetFullName_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.DeferredSetRichPresence
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::DeferredSetRichPresence ( )
{
	static UFunction* pFnDeferredSetRichPresence = NULL;

	if ( ! pFnDeferredSetRichPresence )
		pFnDeferredSetRichPresence = (UFunction*) UObject::GObjObjects()->Data[ 111939 ];

	ASFXPawn_PlayerMP_Adept_execDeferredSetRichPresence_Parms DeferredSetRichPresence_Parms;

	this->ProcessEvent ( pFnDeferredSetRichPresence, &DeferredSetRichPresence_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.StopLoadingMovie
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::StopLoadingMovie ( )
{
	static UFunction* pFnStopLoadingMovie = NULL;

	if ( ! pFnStopLoadingMovie )
		pFnStopLoadingMovie = (UFunction*) UObject::GObjObjects()->Data[ 111937 ];

	ASFXPawn_PlayerMP_Adept_execStopLoadingMovie_Parms StopLoadingMovie_Parms;

	this->ProcessEvent ( pFnStopLoadingMovie, &StopLoadingMovie_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.DeferredPostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::DeferredPostBeginPlay ( )
{
	static UFunction* pFnDeferredPostBeginPlay = NULL;

	if ( ! pFnDeferredPostBeginPlay )
		pFnDeferredPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 111904 ];

	ASFXPawn_PlayerMP_Adept_execDeferredPostBeginPlay_Parms DeferredPostBeginPlay_Parms;

	this->ProcessEvent ( pFnDeferredPostBeginPlay, &DeferredPostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 111902 ];

	ASFXPawn_PlayerMP_Adept_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ServerPermaDeath
// [0x002200C2] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::ServerPermaDeath ( )
{
	static UFunction* pFnServerPermaDeath = NULL;

	if ( ! pFnServerPermaDeath )
		pFnServerPermaDeath = (UFunction*) UObject::GObjObjects()->Data[ 111899 ];

	ASFXPawn_PlayerMP_Adept_execServerPermaDeath_Parms ServerPermaDeath_Parms;

	this->ProcessEvent ( pFnServerPermaDeath, &ServerPermaDeath_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PermaDeath
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::PermaDeath ( )
{
	static UFunction* pFnPermaDeath = NULL;

	if ( ! pFnPermaDeath )
		pFnPermaDeath = (UFunction*) UObject::GObjObjects()->Data[ 111897 ];

	ASFXPawn_PlayerMP_Adept_execPermaDeath_Parms PermaDeath_Parms;

	this->ProcessEvent ( pFnPermaDeath, &PermaDeath_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.StartSpectatorCam
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::StartSpectatorCam ( )
{
	static UFunction* pFnStartSpectatorCam = NULL;

	if ( ! pFnStartSpectatorCam )
		pFnStartSpectatorCam = (UFunction*) UObject::GObjObjects()->Data[ 111895 ];

	ASFXPawn_PlayerMP_Adept_execStartSpectatorCam_Parms StartSpectatorCam_Parms;

	this->ProcessEvent ( pFnStartSpectatorCam, &StartSpectatorCam_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PermaDeadChanged
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::PermaDeadChanged ( )
{
	static UFunction* pFnPermaDeadChanged = NULL;

	if ( ! pFnPermaDeadChanged )
		pFnPermaDeadChanged = (UFunction*) UObject::GObjObjects()->Data[ 111891 ];

	ASFXPawn_PlayerMP_Adept_execPermaDeadChanged_Parms PermaDeadChanged_Parms;

	this->ProcessEvent ( pFnPermaDeadChanged, &PermaDeadChanged_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.Resurrect
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          PercentOfHealthRegained        ( CPF_Parm )
// unsigned long                  bIsInstantaneous               ( CPF_Parm )

bool ASFXPawn_PlayerMP_Adept::eventResurrect ( float PercentOfHealthRegained, unsigned long bIsInstantaneous )
{
	static UFunction* pFnResurrect = NULL;

	if ( ! pFnResurrect )
		pFnResurrect = (UFunction*) UObject::GObjObjects()->Data[ 111887 ];

	ASFXPawn_PlayerMP_Adept_eventResurrect_Parms Resurrect_Parms;
	Resurrect_Parms.PercentOfHealthRegained = PercentOfHealthRegained;
	Resurrect_Parms.bIsInstantaneous = bIsInstantaneous;

	this->ProcessEvent ( pFnResurrect, &Resurrect_Parms, NULL );

	return Resurrect_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.PreClientTravel
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::PreClientTravel ( )
{
	static UFunction* pFnPreClientTravel = NULL;

	if ( ! pFnPreClientTravel )
		pFnPreClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 111884 ];

	ASFXPawn_PlayerMP_Adept_execPreClientTravel_Parms PreClientTravel_Parms;

	this->ProcessEvent ( pFnPreClientTravel, &PreClientTravel_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.IsReadyForExecution
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class Asfxpawn*                Killer                         ( CPF_Parm )

bool ASFXPawn_PlayerMP_Adept::IsReadyForExecution ( class Asfxpawn* Killer )
{
	static UFunction* pFnIsReadyForExecution = NULL;

	if ( ! pFnIsReadyForExecution )
		pFnIsReadyForExecution = (UFunction*) UObject::GObjObjects()->Data[ 111880 ];

	ASFXPawn_PlayerMP_Adept_execIsReadyForExecution_Parms IsReadyForExecution_Parms;
	IsReadyForExecution_Parms.Killer = Killer;

	this->ProcessEvent ( pFnIsReadyForExecution, &IsReadyForExecution_Parms, NULL );

	return IsReadyForExecution_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.IsDeadUpdated
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::IsDeadUpdated ( )
{
	static UFunction* pFnIsDeadUpdated = NULL;

	if ( ! pFnIsDeadUpdated )
		pFnIsDeadUpdated = (UFunction*) UObject::GObjObjects()->Data[ 111850 ];

	ASFXPawn_PlayerMP_Adept_execIsDeadUpdated_Parms IsDeadUpdated_Parms;

	this->ProcessEvent ( pFnIsDeadUpdated, &IsDeadUpdated_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.StartRevive
// [0x00020102] 
// Parameters infos:
// class ASFXPawn_PlayerParty*    TargetPawn                     ( CPF_Parm )

void ASFXPawn_PlayerMP_Adept::StartRevive ( class ASFXPawn_PlayerParty* TargetPawn )
{
	static UFunction* pFnStartRevive = NULL;

	if ( ! pFnStartRevive )
		pFnStartRevive = (UFunction*) UObject::GObjObjects()->Data[ 111848 ];

	ASFXPawn_PlayerMP_Adept_execStartRevive_Parms StartRevive_Parms;
	StartRevive_Parms.TargetPawn = TargetPawn;

	this->ProcessEvent ( pFnStartRevive, &StartRevive_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.FinalizeProcessFellOutOfWorld
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::FinalizeProcessFellOutOfWorld ( )
{
	static UFunction* pFnFinalizeProcessFellOutOfWorld = NULL;

	if ( ! pFnFinalizeProcessFellOutOfWorld )
		pFnFinalizeProcessFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 111846 ];

	ASFXPawn_PlayerMP_Adept_execFinalizeProcessFellOutOfWorld_Parms FinalizeProcessFellOutOfWorld_Parms;

	this->ProcessEvent ( pFnFinalizeProcessFellOutOfWorld, &FinalizeProcessFellOutOfWorld_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ServerFellOutOfWorldImpl
// [0x002200C2] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::ServerFellOutOfWorldImpl ( )
{
	static UFunction* pFnServerFellOutOfWorldImpl = NULL;

	if ( ! pFnServerFellOutOfWorldImpl )
		pFnServerFellOutOfWorldImpl = (UFunction*) UObject::GObjObjects()->Data[ 111847 ];

	ASFXPawn_PlayerMP_Adept_execServerFellOutOfWorldImpl_Parms ServerFellOutOfWorldImpl_Parms;

	this->ProcessEvent ( pFnServerFellOutOfWorldImpl, &ServerFellOutOfWorldImpl_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.FellOutOfWorldImpl
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::eventFellOutOfWorldImpl ( )
{
	static UFunction* pFnFellOutOfWorldImpl = NULL;

	if ( ! pFnFellOutOfWorldImpl )
		pFnFellOutOfWorldImpl = (UFunction*) UObject::GObjObjects()->Data[ 111844 ];

	ASFXPawn_PlayerMP_Adept_eventFellOutOfWorldImpl_Parms FellOutOfWorldImpl_Parms;

	this->ProcessEvent ( pFnFellOutOfWorldImpl, &FellOutOfWorldImpl_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.BioBaseRemovedFromWorld
// [0x00020100] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::BioBaseRemovedFromWorld ( )
{
	static UFunction* pFnBioBaseRemovedFromWorld = NULL;

	if ( ! pFnBioBaseRemovedFromWorld )
		pFnBioBaseRemovedFromWorld = (UFunction*) UObject::GObjObjects()->Data[ 111843 ];

	ASFXPawn_PlayerMP_Adept_execBioBaseRemovedFromWorld_Parms BioBaseRemovedFromWorld_Parms;

	this->ProcessEvent ( pFnBioBaseRemovedFromWorld, &BioBaseRemovedFromWorld_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.OutsideWorldBounds
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::OutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = (UFunction*) UObject::GObjObjects()->Data[ 111842 ];

	ASFXPawn_PlayerMP_Adept_execOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.FellOutOfWorld
// [0x00020102] 
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void ASFXPawn_PlayerMP_Adept::FellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 111840 ];

	ASFXPawn_PlayerMP_Adept_execFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ApplyCustomizationToActor
// [0x00024002] 
// Parameters infos:
// class AActor*                  InTarget                       ( CPF_Parm )
// class USFXCustomizationInstance* InSettings                     ( CPF_OptionalParm | CPF_Parm )
// int                            UIWorldConfigFlags             ( CPF_OptionalParm | CPF_Parm )

void ASFXPawn_PlayerMP_Adept::ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags )
{
	static UFunction* pFnApplyCustomizationToActor = NULL;

	if ( ! pFnApplyCustomizationToActor )
		pFnApplyCustomizationToActor = (UFunction*) UObject::GObjObjects()->Data[ 111836 ];

	ASFXPawn_PlayerMP_Adept_execApplyCustomizationToActor_Parms ApplyCustomizationToActor_Parms;
	ApplyCustomizationToActor_Parms.InTarget = InTarget;
	ApplyCustomizationToActor_Parms.InSettings = InSettings;
	ApplyCustomizationToActor_Parms.UIWorldConfigFlags = UIWorldConfigFlags;

	this->ProcessEvent ( pFnApplyCustomizationToActor, &ApplyCustomizationToActor_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.GetMPAppearanceVariables
// [0x00420102] 
// Parameters infos:
// int                            Tint1                          ( CPF_Parm | CPF_OutParm )
// int                            Tint2                          ( CPF_Parm | CPF_OutParm )
// int                            Pattern                        ( CPF_Parm | CPF_OutParm )
// int                            PatternColor                   ( CPF_Parm | CPF_OutParm )
// int                            Phong                          ( CPF_Parm | CPF_OutParm )
// int                            Emissive                       ( CPF_Parm | CPF_OutParm )
// int                            SkinTone                       ( CPF_Parm | CPF_OutParm )

void ASFXPawn_PlayerMP_Adept::GetMPAppearanceVariables ( int* Tint1, int* Tint2, int* Pattern, int* PatternColor, int* Phong, int* Emissive, int* SkinTone )
{
	static UFunction* pFnGetMPAppearanceVariables = NULL;

	if ( ! pFnGetMPAppearanceVariables )
		pFnGetMPAppearanceVariables = (UFunction*) UObject::GObjObjects()->Data[ 111828 ];

	ASFXPawn_PlayerMP_Adept_execGetMPAppearanceVariables_Parms GetMPAppearanceVariables_Parms;

	this->ProcessEvent ( pFnGetMPAppearanceVariables, &GetMPAppearanceVariables_Parms, NULL );

	if ( Tint1 )
		*Tint1 = GetMPAppearanceVariables_Parms.Tint1;

	if ( Tint2 )
		*Tint2 = GetMPAppearanceVariables_Parms.Tint2;

	if ( Pattern )
		*Pattern = GetMPAppearanceVariables_Parms.Pattern;

	if ( PatternColor )
		*PatternColor = GetMPAppearanceVariables_Parms.PatternColor;

	if ( Phong )
		*Phong = GetMPAppearanceVariables_Parms.Phong;

	if ( Emissive )
		*Emissive = GetMPAppearanceVariables_Parms.Emissive;

	if ( SkinTone )
		*SkinTone = GetMPAppearanceVariables_Parms.SkinTone;
};

// Function sfxgamempcontent.sfxpawn_playermp.SetMPAppearanceVariables
// [0x00020102] 
// Parameters infos:
// int                            Tint1                          ( CPF_Parm )
// int                            Tint2                          ( CPF_Parm )
// int                            Pattern                        ( CPF_Parm )
// int                            PatternColor                   ( CPF_Parm )
// int                            Phong                          ( CPF_Parm )
// int                            Emissive                       ( CPF_Parm )
// int                            SkinTone                       ( CPF_Parm )

void ASFXPawn_PlayerMP_Adept::SetMPAppearanceVariables ( int Tint1, int Tint2, int Pattern, int PatternColor, int Phong, int Emissive, int SkinTone )
{
	static UFunction* pFnSetMPAppearanceVariables = NULL;

	if ( ! pFnSetMPAppearanceVariables )
		pFnSetMPAppearanceVariables = (UFunction*) UObject::GObjObjects()->Data[ 111820 ];

	ASFXPawn_PlayerMP_Adept_execSetMPAppearanceVariables_Parms SetMPAppearanceVariables_Parms;
	SetMPAppearanceVariables_Parms.Tint1 = Tint1;
	SetMPAppearanceVariables_Parms.Tint2 = Tint2;
	SetMPAppearanceVariables_Parms.Pattern = Pattern;
	SetMPAppearanceVariables_Parms.PatternColor = PatternColor;
	SetMPAppearanceVariables_Parms.Phong = Phong;
	SetMPAppearanceVariables_Parms.Emissive = Emissive;
	SetMPAppearanceVariables_Parms.SkinTone = SkinTone;

	this->ProcessEvent ( pFnSetMPAppearanceVariables, &SetMPAppearanceVariables_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.UpdateAppearance
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::UpdateAppearance ( )
{
	static UFunction* pFnUpdateAppearance = NULL;

	if ( ! pFnUpdateAppearance )
		pFnUpdateAppearance = (UFunction*) UObject::GObjObjects()->Data[ 111819 ];

	ASFXPawn_PlayerMP_Adept_execUpdateAppearance_Parms UpdateAppearance_Parms;

	this->ProcessEvent ( pFnUpdateAppearance, &UpdateAppearance_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CopyPawnAppearance
// [0x00020102] 
// Parameters infos:
// class ABioPawn*                SourcePawn                     ( CPF_Parm )

void ASFXPawn_PlayerMP_Adept::CopyPawnAppearance ( class ABioPawn* SourcePawn )
{
	static UFunction* pFnCopyPawnAppearance = NULL;

	if ( ! pFnCopyPawnAppearance )
		pFnCopyPawnAppearance = (UFunction*) UObject::GObjObjects()->Data[ 111809 ];

	ASFXPawn_PlayerMP_Adept_execCopyPawnAppearance_Parms CopyPawnAppearance_Parms;
	CopyPawnAppearance_Parms.SourcePawn = SourcePawn;

	this->ProcessEvent ( pFnCopyPawnAppearance, &CopyPawnAppearance_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CheckEnterCombat
// [0x00020000] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::CheckEnterCombat ( )
{
	static UFunction* pFnCheckEnterCombat = NULL;

	if ( ! pFnCheckEnterCombat )
		pFnCheckEnterCombat = (UFunction*) UObject::GObjObjects()->Data[ 111808 ];

	ASFXPawn_PlayerMP_Adept_execCheckEnterCombat_Parms CheckEnterCombat_Parms;

	this->ProcessEvent ( pFnCheckEnterCombat, &CheckEnterCombat_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PlayerRevivedMessage
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::PlayerRevivedMessage ( )
{
	static UFunction* pFnPlayerRevivedMessage = NULL;

	if ( ! pFnPlayerRevivedMessage )
		pFnPlayerRevivedMessage = (UFunction*) UObject::GObjObjects()->Data[ 111805 ];

	ASFXPawn_PlayerMP_Adept_execPlayerRevivedMessage_Parms PlayerRevivedMessage_Parms;

	this->ProcessEvent ( pFnPlayerRevivedMessage, &PlayerRevivedMessage_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PlayerKilledMessage
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Adept::PlayerKilledMessage ( )
{
	static UFunction* pFnPlayerKilledMessage = NULL;

	if ( ! pFnPlayerKilledMessage )
		pFnPlayerKilledMessage = (UFunction*) UObject::GObjObjects()->Data[ 111800 ];

	ASFXPawn_PlayerMP_Adept_execPlayerKilledMessage_Parms PlayerKilledMessage_Parms;

	this->ProcessEvent ( pFnPlayerKilledMessage, &PlayerKilledMessage_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASFXPawn_PlayerMP_Adept::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 111798 ];

	ASFXPawn_PlayerMP_Adept_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.GetActorGameName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXPawn_PlayerMP_Adept::GetActorGameName ( )
{
	static UFunction* pFnGetActorGameName = NULL;

	if ( ! pFnGetActorGameName )
		pFnGetActorGameName = (UFunction*) UObject::GObjObjects()->Data[ 111795 ];

	ASFXPawn_PlayerMP_Adept_execGetActorGameName_Parms GetActorGameName_Parms;

	this->ProcessEvent ( pFnGetActorGameName, &GetActorGameName_Parms, NULL );

	return GetActorGameName_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpowercustomactionmp_bioticcharge.StartPower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_bioticcharge::StartPower ( )
{
	static UFunction* pFnStartPower = NULL;

	if ( ! pFnStartPower )
		pFnStartPower = (UFunction*) UObject::GObjObjects()->Data[ 136340 ];

	Usfxpowercustomactionmp_bioticcharge_execStartPower_Parms StartPower_Parms;

	this->ProcessEvent ( pFnStartPower, &StartPower_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_bioticcharge.Teleport
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_bioticcharge::Teleport ( )
{
	static UFunction* pFnTeleport = NULL;

	if ( ! pFnTeleport )
		pFnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 136341 ];

	Usfxpowercustomactionmp_bioticcharge_execTeleport_Parms Teleport_Parms;

	this->ProcessEvent ( pFnTeleport, &Teleport_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_bioticcharge.InterruptThisCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_bioticcharge::InterruptThisCustomAction ( )
{
	static UFunction* pFnInterruptThisCustomAction = NULL;

	if ( ! pFnInterruptThisCustomAction )
		pFnInterruptThisCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 136343 ];

	Usfxpowercustomactionmp_bioticcharge_execInterruptThisCustomAction_Parms InterruptThisCustomAction_Parms;

	this->ProcessEvent ( pFnInterruptThisCustomAction, &InterruptThisCustomAction_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_bioticcharge.StopCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_bioticcharge::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 136344 ];

	Usfxpowercustomactionmp_bioticcharge_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_bioticcharge.StartCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomactionmp_bioticcharge::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 136345 ];

	Usfxpowercustomactionmp_bioticcharge_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamempcontent.sfxpowercustomactionmp_bioticcharge.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool Usfxpowercustomactionmp_bioticcharge::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 136346 ];

	Usfxpowercustomactionmp_bioticcharge_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode_Combat.MakeInactive
// [0x00020002] 
// Parameters infos:

void USFXCameraMode_DrellRollLateral::MakeInactive ( )
{
	static UFunction* pFnMakeInactive = NULL;

	if ( ! pFnMakeInactive )
		pFnMakeInactive = (UFunction*) UObject::GObjObjects()->Data[ 65526 ];

	USFXCameraMode_DrellRollLateral_execMakeInactive_Parms MakeInactive_Parms;

	this->ProcessEvent ( pFnMakeInactive, &MakeInactive_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_Combat.MakeActive
// [0x00020002] 
// Parameters infos:

void USFXCameraMode_DrellRollLateral::MakeActive ( )
{
	static UFunction* pFnMakeActive = NULL;

	if ( ! pFnMakeActive )
		pFnMakeActive = (UFunction*) UObject::GObjObjects()->Data[ 65523 ];

	USFXCameraMode_DrellRollLateral_execMakeActive_Parms MakeActive_Parms;

	this->ProcessEvent ( pFnMakeActive, &MakeActive_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.HealthFailsafe
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::HealthFailsafe ( )
{
	static UFunction* pFnHealthFailsafe = NULL;

	if ( ! pFnHealthFailsafe )
		pFnHealthFailsafe = (UFunction*) UObject::GObjObjects()->Data[ 112047 ];

	ASFXPawn_PlayerMP_Vanguard_execHealthFailsafe_Parms HealthFailsafe_Parms;

	this->ProcessEvent ( pFnHealthFailsafe, &HealthFailsafe_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.RagdollFailsafe
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::RagdollFailsafe ( )
{
	static UFunction* pFnRagdollFailsafe = NULL;

	if ( ! pFnRagdollFailsafe )
		pFnRagdollFailsafe = (UFunction*) UObject::GObjObjects()->Data[ 112045 ];

	ASFXPawn_PlayerMP_Vanguard_execRagdollFailsafe_Parms RagdollFailsafe_Parms;

	this->ProcessEvent ( pFnRagdollFailsafe, &RagdollFailsafe_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ResetSyncMovementFailsafeInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::ResetSyncMovementFailsafeInfo ( )
{
	static UFunction* pFnResetSyncMovementFailsafeInfo = NULL;

	if ( ! pFnResetSyncMovementFailsafeInfo )
		pFnResetSyncMovementFailsafeInfo = (UFunction*) UObject::GObjObjects()->Data[ 112046 ];

	ASFXPawn_PlayerMP_Vanguard_execResetSyncMovementFailsafeInfo_Parms ResetSyncMovementFailsafeInfo_Parms;

	this->ProcessEvent ( pFnResetSyncMovementFailsafeInfo, &ResetSyncMovementFailsafeInfo_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ProcessSyncMovementFailsafe
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::ProcessSyncMovementFailsafe ( )
{
	static UFunction* pFnProcessSyncMovementFailsafe = NULL;

	if ( ! pFnProcessSyncMovementFailsafe )
		pFnProcessSyncMovementFailsafe = (UFunction*) UObject::GObjObjects()->Data[ 112059 ];

	ASFXPawn_PlayerMP_Vanguard_execProcessSyncMovementFailsafe_Parms ProcessSyncMovementFailsafe_Parms;

	this->ProcessEvent ( pFnProcessSyncMovementFailsafe, &ProcessSyncMovementFailsafe_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXPawn_PlayerMP_Vanguard::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 112060 ];

	ASFXPawn_PlayerMP_Vanguard_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CanDoCustomAction
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            CAction                        ( CPF_Parm )
// class APawn*                   Sync                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )
// int                            PowerCustomAction              ( CPF_OptionalParm | CPF_Parm )

bool ASFXPawn_PlayerMP_Vanguard::eventCanDoCustomAction ( int CAction, class APawn* Sync, unsigned long bForced, int PowerCustomAction )
{
	static UFunction* pFnCanDoCustomAction = NULL;

	if ( ! pFnCanDoCustomAction )
		pFnCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 112039 ];

	ASFXPawn_PlayerMP_Vanguard_eventCanDoCustomAction_Parms CanDoCustomAction_Parms;
	CanDoCustomAction_Parms.CAction = CAction;
	CanDoCustomAction_Parms.Sync = Sync;
	CanDoCustomAction_Parms.bForced = bForced;
	CanDoCustomAction_Parms.PowerCustomAction = PowerCustomAction;

	this->ProcessEvent ( pFnCanDoCustomAction, &CanDoCustomAction_Parms, NULL );

	return CanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.ShouldShowHUDGrenadeCounter
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXPawn_PlayerMP_Vanguard::ShouldShowHUDGrenadeCounter ( )
{
	static UFunction* pFnShouldShowHUDGrenadeCounter = NULL;

	if ( ! pFnShouldShowHUDGrenadeCounter )
		pFnShouldShowHUDGrenadeCounter = (UFunction*) UObject::GObjObjects()->Data[ 112037 ];

	ASFXPawn_PlayerMP_Vanguard_execShouldShowHUDGrenadeCounter_Parms ShouldShowHUDGrenadeCounter_Parms;

	this->ProcessEvent ( pFnShouldShowHUDGrenadeCounter, &ShouldShowHUDGrenadeCounter_Parms, NULL );

	return ShouldShowHUDGrenadeCounter_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.UpdateGameEffects
// [0x00020100] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::UpdateGameEffects ( )
{
	static UFunction* pFnUpdateGameEffects = NULL;

	if ( ! pFnUpdateGameEffects )
		pFnUpdateGameEffects = (UFunction*) UObject::GObjObjects()->Data[ 112036 ];

	ASFXPawn_PlayerMP_Vanguard_execUpdateGameEffects_Parms UpdateGameEffects_Parms;

	this->ProcessEvent ( pFnUpdateGameEffects, &UpdateGameEffects_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.GetUIAppearanceTag
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName ASFXPawn_PlayerMP_Vanguard::GetUIAppearanceTag ( )
{
	static UFunction* pFnGetUIAppearanceTag = NULL;

	if ( ! pFnGetUIAppearanceTag )
		pFnGetUIAppearanceTag = (UFunction*) UObject::GObjObjects()->Data[ 112034 ];

	ASFXPawn_PlayerMP_Vanguard_execGetUIAppearanceTag_Parms GetUIAppearanceTag_Parms;

	this->ProcessEvent ( pFnGetUIAppearanceTag, &GetUIAppearanceTag_Parms, NULL );

	return GetUIAppearanceTag_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.Destroyed
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 112027 ];

	ASFXPawn_PlayerMP_Vanguard_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXPawn_PlayerMP_Vanguard::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 112020 ];

	ASFXPawn_PlayerMP_Vanguard_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.SetExecutioner
// [0x00020002] 
// Parameters infos:
// class APawn*                   Killer                         ( CPF_Parm )

void ASFXPawn_PlayerMP_Vanguard::SetExecutioner ( class APawn* Killer )
{
	static UFunction* pFnSetExecutioner = NULL;

	if ( ! pFnSetExecutioner )
		pFnSetExecutioner = (UFunction*) UObject::GObjObjects()->Data[ 112018 ];

	ASFXPawn_PlayerMP_Vanguard_execSetExecutioner_Parms SetExecutioner_Parms;
	SetExecutioner_Parms.Killer = Killer;

	this->ProcessEvent ( pFnSetExecutioner, &SetExecutioner_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.AttemptKillingBlow
// [0x00020002] 
// Parameters infos:
// class APawn*                   Killer                         ( CPF_Parm )

void ASFXPawn_PlayerMP_Vanguard::AttemptKillingBlow ( class APawn* Killer )
{
	static UFunction* pFnAttemptKillingBlow = NULL;

	if ( ! pFnAttemptKillingBlow )
		pFnAttemptKillingBlow = (UFunction*) UObject::GObjObjects()->Data[ 112015 ];

	ASFXPawn_PlayerMP_Vanguard_execAttemptKillingBlow_Parms AttemptKillingBlow_Parms;
	AttemptKillingBlow_Parms.Killer = Killer;

	this->ProcessEvent ( pFnAttemptKillingBlow, &AttemptKillingBlow_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.UpdateMappedPowerDisplay
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::UpdateMappedPowerDisplay ( )
{
	static UFunction* pFnUpdateMappedPowerDisplay = NULL;

	if ( ! pFnUpdateMappedPowerDisplay )
		pFnUpdateMappedPowerDisplay = (UFunction*) UObject::GObjObjects()->Data[ 112011 ];

	ASFXPawn_PlayerMP_Vanguard_execUpdateMappedPowerDisplay_Parms UpdateMappedPowerDisplay_Parms;

	this->ProcessEvent ( pFnUpdateMappedPowerDisplay, &UpdateMappedPowerDisplay_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CanPlayDeathEffect
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXPawn_PlayerMP_Vanguard::CanPlayDeathEffect ( )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 112009 ];

	ASFXPawn_PlayerMP_Vanguard_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.UseReviveConsumablePower
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::UseReviveConsumablePower ( )
{
	static UFunction* pFnUseReviveConsumablePower = NULL;

	if ( ! pFnUseReviveConsumablePower )
		pFnUseReviveConsumablePower = (UFunction*) UObject::GObjObjects()->Data[ 112006 ];

	ASFXPawn_PlayerMP_Vanguard_execUseReviveConsumablePower_Parms UseReviveConsumablePower_Parms;

	this->ProcessEvent ( pFnUseReviveConsumablePower, &UseReviveConsumablePower_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.AutoMapPC
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::AutoMapPC ( )
{
	static UFunction* pFnAutoMapPC = NULL;

	if ( ! pFnAutoMapPC )
		pFnAutoMapPC = (UFunction*) UObject::GObjObjects()->Data[ 111997 ];

	ASFXPawn_PlayerMP_Vanguard_execAutoMapPC_Parms AutoMapPC_Parms;

	this->ProcessEvent ( pFnAutoMapPC, &AutoMapPC_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.AutoMapXbox
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::AutoMapXbox ( )
{
	static UFunction* pFnAutoMapXbox = NULL;

	if ( ! pFnAutoMapXbox )
		pFnAutoMapXbox = (UFunction*) UObject::GObjObjects()->Data[ 111995 ];

	ASFXPawn_PlayerMP_Vanguard_execAutoMapXbox_Parms AutoMapXbox_Parms;

	this->ProcessEvent ( pFnAutoMapXbox, &AutoMapXbox_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ShouldTossWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              ChkWeapon                      ( CPF_Parm )
// class ASFXWeapon*              NewWeapon                      ( CPF_Parm )

bool ASFXPawn_PlayerMP_Vanguard::ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon )
{
	static UFunction* pFnShouldTossWeapon = NULL;

	if ( ! pFnShouldTossWeapon )
		pFnShouldTossWeapon = (UFunction*) UObject::GObjObjects()->Data[ 111991 ];

	ASFXPawn_PlayerMP_Vanguard_execShouldTossWeapon_Parms ShouldTossWeapon_Parms;
	ShouldTossWeapon_Parms.ChkWeapon = ChkWeapon;
	ShouldTossWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnShouldTossWeapon, &ShouldTossWeapon_Parms, NULL );

	return ShouldTossWeapon_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.InCombat
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXPawn_PlayerMP_Vanguard::InCombat ( )
{
	static UFunction* pFnInCombat = NULL;

	if ( ! pFnInCombat )
		pFnInCombat = (UFunction*) UObject::GObjObjects()->Data[ 111989 ];

	ASFXPawn_PlayerMP_Vanguard_execInCombat_Parms InCombat_Parms;

	this->ProcessEvent ( pFnInCombat, &InCombat_Parms, NULL );

	return InCombat_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool ASFXPawn_PlayerMP_Vanguard::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 111983 ];

	ASFXPawn_PlayerMP_Vanguard_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ASFXPawn_PlayerMP_Vanguard::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 111980 ];

	ASFXPawn_PlayerMP_Vanguard_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.LoadWeaponModData
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::LoadWeaponModData ( )
{
	static UFunction* pFnLoadWeaponModData = NULL;

	if ( ! pFnLoadWeaponModData )
		pFnLoadWeaponModData = (UFunction*) UObject::GObjObjects()->Data[ 111970 ];

	ASFXPawn_PlayerMP_Vanguard_execLoadWeaponModData_Parms LoadWeaponModData_Parms;

	this->ProcessEvent ( pFnLoadWeaponModData, &LoadWeaponModData_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.LoadPowerData
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::LoadPowerData ( )
{
	static UFunction* pFnLoadPowerData = NULL;

	if ( ! pFnLoadPowerData )
		pFnLoadPowerData = (UFunction*) UObject::GObjObjects()->Data[ 111955 ];

	ASFXPawn_PlayerMP_Vanguard_execLoadPowerData_Parms LoadPowerData_Parms;

	this->ProcessEvent ( pFnLoadPowerData, &LoadPowerData_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.IsTestFrameworkSetupComplete
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXPawn_PlayerMP_Vanguard::IsTestFrameworkSetupComplete ( )
{
	static UFunction* pFnIsTestFrameworkSetupComplete = NULL;

	if ( ! pFnIsTestFrameworkSetupComplete )
		pFnIsTestFrameworkSetupComplete = (UFunction*) UObject::GObjObjects()->Data[ 111953 ];

	ASFXPawn_PlayerMP_Vanguard_execIsTestFrameworkSetupComplete_Parms IsTestFrameworkSetupComplete_Parms;

	this->ProcessEvent ( pFnIsTestFrameworkSetupComplete, &IsTestFrameworkSetupComplete_Parms, NULL );

	return IsTestFrameworkSetupComplete_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.LoadWeapons
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::LoadWeapons ( )
{
	static UFunction* pFnLoadWeapons = NULL;

	if ( ! pFnLoadWeapons )
		pFnLoadWeapons = (UFunction*) UObject::GObjObjects()->Data[ 111945 ];

	ASFXPawn_PlayerMP_Vanguard_execLoadWeapons_Parms LoadWeapons_Parms;

	this->ProcessEvent ( pFnLoadWeapons, &LoadWeapons_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CreateWeapons
// [0x00024002] 
// Parameters infos:
// class USFXLoadoutData*         ChkLoadout                     ( CPF_Parm )
// unsigned long                  bForceFromEngineLoadout        ( CPF_OptionalParm | CPF_Parm )

void ASFXPawn_PlayerMP_Vanguard::CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout )
{
	static UFunction* pFnCreateWeapons = NULL;

	if ( ! pFnCreateWeapons )
		pFnCreateWeapons = (UFunction*) UObject::GObjObjects()->Data[ 111942 ];

	ASFXPawn_PlayerMP_Vanguard_execCreateWeapons_Parms CreateWeapons_Parms;
	CreateWeapons_Parms.ChkLoadout = ChkLoadout;
	CreateWeapons_Parms.bForceFromEngineLoadout = bForceFromEngineLoadout;

	this->ProcessEvent ( pFnCreateWeapons, &CreateWeapons_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.GetFullName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXPawn_PlayerMP_Vanguard::GetFullName ( )
{
	static UFunction* pFnGetFullName = NULL;

	if ( ! pFnGetFullName )
		pFnGetFullName = (UFunction*) UObject::GObjObjects()->Data[ 111940 ];

	ASFXPawn_PlayerMP_Vanguard_execGetFullName_Parms GetFullName_Parms;

	this->ProcessEvent ( pFnGetFullName, &GetFullName_Parms, NULL );

	return GetFullName_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.DeferredSetRichPresence
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::DeferredSetRichPresence ( )
{
	static UFunction* pFnDeferredSetRichPresence = NULL;

	if ( ! pFnDeferredSetRichPresence )
		pFnDeferredSetRichPresence = (UFunction*) UObject::GObjObjects()->Data[ 111939 ];

	ASFXPawn_PlayerMP_Vanguard_execDeferredSetRichPresence_Parms DeferredSetRichPresence_Parms;

	this->ProcessEvent ( pFnDeferredSetRichPresence, &DeferredSetRichPresence_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.StopLoadingMovie
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::StopLoadingMovie ( )
{
	static UFunction* pFnStopLoadingMovie = NULL;

	if ( ! pFnStopLoadingMovie )
		pFnStopLoadingMovie = (UFunction*) UObject::GObjObjects()->Data[ 111937 ];

	ASFXPawn_PlayerMP_Vanguard_execStopLoadingMovie_Parms StopLoadingMovie_Parms;

	this->ProcessEvent ( pFnStopLoadingMovie, &StopLoadingMovie_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.DeferredPostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::DeferredPostBeginPlay ( )
{
	static UFunction* pFnDeferredPostBeginPlay = NULL;

	if ( ! pFnDeferredPostBeginPlay )
		pFnDeferredPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 111904 ];

	ASFXPawn_PlayerMP_Vanguard_execDeferredPostBeginPlay_Parms DeferredPostBeginPlay_Parms;

	this->ProcessEvent ( pFnDeferredPostBeginPlay, &DeferredPostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 111902 ];

	ASFXPawn_PlayerMP_Vanguard_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ServerPermaDeath
// [0x002200C2] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::ServerPermaDeath ( )
{
	static UFunction* pFnServerPermaDeath = NULL;

	if ( ! pFnServerPermaDeath )
		pFnServerPermaDeath = (UFunction*) UObject::GObjObjects()->Data[ 111899 ];

	ASFXPawn_PlayerMP_Vanguard_execServerPermaDeath_Parms ServerPermaDeath_Parms;

	this->ProcessEvent ( pFnServerPermaDeath, &ServerPermaDeath_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PermaDeath
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::PermaDeath ( )
{
	static UFunction* pFnPermaDeath = NULL;

	if ( ! pFnPermaDeath )
		pFnPermaDeath = (UFunction*) UObject::GObjObjects()->Data[ 111897 ];

	ASFXPawn_PlayerMP_Vanguard_execPermaDeath_Parms PermaDeath_Parms;

	this->ProcessEvent ( pFnPermaDeath, &PermaDeath_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.StartSpectatorCam
// [0x00020002] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::StartSpectatorCam ( )
{
	static UFunction* pFnStartSpectatorCam = NULL;

	if ( ! pFnStartSpectatorCam )
		pFnStartSpectatorCam = (UFunction*) UObject::GObjObjects()->Data[ 111895 ];

	ASFXPawn_PlayerMP_Vanguard_execStartSpectatorCam_Parms StartSpectatorCam_Parms;

	this->ProcessEvent ( pFnStartSpectatorCam, &StartSpectatorCam_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PermaDeadChanged
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::PermaDeadChanged ( )
{
	static UFunction* pFnPermaDeadChanged = NULL;

	if ( ! pFnPermaDeadChanged )
		pFnPermaDeadChanged = (UFunction*) UObject::GObjObjects()->Data[ 111891 ];

	ASFXPawn_PlayerMP_Vanguard_execPermaDeadChanged_Parms PermaDeadChanged_Parms;

	this->ProcessEvent ( pFnPermaDeadChanged, &PermaDeadChanged_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.Resurrect
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          PercentOfHealthRegained        ( CPF_Parm )
// unsigned long                  bIsInstantaneous               ( CPF_Parm )

bool ASFXPawn_PlayerMP_Vanguard::eventResurrect ( float PercentOfHealthRegained, unsigned long bIsInstantaneous )
{
	static UFunction* pFnResurrect = NULL;

	if ( ! pFnResurrect )
		pFnResurrect = (UFunction*) UObject::GObjObjects()->Data[ 111887 ];

	ASFXPawn_PlayerMP_Vanguard_eventResurrect_Parms Resurrect_Parms;
	Resurrect_Parms.PercentOfHealthRegained = PercentOfHealthRegained;
	Resurrect_Parms.bIsInstantaneous = bIsInstantaneous;

	this->ProcessEvent ( pFnResurrect, &Resurrect_Parms, NULL );

	return Resurrect_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.PreClientTravel
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::PreClientTravel ( )
{
	static UFunction* pFnPreClientTravel = NULL;

	if ( ! pFnPreClientTravel )
		pFnPreClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 111884 ];

	ASFXPawn_PlayerMP_Vanguard_execPreClientTravel_Parms PreClientTravel_Parms;

	this->ProcessEvent ( pFnPreClientTravel, &PreClientTravel_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.IsReadyForExecution
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class Asfxpawn*                Killer                         ( CPF_Parm )

bool ASFXPawn_PlayerMP_Vanguard::IsReadyForExecution ( class Asfxpawn* Killer )
{
	static UFunction* pFnIsReadyForExecution = NULL;

	if ( ! pFnIsReadyForExecution )
		pFnIsReadyForExecution = (UFunction*) UObject::GObjObjects()->Data[ 111880 ];

	ASFXPawn_PlayerMP_Vanguard_execIsReadyForExecution_Parms IsReadyForExecution_Parms;
	IsReadyForExecution_Parms.Killer = Killer;

	this->ProcessEvent ( pFnIsReadyForExecution, &IsReadyForExecution_Parms, NULL );

	return IsReadyForExecution_Parms.ReturnValue;
};

// Function sfxgamempcontent.sfxpawn_playermp.IsDeadUpdated
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::IsDeadUpdated ( )
{
	static UFunction* pFnIsDeadUpdated = NULL;

	if ( ! pFnIsDeadUpdated )
		pFnIsDeadUpdated = (UFunction*) UObject::GObjObjects()->Data[ 111850 ];

	ASFXPawn_PlayerMP_Vanguard_execIsDeadUpdated_Parms IsDeadUpdated_Parms;

	this->ProcessEvent ( pFnIsDeadUpdated, &IsDeadUpdated_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.StartRevive
// [0x00020102] 
// Parameters infos:
// class ASFXPawn_PlayerParty*    TargetPawn                     ( CPF_Parm )

void ASFXPawn_PlayerMP_Vanguard::StartRevive ( class ASFXPawn_PlayerParty* TargetPawn )
{
	static UFunction* pFnStartRevive = NULL;

	if ( ! pFnStartRevive )
		pFnStartRevive = (UFunction*) UObject::GObjObjects()->Data[ 111848 ];

	ASFXPawn_PlayerMP_Vanguard_execStartRevive_Parms StartRevive_Parms;
	StartRevive_Parms.TargetPawn = TargetPawn;

	this->ProcessEvent ( pFnStartRevive, &StartRevive_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.FinalizeProcessFellOutOfWorld
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::FinalizeProcessFellOutOfWorld ( )
{
	static UFunction* pFnFinalizeProcessFellOutOfWorld = NULL;

	if ( ! pFnFinalizeProcessFellOutOfWorld )
		pFnFinalizeProcessFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 111846 ];

	ASFXPawn_PlayerMP_Vanguard_execFinalizeProcessFellOutOfWorld_Parms FinalizeProcessFellOutOfWorld_Parms;

	this->ProcessEvent ( pFnFinalizeProcessFellOutOfWorld, &FinalizeProcessFellOutOfWorld_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ServerFellOutOfWorldImpl
// [0x002200C2] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::ServerFellOutOfWorldImpl ( )
{
	static UFunction* pFnServerFellOutOfWorldImpl = NULL;

	if ( ! pFnServerFellOutOfWorldImpl )
		pFnServerFellOutOfWorldImpl = (UFunction*) UObject::GObjObjects()->Data[ 111847 ];

	ASFXPawn_PlayerMP_Vanguard_execServerFellOutOfWorldImpl_Parms ServerFellOutOfWorldImpl_Parms;

	this->ProcessEvent ( pFnServerFellOutOfWorldImpl, &ServerFellOutOfWorldImpl_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.FellOutOfWorldImpl
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::eventFellOutOfWorldImpl ( )
{
	static UFunction* pFnFellOutOfWorldImpl = NULL;

	if ( ! pFnFellOutOfWorldImpl )
		pFnFellOutOfWorldImpl = (UFunction*) UObject::GObjObjects()->Data[ 111844 ];

	ASFXPawn_PlayerMP_Vanguard_eventFellOutOfWorldImpl_Parms FellOutOfWorldImpl_Parms;

	this->ProcessEvent ( pFnFellOutOfWorldImpl, &FellOutOfWorldImpl_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.BioBaseRemovedFromWorld
// [0x00020100] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::BioBaseRemovedFromWorld ( )
{
	static UFunction* pFnBioBaseRemovedFromWorld = NULL;

	if ( ! pFnBioBaseRemovedFromWorld )
		pFnBioBaseRemovedFromWorld = (UFunction*) UObject::GObjObjects()->Data[ 111843 ];

	ASFXPawn_PlayerMP_Vanguard_execBioBaseRemovedFromWorld_Parms BioBaseRemovedFromWorld_Parms;

	this->ProcessEvent ( pFnBioBaseRemovedFromWorld, &BioBaseRemovedFromWorld_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.OutsideWorldBounds
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::OutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = (UFunction*) UObject::GObjObjects()->Data[ 111842 ];

	ASFXPawn_PlayerMP_Vanguard_execOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.FellOutOfWorld
// [0x00020102] 
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void ASFXPawn_PlayerMP_Vanguard::FellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 111840 ];

	ASFXPawn_PlayerMP_Vanguard_execFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ApplyCustomizationToActor
// [0x00024002] 
// Parameters infos:
// class AActor*                  InTarget                       ( CPF_Parm )
// class USFXCustomizationInstance* InSettings                     ( CPF_OptionalParm | CPF_Parm )
// int                            UIWorldConfigFlags             ( CPF_OptionalParm | CPF_Parm )

void ASFXPawn_PlayerMP_Vanguard::ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags )
{
	static UFunction* pFnApplyCustomizationToActor = NULL;

	if ( ! pFnApplyCustomizationToActor )
		pFnApplyCustomizationToActor = (UFunction*) UObject::GObjObjects()->Data[ 111836 ];

	ASFXPawn_PlayerMP_Vanguard_execApplyCustomizationToActor_Parms ApplyCustomizationToActor_Parms;
	ApplyCustomizationToActor_Parms.InTarget = InTarget;
	ApplyCustomizationToActor_Parms.InSettings = InSettings;
	ApplyCustomizationToActor_Parms.UIWorldConfigFlags = UIWorldConfigFlags;

	this->ProcessEvent ( pFnApplyCustomizationToActor, &ApplyCustomizationToActor_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.GetMPAppearanceVariables
// [0x00420102] 
// Parameters infos:
// int                            Tint1                          ( CPF_Parm | CPF_OutParm )
// int                            Tint2                          ( CPF_Parm | CPF_OutParm )
// int                            Pattern                        ( CPF_Parm | CPF_OutParm )
// int                            PatternColor                   ( CPF_Parm | CPF_OutParm )
// int                            Phong                          ( CPF_Parm | CPF_OutParm )
// int                            Emissive                       ( CPF_Parm | CPF_OutParm )
// int                            SkinTone                       ( CPF_Parm | CPF_OutParm )

void ASFXPawn_PlayerMP_Vanguard::GetMPAppearanceVariables ( int* Tint1, int* Tint2, int* Pattern, int* PatternColor, int* Phong, int* Emissive, int* SkinTone )
{
	static UFunction* pFnGetMPAppearanceVariables = NULL;

	if ( ! pFnGetMPAppearanceVariables )
		pFnGetMPAppearanceVariables = (UFunction*) UObject::GObjObjects()->Data[ 111828 ];

	ASFXPawn_PlayerMP_Vanguard_execGetMPAppearanceVariables_Parms GetMPAppearanceVariables_Parms;

	this->ProcessEvent ( pFnGetMPAppearanceVariables, &GetMPAppearanceVariables_Parms, NULL );

	if ( Tint1 )
		*Tint1 = GetMPAppearanceVariables_Parms.Tint1;

	if ( Tint2 )
		*Tint2 = GetMPAppearanceVariables_Parms.Tint2;

	if ( Pattern )
		*Pattern = GetMPAppearanceVariables_Parms.Pattern;

	if ( PatternColor )
		*PatternColor = GetMPAppearanceVariables_Parms.PatternColor;

	if ( Phong )
		*Phong = GetMPAppearanceVariables_Parms.Phong;

	if ( Emissive )
		*Emissive = GetMPAppearanceVariables_Parms.Emissive;

	if ( SkinTone )
		*SkinTone = GetMPAppearanceVariables_Parms.SkinTone;
};

// Function sfxgamempcontent.sfxpawn_playermp.SetMPAppearanceVariables
// [0x00020102] 
// Parameters infos:
// int                            Tint1                          ( CPF_Parm )
// int                            Tint2                          ( CPF_Parm )
// int                            Pattern                        ( CPF_Parm )
// int                            PatternColor                   ( CPF_Parm )
// int                            Phong                          ( CPF_Parm )
// int                            Emissive                       ( CPF_Parm )
// int                            SkinTone                       ( CPF_Parm )

void ASFXPawn_PlayerMP_Vanguard::SetMPAppearanceVariables ( int Tint1, int Tint2, int Pattern, int PatternColor, int Phong, int Emissive, int SkinTone )
{
	static UFunction* pFnSetMPAppearanceVariables = NULL;

	if ( ! pFnSetMPAppearanceVariables )
		pFnSetMPAppearanceVariables = (UFunction*) UObject::GObjObjects()->Data[ 111820 ];

	ASFXPawn_PlayerMP_Vanguard_execSetMPAppearanceVariables_Parms SetMPAppearanceVariables_Parms;
	SetMPAppearanceVariables_Parms.Tint1 = Tint1;
	SetMPAppearanceVariables_Parms.Tint2 = Tint2;
	SetMPAppearanceVariables_Parms.Pattern = Pattern;
	SetMPAppearanceVariables_Parms.PatternColor = PatternColor;
	SetMPAppearanceVariables_Parms.Phong = Phong;
	SetMPAppearanceVariables_Parms.Emissive = Emissive;
	SetMPAppearanceVariables_Parms.SkinTone = SkinTone;

	this->ProcessEvent ( pFnSetMPAppearanceVariables, &SetMPAppearanceVariables_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.UpdateAppearance
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::UpdateAppearance ( )
{
	static UFunction* pFnUpdateAppearance = NULL;

	if ( ! pFnUpdateAppearance )
		pFnUpdateAppearance = (UFunction*) UObject::GObjObjects()->Data[ 111819 ];

	ASFXPawn_PlayerMP_Vanguard_execUpdateAppearance_Parms UpdateAppearance_Parms;

	this->ProcessEvent ( pFnUpdateAppearance, &UpdateAppearance_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CopyPawnAppearance
// [0x00020102] 
// Parameters infos:
// class ABioPawn*                SourcePawn                     ( CPF_Parm )

void ASFXPawn_PlayerMP_Vanguard::CopyPawnAppearance ( class ABioPawn* SourcePawn )
{
	static UFunction* pFnCopyPawnAppearance = NULL;

	if ( ! pFnCopyPawnAppearance )
		pFnCopyPawnAppearance = (UFunction*) UObject::GObjObjects()->Data[ 111809 ];

	ASFXPawn_PlayerMP_Vanguard_execCopyPawnAppearance_Parms CopyPawnAppearance_Parms;
	CopyPawnAppearance_Parms.SourcePawn = SourcePawn;

	this->ProcessEvent ( pFnCopyPawnAppearance, &CopyPawnAppearance_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.CheckEnterCombat
// [0x00020000] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::CheckEnterCombat ( )
{
	static UFunction* pFnCheckEnterCombat = NULL;

	if ( ! pFnCheckEnterCombat )
		pFnCheckEnterCombat = (UFunction*) UObject::GObjObjects()->Data[ 111808 ];

	ASFXPawn_PlayerMP_Vanguard_execCheckEnterCombat_Parms CheckEnterCombat_Parms;

	this->ProcessEvent ( pFnCheckEnterCombat, &CheckEnterCombat_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PlayerRevivedMessage
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::PlayerRevivedMessage ( )
{
	static UFunction* pFnPlayerRevivedMessage = NULL;

	if ( ! pFnPlayerRevivedMessage )
		pFnPlayerRevivedMessage = (UFunction*) UObject::GObjObjects()->Data[ 111805 ];

	ASFXPawn_PlayerMP_Vanguard_execPlayerRevivedMessage_Parms PlayerRevivedMessage_Parms;

	this->ProcessEvent ( pFnPlayerRevivedMessage, &PlayerRevivedMessage_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.PlayerKilledMessage
// [0x00020102] 
// Parameters infos:

void ASFXPawn_PlayerMP_Vanguard::PlayerKilledMessage ( )
{
	static UFunction* pFnPlayerKilledMessage = NULL;

	if ( ! pFnPlayerKilledMessage )
		pFnPlayerKilledMessage = (UFunction*) UObject::GObjObjects()->Data[ 111800 ];

	ASFXPawn_PlayerMP_Vanguard_execPlayerKilledMessage_Parms PlayerKilledMessage_Parms;

	this->ProcessEvent ( pFnPlayerKilledMessage, &PlayerKilledMessage_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASFXPawn_PlayerMP_Vanguard::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 111798 ];

	ASFXPawn_PlayerMP_Vanguard_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamempcontent.sfxpawn_playermp.GetActorGameName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXPawn_PlayerMP_Vanguard::GetActorGameName ( )
{
	static UFunction* pFnGetActorGameName = NULL;

	if ( ! pFnGetActorGameName )
		pFnGetActorGameName = (UFunction*) UObject::GObjObjects()->Data[ 111795 ];

	ASFXPawn_PlayerMP_Vanguard_execGetActorGameName_Parms GetActorGameName_Parms;

	this->ProcessEvent ( pFnGetActorGameName, &GetActorGameName_Parms, NULL );

	return GetActorGameName_Parms.ReturnValue;
};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif