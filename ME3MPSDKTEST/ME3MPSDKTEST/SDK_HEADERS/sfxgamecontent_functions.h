/*
#############################################################################################
# Mass Effect 3 (1.5) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: sfxgamecontent_functions.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.Tick_Prediction
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_SentryTurretRocket::Tick_Prediction ( float DeltaTime )
{
	static UFunction* pFnTick_Prediction = NULL;

	if ( ! pFnTick_Prediction )
		pFnTick_Prediction = (UFunction*) UObject::GObjObjects()->Data[ 105956 ];

	ASFXProjectile_PowerCustomAction_SentryTurretRocket_execTick_Prediction_Parms Tick_Prediction_Parms;
	Tick_Prediction_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick_Prediction, &Tick_Prediction_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.Recycle
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_PowerCustomAction_SentryTurretRocket::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 105957 ];

	ASFXProjectile_PowerCustomAction_SentryTurretRocket_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.InitializeRotation
// [0x00020000] 
// Parameters infos:
// class APawn*                   oCasterPawn                    ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_SentryTurretRocket::InitializeRotation ( class APawn* oCasterPawn )
{
	static UFunction* pFnInitializeRotation = NULL;

	if ( ! pFnInitializeRotation )
		pFnInitializeRotation = (UFunction*) UObject::GObjObjects()->Data[ 105959 ];

	ASFXProjectile_PowerCustomAction_SentryTurretRocket_execInitializeRotation_Parms InitializeRotation_Parms;
	InitializeRotation_Parms.oCasterPawn = oCasterPawn;

	this->ProcessEvent ( pFnInitializeRotation, &InitializeRotation_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.InitializePowerProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// float                          fTravelSpeed                   ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// class Usfxpowercustomaction*   oPower                         ( CPF_Parm )

bool ASFXProjectile_PowerCustomAction_SentryTurretRocket::InitializePowerProjectile ( class AActor* oCaster, float fTravelSpeed, float fRadius, class Usfxpowercustomaction* oPower )
{
	static UFunction* pFnInitializePowerProjectile = NULL;

	if ( ! pFnInitializePowerProjectile )
		pFnInitializePowerProjectile = (UFunction*) UObject::GObjObjects()->Data[ 105966 ];

	ASFXProjectile_PowerCustomAction_SentryTurretRocket_execInitializePowerProjectile_Parms InitializePowerProjectile_Parms;
	InitializePowerProjectile_Parms.oCaster = oCaster;
	InitializePowerProjectile_Parms.fTravelSpeed = fTravelSpeed;
	InitializePowerProjectile_Parms.fRadius = fRadius;
	InitializePowerProjectile_Parms.oPower = oPower;

	this->ProcessEvent ( pFnInitializePowerProjectile, &InitializePowerProjectile_Parms, NULL );

	return InitializePowerProjectile_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.PawnEvadedPower
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )
// struct FName                   Label                          ( CPF_Parm )
// float                          TimeBeforeImpact               ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_SentryTurretRocket::PawnEvadedPower ( class ABioPawn* Pawn, struct FName Label, float TimeBeforeImpact )
{
	static UFunction* pFnPawnEvadedPower = NULL;

	if ( ! pFnPawnEvadedPower )
		pFnPawnEvadedPower = (UFunction*) UObject::GObjObjects()->Data[ 105971 ];

	ASFXProjectile_PowerCustomAction_SentryTurretRocket_execPawnEvadedPower_Parms PawnEvadedPower_Parms;
	PawnEvadedPower_Parms.Pawn = Pawn;
	memcpy ( &PawnEvadedPower_Parms.Label, &Label, 0x8 );
	PawnEvadedPower_Parms.TimeBeforeImpact = TimeBeforeImpact;

	this->ProcessEvent ( pFnPawnEvadedPower, &PawnEvadedPower_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.CanLockOn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// class APawn*                   CasterPawn                     ( CPF_Parm )

bool ASFXProjectile_PowerCustomAction_SentryTurretRocket::CanLockOn ( class AActor* Target, class APawn* CasterPawn )
{
	static UFunction* pFnCanLockOn = NULL;

	if ( ! pFnCanLockOn )
		pFnCanLockOn = (UFunction*) UObject::GObjObjects()->Data[ 105979 ];

	ASFXProjectile_PowerCustomAction_SentryTurretRocket_execCanLockOn_Parms CanLockOn_Parms;
	CanLockOn_Parms.Target = Target;
	CanLockOn_Parms.CasterPawn = CasterPawn;

	this->ProcessEvent ( pFnCanLockOn, &CanLockOn_Parms, NULL );

	return CanLockOn_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_SentryTurretRocket::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 105982 ];

	ASFXProjectile_PowerCustomAction_SentryTurretRocket_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.TickAimRotation
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 SeekVector                     ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_SentryTurretRocket::TickAimRotation ( float DeltaTime, struct FVector SeekVector )
{
	static UFunction* pFnTickAimRotation = NULL;

	if ( ! pFnTickAimRotation )
		pFnTickAimRotation = (UFunction*) UObject::GObjObjects()->Data[ 105990 ];

	ASFXProjectile_PowerCustomAction_SentryTurretRocket_execTickAimRotation_Parms TickAimRotation_Parms;
	TickAimRotation_Parms.DeltaTime = DeltaTime;
	memcpy ( &TickAimRotation_Parms.SeekVector, &SeekVector, 0xC );

	this->ProcessEvent ( pFnTickAimRotation, &TickAimRotation_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.TickAim
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_SentryTurretRocket::TickAim ( float DeltaTime )
{
	static UFunction* pFnTickAim = NULL;

	if ( ! pFnTickAim )
		pFnTickAim = (UFunction*) UObject::GObjObjects()->Data[ 105998 ];

	ASFXProjectile_PowerCustomAction_SentryTurretRocket_execTickAim_Parms TickAim_Parms;
	TickAim_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickAim, &TickAim_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.GetAimLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

struct FVector ASFXProjectile_PowerCustomAction_SentryTurretRocket::GetAimLocation ( class AActor* Target )
{
	static UFunction* pFnGetAimLocation = NULL;

	if ( ! pFnGetAimLocation )
		pFnGetAimLocation = (UFunction*) UObject::GObjObjects()->Data[ 106007 ];

	ASFXProjectile_PowerCustomAction_SentryTurretRocket_execGetAimLocation_Parms GetAimLocation_Parms;
	GetAimLocation_Parms.Target = Target;

	this->ProcessEvent ( pFnGetAimLocation, &GetAimLocation_Parms, NULL );

	return GetAimLocation_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.Timer
// [0x00020002] 
// Parameters infos:

void ASFXProjectile_PowerCustomAction_SentryTurretRocket::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 106000 ];

	ASFXProjectile_PowerCustomAction_SentryTurretRocket_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_SentryTurretRocket::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 105951 ];

	ASFXProjectile_PowerCustomAction_SentryTurretRocket_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_BouncingGrenade::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 83443 ];

	ASFXProjectile_PowerCustomAction_BouncingGrenade_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.Recycle
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_PowerCustomAction_BouncingGrenade::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 83442 ];

	ASFXProjectile_PowerCustomAction_BouncingGrenade_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.Bounce
// [0x00020102] 
// Parameters infos:
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_BouncingGrenade::Bounce ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnBounce = NULL;

	if ( ! pFnBounce )
		pFnBounce = (UFunction*) UObject::GObjObjects()->Data[ 83438 ];

	ASFXProjectile_PowerCustomAction_BouncingGrenade_execBounce_Parms Bounce_Parms;
	Bounce_Parms.HitActor = HitActor;
	memcpy ( &Bounce_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Bounce_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnBounce, &Bounce_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_BouncingGrenade::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 83434 ];

	ASFXProjectile_PowerCustomAction_BouncingGrenade_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.ProcessTouch
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_BouncingGrenade::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 83429 ];

	ASFXProjectile_PowerCustomAction_BouncingGrenade_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.HitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ASFXProjectile_PowerCustomAction_BouncingGrenade::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 83425 ];

	ASFXProjectile_PowerCustomAction_BouncingGrenade_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.InitializePowerProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// float                          fTravelSpeed                   ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// class Usfxpowercustomaction*   oPower                         ( CPF_Parm )

bool ASFXProjectile_PowerCustomAction_BouncingGrenade::InitializePowerProjectile ( class AActor* oCaster, float fTravelSpeed, float fRadius, class Usfxpowercustomaction* oPower )
{
	static UFunction* pFnInitializePowerProjectile = NULL;

	if ( ! pFnInitializePowerProjectile )
		pFnInitializePowerProjectile = (UFunction*) UObject::GObjObjects()->Data[ 83408 ];

	ASFXProjectile_PowerCustomAction_BouncingGrenade_execInitializePowerProjectile_Parms InitializePowerProjectile_Parms;
	InitializePowerProjectile_Parms.oCaster = oCaster;
	InitializePowerProjectile_Parms.fTravelSpeed = fTravelSpeed;
	InitializePowerProjectile_Parms.fRadius = fRadius;
	InitializePowerProjectile_Parms.oPower = oPower;

	this->ProcessEvent ( pFnInitializePowerProjectile, &InitializePowerProjectile_Parms, NULL );

	return InitializePowerProjectile_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.FuseDone
// [0x00020002] 
// Parameters infos:

void ASFXProjectile_PowerCustomAction_BouncingGrenade::FuseDone ( )
{
	static UFunction* pFnFuseDone = NULL;

	if ( ! pFnFuseDone )
		pFnFuseDone = (UFunction*) UObject::GObjObjects()->Data[ 83404 ];

	ASFXProjectile_PowerCustomAction_BouncingGrenade_execFuseDone_Parms FuseDone_Parms;

	this->ProcessEvent ( pFnFuseDone, &FuseDone_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_SentryTurret::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 83443 ];

	ASFXProjectile_PowerCustomAction_SentryTurret_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.Recycle
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_PowerCustomAction_SentryTurret::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 83442 ];

	ASFXProjectile_PowerCustomAction_SentryTurret_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.Bounce
// [0x00020102] 
// Parameters infos:
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_SentryTurret::Bounce ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnBounce = NULL;

	if ( ! pFnBounce )
		pFnBounce = (UFunction*) UObject::GObjObjects()->Data[ 83438 ];

	ASFXProjectile_PowerCustomAction_SentryTurret_execBounce_Parms Bounce_Parms;
	Bounce_Parms.HitActor = HitActor;
	memcpy ( &Bounce_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Bounce_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnBounce, &Bounce_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_SentryTurret::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 83434 ];

	ASFXProjectile_PowerCustomAction_SentryTurret_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.ProcessTouch
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_SentryTurret::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 83429 ];

	ASFXProjectile_PowerCustomAction_SentryTurret_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.HitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ASFXProjectile_PowerCustomAction_SentryTurret::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 83425 ];

	ASFXProjectile_PowerCustomAction_SentryTurret_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.InitializePowerProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// float                          fTravelSpeed                   ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// class Usfxpowercustomaction*   oPower                         ( CPF_Parm )

bool ASFXProjectile_PowerCustomAction_SentryTurret::InitializePowerProjectile ( class AActor* oCaster, float fTravelSpeed, float fRadius, class Usfxpowercustomaction* oPower )
{
	static UFunction* pFnInitializePowerProjectile = NULL;

	if ( ! pFnInitializePowerProjectile )
		pFnInitializePowerProjectile = (UFunction*) UObject::GObjObjects()->Data[ 83408 ];

	ASFXProjectile_PowerCustomAction_SentryTurret_execInitializePowerProjectile_Parms InitializePowerProjectile_Parms;
	InitializePowerProjectile_Parms.oCaster = oCaster;
	InitializePowerProjectile_Parms.fTravelSpeed = fTravelSpeed;
	InitializePowerProjectile_Parms.fRadius = fRadius;
	InitializePowerProjectile_Parms.oPower = oPower;

	this->ProcessEvent ( pFnInitializePowerProjectile, &InitializePowerProjectile_Parms, NULL );

	return InitializePowerProjectile_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile_PowerCustomAction_Grenade.FuseDone
// [0x00020002] 
// Parameters infos:

void ASFXProjectile_PowerCustomAction_SentryTurret::FuseDone ( )
{
	static UFunction* pFnFuseDone = NULL;

	if ( ! pFnFuseDone )
		pFnFuseDone = (UFunction*) UObject::GObjObjects()->Data[ 83404 ];

	ASFXProjectile_PowerCustomAction_SentryTurret_execFuseDone_Parms FuseDone_Parms;

	this->ProcessEvent ( pFnFuseDone, &FuseDone_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.Tick_Prediction
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void Asfxprojectile_powercustomaction_seeking::Tick_Prediction ( float DeltaTime )
{
	static UFunction* pFnTick_Prediction = NULL;

	if ( ! pFnTick_Prediction )
		pFnTick_Prediction = (UFunction*) UObject::GObjObjects()->Data[ 105956 ];

	Asfxprojectile_powercustomaction_seeking_execTick_Prediction_Parms Tick_Prediction_Parms;
	Tick_Prediction_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick_Prediction, &Tick_Prediction_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.Recycle
// [0x00020102] 
// Parameters infos:

void Asfxprojectile_powercustomaction_seeking::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 105957 ];

	Asfxprojectile_powercustomaction_seeking_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.InitializeRotation
// [0x00020000] 
// Parameters infos:
// class APawn*                   oCasterPawn                    ( CPF_Parm )

void Asfxprojectile_powercustomaction_seeking::InitializeRotation ( class APawn* oCasterPawn )
{
	static UFunction* pFnInitializeRotation = NULL;

	if ( ! pFnInitializeRotation )
		pFnInitializeRotation = (UFunction*) UObject::GObjObjects()->Data[ 105959 ];

	Asfxprojectile_powercustomaction_seeking_execInitializeRotation_Parms InitializeRotation_Parms;
	InitializeRotation_Parms.oCasterPawn = oCasterPawn;

	this->ProcessEvent ( pFnInitializeRotation, &InitializeRotation_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.InitializePowerProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// float                          fTravelSpeed                   ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// class Usfxpowercustomaction*   oPower                         ( CPF_Parm )

bool Asfxprojectile_powercustomaction_seeking::InitializePowerProjectile ( class AActor* oCaster, float fTravelSpeed, float fRadius, class Usfxpowercustomaction* oPower )
{
	static UFunction* pFnInitializePowerProjectile = NULL;

	if ( ! pFnInitializePowerProjectile )
		pFnInitializePowerProjectile = (UFunction*) UObject::GObjObjects()->Data[ 105966 ];

	Asfxprojectile_powercustomaction_seeking_execInitializePowerProjectile_Parms InitializePowerProjectile_Parms;
	InitializePowerProjectile_Parms.oCaster = oCaster;
	InitializePowerProjectile_Parms.fTravelSpeed = fTravelSpeed;
	InitializePowerProjectile_Parms.fRadius = fRadius;
	InitializePowerProjectile_Parms.oPower = oPower;

	this->ProcessEvent ( pFnInitializePowerProjectile, &InitializePowerProjectile_Parms, NULL );

	return InitializePowerProjectile_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.PawnEvadedPower
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )
// struct FName                   Label                          ( CPF_Parm )
// float                          TimeBeforeImpact               ( CPF_Parm )

void Asfxprojectile_powercustomaction_seeking::PawnEvadedPower ( class ABioPawn* Pawn, struct FName Label, float TimeBeforeImpact )
{
	static UFunction* pFnPawnEvadedPower = NULL;

	if ( ! pFnPawnEvadedPower )
		pFnPawnEvadedPower = (UFunction*) UObject::GObjObjects()->Data[ 105971 ];

	Asfxprojectile_powercustomaction_seeking_execPawnEvadedPower_Parms PawnEvadedPower_Parms;
	PawnEvadedPower_Parms.Pawn = Pawn;
	memcpy ( &PawnEvadedPower_Parms.Label, &Label, 0x8 );
	PawnEvadedPower_Parms.TimeBeforeImpact = TimeBeforeImpact;

	this->ProcessEvent ( pFnPawnEvadedPower, &PawnEvadedPower_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.CanLockOn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// class APawn*                   CasterPawn                     ( CPF_Parm )

bool Asfxprojectile_powercustomaction_seeking::CanLockOn ( class AActor* Target, class APawn* CasterPawn )
{
	static UFunction* pFnCanLockOn = NULL;

	if ( ! pFnCanLockOn )
		pFnCanLockOn = (UFunction*) UObject::GObjObjects()->Data[ 105979 ];

	Asfxprojectile_powercustomaction_seeking_execCanLockOn_Parms CanLockOn_Parms;
	CanLockOn_Parms.Target = Target;
	CanLockOn_Parms.CasterPawn = CasterPawn;

	this->ProcessEvent ( pFnCanLockOn, &CanLockOn_Parms, NULL );

	return CanLockOn_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void Asfxprojectile_powercustomaction_seeking::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 105982 ];

	Asfxprojectile_powercustomaction_seeking_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.TickAimRotation
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 SeekVector                     ( CPF_Parm )

void Asfxprojectile_powercustomaction_seeking::TickAimRotation ( float DeltaTime, struct FVector SeekVector )
{
	static UFunction* pFnTickAimRotation = NULL;

	if ( ! pFnTickAimRotation )
		pFnTickAimRotation = (UFunction*) UObject::GObjObjects()->Data[ 105990 ];

	Asfxprojectile_powercustomaction_seeking_execTickAimRotation_Parms TickAimRotation_Parms;
	TickAimRotation_Parms.DeltaTime = DeltaTime;
	memcpy ( &TickAimRotation_Parms.SeekVector, &SeekVector, 0xC );

	this->ProcessEvent ( pFnTickAimRotation, &TickAimRotation_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.TickAim
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void Asfxprojectile_powercustomaction_seeking::TickAim ( float DeltaTime )
{
	static UFunction* pFnTickAim = NULL;

	if ( ! pFnTickAim )
		pFnTickAim = (UFunction*) UObject::GObjObjects()->Data[ 105998 ];

	Asfxprojectile_powercustomaction_seeking_execTickAim_Parms TickAim_Parms;
	TickAim_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickAim, &TickAim_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.GetAimLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

struct FVector Asfxprojectile_powercustomaction_seeking::GetAimLocation ( class AActor* Target )
{
	static UFunction* pFnGetAimLocation = NULL;

	if ( ! pFnGetAimLocation )
		pFnGetAimLocation = (UFunction*) UObject::GObjObjects()->Data[ 106007 ];

	Asfxprojectile_powercustomaction_seeking_execGetAimLocation_Parms GetAimLocation_Parms;
	GetAimLocation_Parms.Target = Target;

	this->ProcessEvent ( pFnGetAimLocation, &GetAimLocation_Parms, NULL );

	return GetAimLocation_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.Timer
// [0x00020002] 
// Parameters infos:

void Asfxprojectile_powercustomaction_seeking::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 106000 ];

	Asfxprojectile_powercustomaction_seeking_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void Asfxprojectile_powercustomaction_seeking::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 105951 ];

	Asfxprojectile_powercustomaction_seeking_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.Tick_Prediction
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_CombatDroneRocket::Tick_Prediction ( float DeltaTime )
{
	static UFunction* pFnTick_Prediction = NULL;

	if ( ! pFnTick_Prediction )
		pFnTick_Prediction = (UFunction*) UObject::GObjObjects()->Data[ 105956 ];

	ASFXProjectile_PowerCustomAction_CombatDroneRocket_execTick_Prediction_Parms Tick_Prediction_Parms;
	Tick_Prediction_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick_Prediction, &Tick_Prediction_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.Recycle
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_PowerCustomAction_CombatDroneRocket::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 105957 ];

	ASFXProjectile_PowerCustomAction_CombatDroneRocket_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.InitializeRotation
// [0x00020000] 
// Parameters infos:
// class APawn*                   oCasterPawn                    ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_CombatDroneRocket::InitializeRotation ( class APawn* oCasterPawn )
{
	static UFunction* pFnInitializeRotation = NULL;

	if ( ! pFnInitializeRotation )
		pFnInitializeRotation = (UFunction*) UObject::GObjObjects()->Data[ 105959 ];

	ASFXProjectile_PowerCustomAction_CombatDroneRocket_execInitializeRotation_Parms InitializeRotation_Parms;
	InitializeRotation_Parms.oCasterPawn = oCasterPawn;

	this->ProcessEvent ( pFnInitializeRotation, &InitializeRotation_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.InitializePowerProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// float                          fTravelSpeed                   ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// class Usfxpowercustomaction*   oPower                         ( CPF_Parm )

bool ASFXProjectile_PowerCustomAction_CombatDroneRocket::InitializePowerProjectile ( class AActor* oCaster, float fTravelSpeed, float fRadius, class Usfxpowercustomaction* oPower )
{
	static UFunction* pFnInitializePowerProjectile = NULL;

	if ( ! pFnInitializePowerProjectile )
		pFnInitializePowerProjectile = (UFunction*) UObject::GObjObjects()->Data[ 105966 ];

	ASFXProjectile_PowerCustomAction_CombatDroneRocket_execInitializePowerProjectile_Parms InitializePowerProjectile_Parms;
	InitializePowerProjectile_Parms.oCaster = oCaster;
	InitializePowerProjectile_Parms.fTravelSpeed = fTravelSpeed;
	InitializePowerProjectile_Parms.fRadius = fRadius;
	InitializePowerProjectile_Parms.oPower = oPower;

	this->ProcessEvent ( pFnInitializePowerProjectile, &InitializePowerProjectile_Parms, NULL );

	return InitializePowerProjectile_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.PawnEvadedPower
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )
// struct FName                   Label                          ( CPF_Parm )
// float                          TimeBeforeImpact               ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_CombatDroneRocket::PawnEvadedPower ( class ABioPawn* Pawn, struct FName Label, float TimeBeforeImpact )
{
	static UFunction* pFnPawnEvadedPower = NULL;

	if ( ! pFnPawnEvadedPower )
		pFnPawnEvadedPower = (UFunction*) UObject::GObjObjects()->Data[ 105971 ];

	ASFXProjectile_PowerCustomAction_CombatDroneRocket_execPawnEvadedPower_Parms PawnEvadedPower_Parms;
	PawnEvadedPower_Parms.Pawn = Pawn;
	memcpy ( &PawnEvadedPower_Parms.Label, &Label, 0x8 );
	PawnEvadedPower_Parms.TimeBeforeImpact = TimeBeforeImpact;

	this->ProcessEvent ( pFnPawnEvadedPower, &PawnEvadedPower_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.CanLockOn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// class APawn*                   CasterPawn                     ( CPF_Parm )

bool ASFXProjectile_PowerCustomAction_CombatDroneRocket::CanLockOn ( class AActor* Target, class APawn* CasterPawn )
{
	static UFunction* pFnCanLockOn = NULL;

	if ( ! pFnCanLockOn )
		pFnCanLockOn = (UFunction*) UObject::GObjObjects()->Data[ 105979 ];

	ASFXProjectile_PowerCustomAction_CombatDroneRocket_execCanLockOn_Parms CanLockOn_Parms;
	CanLockOn_Parms.Target = Target;
	CanLockOn_Parms.CasterPawn = CasterPawn;

	this->ProcessEvent ( pFnCanLockOn, &CanLockOn_Parms, NULL );

	return CanLockOn_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_CombatDroneRocket::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 105982 ];

	ASFXProjectile_PowerCustomAction_CombatDroneRocket_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.TickAimRotation
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 SeekVector                     ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_CombatDroneRocket::TickAimRotation ( float DeltaTime, struct FVector SeekVector )
{
	static UFunction* pFnTickAimRotation = NULL;

	if ( ! pFnTickAimRotation )
		pFnTickAimRotation = (UFunction*) UObject::GObjObjects()->Data[ 105990 ];

	ASFXProjectile_PowerCustomAction_CombatDroneRocket_execTickAimRotation_Parms TickAimRotation_Parms;
	TickAimRotation_Parms.DeltaTime = DeltaTime;
	memcpy ( &TickAimRotation_Parms.SeekVector, &SeekVector, 0xC );

	this->ProcessEvent ( pFnTickAimRotation, &TickAimRotation_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.TickAim
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_CombatDroneRocket::TickAim ( float DeltaTime )
{
	static UFunction* pFnTickAim = NULL;

	if ( ! pFnTickAim )
		pFnTickAim = (UFunction*) UObject::GObjObjects()->Data[ 105998 ];

	ASFXProjectile_PowerCustomAction_CombatDroneRocket_execTickAim_Parms TickAim_Parms;
	TickAim_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickAim, &TickAim_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.GetAimLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

struct FVector ASFXProjectile_PowerCustomAction_CombatDroneRocket::GetAimLocation ( class AActor* Target )
{
	static UFunction* pFnGetAimLocation = NULL;

	if ( ! pFnGetAimLocation )
		pFnGetAimLocation = (UFunction*) UObject::GObjObjects()->Data[ 106007 ];

	ASFXProjectile_PowerCustomAction_CombatDroneRocket_execGetAimLocation_Parms GetAimLocation_Parms;
	GetAimLocation_Parms.Target = Target;

	this->ProcessEvent ( pFnGetAimLocation, &GetAimLocation_Parms, NULL );

	return GetAimLocation_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.Timer
// [0x00020002] 
// Parameters infos:

void ASFXProjectile_PowerCustomAction_CombatDroneRocket::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 106000 ];

	ASFXProjectile_PowerCustomAction_CombatDroneRocket_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function sfxgamecontent.sfxprojectile_powercustomaction_seeking.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_CombatDroneRocket::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 105951 ];

	ASFXProjectile_PowerCustomAction_CombatDroneRocket_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXPowerCustomAction_CombatDrone::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 106370 ];

	USFXPowerCustomAction_CombatDrone_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDrone::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 106371 ];

	USFXPowerCustomAction_CombatDrone_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.ClientDoPowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDrone::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 106378 ];

	USFXPowerCustomAction_CombatDrone_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDrone::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 106382 ];

	USFXPowerCustomAction_CombatDrone_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDrone::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 106384 ];

	USFXPowerCustomAction_CombatDrone_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void USFXPowerCustomAction_CombatDrone::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 106390 ];

	USFXPowerCustomAction_CombatDrone_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.OnDeathExplosionImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXPowerCustomAction_CombatDrone::OnDeathExplosionImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnDeathExplosionImpact = NULL;

	if ( ! pFnOnDeathExplosionImpact )
		pFnOnDeathExplosionImpact = (UFunction*) UObject::GObjObjects()->Data[ 106397 ];

	USFXPowerCustomAction_CombatDrone_execOnDeathExplosionImpact_Parms OnDeathExplosionImpact_Parms;
	OnDeathExplosionImpact_Parms.Resistance = Resistance;
	OnDeathExplosionImpact_Parms.oImpacted = oImpacted;
	OnDeathExplosionImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnDeathExplosionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnDeathExplosionImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnDeathExplosionImpact, &OnDeathExplosionImpact_Parms, NULL );

	return OnDeathExplosionImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.OnDroneKilled
// [0x00020002] 
// Parameters infos:
// class ASFXPawn_CombatDroneBase* oDrone                         ( CPF_Parm )

void USFXPowerCustomAction_CombatDrone::OnDroneKilled ( class ASFXPawn_CombatDroneBase* oDrone )
{
	static UFunction* pFnOnDroneKilled = NULL;

	if ( ! pFnOnDroneKilled )
		pFnOnDroneKilled = (UFunction*) UObject::GObjObjects()->Data[ 106407 ];

	USFXPowerCustomAction_CombatDrone_execOnDroneKilled_Parms OnDroneKilled_Parms;
	OnDroneKilled_Parms.oDrone = oDrone;

	this->ProcessEvent ( pFnOnDroneKilled, &OnDroneKilled_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.GetDamageType
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* USFXPowerCustomAction_CombatDrone::GetDamageType ( )
{
	static UFunction* pFnGetDamageType = NULL;

	if ( ! pFnGetDamageType )
		pFnGetDamageType = (UFunction*) UObject::GObjObjects()->Data[ 106409 ];

	USFXPowerCustomAction_CombatDrone_execGetDamageType_Parms GetDamageType_Parms;

	this->ProcessEvent ( pFnGetDamageType, &GetDamageType_Parms, NULL );

	return GetDamageType_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.OnPowerRankIncreased
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDrone::OnPowerRankIncreased ( )
{
	static UFunction* pFnOnPowerRankIncreased = NULL;

	if ( ! pFnOnPowerRankIncreased )
		pFnOnPowerRankIncreased = (UFunction*) UObject::GObjObjects()->Data[ 106410 ];

	USFXPowerCustomAction_CombatDrone_execOnPowerRankIncreased_Parms OnPowerRankIncreased_Parms;

	this->ProcessEvent ( pFnOnPowerRankIncreased, &OnPowerRankIncreased_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.IsDroneAlive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXPowerCustomAction_CombatDrone::IsDroneAlive ( )
{
	static UFunction* pFnIsDroneAlive = NULL;

	if ( ! pFnIsDroneAlive )
		pFnIsDroneAlive = (UFunction*) UObject::GObjObjects()->Data[ 106412 ];

	USFXPowerCustomAction_CombatDrone_execIsDroneAlive_Parms IsDroneAlive_Parms;

	this->ProcessEvent ( pFnIsDroneAlive, &IsDroneAlive_Parms, NULL );

	return IsDroneAlive_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.SetupSpawnedDrone
// [0x00820002] 
// Parameters infos:
// class ASFXPawn_CombatDroneBase* SpawnedDrone                   ( CPF_Parm )

void USFXPowerCustomAction_CombatDrone::SetupSpawnedDrone ( class ASFXPawn_CombatDroneBase* SpawnedDrone )
{
	static UFunction* pFnSetupSpawnedDrone = NULL;

	if ( ! pFnSetupSpawnedDrone )
		pFnSetupSpawnedDrone = (UFunction*) UObject::GObjObjects()->Data[ 106432 ];

	USFXPowerCustomAction_CombatDrone_execSetupSpawnedDrone_Parms SetupSpawnedDrone_Parms;
	SetupSpawnedDrone_Parms.SpawnedDrone = SpawnedDrone;

	this->ProcessEvent ( pFnSetupSpawnedDrone, &SetupSpawnedDrone_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.NonCombatDespawnDrone
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXPowerCustomAction_CombatDrone::NonCombatDespawnDrone ( )
{
	static UFunction* pFnNonCombatDespawnDrone = NULL;

	if ( ! pFnNonCombatDespawnDrone )
		pFnNonCombatDespawnDrone = (UFunction*) UObject::GObjObjects()->Data[ 106433 ];

	USFXPowerCustomAction_CombatDrone_execNonCombatDespawnDrone_Parms NonCombatDespawnDrone_Parms;

	this->ProcessEvent ( pFnNonCombatDespawnDrone, &NonCombatDespawnDrone_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.DroneNonCombatCheck
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXPowerCustomAction_CombatDrone::DroneNonCombatCheck ( )
{
	static UFunction* pFnDroneNonCombatCheck = NULL;

	if ( ! pFnDroneNonCombatCheck )
		pFnDroneNonCombatCheck = (UFunction*) UObject::GObjObjects()->Data[ 106437 ];

	USFXPowerCustomAction_CombatDrone_execDroneNonCombatCheck_Parms DroneNonCombatCheck_Parms;

	this->ProcessEvent ( pFnDroneNonCombatCheck, &DroneNonCombatCheck_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.SpawnDrone
// [0x00020002] 
// Parameters infos:
// class ASFXPawn_CombatDroneBase* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 location                       ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )

class ASFXPawn_CombatDroneBase* USFXPowerCustomAction_CombatDrone::SpawnDrone ( struct FVector location, struct FRotator Rotation )
{
	static UFunction* pFnSpawnDrone = NULL;

	if ( ! pFnSpawnDrone )
		pFnSpawnDrone = (UFunction*) UObject::GObjObjects()->Data[ 106443 ];

	USFXPowerCustomAction_CombatDrone_execSpawnDrone_Parms SpawnDrone_Parms;
	memcpy ( &SpawnDrone_Parms.location, &location, 0xC );
	memcpy ( &SpawnDrone_Parms.Rotation, &Rotation, 0xC );

	this->ProcessEvent ( pFnSpawnDrone, &SpawnDrone_Parms, NULL );

	return SpawnDrone_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.OnPowerDetonated
// [0x00024002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDrone::OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor )
{
	static UFunction* pFnOnPowerDetonated = NULL;

	if ( ! pFnOnPowerDetonated )
		pFnOnPowerDetonated = (UFunction*) UObject::GObjObjects()->Data[ 106451 ];

	USFXPowerCustomAction_CombatDrone_execOnPowerDetonated_Parms OnPowerDetonated_Parms;
	memcpy ( &OnPowerDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerDetonated_Parms.HitNormal, &HitNormal, 0xC );
	OnPowerDetonated_Parms.oProjectile = oProjectile;
	OnPowerDetonated_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnOnPowerDetonated, &OnPowerDetonated_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDrone.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDrone::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 106453 ];

	USFXPowerCustomAction_CombatDrone_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function Engine.SequenceEvent.Toggled
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXSeqEvt_PlaceableActivated::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = (UFunction*) UObject::GObjObjects()->Data[ 26860 ];

	USFXSeqEvt_PlaceableActivated_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SequenceEvent.Reset
// [0x00020002] 
// Parameters infos:

void USFXSeqEvt_PlaceableActivated::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 26857 ];

	USFXSeqEvt_PlaceableActivated_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SequenceEvent.PassesWhoTriggers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  inInstigator                   ( CPF_Parm )

bool USFXSeqEvt_PlaceableActivated::PassesWhoTriggers ( class AActor* inInstigator )
{
	static UFunction* pFnPassesWhoTriggers = NULL;

	if ( ! pFnPassesWhoTriggers )
		pFnPassesWhoTriggers = (UFunction*) UObject::GObjObjects()->Data[ 26854 ];

	USFXSeqEvt_PlaceableActivated_execPassesWhoTriggers_Parms PassesWhoTriggers_Parms;
	PassesWhoTriggers_Parms.inInstigator = inInstigator;

	pFnPassesWhoTriggers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPassesWhoTriggers, &PassesWhoTriggers_Parms, NULL );

	pFnPassesWhoTriggers->FunctionFlags |= 0x400;

	return PassesWhoTriggers_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.CheckActivate
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  inOriginator                   ( CPF_Parm )
// class AActor*                  inInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPushTop                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSFXForceThisFrame             ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  ActivateIndices                ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXSeqEvt_PlaceableActivated::CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices )
{
	static UFunction* pFnCheckActivate = NULL;

	if ( ! pFnCheckActivate )
		pFnCheckActivate = (UFunction*) UObject::GObjObjects()->Data[ 4465 ];

	USFXSeqEvt_PlaceableActivated_execCheckActivate_Parms CheckActivate_Parms;
	CheckActivate_Parms.inOriginator = inOriginator;
	CheckActivate_Parms.inInstigator = inInstigator;
	CheckActivate_Parms.bTest = bTest;
	CheckActivate_Parms.bPushTop = bPushTop;
	CheckActivate_Parms.bSFXForceThisFrame = bSFXForceThisFrame;

	pFnCheckActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckActivate, &CheckActivate_Parms, NULL );

	pFnCheckActivate->FunctionFlags |= 0x400;

	if ( ActivateIndices )
		memcpy ( ActivateIndices, &CheckActivate_Parms.ActivateIndices, 0xC );

	return CheckActivate_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.RegisterEvent
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXSeqEvt_PlaceableActivated::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = (UFunction*) UObject::GObjObjects()->Data[ 26846 ];

	USFXSeqEvt_PlaceableActivated_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function Engine.SequenceEvent.Toggled
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXSeqEvt_PlaceableDeactivated::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = (UFunction*) UObject::GObjObjects()->Data[ 26860 ];

	USFXSeqEvt_PlaceableDeactivated_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SequenceEvent.Reset
// [0x00020002] 
// Parameters infos:

void USFXSeqEvt_PlaceableDeactivated::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 26857 ];

	USFXSeqEvt_PlaceableDeactivated_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SequenceEvent.PassesWhoTriggers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  inInstigator                   ( CPF_Parm )

bool USFXSeqEvt_PlaceableDeactivated::PassesWhoTriggers ( class AActor* inInstigator )
{
	static UFunction* pFnPassesWhoTriggers = NULL;

	if ( ! pFnPassesWhoTriggers )
		pFnPassesWhoTriggers = (UFunction*) UObject::GObjObjects()->Data[ 26854 ];

	USFXSeqEvt_PlaceableDeactivated_execPassesWhoTriggers_Parms PassesWhoTriggers_Parms;
	PassesWhoTriggers_Parms.inInstigator = inInstigator;

	pFnPassesWhoTriggers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPassesWhoTriggers, &PassesWhoTriggers_Parms, NULL );

	pFnPassesWhoTriggers->FunctionFlags |= 0x400;

	return PassesWhoTriggers_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.CheckActivate
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  inOriginator                   ( CPF_Parm )
// class AActor*                  inInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPushTop                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSFXForceThisFrame             ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  ActivateIndices                ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXSeqEvt_PlaceableDeactivated::CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices )
{
	static UFunction* pFnCheckActivate = NULL;

	if ( ! pFnCheckActivate )
		pFnCheckActivate = (UFunction*) UObject::GObjObjects()->Data[ 4465 ];

	USFXSeqEvt_PlaceableDeactivated_execCheckActivate_Parms CheckActivate_Parms;
	CheckActivate_Parms.inOriginator = inOriginator;
	CheckActivate_Parms.inInstigator = inInstigator;
	CheckActivate_Parms.bTest = bTest;
	CheckActivate_Parms.bPushTop = bPushTop;
	CheckActivate_Parms.bSFXForceThisFrame = bSFXForceThisFrame;

	pFnCheckActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckActivate, &CheckActivate_Parms, NULL );

	pFnCheckActivate->FunctionFlags |= 0x400;

	if ( ActivateIndices )
		memcpy ( ActivateIndices, &CheckActivate_Parms.ActivateIndices, 0xC );

	return CheckActivate_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.RegisterEvent
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXSeqEvt_PlaceableDeactivated::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = (UFunction*) UObject::GObjObjects()->Data[ 26846 ];

	USFXSeqEvt_PlaceableDeactivated_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function Engine.SequenceEvent.Toggled
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXSeqEvt_PlaceableDestroyed::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = (UFunction*) UObject::GObjObjects()->Data[ 26860 ];

	USFXSeqEvt_PlaceableDestroyed_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SequenceEvent.Reset
// [0x00020002] 
// Parameters infos:

void USFXSeqEvt_PlaceableDestroyed::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 26857 ];

	USFXSeqEvt_PlaceableDestroyed_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SequenceEvent.PassesWhoTriggers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  inInstigator                   ( CPF_Parm )

bool USFXSeqEvt_PlaceableDestroyed::PassesWhoTriggers ( class AActor* inInstigator )
{
	static UFunction* pFnPassesWhoTriggers = NULL;

	if ( ! pFnPassesWhoTriggers )
		pFnPassesWhoTriggers = (UFunction*) UObject::GObjObjects()->Data[ 26854 ];

	USFXSeqEvt_PlaceableDestroyed_execPassesWhoTriggers_Parms PassesWhoTriggers_Parms;
	PassesWhoTriggers_Parms.inInstigator = inInstigator;

	pFnPassesWhoTriggers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPassesWhoTriggers, &PassesWhoTriggers_Parms, NULL );

	pFnPassesWhoTriggers->FunctionFlags |= 0x400;

	return PassesWhoTriggers_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.CheckActivate
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  inOriginator                   ( CPF_Parm )
// class AActor*                  inInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPushTop                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSFXForceThisFrame             ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  ActivateIndices                ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXSeqEvt_PlaceableDestroyed::CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices )
{
	static UFunction* pFnCheckActivate = NULL;

	if ( ! pFnCheckActivate )
		pFnCheckActivate = (UFunction*) UObject::GObjObjects()->Data[ 4465 ];

	USFXSeqEvt_PlaceableDestroyed_execCheckActivate_Parms CheckActivate_Parms;
	CheckActivate_Parms.inOriginator = inOriginator;
	CheckActivate_Parms.inInstigator = inInstigator;
	CheckActivate_Parms.bTest = bTest;
	CheckActivate_Parms.bPushTop = bPushTop;
	CheckActivate_Parms.bSFXForceThisFrame = bSFXForceThisFrame;

	pFnCheckActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckActivate, &CheckActivate_Parms, NULL );

	pFnCheckActivate->FunctionFlags |= 0x400;

	if ( ActivateIndices )
		memcpy ( ActivateIndices, &CheckActivate_Parms.ActivateIndices, 0xC );

	return CheckActivate_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.RegisterEvent
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXSeqEvt_PlaceableDestroyed::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = (UFunction*) UObject::GObjObjects()->Data[ 26846 ];

	USFXSeqEvt_PlaceableDestroyed_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function Engine.SequenceEvent.Toggled
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXSeqEvt_PlaceableReset::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = (UFunction*) UObject::GObjObjects()->Data[ 26860 ];

	USFXSeqEvt_PlaceableReset_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SequenceEvent.Reset
// [0x00020002] 
// Parameters infos:

void USFXSeqEvt_PlaceableReset::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 26857 ];

	USFXSeqEvt_PlaceableReset_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SequenceEvent.PassesWhoTriggers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  inInstigator                   ( CPF_Parm )

bool USFXSeqEvt_PlaceableReset::PassesWhoTriggers ( class AActor* inInstigator )
{
	static UFunction* pFnPassesWhoTriggers = NULL;

	if ( ! pFnPassesWhoTriggers )
		pFnPassesWhoTriggers = (UFunction*) UObject::GObjObjects()->Data[ 26854 ];

	USFXSeqEvt_PlaceableReset_execPassesWhoTriggers_Parms PassesWhoTriggers_Parms;
	PassesWhoTriggers_Parms.inInstigator = inInstigator;

	pFnPassesWhoTriggers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPassesWhoTriggers, &PassesWhoTriggers_Parms, NULL );

	pFnPassesWhoTriggers->FunctionFlags |= 0x400;

	return PassesWhoTriggers_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.CheckActivate
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  inOriginator                   ( CPF_Parm )
// class AActor*                  inInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPushTop                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSFXForceThisFrame             ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  ActivateIndices                ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXSeqEvt_PlaceableReset::CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices )
{
	static UFunction* pFnCheckActivate = NULL;

	if ( ! pFnCheckActivate )
		pFnCheckActivate = (UFunction*) UObject::GObjObjects()->Data[ 4465 ];

	USFXSeqEvt_PlaceableReset_execCheckActivate_Parms CheckActivate_Parms;
	CheckActivate_Parms.inOriginator = inOriginator;
	CheckActivate_Parms.inInstigator = inInstigator;
	CheckActivate_Parms.bTest = bTest;
	CheckActivate_Parms.bPushTop = bPushTop;
	CheckActivate_Parms.bSFXForceThisFrame = bSFXForceThisFrame;

	pFnCheckActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckActivate, &CheckActivate_Parms, NULL );

	pFnCheckActivate->FunctionFlags |= 0x400;

	if ( ActivateIndices )
		memcpy ( ActivateIndices, &CheckActivate_Parms.ActivateIndices, 0xC );

	return CheckActivate_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.RegisterEvent
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXSeqEvt_PlaceableReset::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = (UFunction*) UObject::GObjObjects()->Data[ 26846 ];

	USFXSeqEvt_PlaceableReset_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function sfxgamecontent.SFXPlaceable.ActivatePlaceable
// [0x00020102] 
// Parameters infos:

void ASFXPlaceable::ActivatePlaceable ( )
{
	static UFunction* pFnActivatePlaceable = NULL;

	if ( ! pFnActivatePlaceable )
		pFnActivatePlaceable = (UFunction*) UObject::GObjObjects()->Data[ 106594 ];

	ASFXPlaceable_execActivatePlaceable_Parms ActivatePlaceable_Parms;

	this->ProcessEvent ( pFnActivatePlaceable, &ActivatePlaceable_Parms, NULL );
};

// Function sfxgamecontent.SFXPlaceable.DeactivatePlaceable
// [0x00020102] 
// Parameters infos:

void ASFXPlaceable::DeactivatePlaceable ( )
{
	static UFunction* pFnDeactivatePlaceable = NULL;

	if ( ! pFnDeactivatePlaceable )
		pFnDeactivatePlaceable = (UFunction*) UObject::GObjObjects()->Data[ 106596 ];

	ASFXPlaceable_execDeactivatePlaceable_Parms DeactivatePlaceable_Parms;

	this->ProcessEvent ( pFnDeactivatePlaceable, &DeactivatePlaceable_Parms, NULL );
};

// Function sfxgamecontent.SFXPlaceable.AllowPlaceableDamageEvents
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             EventInstigator                ( CPF_Parm )

bool ASFXPlaceable::AllowPlaceableDamageEvents ( class AController* EventInstigator )
{
	static UFunction* pFnAllowPlaceableDamageEvents = NULL;

	if ( ! pFnAllowPlaceableDamageEvents )
		pFnAllowPlaceableDamageEvents = (UFunction*) UObject::GObjObjects()->Data[ 106599 ];

	ASFXPlaceable_execAllowPlaceableDamageEvents_Parms AllowPlaceableDamageEvents_Parms;
	AllowPlaceableDamageEvents_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnAllowPlaceableDamageEvents, &AllowPlaceableDamageEvents_Parms, NULL );

	return AllowPlaceableDamageEvents_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPlaceable.ImpactWithPower
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class APawn*                   Caster                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// float                          Damage                         ( CPF_Parm )
// struct FVector                 Force                          ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

bool ASFXPlaceable::ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType )
{
	static UFunction* pFnImpactWithPower = NULL;

	if ( ! pFnImpactWithPower )
		pFnImpactWithPower = (UFunction*) UObject::GObjObjects()->Data[ 106608 ];

	ASFXPlaceable_execImpactWithPower_Parms ImpactWithPower_Parms;
	ImpactWithPower_Parms.Resistance = Resistance;
	ImpactWithPower_Parms.Caster = Caster;
	memcpy ( &ImpactWithPower_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ImpactWithPower_Parms.HitNormal, &HitNormal, 0xC );
	ImpactWithPower_Parms.Damage = Damage;
	memcpy ( &ImpactWithPower_Parms.Force, &Force, 0xC );
	ImpactWithPower_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnImpactWithPower, &ImpactWithPower_Parms, NULL );

	return ImpactWithPower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPlaceable.AreaDamage
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// float                          Force                          ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          ImpactRadius                   ( CPF_Parm )

void ASFXPlaceable::AreaDamage ( float Damage, float Force, class UClass* DamageType, float ImpactRadius )
{
	static UFunction* pFnAreaDamage = NULL;

	if ( ! pFnAreaDamage )
		pFnAreaDamage = (UFunction*) UObject::GObjObjects()->Data[ 106618 ];

	ASFXPlaceable_execAreaDamage_Parms AreaDamage_Parms;
	AreaDamage_Parms.Damage = Damage;
	AreaDamage_Parms.Force = Force;
	AreaDamage_Parms.DamageType = DamageType;
	AreaDamage_Parms.ImpactRadius = ImpactRadius;

	this->ProcessEvent ( pFnAreaDamage, &AreaDamage_Parms, NULL );
};

// Function sfxgamecontent.SFXPlaceable.AreaDamageForActor
// [0x00020000] 
// Parameters infos:
// class AActor*                  HitActor                       ( CPF_Parm )

void ASFXPlaceable::AreaDamageForActor ( class AActor* HitActor )
{
	static UFunction* pFnAreaDamageForActor = NULL;

	if ( ! pFnAreaDamageForActor )
		pFnAreaDamageForActor = (UFunction*) UObject::GObjObjects()->Data[ 106620 ];

	ASFXPlaceable_execAreaDamageForActor_Parms AreaDamageForActor_Parms;
	AreaDamageForActor_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnAreaDamageForActor, &AreaDamageForActor_Parms, NULL );
};

// Function sfxgamecontent.SFXPlaceable.PlaceableDestroyed
// [0x00020102] 
// Parameters infos:

void ASFXPlaceable::PlaceableDestroyed ( )
{
	static UFunction* pFnPlaceableDestroyed = NULL;

	if ( ! pFnPlaceableDestroyed )
		pFnPlaceableDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 106622 ];

	ASFXPlaceable_execPlaceableDestroyed_Parms PlaceableDestroyed_Parms;

	this->ProcessEvent ( pFnPlaceableDestroyed, &PlaceableDestroyed_Parms, NULL );
};

// Function sfxgamecontent.SFXPlaceable.ResetPlaceable
// [0x00020102] 
// Parameters infos:

void ASFXPlaceable::ResetPlaceable ( )
{
	static UFunction* pFnResetPlaceable = NULL;

	if ( ! pFnResetPlaceable )
		pFnResetPlaceable = (UFunction*) UObject::GObjObjects()->Data[ 106624 ];

	ASFXPlaceable_execResetPlaceable_Parms ResetPlaceable_Parms;

	this->ProcessEvent ( pFnResetPlaceable, &ResetPlaceable_Parms, NULL );
};

// Function sfxgamecontent.SFXPlaceable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASFXPlaceable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 106628 ];

	ASFXPlaceable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetSaveGamePowerState
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxpowercustomaction_sentryturretshock::GetSaveGamePowerState ( )
{
	static UFunction* pFnGetSaveGamePowerState = NULL;

	if ( ! pFnGetSaveGamePowerState )
		pFnGetSaveGamePowerState = (UFunction*) UObject::GObjObjects()->Data[ 82415 ];

	Usfxpowercustomaction_sentryturretshock_execGetSaveGamePowerState_Parms GetSaveGamePowerState_Parms;

	this->ProcessEvent ( pFnGetSaveGamePowerState, &GetSaveGamePowerState_Parms, NULL );

	return GetSaveGamePowerState_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.SetSaveGamePowerState
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nState                         ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::SetSaveGamePowerState ( int nState )
{
	static UFunction* pFnSetSaveGamePowerState = NULL;

	if ( ! pFnSetSaveGamePowerState )
		pFnSetSaveGamePowerState = (UFunction*) UObject::GObjObjects()->Data[ 82413 ];

	Usfxpowercustomaction_sentryturretshock_execSetSaveGamePowerState_Parms SetSaveGamePowerState_Parms;
	SetSaveGamePowerState_Parms.nState = nState;

	this->ProcessEvent ( pFnSetSaveGamePowerState, &SetSaveGamePowerState_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetUniquePowerPlayerVariable
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName Usfxpowercustomaction_sentryturretshock::GetUniquePowerPlayerVariable ( )
{
	static UFunction* pFnGetUniquePowerPlayerVariable = NULL;

	if ( ! pFnGetUniquePowerPlayerVariable )
		pFnGetUniquePowerPlayerVariable = (UFunction*) UObject::GObjObjects()->Data[ 82411 ];

	Usfxpowercustomaction_sentryturretshock_execGetUniquePowerPlayerVariable_Parms GetUniquePowerPlayerVariable_Parms;

	this->ProcessEvent ( pFnGetUniquePowerPlayerVariable, &GetUniquePowerPlayerVariable_Parms, NULL );

	return GetUniquePowerPlayerVariable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.RestoreSaveState
// [0x00020000] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::RestoreSaveState ( )
{
	static UFunction* pFnRestoreSaveState = NULL;

	if ( ! pFnRestoreSaveState )
		pFnRestoreSaveState = (UFunction*) UObject::GObjObjects()->Data[ 82410 ];

	Usfxpowercustomaction_sentryturretshock_execRestoreSaveState_Parms RestoreSaveState_Parms;

	this->ProcessEvent ( pFnRestoreSaveState, &RestoreSaveState_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicationDecodeDelayAndResistance
// [0x00420002] 
// Parameters infos:
// int                            EncodedData                    ( CPF_Parm )
// float                          fDelay                         ( CPF_Parm | CPF_OutParm )
// unsigned char                  Resistance                     ( CPF_Parm | CPF_OutParm )

void Usfxpowercustomaction_sentryturretshock::ReplicationDecodeDelayAndResistance ( int EncodedData, float* fDelay, unsigned char* Resistance )
{
	static UFunction* pFnReplicationDecodeDelayAndResistance = NULL;

	if ( ! pFnReplicationDecodeDelayAndResistance )
		pFnReplicationDecodeDelayAndResistance = (UFunction*) UObject::GObjObjects()->Data[ 82406 ];

	Usfxpowercustomaction_sentryturretshock_execReplicationDecodeDelayAndResistance_Parms ReplicationDecodeDelayAndResistance_Parms;
	ReplicationDecodeDelayAndResistance_Parms.EncodedData = EncodedData;

	this->ProcessEvent ( pFnReplicationDecodeDelayAndResistance, &ReplicationDecodeDelayAndResistance_Parms, NULL );

	if ( fDelay )
		*fDelay = ReplicationDecodeDelayAndResistance_Parms.fDelay;

	if ( Resistance )
		*Resistance = ReplicationDecodeDelayAndResistance_Parms.Resistance;
};

// Function SFXGame.sfxpowercustomaction.ReplicationEncodeDelayAndResistance
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDelay                         ( CPF_Parm )
// unsigned char                  Resistance                     ( CPF_Parm )

int Usfxpowercustomaction_sentryturretshock::ReplicationEncodeDelayAndResistance ( float fDelay, unsigned char Resistance )
{
	static UFunction* pFnReplicationEncodeDelayAndResistance = NULL;

	if ( ! pFnReplicationEncodeDelayAndResistance )
		pFnReplicationEncodeDelayAndResistance = (UFunction*) UObject::GObjObjects()->Data[ 82402 ];

	Usfxpowercustomaction_sentryturretshock_execReplicationEncodeDelayAndResistance_Parms ReplicationEncodeDelayAndResistance_Parms;
	ReplicationEncodeDelayAndResistance_Parms.fDelay = fDelay;
	ReplicationEncodeDelayAndResistance_Parms.Resistance = Resistance;

	this->ProcessEvent ( pFnReplicationEncodeDelayAndResistance, &ReplicationEncodeDelayAndResistance_Parms, NULL );

	return ReplicationEncodeDelayAndResistance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.OnSourcePowerBioticDetonation
// [0x00020000] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::OnSourcePowerBioticDetonation ( )
{
	static UFunction* pFnOnSourcePowerBioticDetonation = NULL;

	if ( ! pFnOnSourcePowerBioticDetonation )
		pFnOnSourcePowerBioticDetonation = (UFunction*) UObject::GObjObjects()->Data[ 82401 ];

	Usfxpowercustomaction_sentryturretshock_execOnSourcePowerBioticDetonation_Parms OnSourcePowerBioticDetonation_Parms;

	this->ProcessEvent ( pFnOnSourcePowerBioticDetonation, &OnSourcePowerBioticDetonation_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerComboClassFromUniqueID
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )

struct FString Usfxpowercustomaction_sentryturretshock::GetPowerComboClassFromUniqueID ( int PowerComboTypeUniqueID )
{
	static UFunction* pFnGetPowerComboClassFromUniqueID = NULL;

	if ( ! pFnGetPowerComboClassFromUniqueID )
		pFnGetPowerComboClassFromUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 82398 ];

	Usfxpowercustomaction_sentryturretshock_execGetPowerComboClassFromUniqueID_Parms GetPowerComboClassFromUniqueID_Parms;
	GetPowerComboClassFromUniqueID_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;

	this->ProcessEvent ( pFnGetPowerComboClassFromUniqueID, &GetPowerComboClassFromUniqueID_Parms, NULL );

	return GetPowerComboClassFromUniqueID_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPowerComboTypeUniqueIDFromClass
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 className                      ( CPF_Parm | CPF_NeedCtorLink )

int Usfxpowercustomaction_sentryturretshock::GetPowerComboTypeUniqueIDFromClass ( struct FString className )
{
	static UFunction* pFnGetPowerComboTypeUniqueIDFromClass = NULL;

	if ( ! pFnGetPowerComboTypeUniqueIDFromClass )
		pFnGetPowerComboTypeUniqueIDFromClass = (UFunction*) UObject::GObjObjects()->Data[ 69117 ];

	Usfxpowercustomaction_sentryturretshock_execGetPowerComboTypeUniqueIDFromClass_Parms GetPowerComboTypeUniqueIDFromClass_Parms;
	memcpy ( &GetPowerComboTypeUniqueIDFromClass_Parms.className, &className, 0xC );

	this->ProcessEvent ( pFnGetPowerComboTypeUniqueIDFromClass, &GetPowerComboTypeUniqueIDFromClass_Parms, NULL );

	return GetPowerComboTypeUniqueIDFromClass_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerComboImpactFromEffect
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// struct FString                 EffectClassName                ( CPF_Parm | CPF_NeedCtorLink )
// float                          DetonatorPowerRank             ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ClientDoPowerComboImpactFromEffect ( class AActor* oTarget, int CustomActionReactionType, struct FString EffectClassName, float DetonatorPowerRank, int MiscFlags )
{
	static UFunction* pFnClientDoPowerComboImpactFromEffect = NULL;

	if ( ! pFnClientDoPowerComboImpactFromEffect )
		pFnClientDoPowerComboImpactFromEffect = (UFunction*) UObject::GObjObjects()->Data[ 82387 ];

	Usfxpowercustomaction_sentryturretshock_execClientDoPowerComboImpactFromEffect_Parms ClientDoPowerComboImpactFromEffect_Parms;
	ClientDoPowerComboImpactFromEffect_Parms.oTarget = oTarget;
	ClientDoPowerComboImpactFromEffect_Parms.CustomActionReactionType = CustomActionReactionType;
	memcpy ( &ClientDoPowerComboImpactFromEffect_Parms.EffectClassName, &EffectClassName, 0xC );
	ClientDoPowerComboImpactFromEffect_Parms.DetonatorPowerRank = DetonatorPowerRank;
	ClientDoPowerComboImpactFromEffect_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnClientDoPowerComboImpactFromEffect, &ClientDoPowerComboImpactFromEffect_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerCombo
// [0x00020002] 
// Parameters infos:
// class UClass*                  EffectClass                    ( CPF_Parm )
// int                            SourcePowerID                  ( CPF_Parm )
// class ABioPawn*                SourcePowerInstigator          ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ClientDoPowerCombo ( class UClass* EffectClass, int SourcePowerID, class ABioPawn* SourcePowerInstigator, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnClientDoPowerCombo = NULL;

	if ( ! pFnClientDoPowerCombo )
		pFnClientDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82375 ];

	Usfxpowercustomaction_sentryturretshock_execClientDoPowerCombo_Parms ClientDoPowerCombo_Parms;
	ClientDoPowerCombo_Parms.EffectClass = EffectClass;
	ClientDoPowerCombo_Parms.SourcePowerID = SourcePowerID;
	ClientDoPowerCombo_Parms.SourcePowerInstigator = SourcePowerInstigator;
	ClientDoPowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &ClientDoPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoPowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnClientDoPowerCombo, &ClientDoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerCombo
// [0x00020002] 
// Parameters infos:
// class Usfxgameeffect_powercombo* ComboEffect                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ReplicatePowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnReplicatePowerCombo = NULL;

	if ( ! pFnReplicatePowerCombo )
		pFnReplicatePowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82370 ];

	Usfxpowercustomaction_sentryturretshock_execReplicatePowerCombo_Parms ReplicatePowerCombo_Parms;
	ReplicatePowerCombo_Parms.ComboEffect = ComboEffect;
	ReplicatePowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &ReplicatePowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicatePowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnReplicatePowerCombo, &ReplicatePowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DelayedDoPowerCombo
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::DelayedDoPowerCombo ( )
{
	static UFunction* pFnDelayedDoPowerCombo = NULL;

	if ( ! pFnDelayedDoPowerCombo )
		pFnDelayedDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82369 ];

	Usfxpowercustomaction_sentryturretshock_execDelayedDoPowerCombo_Parms DelayedDoPowerCombo_Parms;

	this->ProcessEvent ( pFnDelayedDoPowerCombo, &DelayedDoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DoPowerCombo
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// class Usfxgameeffect_powercombo* ComboEffect                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// unsigned long                  bDelayed                       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::DoPowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal, unsigned long bDelayed )
{
	static UFunction* pFnDoPowerCombo = NULL;

	if ( ! pFnDoPowerCombo )
		pFnDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82357 ];

	Usfxpowercustomaction_sentryturretshock_execDoPowerCombo_Parms DoPowerCombo_Parms;
	DoPowerCombo_Parms.ComboEffect = ComboEffect;
	DoPowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &DoPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoPowerCombo_Parms.HitNormal, &HitNormal, 0xC );
	DoPowerCombo_Parms.bDelayed = bDelayed;

	this->ProcessEvent ( pFnDoPowerCombo, &DoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CheckForPowerCombo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// unsigned char                  Resistance                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::CheckForPowerCombo ( class AActor* Target, unsigned char Resistance, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnCheckForPowerCombo = NULL;

	if ( ! pFnCheckForPowerCombo )
		pFnCheckForPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82021 ];

	Usfxpowercustomaction_sentryturretshock_execCheckForPowerCombo_Parms CheckForPowerCombo_Parms;
	CheckForPowerCombo_Parms.Target = Target;
	CheckForPowerCombo_Parms.Resistance = Resistance;
	memcpy ( &CheckForPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &CheckForPowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnCheckForPowerCombo, &CheckForPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.AddComboEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class Usfxgameeffect_powercombo* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// class UClass*                  ComboClass                     ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )

class Usfxgameeffect_powercombo* Usfxpowercustomaction_sentryturretshock::AddComboEffect ( class AActor* Target, class UClass* ComboClass, float Duration )
{
	static UFunction* pFnAddComboEffect = NULL;

	if ( ! pFnAddComboEffect )
		pFnAddComboEffect = (UFunction*) UObject::GObjObjects()->Data[ 82341 ];

	Usfxpowercustomaction_sentryturretshock_execAddComboEffect_Parms AddComboEffect_Parms;
	AddComboEffect_Parms.Target = Target;
	AddComboEffect_Parms.ComboClass = ComboClass;
	AddComboEffect_Parms.Duration = Duration;

	this->ProcessEvent ( pFnAddComboEffect, &AddComboEffect_Parms, NULL );

	return AddComboEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 82338 ];

	Usfxpowercustomaction_sentryturretshock_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CombatEnded
// [0x00020000] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::CombatEnded ( )
{
	static UFunction* pFnCombatEnded = NULL;

	if ( ! pFnCombatEnded )
		pFnCombatEnded = (UFunction*) UObject::GObjObjects()->Data[ 82337 ];

	Usfxpowercustomaction_sentryturretshock_execCombatEnded_Parms CombatEnded_Parms;

	this->ProcessEvent ( pFnCombatEnded, &CombatEnded_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplaceAnimSetWithDynamic
// [0x00020002] 
// Parameters infos:
// class UAnimSet*                DynAnimSet                     ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ReplaceAnimSetWithDynamic ( class UAnimSet* DynAnimSet )
{
	static UFunction* pFnReplaceAnimSetWithDynamic = NULL;

	if ( ! pFnReplaceAnimSetWithDynamic )
		pFnReplaceAnimSetWithDynamic = (UFunction*) UObject::GObjObjects()->Data[ 82335 ];

	Usfxpowercustomaction_sentryturretshock_execReplaceAnimSetWithDynamic_Parms ReplaceAnimSetWithDynamic_Parms;
	ReplaceAnimSetWithDynamic_Parms.DynAnimSet = DynAnimSet;

	this->ProcessEvent ( pFnReplaceAnimSetWithDynamic, &ReplaceAnimSetWithDynamic_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerAnimInfo
// [0x00420002] 
// Parameters infos:
// class UAnimSet*                AnimSet                        ( CPF_Parm | CPF_OutParm )
// TArray< struct FName >         AnimNames                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_sentryturretshock::GetPowerAnimInfo ( class UAnimSet** AnimSet, TArray< struct FName >* AnimNames )
{
	static UFunction* pFnGetPowerAnimInfo = NULL;

	if ( ! pFnGetPowerAnimInfo )
		pFnGetPowerAnimInfo = (UFunction*) UObject::GObjObjects()->Data[ 82330 ];

	Usfxpowercustomaction_sentryturretshock_execGetPowerAnimInfo_Parms GetPowerAnimInfo_Parms;

	this->ProcessEvent ( pFnGetPowerAnimInfo, &GetPowerAnimInfo_Parms, NULL );

	if ( AnimSet )
		*AnimSet = GetPowerAnimInfo_Parms.AnimSet;

	if ( AnimNames )
		memcpy ( AnimNames, &GetPowerAnimInfo_Parms.AnimNames, 0xC );
};

// Function SFXGame.sfxpowercustomaction.CleanUpProjectile
// [0x00024002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::CleanUpProjectile ( class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnCleanUpProjectile = NULL;

	if ( ! pFnCleanUpProjectile )
		pFnCleanUpProjectile = (UFunction*) UObject::GObjObjects()->Data[ 82325 ];

	Usfxpowercustomaction_sentryturretshock_execCleanUpProjectile_Parms CleanUpProjectile_Parms;
	CleanUpProjectile_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnCleanUpProjectile, &CleanUpProjectile_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerComboImpact
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// float                          PowerRank                      ( CPF_Parm )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ReplicatePowerComboImpact ( class ABioPawn* Target, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags )
{
	static UFunction* pFnReplicatePowerComboImpact = NULL;

	if ( ! pFnReplicatePowerComboImpact )
		pFnReplicatePowerComboImpact = (UFunction*) UObject::GObjObjects()->Data[ 82319 ];

	Usfxpowercustomaction_sentryturretshock_execReplicatePowerComboImpact_Parms ReplicatePowerComboImpact_Parms;
	ReplicatePowerComboImpact_Parms.Target = Target;
	ReplicatePowerComboImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ReplicatePowerComboImpact_Parms.PowerRank = PowerRank;
	ReplicatePowerComboImpact_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;
	ReplicatePowerComboImpact_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnReplicatePowerComboImpact, &ReplicatePowerComboImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ReplicatePowerSubsequentImpact ( class ABioPawn* Target, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnReplicatePowerSubsequentImpact = NULL;

	if ( ! pFnReplicatePowerSubsequentImpact )
		pFnReplicatePowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 82312 ];

	Usfxpowercustomaction_sentryturretshock_execReplicatePowerSubsequentImpact_Parms ReplicatePowerSubsequentImpact_Parms;
	ReplicatePowerSubsequentImpact_Parms.Target = Target;
	ReplicatePowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ReplicatePowerSubsequentImpact_Parms.Duration = Duration;
	ReplicatePowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ReplicatePowerSubsequentImpact_Parms.Delay = Delay;
	ReplicatePowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnReplicatePowerSubsequentImpact, &ReplicatePowerSubsequentImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicateImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnReplicateImpact = NULL;

	if ( ! pFnReplicateImpact )
		pFnReplicateImpact = (UFunction*) UObject::GObjObjects()->Data[ 82305 ];

	Usfxpowercustomaction_sentryturretshock_execReplicateImpact_Parms ReplicateImpact_Parms;
	ReplicateImpact_Parms.Target = Target;
	ReplicateImpact_Parms.ImpactCount = ImpactCount;
	ReplicateImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ReplicateImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicateImpact_Parms.HitNormal, &HitNormal, 0xC );
	ReplicateImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnReplicateImpact, &ReplicateImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoCustomAction
// [0x00024002] 
// Parameters infos:
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ClientDoCustomAction ( unsigned long bForced )
{
	static UFunction* pFnClientDoCustomAction = NULL;

	if ( ! pFnClientDoCustomAction )
		pFnClientDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 82303 ];

	Usfxpowercustomaction_sentryturretshock_execClientDoCustomAction_Parms ClientDoCustomAction_Parms;
	ClientDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnClientDoCustomAction, &ClientDoCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.Replicate
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::Replicate ( )
{
	static UFunction* pFnReplicate = NULL;

	if ( ! pFnReplicate )
		pFnReplicate = (UFunction*) UObject::GObjObjects()->Data[ 82302 ];

	Usfxpowercustomaction_sentryturretshock_execReplicate_Parms Replicate_Parms;

	this->ProcessEvent ( pFnReplicate, &Replicate_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayPowerScreenShake
// [0x00820002] 
// Parameters infos:
// class UClass*                  ScreenShakeClass               ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::PlayPowerScreenShake ( class UClass* ScreenShakeClass, struct FVector HitLocation )
{
	static UFunction* pFnPlayPowerScreenShake = NULL;

	if ( ! pFnPlayPowerScreenShake )
		pFnPlayPowerScreenShake = (UFunction*) UObject::GObjObjects()->Data[ 82293 ];

	Usfxpowercustomaction_sentryturretshock_execPlayPowerScreenShake_Parms PlayPowerScreenShake_Parms;
	PlayPowerScreenShake_Parms.ScreenShakeClass = ScreenShakeClass;
	memcpy ( &PlayPowerScreenShake_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayPowerScreenShake, &PlayPowerScreenShake_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayPowerControllerRumble
// [0x00020002] 
// Parameters infos:
// class UClass*                  RumbleClass                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::PlayPowerControllerRumble ( class UClass* RumbleClass, struct FVector HitLocation )
{
	static UFunction* pFnPlayPowerControllerRumble = NULL;

	if ( ! pFnPlayPowerControllerRumble )
		pFnPlayPowerControllerRumble = (UFunction*) UObject::GObjObjects()->Data[ 82283 ];

	Usfxpowercustomaction_sentryturretshock_execPlayPowerControllerRumble_Parms PlayPowerControllerRumble_Parms;
	PlayPowerControllerRumble_Parms.RumbleClass = RumbleClass;
	memcpy ( &PlayPowerControllerRumble_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayPowerControllerRumble, &PlayPowerControllerRumble_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetDefaultClientEffectParams
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector Usfxpowercustomaction_sentryturretshock::GetDefaultClientEffectParams ( )
{
	static UFunction* pFnGetDefaultClientEffectParams = NULL;

	if ( ! pFnGetDefaultClientEffectParams )
		pFnGetDefaultClientEffectParams = (UFunction*) UObject::GObjObjects()->Data[ 82280 ];

	Usfxpowercustomaction_sentryturretshock_execGetDefaultClientEffectParams_Parms GetDefaultClientEffectParams_Parms;

	this->ProcessEvent ( pFnGetDefaultClientEffectParams, &GetDefaultClientEffectParams_Parms, NULL );

	return GetDefaultClientEffectParams_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AddEvolvedRankBonus
// [0x00420002] 
// Parameters infos:
// float                          Bonus                          ( CPF_Parm )
// struct FPowerData              Data                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_sentryturretshock::AddEvolvedRankBonus ( float Bonus, struct FPowerData* Data )
{
	static UFunction* pFnAddEvolvedRankBonus = NULL;

	if ( ! pFnAddEvolvedRankBonus )
		pFnAddEvolvedRankBonus = (UFunction*) UObject::GObjObjects()->Data[ 82276 ];

	Usfxpowercustomaction_sentryturretshock_execAddEvolvedRankBonus_Parms AddEvolvedRankBonus_Parms;
	AddEvolvedRankBonus_Parms.Bonus = Bonus;

	this->ProcessEvent ( pFnAddEvolvedRankBonus, &AddEvolvedRankBonus_Parms, NULL );

	if ( Data )
		memcpy ( Data, &AddEvolvedRankBonus_Parms.Data, 0x30 );
};

// Function SFXGame.sfxpowercustomaction.ApplyForceToActor
// [0x00020002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 vForce                         ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ApplyForceToActor ( class AActor* oActor, struct FVector vForce )
{
	static UFunction* pFnApplyForceToActor = NULL;

	if ( ! pFnApplyForceToActor )
		pFnApplyForceToActor = (UFunction*) UObject::GObjObjects()->Data[ 82271 ];

	Usfxpowercustomaction_sentryturretshock_execApplyForceToActor_Parms ApplyForceToActor_Parms;
	ApplyForceToActor_Parms.oActor = oActor;
	memcpy ( &ApplyForceToActor_Parms.vForce, &vForce, 0xC );

	this->ProcessEvent ( pFnApplyForceToActor, &ApplyForceToActor_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ApplyShieldBonus
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// float                          fShieldValue                   ( CPF_Parm )
// unsigned long                  bShieldValueIsPercent          ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// struct FName                   Category                       ( CPF_Parm )
// unsigned long                  bRemoveEffectWhenShieldsDown   ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ApplyShieldBonus ( class ABioPawn* oPawn, float fShieldValue, unsigned long bShieldValueIsPercent, float fDuration, struct FName Category, unsigned long bRemoveEffectWhenShieldsDown )
{
	static UFunction* pFnApplyShieldBonus = NULL;

	if ( ! pFnApplyShieldBonus )
		pFnApplyShieldBonus = (UFunction*) UObject::GObjObjects()->Data[ 82262 ];

	Usfxpowercustomaction_sentryturretshock_execApplyShieldBonus_Parms ApplyShieldBonus_Parms;
	ApplyShieldBonus_Parms.oPawn = oPawn;
	ApplyShieldBonus_Parms.fShieldValue = fShieldValue;
	ApplyShieldBonus_Parms.bShieldValueIsPercent = bShieldValueIsPercent;
	ApplyShieldBonus_Parms.fDuration = fDuration;
	memcpy ( &ApplyShieldBonus_Parms.Category, &Category, 0x8 );
	ApplyShieldBonus_Parms.bRemoveEffectWhenShieldsDown = bRemoveEffectWhenShieldsDown;

	this->ProcessEvent ( pFnApplyShieldBonus, &ApplyShieldBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ApplyHealthBonus
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// float                          fHealthValue                   ( CPF_Parm )
// unsigned long                  bHealthValueIsPercent          ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// struct FName                   Category                       ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ApplyHealthBonus ( class ABioPawn* oPawn, float fHealthValue, unsigned long bHealthValueIsPercent, float fDuration, struct FName Category )
{
	static UFunction* pFnApplyHealthBonus = NULL;

	if ( ! pFnApplyHealthBonus )
		pFnApplyHealthBonus = (UFunction*) UObject::GObjObjects()->Data[ 82254 ];

	Usfxpowercustomaction_sentryturretshock_execApplyHealthBonus_Parms ApplyHealthBonus_Parms;
	ApplyHealthBonus_Parms.oPawn = oPawn;
	ApplyHealthBonus_Parms.fHealthValue = fHealthValue;
	ApplyHealthBonus_Parms.bHealthValueIsPercent = bHealthValueIsPercent;
	ApplyHealthBonus_Parms.fDuration = fDuration;
	memcpy ( &ApplyHealthBonus_Parms.Category, &Category, 0x8 );

	this->ProcessEvent ( pFnApplyHealthBonus, &ApplyHealthBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayParticleSystemOnSocket
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UParticleSystem*         PS_Template                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FName                   SocketName                     ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::PlayParticleSystemOnSocket ( class UParticleSystem* PS_Template, class ABioPawn* TargetPawn, struct FName SocketName, struct FRotator Rotation )
{
	static UFunction* pFnPlayParticleSystemOnSocket = NULL;

	if ( ! pFnPlayParticleSystemOnSocket )
		pFnPlayParticleSystemOnSocket = (UFunction*) UObject::GObjObjects()->Data[ 67470 ];

	Usfxpowercustomaction_sentryturretshock_execPlayParticleSystemOnSocket_Parms PlayParticleSystemOnSocket_Parms;
	PlayParticleSystemOnSocket_Parms.PS_Template = PS_Template;
	PlayParticleSystemOnSocket_Parms.TargetPawn = TargetPawn;
	memcpy ( &PlayParticleSystemOnSocket_Parms.SocketName, &SocketName, 0x8 );
	memcpy ( &PlayParticleSystemOnSocket_Parms.Rotation, &Rotation, 0xC );

	this->ProcessEvent ( pFnPlayParticleSystemOnSocket, &PlayParticleSystemOnSocket_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.HasRemainingShieldOfType
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )
// class UClass*                  ShieldClass                    ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::HasRemainingShieldOfType ( class ABioPawn* oPawn, class UClass* ShieldClass )
{
	static UFunction* pFnHasRemainingShieldOfType = NULL;

	if ( ! pFnHasRemainingShieldOfType )
		pFnHasRemainingShieldOfType = (UFunction*) UObject::GObjObjects()->Data[ 82243 ];

	Usfxpowercustomaction_sentryturretshock_execHasRemainingShieldOfType_Parms HasRemainingShieldOfType_Parms;
	HasRemainingShieldOfType_Parms.oPawn = oPawn;
	HasRemainingShieldOfType_Parms.ShieldClass = ShieldClass;

	this->ProcessEvent ( pFnHasRemainingShieldOfType, &HasRemainingShieldOfType_Parms, NULL );

	return HasRemainingShieldOfType_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsPlaceable
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::IsPlaceable ( class AActor* oImpacted )
{
	static UFunction* pFnIsPlaceable = NULL;

	if ( ! pFnIsPlaceable )
		pFnIsPlaceable = (UFunction*) UObject::GObjObjects()->Data[ 82240 ];

	Usfxpowercustomaction_sentryturretshock_execIsPlaceable_Parms IsPlaceable_Parms;
	IsPlaceable_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsPlaceable, &IsPlaceable_Parms, NULL );

	return IsPlaceable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyPermanentGameEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class UClass*                  className                      ( CPF_Parm )
// float                          fEffectValue                   ( CPF_Parm )
// struct FName                   nmCategory                     ( CPF_Parm )
// class AController*             Instigator                     ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::ApplyPermanentGameEffect ( class AActor* oTarget, class UClass* className, float fEffectValue, struct FName nmCategory, class AController* Instigator )
{
	static UFunction* pFnApplyPermanentGameEffect = NULL;

	if ( ! pFnApplyPermanentGameEffect )
		pFnApplyPermanentGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 82231 ];

	Usfxpowercustomaction_sentryturretshock_execApplyPermanentGameEffect_Parms ApplyPermanentGameEffect_Parms;
	ApplyPermanentGameEffect_Parms.oTarget = oTarget;
	ApplyPermanentGameEffect_Parms.className = className;
	ApplyPermanentGameEffect_Parms.fEffectValue = fEffectValue;
	memcpy ( &ApplyPermanentGameEffect_Parms.nmCategory, &nmCategory, 0x8 );
	ApplyPermanentGameEffect_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnApplyPermanentGameEffect, &ApplyPermanentGameEffect_Parms, NULL );

	return ApplyPermanentGameEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyTemporaryGameEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class UClass*                  className                      ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// float                          fEffectValue                   ( CPF_Parm )
// struct FName                   nmCategory                     ( CPF_Parm )
// class AController*             Instigator                     ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::ApplyTemporaryGameEffect ( class AActor* oTarget, class UClass* className, float fDuration, float fEffectValue, struct FName nmCategory, class AController* Instigator )
{
	static UFunction* pFnApplyTemporaryGameEffect = NULL;

	if ( ! pFnApplyTemporaryGameEffect )
		pFnApplyTemporaryGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 67380 ];

	Usfxpowercustomaction_sentryturretshock_execApplyTemporaryGameEffect_Parms ApplyTemporaryGameEffect_Parms;
	ApplyTemporaryGameEffect_Parms.oTarget = oTarget;
	ApplyTemporaryGameEffect_Parms.className = className;
	ApplyTemporaryGameEffect_Parms.fDuration = fDuration;
	ApplyTemporaryGameEffect_Parms.fEffectValue = fEffectValue;
	memcpy ( &ApplyTemporaryGameEffect_Parms.nmCategory, &nmCategory, 0x8 );
	ApplyTemporaryGameEffect_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnApplyTemporaryGameEffect, &ApplyTemporaryGameEffect_Parms, NULL );

	return ApplyTemporaryGameEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsOfRace
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// unsigned char                  eRace                          ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::IsOfRace ( class AActor* oImpacted, unsigned char eRace )
{
	static UFunction* pFnIsOfRace = NULL;

	if ( ! pFnIsOfRace )
		pFnIsOfRace = (UFunction*) UObject::GObjObjects()->Data[ 82218 ];

	Usfxpowercustomaction_sentryturretshock_execIsOfRace_Parms IsOfRace_Parms;
	IsOfRace_Parms.oImpacted = oImpacted;
	IsOfRace_Parms.eRace = eRace;

	this->ProcessEvent ( pFnIsOfRace, &IsOfRace_Parms, NULL );

	return IsOfRace_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.CanBeRagdolledByPowers
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::CanBeRagdolledByPowers ( class ABioPawn* oPawn )
{
	static UFunction* pFnCanBeRagdolledByPowers = NULL;

	if ( ! pFnCanBeRagdolledByPowers )
		pFnCanBeRagdolledByPowers = (UFunction*) UObject::GObjObjects()->Data[ 82215 ];

	Usfxpowercustomaction_sentryturretshock_execCanBeRagdolledByPowers_Parms CanBeRagdolledByPowers_Parms;
	CanBeRagdolledByPowers_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnCanBeRagdolledByPowers, &CanBeRagdolledByPowers_Parms, NULL );

	return CanBeRagdolledByPowers_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ImpactPlaceable
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// float                          PlotPlaceableDamage            ( CPF_Parm )
// unsigned long                  bForceDamage                   ( CPF_OptionalParm | CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::ImpactPlaceable ( class AActor* oCaster, class AActor* oImpacted, struct FVector Momentum, float PlotPlaceableDamage, unsigned long bForceDamage )
{
	static UFunction* pFnImpactPlaceable = NULL;

	if ( ! pFnImpactPlaceable )
		pFnImpactPlaceable = (UFunction*) UObject::GObjObjects()->Data[ 82203 ];

	Usfxpowercustomaction_sentryturretshock_execImpactPlaceable_Parms ImpactPlaceable_Parms;
	ImpactPlaceable_Parms.oCaster = oCaster;
	ImpactPlaceable_Parms.oImpacted = oImpacted;
	memcpy ( &ImpactPlaceable_Parms.Momentum, &Momentum, 0xC );
	ImpactPlaceable_Parms.PlotPlaceableDamage = PlotPlaceableDamage;
	ImpactPlaceable_Parms.bForceDamage = bForceDamage;

	this->ProcessEvent ( pFnImpactPlaceable, &ImpactPlaceable_Parms, NULL );

	return ImpactPlaceable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPhysicsLevelResistance
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

float Usfxpowercustomaction_sentryturretshock::GetPhysicsLevelResistance ( class AActor* oTarget )
{
	static UFunction* pFnGetPhysicsLevelResistance = NULL;

	if ( ! pFnGetPhysicsLevelResistance )
		pFnGetPhysicsLevelResistance = (UFunction*) UObject::GObjObjects()->Data[ 82198 ];

	Usfxpowercustomaction_sentryturretshock_execGetPhysicsLevelResistance_Parms GetPhysicsLevelResistance_Parms;
	GetPhysicsLevelResistance_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnGetPhysicsLevelResistance, &GetPhysicsLevelResistance_Parms, NULL );

	return GetPhysicsLevelResistance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPhysicsLevel
// [0x00026002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// unsigned long                  bIgnoreResistance              ( CPF_OptionalParm | CPF_Parm )

int Usfxpowercustomaction_sentryturretshock::GetPhysicsLevel ( class AActor* oImpacted, unsigned long bIgnoreResistance )
{
	static UFunction* pFnGetPhysicsLevel = NULL;

	if ( ! pFnGetPhysicsLevel )
		pFnGetPhysicsLevel = (UFunction*) UObject::GObjObjects()->Data[ 82192 ];

	Usfxpowercustomaction_sentryturretshock_execGetPhysicsLevel_Parms GetPhysicsLevel_Parms;
	GetPhysicsLevel_Parms.oImpacted = oImpacted;
	GetPhysicsLevel_Parms.bIgnoreResistance = bIgnoreResistance;

	this->ProcessEvent ( pFnGetPhysicsLevel, &GetPhysicsLevel_Parms, NULL );

	return GetPhysicsLevel_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsMachineRace
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::IsMachineRace ( class AActor* oImpacted )
{
	static UFunction* pFnIsMachineRace = NULL;

	if ( ! pFnIsMachineRace )
		pFnIsMachineRace = (UFunction*) UObject::GObjObjects()->Data[ 82188 ];

	Usfxpowercustomaction_sentryturretshock_execIsMachineRace_Parms IsMachineRace_Parms;
	IsMachineRace_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsMachineRace, &IsMachineRace_Parms, NULL );

	return IsMachineRace_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ShouldUsePowerOnShields
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxpowercustomaction_sentryturretshock::ShouldUsePowerOnShields ( class ABioPawn* Target, class UClass* DamageType, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePowerOnShields = NULL;

	if ( ! pFnShouldUsePowerOnShields )
		pFnShouldUsePowerOnShields = (UFunction*) UObject::GObjObjects()->Data[ 82180 ];

	Usfxpowercustomaction_sentryturretshock_execShouldUsePowerOnShields_Parms ShouldUsePowerOnShields_Parms;
	ShouldUsePowerOnShields_Parms.Target = Target;
	ShouldUsePowerOnShields_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnShouldUsePowerOnShields, &ShouldUsePowerOnShields_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePowerOnShields_Parms.sOptionalInfo, 0xC );

	return ShouldUsePowerOnShields_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.RagdollPhysicsImpact
// [0x00020002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )
// class AActor*                  oImpactActor                   ( CPF_Parm )
// struct FVector                 vImpactDir                     ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::RagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir )
{
	static UFunction* pFnRagdollPhysicsImpact = NULL;

	if ( ! pFnRagdollPhysicsImpact )
		pFnRagdollPhysicsImpact = (UFunction*) UObject::GObjObjects()->Data[ 82166 ];

	Usfxpowercustomaction_sentryturretshock_execRagdollPhysicsImpact_Parms RagdollPhysicsImpact_Parms;
	RagdollPhysicsImpact_Parms.oPawn = oPawn;
	RagdollPhysicsImpact_Parms.oImpactActor = oImpactActor;
	memcpy ( &RagdollPhysicsImpact_Parms.vImpactDir, &vImpactDir, 0xC );

	this->ProcessEvent ( pFnRagdollPhysicsImpact, &RagdollPhysicsImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CanImpactActor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::CanImpactActor ( class AActor* oActor )
{
	static UFunction* pFnCanImpactActor = NULL;

	if ( ! pFnCanImpactActor )
		pFnCanImpactActor = (UFunction*) UObject::GObjObjects()->Data[ 82163 ];

	Usfxpowercustomaction_sentryturretshock_execCanImpactActor_Parms CanImpactActor_Parms;
	CanImpactActor_Parms.oActor = oActor;

	this->ProcessEvent ( pFnCanImpactActor, &CanImpactActor_Parms, NULL );

	return CanImpactActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AddActorToImpactedList
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 vImpactLocation                ( CPF_Parm )
// TArray< class AActor* >        ImpactedActors                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxpowercustomaction_sentryturretshock::AddActorToImpactedList ( class AActor* oActor, struct FVector vImpactLocation, TArray< class AActor* >* ImpactedActors )
{
	static UFunction* pFnAddActorToImpactedList = NULL;

	if ( ! pFnAddActorToImpactedList )
		pFnAddActorToImpactedList = (UFunction*) UObject::GObjObjects()->Data[ 82152 ];

	Usfxpowercustomaction_sentryturretshock_execAddActorToImpactedList_Parms AddActorToImpactedList_Parms;
	AddActorToImpactedList_Parms.oActor = oActor;
	memcpy ( &AddActorToImpactedList_Parms.vImpactLocation, &vImpactLocation, 0xC );

	this->ProcessEvent ( pFnAddActorToImpactedList, &AddActorToImpactedList_Parms, NULL );

	if ( ImpactedActors )
		memcpy ( ImpactedActors, &AddActorToImpactedList_Parms.ImpactedActors, 0xC );

	return AddActorToImpactedList_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.DetonationHitsTarget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FAreaEffectParameters   DetonationParams               ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::DetonationHitsTarget ( struct FVector HitLocation, float MaxRange, class AActor* HitActor, struct FAreaEffectParameters DetonationParams )
{
	static UFunction* pFnDetonationHitsTarget = NULL;

	if ( ! pFnDetonationHitsTarget )
		pFnDetonationHitsTarget = (UFunction*) UObject::GObjObjects()->Data[ 81999 ];

	Usfxpowercustomaction_sentryturretshock_execDetonationHitsTarget_Parms DetonationHitsTarget_Parms;
	memcpy ( &DetonationHitsTarget_Parms.HitLocation, &HitLocation, 0xC );
	DetonationHitsTarget_Parms.MaxRange = MaxRange;
	DetonationHitsTarget_Parms.HitActor = HitActor;
	memcpy ( &DetonationHitsTarget_Parms.DetonationParams, &DetonationParams, 0x20 );

	this->ProcessEvent ( pFnDetonationHitsTarget, &DetonationHitsTarget_Parms, NULL );

	return DetonationHitsTarget_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetNearbyActors
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// TArray< class AActor* >        ImpactedActors                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxpowercustomaction_sentryturretshock::GetNearbyActors ( struct FVector HitLocation, float Radius, float MaxRange, struct FAreaEffectParameters Param, TArray< class AActor* >* ImpactedActors )
{
	static UFunction* pFnGetNearbyActors = NULL;

	if ( ! pFnGetNearbyActors )
		pFnGetNearbyActors = (UFunction*) UObject::GObjObjects()->Data[ 67385 ];

	Usfxpowercustomaction_sentryturretshock_execGetNearbyActors_Parms GetNearbyActors_Parms;
	memcpy ( &GetNearbyActors_Parms.HitLocation, &HitLocation, 0xC );
	GetNearbyActors_Parms.Radius = Radius;
	GetNearbyActors_Parms.MaxRange = MaxRange;
	memcpy ( &GetNearbyActors_Parms.Param, &Param, 0x20 );

	this->ProcessEvent ( pFnGetNearbyActors, &GetNearbyActors_Parms, NULL );

	if ( ImpactedActors )
		memcpy ( ImpactedActors, &GetNearbyActors_Parms.ImpactedActors, 0xC );

	return GetNearbyActors_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyBonusToParameter
// [0x00424002] 
// Parameters infos:
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )
// struct FPowerData              Parameter                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_sentryturretshock::ApplyBonusToParameter ( class USFXGameEffect* Bonus, unsigned long bRemove, struct FPowerData* Parameter )
{
	static UFunction* pFnApplyBonusToParameter = NULL;

	if ( ! pFnApplyBonusToParameter )
		pFnApplyBonusToParameter = (UFunction*) UObject::GObjObjects()->Data[ 82130 ];

	Usfxpowercustomaction_sentryturretshock_execApplyBonusToParameter_Parms ApplyBonusToParameter_Parms;
	ApplyBonusToParameter_Parms.Bonus = Bonus;
	ApplyBonusToParameter_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonusToParameter, &ApplyBonusToParameter_Parms, NULL );

	if ( Parameter )
		memcpy ( Parameter, &ApplyBonusToParameter_Parms.Parameter, 0x30 );
};

// Function SFXGame.sfxpowercustomaction.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 82126 ];

	Usfxpowercustomaction_sentryturretshock_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayImpactEffects
// [0x00020002] 
// Parameters infos:
// class AActor*                  oImpacted                      ( CPF_Parm )
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// struct FVector                 ImpactNormal                   ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::PlayImpactEffects ( class AActor* oImpacted, struct FVector ImpactLocation, struct FVector ImpactNormal )
{
	static UFunction* pFnPlayImpactEffects = NULL;

	if ( ! pFnPlayImpactEffects )
		pFnPlayImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 82120 ];

	Usfxpowercustomaction_sentryturretshock_execPlayImpactEffects_Parms PlayImpactEffects_Parms;
	PlayImpactEffects_Parms.oImpacted = oImpacted;
	memcpy ( &PlayImpactEffects_Parms.ImpactLocation, &ImpactLocation, 0xC );
	memcpy ( &PlayImpactEffects_Parms.ImpactNormal, &ImpactNormal, 0xC );

	this->ProcessEvent ( pFnPlayImpactEffects, &PlayImpactEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayImpactSounds
// [0x00420002] 
// Parameters infos:
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// class UWwiseEvent*             BaseSound                      ( CPF_Parm )
// TArray< struct FEvolvedSoundStruct > EvolvedSounds                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_sentryturretshock::PlayImpactSounds ( struct FVector ImpactLocation, class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds )
{
	static UFunction* pFnPlayImpactSounds = NULL;

	if ( ! pFnPlayImpactSounds )
		pFnPlayImpactSounds = (UFunction*) UObject::GObjObjects()->Data[ 82113 ];

	Usfxpowercustomaction_sentryturretshock_execPlayImpactSounds_Parms PlayImpactSounds_Parms;
	memcpy ( &PlayImpactSounds_Parms.ImpactLocation, &ImpactLocation, 0xC );
	PlayImpactSounds_Parms.BaseSound = BaseSound;

	this->ProcessEvent ( pFnPlayImpactSounds, &PlayImpactSounds_Parms, NULL );

	if ( EvolvedSounds )
		memcpy ( EvolvedSounds, &PlayImpactSounds_Parms.EvolvedSounds, 0xC );
};

// Function SFXGame.sfxpowercustomaction.PlayCasterSounds
// [0x00420002] 
// Parameters infos:
// class UWwiseEvent*             BaseSound                      ( CPF_Parm )
// TArray< struct FEvolvedSoundStruct > EvolvedSounds                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_sentryturretshock::PlayCasterSounds ( class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds )
{
	static UFunction* pFnPlayCasterSounds = NULL;

	if ( ! pFnPlayCasterSounds )
		pFnPlayCasterSounds = (UFunction*) UObject::GObjObjects()->Data[ 82107 ];

	Usfxpowercustomaction_sentryturretshock_execPlayCasterSounds_Parms PlayCasterSounds_Parms;
	PlayCasterSounds_Parms.BaseSound = BaseSound;

	this->ProcessEvent ( pFnPlayCasterSounds, &PlayCasterSounds_Parms, NULL );

	if ( EvolvedSounds )
		memcpy ( EvolvedSounds, &PlayCasterSounds_Parms.EvolvedSounds, 0xC );
};

// Function SFXGame.sfxpowercustomaction.PlayDetonationEffects
// [0x00024002] 
// Parameters infos:
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// struct FVector                 ImpactNormal                   ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::PlayDetonationEffects ( struct FVector ImpactLocation, struct FVector ImpactNormal, class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnPlayDetonationEffects = NULL;

	if ( ! pFnPlayDetonationEffects )
		pFnPlayDetonationEffects = (UFunction*) UObject::GObjObjects()->Data[ 82095 ];

	Usfxpowercustomaction_sentryturretshock_execPlayDetonationEffects_Parms PlayDetonationEffects_Parms;
	memcpy ( &PlayDetonationEffects_Parms.ImpactLocation, &ImpactLocation, 0xC );
	memcpy ( &PlayDetonationEffects_Parms.ImpactNormal, &ImpactNormal, 0xC );
	PlayDetonationEffects_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnPlayDetonationEffects, &PlayDetonationEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayReleaseEffects
// [0x00820002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::PlayReleaseEffects ( )
{
	static UFunction* pFnPlayReleaseEffects = NULL;

	if ( ! pFnPlayReleaseEffects )
		pFnPlayReleaseEffects = (UFunction*) UObject::GObjObjects()->Data[ 82091 ];

	Usfxpowercustomaction_sentryturretshock_execPlayReleaseEffects_Parms PlayReleaseEffects_Parms;

	this->ProcessEvent ( pFnPlayReleaseEffects, &PlayReleaseEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.OnImpact
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 82084 ];

	Usfxpowercustomaction_sentryturretshock_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetImpactForce
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

float Usfxpowercustomaction_sentryturretshock::GetImpactForce ( class AActor* oImpacted )
{
	static UFunction* pFnGetImpactForce = NULL;

	if ( ! pFnGetImpactForce )
		pFnGetImpactForce = (UFunction*) UObject::GObjObjects()->Data[ 82081 ];

	Usfxpowercustomaction_sentryturretshock_execGetImpactForce_Parms GetImpactForce_Parms;
	GetImpactForce_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactForce, &GetImpactForce_Parms, NULL );

	return GetImpactForce_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetNonRagdollDamageType
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* Usfxpowercustomaction_sentryturretshock::GetNonRagdollDamageType ( )
{
	static UFunction* pFnGetNonRagdollDamageType = NULL;

	if ( ! pFnGetNonRagdollDamageType )
		pFnGetNonRagdollDamageType = (UFunction*) UObject::GObjObjects()->Data[ 82078 ];

	Usfxpowercustomaction_sentryturretshock_execGetNonRagdollDamageType_Parms GetNonRagdollDamageType_Parms;

	this->ProcessEvent ( pFnGetNonRagdollDamageType, &GetNonRagdollDamageType_Parms, NULL );

	return GetNonRagdollDamageType_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetImpactDamage
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm | CPF_OutParm )

float Usfxpowercustomaction_sentryturretshock::GetImpactDamage ( class AActor* oImpacted, class UClass** DamageType )
{
	static UFunction* pFnGetImpactDamage = NULL;

	if ( ! pFnGetImpactDamage )
		pFnGetImpactDamage = (UFunction*) UObject::GObjObjects()->Data[ 82073 ];

	Usfxpowercustomaction_sentryturretshock_execGetImpactDamage_Parms GetImpactDamage_Parms;
	GetImpactDamage_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactDamage, &GetImpactDamage_Parms, NULL );

	if ( DamageType )
		*DamageType = GetImpactDamage_Parms.DamageType;

	return GetImpactDamage_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.DoAreaExplosionForActor
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 location                       ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          fForce                         ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// int                            MaxRagdollOverride             ( CPF_Parm )
// struct FScriptDelegate         ImpactCallback                 ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  MaxRagdollDmgTypeOverride      ( CPF_OptionalParm | CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::DoAreaExplosionForActor ( class AActor* oActor, struct FVector location, int ImpactCount, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxRagdollOverride, struct FScriptDelegate ImpactCallback, class UClass* MaxRagdollDmgTypeOverride )
{
	static UFunction* pFnDoAreaExplosionForActor = NULL;

	if ( ! pFnDoAreaExplosionForActor )
		pFnDoAreaExplosionForActor = (UFunction*) UObject::GObjObjects()->Data[ 67390 ];

	Usfxpowercustomaction_sentryturretshock_execDoAreaExplosionForActor_Parms DoAreaExplosionForActor_Parms;
	DoAreaExplosionForActor_Parms.oActor = oActor;
	memcpy ( &DoAreaExplosionForActor_Parms.location, &location, 0xC );
	DoAreaExplosionForActor_Parms.ImpactCount = ImpactCount;
	DoAreaExplosionForActor_Parms.fDamage = fDamage;
	DoAreaExplosionForActor_Parms.DamageType = DamageType;
	DoAreaExplosionForActor_Parms.fForce = fForce;
	memcpy ( &DoAreaExplosionForActor_Parms.Param, &Param, 0x20 );
	DoAreaExplosionForActor_Parms.MaxRagdollOverride = MaxRagdollOverride;
	memcpy ( &DoAreaExplosionForActor_Parms.ImpactCallback, &ImpactCallback, 0xC );
	DoAreaExplosionForActor_Parms.MaxRagdollDmgTypeOverride = MaxRagdollDmgTypeOverride;

	this->ProcessEvent ( pFnDoAreaExplosionForActor, &DoAreaExplosionForActor_Parms, NULL );

	return DoAreaExplosionForActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AreaExplosion
// [0x00024002] 
// Parameters infos:
// struct FVector                 location                       ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          fForce                         ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// int                            MaxImpactCount                 ( CPF_Parm )
// struct FScriptDelegate         ImpactCallback                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            MaxRagdollOverride             ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  MaxRagdollDmgTypeOverride      ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::AreaExplosion ( struct FVector location, float fRadius, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxImpactCount, struct FScriptDelegate ImpactCallback, int MaxRagdollOverride, class UClass* MaxRagdollDmgTypeOverride )
{
	static UFunction* pFnAreaExplosion = NULL;

	if ( ! pFnAreaExplosion )
		pFnAreaExplosion = (UFunction*) UObject::GObjObjects()->Data[ 82042 ];

	Usfxpowercustomaction_sentryturretshock_execAreaExplosion_Parms AreaExplosion_Parms;
	memcpy ( &AreaExplosion_Parms.location, &location, 0xC );
	AreaExplosion_Parms.fRadius = fRadius;
	AreaExplosion_Parms.fDamage = fDamage;
	AreaExplosion_Parms.DamageType = DamageType;
	AreaExplosion_Parms.fForce = fForce;
	memcpy ( &AreaExplosion_Parms.Param, &Param, 0x20 );
	AreaExplosion_Parms.MaxImpactCount = MaxImpactCount;
	memcpy ( &AreaExplosion_Parms.ImpactCallback, &ImpactCallback, 0xC );
	AreaExplosion_Parms.MaxRagdollOverride = MaxRagdollOverride;
	AreaExplosion_Parms.MaxRagdollDmgTypeOverride = MaxRagdollDmgTypeOverride;

	this->ProcessEvent ( pFnAreaExplosion, &AreaExplosion_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerSubsequentImpact
// [0x00024000] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 82035 ];

	Usfxpowercustomaction_sentryturretshock_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerComboImpact
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// float                          PowerRank                      ( CPF_Parm )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ClientDoPowerComboImpact ( class AActor* oActor, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags )
{
	static UFunction* pFnClientDoPowerComboImpact = NULL;

	if ( ! pFnClientDoPowerComboImpact )
		pFnClientDoPowerComboImpact = (UFunction*) UObject::GObjObjects()->Data[ 53812 ];

	Usfxpowercustomaction_sentryturretshock_execClientDoPowerComboImpact_Parms ClientDoPowerComboImpact_Parms;
	ClientDoPowerComboImpact_Parms.oActor = oActor;
	ClientDoPowerComboImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerComboImpact_Parms.PowerRank = PowerRank;
	ClientDoPowerComboImpact_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;
	ClientDoPowerComboImpact_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnClientDoPowerComboImpact, &ClientDoPowerComboImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 82022 ];

	Usfxpowercustomaction_sentryturretshock_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DoPowerDetonatedForActor
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            nImpactCount                   ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::DoPowerDetonatedForActor ( class AActor* oActor, struct FVector HitLocation, struct FVector HitNormal, int nImpactCount, unsigned long bFirstTarget, class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnDoPowerDetonatedForActor = NULL;

	if ( ! pFnDoPowerDetonatedForActor )
		pFnDoPowerDetonatedForActor = (UFunction*) UObject::GObjObjects()->Data[ 82002 ];

	Usfxpowercustomaction_sentryturretshock_execDoPowerDetonatedForActor_Parms DoPowerDetonatedForActor_Parms;
	DoPowerDetonatedForActor_Parms.oActor = oActor;
	memcpy ( &DoPowerDetonatedForActor_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoPowerDetonatedForActor_Parms.HitNormal, &HitNormal, 0xC );
	DoPowerDetonatedForActor_Parms.nImpactCount = nImpactCount;
	DoPowerDetonatedForActor_Parms.bFirstTarget = bFirstTarget;
	DoPowerDetonatedForActor_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnDoPowerDetonatedForActor, &DoPowerDetonatedForActor_Parms, NULL );

	return DoPowerDetonatedForActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.OnPowerDetonated
// [0x00024002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor )
{
	static UFunction* pFnOnPowerDetonated = NULL;

	if ( ! pFnOnPowerDetonated )
		pFnOnPowerDetonated = (UFunction*) UObject::GObjObjects()->Data[ 81986 ];

	Usfxpowercustomaction_sentryturretshock_execOnPowerDetonated_Parms OnPowerDetonated_Parms;
	memcpy ( &OnPowerDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerDetonated_Parms.HitNormal, &HitNormal, 0xC );
	OnPowerDetonated_Parms.oProjectile = oProjectile;
	OnPowerDetonated_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnOnPowerDetonated, &OnPowerDetonated_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseBuffPower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::ReleaseBuffPower ( )
{
	static UFunction* pFnReleaseBuffPower = NULL;

	if ( ! pFnReleaseBuffPower )
		pFnReleaseBuffPower = (UFunction*) UObject::GObjObjects()->Data[ 81980 ];

	Usfxpowercustomaction_sentryturretshock_execReleaseBuffPower_Parms ReleaseBuffPower_Parms;

	this->ProcessEvent ( pFnReleaseBuffPower, &ReleaseBuffPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseMeleePower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::ReleaseMeleePower ( )
{
	static UFunction* pFnReleaseMeleePower = NULL;

	if ( ! pFnReleaseMeleePower )
		pFnReleaseMeleePower = (UFunction*) UObject::GObjObjects()->Data[ 81979 ];

	Usfxpowercustomaction_sentryturretshock_execReleaseMeleePower_Parms ReleaseMeleePower_Parms;

	this->ProcessEvent ( pFnReleaseMeleePower, &ReleaseMeleePower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseInstantPower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::ReleaseInstantPower ( )
{
	static UFunction* pFnReleaseInstantPower = NULL;

	if ( ! pFnReleaseInstantPower )
		pFnReleaseInstantPower = (UFunction*) UObject::GObjObjects()->Data[ 81974 ];

	Usfxpowercustomaction_sentryturretshock_execReleaseInstantPower_Parms ReleaseInstantPower_Parms;

	this->ProcessEvent ( pFnReleaseInstantPower, &ReleaseInstantPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.OnClientPowerProjectileSpawned
// [0x00020002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* NewProjectile                  ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::OnClientPowerProjectileSpawned ( class ASFXProjectile_PowerCustomAction* NewProjectile )
{
	static UFunction* pFnOnClientPowerProjectileSpawned = NULL;

	if ( ! pFnOnClientPowerProjectileSpawned )
		pFnOnClientPowerProjectileSpawned = (UFunction*) UObject::GObjObjects()->Data[ 81971 ];

	Usfxpowercustomaction_sentryturretshock_execOnClientPowerProjectileSpawned_Parms OnClientPowerProjectileSpawned_Parms;
	OnClientPowerProjectileSpawned_Parms.NewProjectile = NewProjectile;

	this->ProcessEvent ( pFnOnClientPowerProjectileSpawned, &OnClientPowerProjectileSpawned_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseProjectilePower
// [0x00020002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXProjectile_PowerCustomAction* Usfxpowercustomaction_sentryturretshock::ReleaseProjectilePower ( )
{
	static UFunction* pFnReleaseProjectilePower = NULL;

	if ( ! pFnReleaseProjectilePower )
		pFnReleaseProjectilePower = (UFunction*) UObject::GObjObjects()->Data[ 81956 ];

	Usfxpowercustomaction_sentryturretshock_execReleaseProjectilePower_Parms ReleaseProjectilePower_Parms;

	this->ProcessEvent ( pFnReleaseProjectilePower, &ReleaseProjectilePower_Parms, NULL );

	return ReleaseProjectilePower_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetProjectileAttachPoint
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AttachPoint                    ( CPF_Parm | CPF_OutParm )

bool Usfxpowercustomaction_sentryturretshock::GetProjectileAttachPoint ( struct FVector* AttachPoint )
{
	static UFunction* pFnGetProjectileAttachPoint = NULL;

	if ( ! pFnGetProjectileAttachPoint )
		pFnGetProjectileAttachPoint = (UFunction*) UObject::GObjObjects()->Data[ 55631 ];

	Usfxpowercustomaction_sentryturretshock_execGetProjectileAttachPoint_Parms GetProjectileAttachPoint_Parms;

	this->ProcessEvent ( pFnGetProjectileAttachPoint, &GetProjectileAttachPoint_Parms, NULL );

	if ( AttachPoint )
		memcpy ( AttachPoint, &GetProjectileAttachPoint_Parms.AttachPoint, 0xC );

	return GetProjectileAttachPoint_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ReleasePower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::ReleasePower ( )
{
	static UFunction* pFnReleasePower = NULL;

	if ( ! pFnReleasePower )
		pFnReleasePower = (UFunction*) UObject::GObjObjects()->Data[ 81949 ];

	Usfxpowercustomaction_sentryturretshock_execReleasePower_Parms ReleasePower_Parms;

	this->ProcessEvent ( pFnReleasePower, &ReleasePower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ResetPowerCooldown
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::ResetPowerCooldown ( )
{
	static UFunction* pFnResetPowerCooldown = NULL;

	if ( ! pFnResetPowerCooldown )
		pFnResetPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81948 ];

	Usfxpowercustomaction_sentryturretshock_execResetPowerCooldown_Parms ResetPowerCooldown_Parms;

	this->ProcessEvent ( pFnResetPowerCooldown, &ResetPowerCooldown_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartPowerCooldown
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::StartPowerCooldown ( )
{
	static UFunction* pFnStartPowerCooldown = NULL;

	if ( ! pFnStartPowerCooldown )
		pFnStartPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81945 ];

	Usfxpowercustomaction_sentryturretshock_execStartPowerCooldown_Parms StartPowerCooldown_Parms;

	this->ProcessEvent ( pFnStartPowerCooldown, &StartPowerCooldown_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerCooldown
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Usfxpowercustomaction_sentryturretshock::GetPowerCooldown ( )
{
	static UFunction* pFnGetPowerCooldown = NULL;

	if ( ! pFnGetPowerCooldown )
		pFnGetPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81943 ];

	Usfxpowercustomaction_sentryturretshock_execGetPowerCooldown_Parms GetPowerCooldown_Parms;

	this->ProcessEvent ( pFnGetPowerCooldown, &GetPowerCooldown_Parms, NULL );

	return GetPowerCooldown_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.TickCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::eventTickCustomAction ( float fDeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81938 ];

	Usfxpowercustomaction_sentryturretshock_eventTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void Usfxpowercustomaction_sentryturretshock::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 81932 ];

	Usfxpowercustomaction_sentryturretshock_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81926 ];

	Usfxpowercustomaction_sentryturretshock_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.EndThisCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::EndThisCustomAction ( )
{
	static UFunction* pFnEndThisCustomAction = NULL;

	if ( ! pFnEndThisCustomAction )
		pFnEndThisCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81925 ];

	Usfxpowercustomaction_sentryturretshock_execEndThisCustomAction_Parms EndThisCustomAction_Parms;

	this->ProcessEvent ( pFnEndThisCustomAction, &EndThisCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayBodyStance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBodyStance             BodyStance                     ( CPF_Parm | CPF_NeedCtorLink )
// float                          fStanceBlendInTime             ( CPF_Parm )
// float                          fStanceBlendOutTime            ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::PlayBodyStance ( struct FBodyStance BodyStance, float fStanceBlendInTime, float fStanceBlendOutTime )
{
	static UFunction* pFnPlayBodyStance = NULL;

	if ( ! pFnPlayBodyStance )
		pFnPlayBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 81917 ];

	Usfxpowercustomaction_sentryturretshock_execPlayBodyStance_Parms PlayBodyStance_Parms;
	memcpy ( &PlayBodyStance_Parms.BodyStance, &BodyStance, 0xC );
	PlayBodyStance_Parms.fStanceBlendInTime = fStanceBlendInTime;
	PlayBodyStance_Parms.fStanceBlendOutTime = fStanceBlendOutTime;

	this->ProcessEvent ( pFnPlayBodyStance, &PlayBodyStance_Parms, NULL );

	return PlayBodyStance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.StartCastAnimations
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::StartCastAnimations ( )
{
	static UFunction* pFnStartCastAnimations = NULL;

	if ( ! pFnStartCastAnimations )
		pFnStartCastAnimations = (UFunction*) UObject::GObjObjects()->Data[ 81911 ];

	Usfxpowercustomaction_sentryturretshock_execStartCastAnimations_Parms StartCastAnimations_Parms;

	this->ProcessEvent ( pFnStartCastAnimations, &StartCastAnimations_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartPower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::StartPower ( )
{
	static UFunction* pFnStartPower = NULL;

	if ( ! pFnStartPower )
		pFnStartPower = (UFunction*) UObject::GObjObjects()->Data[ 81904 ];

	Usfxpowercustomaction_sentryturretshock_execStartPower_Parms StartPower_Parms;

	this->ProcessEvent ( pFnStartPower, &StartPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretshock::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81892 ];

	Usfxpowercustomaction_sentryturretshock_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ChangeCoverAction
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxpowercustomaction_sentryturretshock::ChangeCoverAction ( )
{
	static UFunction* pFnChangeCoverAction = NULL;

	if ( ! pFnChangeCoverAction )
		pFnChangeCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 81887 ];

	Usfxpowercustomaction_sentryturretshock_execChangeCoverAction_Parms ChangeCoverAction_Parms;

	this->ProcessEvent ( pFnChangeCoverAction, &ChangeCoverAction_Parms, NULL );

	return ChangeCoverAction_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetCurrentBodyStance
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance Usfxpowercustomaction_sentryturretshock::GetCurrentBodyStance ( )
{
	static UFunction* pFnGetCurrentBodyStance = NULL;

	if ( ! pFnGetCurrentBodyStance )
		pFnGetCurrentBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 81884 ];

	Usfxpowercustomaction_sentryturretshock_execGetCurrentBodyStance_Parms GetCurrentBodyStance_Parms;

	this->ProcessEvent ( pFnGetCurrentBodyStance, &GetCurrentBodyStance_Parms, NULL );

	return GetCurrentBodyStance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.LoadAnimSet
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxpowercustomaction_sentryturretshock::LoadAnimSet ( )
{
	static UFunction* pFnLoadAnimSet = NULL;

	if ( ! pFnLoadAnimSet )
		pFnLoadAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 81880 ];

	Usfxpowercustomaction_sentryturretshock_execLoadAnimSet_Parms LoadAnimSet_Parms;

	this->ProcessEvent ( pFnLoadAnimSet, &LoadAnimSet_Parms, NULL );

	return LoadAnimSet_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.CanUsePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::CanUsePower ( class AActor* oTarget )
{
	static UFunction* pFnCanUsePower = NULL;

	if ( ! pFnCanUsePower )
		pFnCanUsePower = (UFunction*) UObject::GObjObjects()->Data[ 55613 ];

	Usfxpowercustomaction_sentryturretshock_execCanUsePower_Parms CanUsePower_Parms;
	CanUsePower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanUsePower, &CanUsePower_Parms, NULL );

	return CanUsePower_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretshock::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81868 ];

	Usfxpowercustomaction_sentryturretshock_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_sentryturretshock::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 81862 ];

	Usfxpowercustomaction_sentryturretshock_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.sfxpowercustomaction.GetSaveGamePowerState
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxpowercustomaction_sentryturretrocket::GetSaveGamePowerState ( )
{
	static UFunction* pFnGetSaveGamePowerState = NULL;

	if ( ! pFnGetSaveGamePowerState )
		pFnGetSaveGamePowerState = (UFunction*) UObject::GObjObjects()->Data[ 82415 ];

	Usfxpowercustomaction_sentryturretrocket_execGetSaveGamePowerState_Parms GetSaveGamePowerState_Parms;

	this->ProcessEvent ( pFnGetSaveGamePowerState, &GetSaveGamePowerState_Parms, NULL );

	return GetSaveGamePowerState_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.SetSaveGamePowerState
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nState                         ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::SetSaveGamePowerState ( int nState )
{
	static UFunction* pFnSetSaveGamePowerState = NULL;

	if ( ! pFnSetSaveGamePowerState )
		pFnSetSaveGamePowerState = (UFunction*) UObject::GObjObjects()->Data[ 82413 ];

	Usfxpowercustomaction_sentryturretrocket_execSetSaveGamePowerState_Parms SetSaveGamePowerState_Parms;
	SetSaveGamePowerState_Parms.nState = nState;

	this->ProcessEvent ( pFnSetSaveGamePowerState, &SetSaveGamePowerState_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetUniquePowerPlayerVariable
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName Usfxpowercustomaction_sentryturretrocket::GetUniquePowerPlayerVariable ( )
{
	static UFunction* pFnGetUniquePowerPlayerVariable = NULL;

	if ( ! pFnGetUniquePowerPlayerVariable )
		pFnGetUniquePowerPlayerVariable = (UFunction*) UObject::GObjObjects()->Data[ 82411 ];

	Usfxpowercustomaction_sentryturretrocket_execGetUniquePowerPlayerVariable_Parms GetUniquePowerPlayerVariable_Parms;

	this->ProcessEvent ( pFnGetUniquePowerPlayerVariable, &GetUniquePowerPlayerVariable_Parms, NULL );

	return GetUniquePowerPlayerVariable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.RestoreSaveState
// [0x00020000] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::RestoreSaveState ( )
{
	static UFunction* pFnRestoreSaveState = NULL;

	if ( ! pFnRestoreSaveState )
		pFnRestoreSaveState = (UFunction*) UObject::GObjObjects()->Data[ 82410 ];

	Usfxpowercustomaction_sentryturretrocket_execRestoreSaveState_Parms RestoreSaveState_Parms;

	this->ProcessEvent ( pFnRestoreSaveState, &RestoreSaveState_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicationDecodeDelayAndResistance
// [0x00420002] 
// Parameters infos:
// int                            EncodedData                    ( CPF_Parm )
// float                          fDelay                         ( CPF_Parm | CPF_OutParm )
// unsigned char                  Resistance                     ( CPF_Parm | CPF_OutParm )

void Usfxpowercustomaction_sentryturretrocket::ReplicationDecodeDelayAndResistance ( int EncodedData, float* fDelay, unsigned char* Resistance )
{
	static UFunction* pFnReplicationDecodeDelayAndResistance = NULL;

	if ( ! pFnReplicationDecodeDelayAndResistance )
		pFnReplicationDecodeDelayAndResistance = (UFunction*) UObject::GObjObjects()->Data[ 82406 ];

	Usfxpowercustomaction_sentryturretrocket_execReplicationDecodeDelayAndResistance_Parms ReplicationDecodeDelayAndResistance_Parms;
	ReplicationDecodeDelayAndResistance_Parms.EncodedData = EncodedData;

	this->ProcessEvent ( pFnReplicationDecodeDelayAndResistance, &ReplicationDecodeDelayAndResistance_Parms, NULL );

	if ( fDelay )
		*fDelay = ReplicationDecodeDelayAndResistance_Parms.fDelay;

	if ( Resistance )
		*Resistance = ReplicationDecodeDelayAndResistance_Parms.Resistance;
};

// Function SFXGame.sfxpowercustomaction.ReplicationEncodeDelayAndResistance
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDelay                         ( CPF_Parm )
// unsigned char                  Resistance                     ( CPF_Parm )

int Usfxpowercustomaction_sentryturretrocket::ReplicationEncodeDelayAndResistance ( float fDelay, unsigned char Resistance )
{
	static UFunction* pFnReplicationEncodeDelayAndResistance = NULL;

	if ( ! pFnReplicationEncodeDelayAndResistance )
		pFnReplicationEncodeDelayAndResistance = (UFunction*) UObject::GObjObjects()->Data[ 82402 ];

	Usfxpowercustomaction_sentryturretrocket_execReplicationEncodeDelayAndResistance_Parms ReplicationEncodeDelayAndResistance_Parms;
	ReplicationEncodeDelayAndResistance_Parms.fDelay = fDelay;
	ReplicationEncodeDelayAndResistance_Parms.Resistance = Resistance;

	this->ProcessEvent ( pFnReplicationEncodeDelayAndResistance, &ReplicationEncodeDelayAndResistance_Parms, NULL );

	return ReplicationEncodeDelayAndResistance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.OnSourcePowerBioticDetonation
// [0x00020000] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::OnSourcePowerBioticDetonation ( )
{
	static UFunction* pFnOnSourcePowerBioticDetonation = NULL;

	if ( ! pFnOnSourcePowerBioticDetonation )
		pFnOnSourcePowerBioticDetonation = (UFunction*) UObject::GObjObjects()->Data[ 82401 ];

	Usfxpowercustomaction_sentryturretrocket_execOnSourcePowerBioticDetonation_Parms OnSourcePowerBioticDetonation_Parms;

	this->ProcessEvent ( pFnOnSourcePowerBioticDetonation, &OnSourcePowerBioticDetonation_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerComboClassFromUniqueID
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )

struct FString Usfxpowercustomaction_sentryturretrocket::GetPowerComboClassFromUniqueID ( int PowerComboTypeUniqueID )
{
	static UFunction* pFnGetPowerComboClassFromUniqueID = NULL;

	if ( ! pFnGetPowerComboClassFromUniqueID )
		pFnGetPowerComboClassFromUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 82398 ];

	Usfxpowercustomaction_sentryturretrocket_execGetPowerComboClassFromUniqueID_Parms GetPowerComboClassFromUniqueID_Parms;
	GetPowerComboClassFromUniqueID_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;

	this->ProcessEvent ( pFnGetPowerComboClassFromUniqueID, &GetPowerComboClassFromUniqueID_Parms, NULL );

	return GetPowerComboClassFromUniqueID_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPowerComboTypeUniqueIDFromClass
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 className                      ( CPF_Parm | CPF_NeedCtorLink )

int Usfxpowercustomaction_sentryturretrocket::GetPowerComboTypeUniqueIDFromClass ( struct FString className )
{
	static UFunction* pFnGetPowerComboTypeUniqueIDFromClass = NULL;

	if ( ! pFnGetPowerComboTypeUniqueIDFromClass )
		pFnGetPowerComboTypeUniqueIDFromClass = (UFunction*) UObject::GObjObjects()->Data[ 69117 ];

	Usfxpowercustomaction_sentryturretrocket_execGetPowerComboTypeUniqueIDFromClass_Parms GetPowerComboTypeUniqueIDFromClass_Parms;
	memcpy ( &GetPowerComboTypeUniqueIDFromClass_Parms.className, &className, 0xC );

	this->ProcessEvent ( pFnGetPowerComboTypeUniqueIDFromClass, &GetPowerComboTypeUniqueIDFromClass_Parms, NULL );

	return GetPowerComboTypeUniqueIDFromClass_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerComboImpactFromEffect
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// struct FString                 EffectClassName                ( CPF_Parm | CPF_NeedCtorLink )
// float                          DetonatorPowerRank             ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ClientDoPowerComboImpactFromEffect ( class AActor* oTarget, int CustomActionReactionType, struct FString EffectClassName, float DetonatorPowerRank, int MiscFlags )
{
	static UFunction* pFnClientDoPowerComboImpactFromEffect = NULL;

	if ( ! pFnClientDoPowerComboImpactFromEffect )
		pFnClientDoPowerComboImpactFromEffect = (UFunction*) UObject::GObjObjects()->Data[ 82387 ];

	Usfxpowercustomaction_sentryturretrocket_execClientDoPowerComboImpactFromEffect_Parms ClientDoPowerComboImpactFromEffect_Parms;
	ClientDoPowerComboImpactFromEffect_Parms.oTarget = oTarget;
	ClientDoPowerComboImpactFromEffect_Parms.CustomActionReactionType = CustomActionReactionType;
	memcpy ( &ClientDoPowerComboImpactFromEffect_Parms.EffectClassName, &EffectClassName, 0xC );
	ClientDoPowerComboImpactFromEffect_Parms.DetonatorPowerRank = DetonatorPowerRank;
	ClientDoPowerComboImpactFromEffect_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnClientDoPowerComboImpactFromEffect, &ClientDoPowerComboImpactFromEffect_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerCombo
// [0x00020002] 
// Parameters infos:
// class UClass*                  EffectClass                    ( CPF_Parm )
// int                            SourcePowerID                  ( CPF_Parm )
// class ABioPawn*                SourcePowerInstigator          ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ClientDoPowerCombo ( class UClass* EffectClass, int SourcePowerID, class ABioPawn* SourcePowerInstigator, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnClientDoPowerCombo = NULL;

	if ( ! pFnClientDoPowerCombo )
		pFnClientDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82375 ];

	Usfxpowercustomaction_sentryturretrocket_execClientDoPowerCombo_Parms ClientDoPowerCombo_Parms;
	ClientDoPowerCombo_Parms.EffectClass = EffectClass;
	ClientDoPowerCombo_Parms.SourcePowerID = SourcePowerID;
	ClientDoPowerCombo_Parms.SourcePowerInstigator = SourcePowerInstigator;
	ClientDoPowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &ClientDoPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoPowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnClientDoPowerCombo, &ClientDoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerCombo
// [0x00020002] 
// Parameters infos:
// class Usfxgameeffect_powercombo* ComboEffect                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ReplicatePowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnReplicatePowerCombo = NULL;

	if ( ! pFnReplicatePowerCombo )
		pFnReplicatePowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82370 ];

	Usfxpowercustomaction_sentryturretrocket_execReplicatePowerCombo_Parms ReplicatePowerCombo_Parms;
	ReplicatePowerCombo_Parms.ComboEffect = ComboEffect;
	ReplicatePowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &ReplicatePowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicatePowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnReplicatePowerCombo, &ReplicatePowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DelayedDoPowerCombo
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::DelayedDoPowerCombo ( )
{
	static UFunction* pFnDelayedDoPowerCombo = NULL;

	if ( ! pFnDelayedDoPowerCombo )
		pFnDelayedDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82369 ];

	Usfxpowercustomaction_sentryturretrocket_execDelayedDoPowerCombo_Parms DelayedDoPowerCombo_Parms;

	this->ProcessEvent ( pFnDelayedDoPowerCombo, &DelayedDoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DoPowerCombo
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// class Usfxgameeffect_powercombo* ComboEffect                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// unsigned long                  bDelayed                       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::DoPowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal, unsigned long bDelayed )
{
	static UFunction* pFnDoPowerCombo = NULL;

	if ( ! pFnDoPowerCombo )
		pFnDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82357 ];

	Usfxpowercustomaction_sentryturretrocket_execDoPowerCombo_Parms DoPowerCombo_Parms;
	DoPowerCombo_Parms.ComboEffect = ComboEffect;
	DoPowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &DoPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoPowerCombo_Parms.HitNormal, &HitNormal, 0xC );
	DoPowerCombo_Parms.bDelayed = bDelayed;

	this->ProcessEvent ( pFnDoPowerCombo, &DoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CheckForPowerCombo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// unsigned char                  Resistance                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::CheckForPowerCombo ( class AActor* Target, unsigned char Resistance, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnCheckForPowerCombo = NULL;

	if ( ! pFnCheckForPowerCombo )
		pFnCheckForPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82021 ];

	Usfxpowercustomaction_sentryturretrocket_execCheckForPowerCombo_Parms CheckForPowerCombo_Parms;
	CheckForPowerCombo_Parms.Target = Target;
	CheckForPowerCombo_Parms.Resistance = Resistance;
	memcpy ( &CheckForPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &CheckForPowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnCheckForPowerCombo, &CheckForPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.AddComboEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class Usfxgameeffect_powercombo* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// class UClass*                  ComboClass                     ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )

class Usfxgameeffect_powercombo* Usfxpowercustomaction_sentryturretrocket::AddComboEffect ( class AActor* Target, class UClass* ComboClass, float Duration )
{
	static UFunction* pFnAddComboEffect = NULL;

	if ( ! pFnAddComboEffect )
		pFnAddComboEffect = (UFunction*) UObject::GObjObjects()->Data[ 82341 ];

	Usfxpowercustomaction_sentryturretrocket_execAddComboEffect_Parms AddComboEffect_Parms;
	AddComboEffect_Parms.Target = Target;
	AddComboEffect_Parms.ComboClass = ComboClass;
	AddComboEffect_Parms.Duration = Duration;

	this->ProcessEvent ( pFnAddComboEffect, &AddComboEffect_Parms, NULL );

	return AddComboEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 82338 ];

	Usfxpowercustomaction_sentryturretrocket_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CombatEnded
// [0x00020000] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::CombatEnded ( )
{
	static UFunction* pFnCombatEnded = NULL;

	if ( ! pFnCombatEnded )
		pFnCombatEnded = (UFunction*) UObject::GObjObjects()->Data[ 82337 ];

	Usfxpowercustomaction_sentryturretrocket_execCombatEnded_Parms CombatEnded_Parms;

	this->ProcessEvent ( pFnCombatEnded, &CombatEnded_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplaceAnimSetWithDynamic
// [0x00020002] 
// Parameters infos:
// class UAnimSet*                DynAnimSet                     ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ReplaceAnimSetWithDynamic ( class UAnimSet* DynAnimSet )
{
	static UFunction* pFnReplaceAnimSetWithDynamic = NULL;

	if ( ! pFnReplaceAnimSetWithDynamic )
		pFnReplaceAnimSetWithDynamic = (UFunction*) UObject::GObjObjects()->Data[ 82335 ];

	Usfxpowercustomaction_sentryturretrocket_execReplaceAnimSetWithDynamic_Parms ReplaceAnimSetWithDynamic_Parms;
	ReplaceAnimSetWithDynamic_Parms.DynAnimSet = DynAnimSet;

	this->ProcessEvent ( pFnReplaceAnimSetWithDynamic, &ReplaceAnimSetWithDynamic_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerAnimInfo
// [0x00420002] 
// Parameters infos:
// class UAnimSet*                AnimSet                        ( CPF_Parm | CPF_OutParm )
// TArray< struct FName >         AnimNames                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_sentryturretrocket::GetPowerAnimInfo ( class UAnimSet** AnimSet, TArray< struct FName >* AnimNames )
{
	static UFunction* pFnGetPowerAnimInfo = NULL;

	if ( ! pFnGetPowerAnimInfo )
		pFnGetPowerAnimInfo = (UFunction*) UObject::GObjObjects()->Data[ 82330 ];

	Usfxpowercustomaction_sentryturretrocket_execGetPowerAnimInfo_Parms GetPowerAnimInfo_Parms;

	this->ProcessEvent ( pFnGetPowerAnimInfo, &GetPowerAnimInfo_Parms, NULL );

	if ( AnimSet )
		*AnimSet = GetPowerAnimInfo_Parms.AnimSet;

	if ( AnimNames )
		memcpy ( AnimNames, &GetPowerAnimInfo_Parms.AnimNames, 0xC );
};

// Function SFXGame.sfxpowercustomaction.CleanUpProjectile
// [0x00024002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::CleanUpProjectile ( class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnCleanUpProjectile = NULL;

	if ( ! pFnCleanUpProjectile )
		pFnCleanUpProjectile = (UFunction*) UObject::GObjObjects()->Data[ 82325 ];

	Usfxpowercustomaction_sentryturretrocket_execCleanUpProjectile_Parms CleanUpProjectile_Parms;
	CleanUpProjectile_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnCleanUpProjectile, &CleanUpProjectile_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerComboImpact
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// float                          PowerRank                      ( CPF_Parm )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ReplicatePowerComboImpact ( class ABioPawn* Target, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags )
{
	static UFunction* pFnReplicatePowerComboImpact = NULL;

	if ( ! pFnReplicatePowerComboImpact )
		pFnReplicatePowerComboImpact = (UFunction*) UObject::GObjObjects()->Data[ 82319 ];

	Usfxpowercustomaction_sentryturretrocket_execReplicatePowerComboImpact_Parms ReplicatePowerComboImpact_Parms;
	ReplicatePowerComboImpact_Parms.Target = Target;
	ReplicatePowerComboImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ReplicatePowerComboImpact_Parms.PowerRank = PowerRank;
	ReplicatePowerComboImpact_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;
	ReplicatePowerComboImpact_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnReplicatePowerComboImpact, &ReplicatePowerComboImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ReplicatePowerSubsequentImpact ( class ABioPawn* Target, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnReplicatePowerSubsequentImpact = NULL;

	if ( ! pFnReplicatePowerSubsequentImpact )
		pFnReplicatePowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 82312 ];

	Usfxpowercustomaction_sentryturretrocket_execReplicatePowerSubsequentImpact_Parms ReplicatePowerSubsequentImpact_Parms;
	ReplicatePowerSubsequentImpact_Parms.Target = Target;
	ReplicatePowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ReplicatePowerSubsequentImpact_Parms.Duration = Duration;
	ReplicatePowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ReplicatePowerSubsequentImpact_Parms.Delay = Delay;
	ReplicatePowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnReplicatePowerSubsequentImpact, &ReplicatePowerSubsequentImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicateImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnReplicateImpact = NULL;

	if ( ! pFnReplicateImpact )
		pFnReplicateImpact = (UFunction*) UObject::GObjObjects()->Data[ 82305 ];

	Usfxpowercustomaction_sentryturretrocket_execReplicateImpact_Parms ReplicateImpact_Parms;
	ReplicateImpact_Parms.Target = Target;
	ReplicateImpact_Parms.ImpactCount = ImpactCount;
	ReplicateImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ReplicateImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicateImpact_Parms.HitNormal, &HitNormal, 0xC );
	ReplicateImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnReplicateImpact, &ReplicateImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoCustomAction
// [0x00024002] 
// Parameters infos:
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ClientDoCustomAction ( unsigned long bForced )
{
	static UFunction* pFnClientDoCustomAction = NULL;

	if ( ! pFnClientDoCustomAction )
		pFnClientDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 82303 ];

	Usfxpowercustomaction_sentryturretrocket_execClientDoCustomAction_Parms ClientDoCustomAction_Parms;
	ClientDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnClientDoCustomAction, &ClientDoCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.Replicate
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::Replicate ( )
{
	static UFunction* pFnReplicate = NULL;

	if ( ! pFnReplicate )
		pFnReplicate = (UFunction*) UObject::GObjObjects()->Data[ 82302 ];

	Usfxpowercustomaction_sentryturretrocket_execReplicate_Parms Replicate_Parms;

	this->ProcessEvent ( pFnReplicate, &Replicate_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayPowerScreenShake
// [0x00820002] 
// Parameters infos:
// class UClass*                  ScreenShakeClass               ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::PlayPowerScreenShake ( class UClass* ScreenShakeClass, struct FVector HitLocation )
{
	static UFunction* pFnPlayPowerScreenShake = NULL;

	if ( ! pFnPlayPowerScreenShake )
		pFnPlayPowerScreenShake = (UFunction*) UObject::GObjObjects()->Data[ 82293 ];

	Usfxpowercustomaction_sentryturretrocket_execPlayPowerScreenShake_Parms PlayPowerScreenShake_Parms;
	PlayPowerScreenShake_Parms.ScreenShakeClass = ScreenShakeClass;
	memcpy ( &PlayPowerScreenShake_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayPowerScreenShake, &PlayPowerScreenShake_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayPowerControllerRumble
// [0x00020002] 
// Parameters infos:
// class UClass*                  RumbleClass                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::PlayPowerControllerRumble ( class UClass* RumbleClass, struct FVector HitLocation )
{
	static UFunction* pFnPlayPowerControllerRumble = NULL;

	if ( ! pFnPlayPowerControllerRumble )
		pFnPlayPowerControllerRumble = (UFunction*) UObject::GObjObjects()->Data[ 82283 ];

	Usfxpowercustomaction_sentryturretrocket_execPlayPowerControllerRumble_Parms PlayPowerControllerRumble_Parms;
	PlayPowerControllerRumble_Parms.RumbleClass = RumbleClass;
	memcpy ( &PlayPowerControllerRumble_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayPowerControllerRumble, &PlayPowerControllerRumble_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetDefaultClientEffectParams
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector Usfxpowercustomaction_sentryturretrocket::GetDefaultClientEffectParams ( )
{
	static UFunction* pFnGetDefaultClientEffectParams = NULL;

	if ( ! pFnGetDefaultClientEffectParams )
		pFnGetDefaultClientEffectParams = (UFunction*) UObject::GObjObjects()->Data[ 82280 ];

	Usfxpowercustomaction_sentryturretrocket_execGetDefaultClientEffectParams_Parms GetDefaultClientEffectParams_Parms;

	this->ProcessEvent ( pFnGetDefaultClientEffectParams, &GetDefaultClientEffectParams_Parms, NULL );

	return GetDefaultClientEffectParams_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AddEvolvedRankBonus
// [0x00420002] 
// Parameters infos:
// float                          Bonus                          ( CPF_Parm )
// struct FPowerData              Data                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_sentryturretrocket::AddEvolvedRankBonus ( float Bonus, struct FPowerData* Data )
{
	static UFunction* pFnAddEvolvedRankBonus = NULL;

	if ( ! pFnAddEvolvedRankBonus )
		pFnAddEvolvedRankBonus = (UFunction*) UObject::GObjObjects()->Data[ 82276 ];

	Usfxpowercustomaction_sentryturretrocket_execAddEvolvedRankBonus_Parms AddEvolvedRankBonus_Parms;
	AddEvolvedRankBonus_Parms.Bonus = Bonus;

	this->ProcessEvent ( pFnAddEvolvedRankBonus, &AddEvolvedRankBonus_Parms, NULL );

	if ( Data )
		memcpy ( Data, &AddEvolvedRankBonus_Parms.Data, 0x30 );
};

// Function SFXGame.sfxpowercustomaction.ApplyForceToActor
// [0x00020002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 vForce                         ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ApplyForceToActor ( class AActor* oActor, struct FVector vForce )
{
	static UFunction* pFnApplyForceToActor = NULL;

	if ( ! pFnApplyForceToActor )
		pFnApplyForceToActor = (UFunction*) UObject::GObjObjects()->Data[ 82271 ];

	Usfxpowercustomaction_sentryturretrocket_execApplyForceToActor_Parms ApplyForceToActor_Parms;
	ApplyForceToActor_Parms.oActor = oActor;
	memcpy ( &ApplyForceToActor_Parms.vForce, &vForce, 0xC );

	this->ProcessEvent ( pFnApplyForceToActor, &ApplyForceToActor_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ApplyShieldBonus
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// float                          fShieldValue                   ( CPF_Parm )
// unsigned long                  bShieldValueIsPercent          ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// struct FName                   Category                       ( CPF_Parm )
// unsigned long                  bRemoveEffectWhenShieldsDown   ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ApplyShieldBonus ( class ABioPawn* oPawn, float fShieldValue, unsigned long bShieldValueIsPercent, float fDuration, struct FName Category, unsigned long bRemoveEffectWhenShieldsDown )
{
	static UFunction* pFnApplyShieldBonus = NULL;

	if ( ! pFnApplyShieldBonus )
		pFnApplyShieldBonus = (UFunction*) UObject::GObjObjects()->Data[ 82262 ];

	Usfxpowercustomaction_sentryturretrocket_execApplyShieldBonus_Parms ApplyShieldBonus_Parms;
	ApplyShieldBonus_Parms.oPawn = oPawn;
	ApplyShieldBonus_Parms.fShieldValue = fShieldValue;
	ApplyShieldBonus_Parms.bShieldValueIsPercent = bShieldValueIsPercent;
	ApplyShieldBonus_Parms.fDuration = fDuration;
	memcpy ( &ApplyShieldBonus_Parms.Category, &Category, 0x8 );
	ApplyShieldBonus_Parms.bRemoveEffectWhenShieldsDown = bRemoveEffectWhenShieldsDown;

	this->ProcessEvent ( pFnApplyShieldBonus, &ApplyShieldBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ApplyHealthBonus
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// float                          fHealthValue                   ( CPF_Parm )
// unsigned long                  bHealthValueIsPercent          ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// struct FName                   Category                       ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ApplyHealthBonus ( class ABioPawn* oPawn, float fHealthValue, unsigned long bHealthValueIsPercent, float fDuration, struct FName Category )
{
	static UFunction* pFnApplyHealthBonus = NULL;

	if ( ! pFnApplyHealthBonus )
		pFnApplyHealthBonus = (UFunction*) UObject::GObjObjects()->Data[ 82254 ];

	Usfxpowercustomaction_sentryturretrocket_execApplyHealthBonus_Parms ApplyHealthBonus_Parms;
	ApplyHealthBonus_Parms.oPawn = oPawn;
	ApplyHealthBonus_Parms.fHealthValue = fHealthValue;
	ApplyHealthBonus_Parms.bHealthValueIsPercent = bHealthValueIsPercent;
	ApplyHealthBonus_Parms.fDuration = fDuration;
	memcpy ( &ApplyHealthBonus_Parms.Category, &Category, 0x8 );

	this->ProcessEvent ( pFnApplyHealthBonus, &ApplyHealthBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayParticleSystemOnSocket
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UParticleSystem*         PS_Template                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FName                   SocketName                     ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::PlayParticleSystemOnSocket ( class UParticleSystem* PS_Template, class ABioPawn* TargetPawn, struct FName SocketName, struct FRotator Rotation )
{
	static UFunction* pFnPlayParticleSystemOnSocket = NULL;

	if ( ! pFnPlayParticleSystemOnSocket )
		pFnPlayParticleSystemOnSocket = (UFunction*) UObject::GObjObjects()->Data[ 67470 ];

	Usfxpowercustomaction_sentryturretrocket_execPlayParticleSystemOnSocket_Parms PlayParticleSystemOnSocket_Parms;
	PlayParticleSystemOnSocket_Parms.PS_Template = PS_Template;
	PlayParticleSystemOnSocket_Parms.TargetPawn = TargetPawn;
	memcpy ( &PlayParticleSystemOnSocket_Parms.SocketName, &SocketName, 0x8 );
	memcpy ( &PlayParticleSystemOnSocket_Parms.Rotation, &Rotation, 0xC );

	this->ProcessEvent ( pFnPlayParticleSystemOnSocket, &PlayParticleSystemOnSocket_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.HasRemainingShieldOfType
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )
// class UClass*                  ShieldClass                    ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::HasRemainingShieldOfType ( class ABioPawn* oPawn, class UClass* ShieldClass )
{
	static UFunction* pFnHasRemainingShieldOfType = NULL;

	if ( ! pFnHasRemainingShieldOfType )
		pFnHasRemainingShieldOfType = (UFunction*) UObject::GObjObjects()->Data[ 82243 ];

	Usfxpowercustomaction_sentryturretrocket_execHasRemainingShieldOfType_Parms HasRemainingShieldOfType_Parms;
	HasRemainingShieldOfType_Parms.oPawn = oPawn;
	HasRemainingShieldOfType_Parms.ShieldClass = ShieldClass;

	this->ProcessEvent ( pFnHasRemainingShieldOfType, &HasRemainingShieldOfType_Parms, NULL );

	return HasRemainingShieldOfType_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsPlaceable
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::IsPlaceable ( class AActor* oImpacted )
{
	static UFunction* pFnIsPlaceable = NULL;

	if ( ! pFnIsPlaceable )
		pFnIsPlaceable = (UFunction*) UObject::GObjObjects()->Data[ 82240 ];

	Usfxpowercustomaction_sentryturretrocket_execIsPlaceable_Parms IsPlaceable_Parms;
	IsPlaceable_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsPlaceable, &IsPlaceable_Parms, NULL );

	return IsPlaceable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyPermanentGameEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class UClass*                  className                      ( CPF_Parm )
// float                          fEffectValue                   ( CPF_Parm )
// struct FName                   nmCategory                     ( CPF_Parm )
// class AController*             Instigator                     ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::ApplyPermanentGameEffect ( class AActor* oTarget, class UClass* className, float fEffectValue, struct FName nmCategory, class AController* Instigator )
{
	static UFunction* pFnApplyPermanentGameEffect = NULL;

	if ( ! pFnApplyPermanentGameEffect )
		pFnApplyPermanentGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 82231 ];

	Usfxpowercustomaction_sentryturretrocket_execApplyPermanentGameEffect_Parms ApplyPermanentGameEffect_Parms;
	ApplyPermanentGameEffect_Parms.oTarget = oTarget;
	ApplyPermanentGameEffect_Parms.className = className;
	ApplyPermanentGameEffect_Parms.fEffectValue = fEffectValue;
	memcpy ( &ApplyPermanentGameEffect_Parms.nmCategory, &nmCategory, 0x8 );
	ApplyPermanentGameEffect_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnApplyPermanentGameEffect, &ApplyPermanentGameEffect_Parms, NULL );

	return ApplyPermanentGameEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyTemporaryGameEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class UClass*                  className                      ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// float                          fEffectValue                   ( CPF_Parm )
// struct FName                   nmCategory                     ( CPF_Parm )
// class AController*             Instigator                     ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::ApplyTemporaryGameEffect ( class AActor* oTarget, class UClass* className, float fDuration, float fEffectValue, struct FName nmCategory, class AController* Instigator )
{
	static UFunction* pFnApplyTemporaryGameEffect = NULL;

	if ( ! pFnApplyTemporaryGameEffect )
		pFnApplyTemporaryGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 67380 ];

	Usfxpowercustomaction_sentryturretrocket_execApplyTemporaryGameEffect_Parms ApplyTemporaryGameEffect_Parms;
	ApplyTemporaryGameEffect_Parms.oTarget = oTarget;
	ApplyTemporaryGameEffect_Parms.className = className;
	ApplyTemporaryGameEffect_Parms.fDuration = fDuration;
	ApplyTemporaryGameEffect_Parms.fEffectValue = fEffectValue;
	memcpy ( &ApplyTemporaryGameEffect_Parms.nmCategory, &nmCategory, 0x8 );
	ApplyTemporaryGameEffect_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnApplyTemporaryGameEffect, &ApplyTemporaryGameEffect_Parms, NULL );

	return ApplyTemporaryGameEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsOfRace
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// unsigned char                  eRace                          ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::IsOfRace ( class AActor* oImpacted, unsigned char eRace )
{
	static UFunction* pFnIsOfRace = NULL;

	if ( ! pFnIsOfRace )
		pFnIsOfRace = (UFunction*) UObject::GObjObjects()->Data[ 82218 ];

	Usfxpowercustomaction_sentryturretrocket_execIsOfRace_Parms IsOfRace_Parms;
	IsOfRace_Parms.oImpacted = oImpacted;
	IsOfRace_Parms.eRace = eRace;

	this->ProcessEvent ( pFnIsOfRace, &IsOfRace_Parms, NULL );

	return IsOfRace_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.CanBeRagdolledByPowers
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::CanBeRagdolledByPowers ( class ABioPawn* oPawn )
{
	static UFunction* pFnCanBeRagdolledByPowers = NULL;

	if ( ! pFnCanBeRagdolledByPowers )
		pFnCanBeRagdolledByPowers = (UFunction*) UObject::GObjObjects()->Data[ 82215 ];

	Usfxpowercustomaction_sentryturretrocket_execCanBeRagdolledByPowers_Parms CanBeRagdolledByPowers_Parms;
	CanBeRagdolledByPowers_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnCanBeRagdolledByPowers, &CanBeRagdolledByPowers_Parms, NULL );

	return CanBeRagdolledByPowers_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ImpactPlaceable
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// float                          PlotPlaceableDamage            ( CPF_Parm )
// unsigned long                  bForceDamage                   ( CPF_OptionalParm | CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::ImpactPlaceable ( class AActor* oCaster, class AActor* oImpacted, struct FVector Momentum, float PlotPlaceableDamage, unsigned long bForceDamage )
{
	static UFunction* pFnImpactPlaceable = NULL;

	if ( ! pFnImpactPlaceable )
		pFnImpactPlaceable = (UFunction*) UObject::GObjObjects()->Data[ 82203 ];

	Usfxpowercustomaction_sentryturretrocket_execImpactPlaceable_Parms ImpactPlaceable_Parms;
	ImpactPlaceable_Parms.oCaster = oCaster;
	ImpactPlaceable_Parms.oImpacted = oImpacted;
	memcpy ( &ImpactPlaceable_Parms.Momentum, &Momentum, 0xC );
	ImpactPlaceable_Parms.PlotPlaceableDamage = PlotPlaceableDamage;
	ImpactPlaceable_Parms.bForceDamage = bForceDamage;

	this->ProcessEvent ( pFnImpactPlaceable, &ImpactPlaceable_Parms, NULL );

	return ImpactPlaceable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPhysicsLevelResistance
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

float Usfxpowercustomaction_sentryturretrocket::GetPhysicsLevelResistance ( class AActor* oTarget )
{
	static UFunction* pFnGetPhysicsLevelResistance = NULL;

	if ( ! pFnGetPhysicsLevelResistance )
		pFnGetPhysicsLevelResistance = (UFunction*) UObject::GObjObjects()->Data[ 82198 ];

	Usfxpowercustomaction_sentryturretrocket_execGetPhysicsLevelResistance_Parms GetPhysicsLevelResistance_Parms;
	GetPhysicsLevelResistance_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnGetPhysicsLevelResistance, &GetPhysicsLevelResistance_Parms, NULL );

	return GetPhysicsLevelResistance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPhysicsLevel
// [0x00026002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// unsigned long                  bIgnoreResistance              ( CPF_OptionalParm | CPF_Parm )

int Usfxpowercustomaction_sentryturretrocket::GetPhysicsLevel ( class AActor* oImpacted, unsigned long bIgnoreResistance )
{
	static UFunction* pFnGetPhysicsLevel = NULL;

	if ( ! pFnGetPhysicsLevel )
		pFnGetPhysicsLevel = (UFunction*) UObject::GObjObjects()->Data[ 82192 ];

	Usfxpowercustomaction_sentryturretrocket_execGetPhysicsLevel_Parms GetPhysicsLevel_Parms;
	GetPhysicsLevel_Parms.oImpacted = oImpacted;
	GetPhysicsLevel_Parms.bIgnoreResistance = bIgnoreResistance;

	this->ProcessEvent ( pFnGetPhysicsLevel, &GetPhysicsLevel_Parms, NULL );

	return GetPhysicsLevel_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsMachineRace
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::IsMachineRace ( class AActor* oImpacted )
{
	static UFunction* pFnIsMachineRace = NULL;

	if ( ! pFnIsMachineRace )
		pFnIsMachineRace = (UFunction*) UObject::GObjObjects()->Data[ 82188 ];

	Usfxpowercustomaction_sentryturretrocket_execIsMachineRace_Parms IsMachineRace_Parms;
	IsMachineRace_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsMachineRace, &IsMachineRace_Parms, NULL );

	return IsMachineRace_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ShouldUsePowerOnShields
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxpowercustomaction_sentryturretrocket::ShouldUsePowerOnShields ( class ABioPawn* Target, class UClass* DamageType, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePowerOnShields = NULL;

	if ( ! pFnShouldUsePowerOnShields )
		pFnShouldUsePowerOnShields = (UFunction*) UObject::GObjObjects()->Data[ 82180 ];

	Usfxpowercustomaction_sentryturretrocket_execShouldUsePowerOnShields_Parms ShouldUsePowerOnShields_Parms;
	ShouldUsePowerOnShields_Parms.Target = Target;
	ShouldUsePowerOnShields_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnShouldUsePowerOnShields, &ShouldUsePowerOnShields_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePowerOnShields_Parms.sOptionalInfo, 0xC );

	return ShouldUsePowerOnShields_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.RagdollPhysicsImpact
// [0x00020002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )
// class AActor*                  oImpactActor                   ( CPF_Parm )
// struct FVector                 vImpactDir                     ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::RagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir )
{
	static UFunction* pFnRagdollPhysicsImpact = NULL;

	if ( ! pFnRagdollPhysicsImpact )
		pFnRagdollPhysicsImpact = (UFunction*) UObject::GObjObjects()->Data[ 82166 ];

	Usfxpowercustomaction_sentryturretrocket_execRagdollPhysicsImpact_Parms RagdollPhysicsImpact_Parms;
	RagdollPhysicsImpact_Parms.oPawn = oPawn;
	RagdollPhysicsImpact_Parms.oImpactActor = oImpactActor;
	memcpy ( &RagdollPhysicsImpact_Parms.vImpactDir, &vImpactDir, 0xC );

	this->ProcessEvent ( pFnRagdollPhysicsImpact, &RagdollPhysicsImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CanImpactActor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::CanImpactActor ( class AActor* oActor )
{
	static UFunction* pFnCanImpactActor = NULL;

	if ( ! pFnCanImpactActor )
		pFnCanImpactActor = (UFunction*) UObject::GObjObjects()->Data[ 82163 ];

	Usfxpowercustomaction_sentryturretrocket_execCanImpactActor_Parms CanImpactActor_Parms;
	CanImpactActor_Parms.oActor = oActor;

	this->ProcessEvent ( pFnCanImpactActor, &CanImpactActor_Parms, NULL );

	return CanImpactActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AddActorToImpactedList
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 vImpactLocation                ( CPF_Parm )
// TArray< class AActor* >        ImpactedActors                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxpowercustomaction_sentryturretrocket::AddActorToImpactedList ( class AActor* oActor, struct FVector vImpactLocation, TArray< class AActor* >* ImpactedActors )
{
	static UFunction* pFnAddActorToImpactedList = NULL;

	if ( ! pFnAddActorToImpactedList )
		pFnAddActorToImpactedList = (UFunction*) UObject::GObjObjects()->Data[ 82152 ];

	Usfxpowercustomaction_sentryturretrocket_execAddActorToImpactedList_Parms AddActorToImpactedList_Parms;
	AddActorToImpactedList_Parms.oActor = oActor;
	memcpy ( &AddActorToImpactedList_Parms.vImpactLocation, &vImpactLocation, 0xC );

	this->ProcessEvent ( pFnAddActorToImpactedList, &AddActorToImpactedList_Parms, NULL );

	if ( ImpactedActors )
		memcpy ( ImpactedActors, &AddActorToImpactedList_Parms.ImpactedActors, 0xC );

	return AddActorToImpactedList_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.DetonationHitsTarget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FAreaEffectParameters   DetonationParams               ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::DetonationHitsTarget ( struct FVector HitLocation, float MaxRange, class AActor* HitActor, struct FAreaEffectParameters DetonationParams )
{
	static UFunction* pFnDetonationHitsTarget = NULL;

	if ( ! pFnDetonationHitsTarget )
		pFnDetonationHitsTarget = (UFunction*) UObject::GObjObjects()->Data[ 81999 ];

	Usfxpowercustomaction_sentryturretrocket_execDetonationHitsTarget_Parms DetonationHitsTarget_Parms;
	memcpy ( &DetonationHitsTarget_Parms.HitLocation, &HitLocation, 0xC );
	DetonationHitsTarget_Parms.MaxRange = MaxRange;
	DetonationHitsTarget_Parms.HitActor = HitActor;
	memcpy ( &DetonationHitsTarget_Parms.DetonationParams, &DetonationParams, 0x20 );

	this->ProcessEvent ( pFnDetonationHitsTarget, &DetonationHitsTarget_Parms, NULL );

	return DetonationHitsTarget_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetNearbyActors
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// TArray< class AActor* >        ImpactedActors                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxpowercustomaction_sentryturretrocket::GetNearbyActors ( struct FVector HitLocation, float Radius, float MaxRange, struct FAreaEffectParameters Param, TArray< class AActor* >* ImpactedActors )
{
	static UFunction* pFnGetNearbyActors = NULL;

	if ( ! pFnGetNearbyActors )
		pFnGetNearbyActors = (UFunction*) UObject::GObjObjects()->Data[ 67385 ];

	Usfxpowercustomaction_sentryturretrocket_execGetNearbyActors_Parms GetNearbyActors_Parms;
	memcpy ( &GetNearbyActors_Parms.HitLocation, &HitLocation, 0xC );
	GetNearbyActors_Parms.Radius = Radius;
	GetNearbyActors_Parms.MaxRange = MaxRange;
	memcpy ( &GetNearbyActors_Parms.Param, &Param, 0x20 );

	this->ProcessEvent ( pFnGetNearbyActors, &GetNearbyActors_Parms, NULL );

	if ( ImpactedActors )
		memcpy ( ImpactedActors, &GetNearbyActors_Parms.ImpactedActors, 0xC );

	return GetNearbyActors_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyBonusToParameter
// [0x00424002] 
// Parameters infos:
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )
// struct FPowerData              Parameter                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_sentryturretrocket::ApplyBonusToParameter ( class USFXGameEffect* Bonus, unsigned long bRemove, struct FPowerData* Parameter )
{
	static UFunction* pFnApplyBonusToParameter = NULL;

	if ( ! pFnApplyBonusToParameter )
		pFnApplyBonusToParameter = (UFunction*) UObject::GObjObjects()->Data[ 82130 ];

	Usfxpowercustomaction_sentryturretrocket_execApplyBonusToParameter_Parms ApplyBonusToParameter_Parms;
	ApplyBonusToParameter_Parms.Bonus = Bonus;
	ApplyBonusToParameter_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonusToParameter, &ApplyBonusToParameter_Parms, NULL );

	if ( Parameter )
		memcpy ( Parameter, &ApplyBonusToParameter_Parms.Parameter, 0x30 );
};

// Function SFXGame.sfxpowercustomaction.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 82126 ];

	Usfxpowercustomaction_sentryturretrocket_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayImpactEffects
// [0x00020002] 
// Parameters infos:
// class AActor*                  oImpacted                      ( CPF_Parm )
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// struct FVector                 ImpactNormal                   ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::PlayImpactEffects ( class AActor* oImpacted, struct FVector ImpactLocation, struct FVector ImpactNormal )
{
	static UFunction* pFnPlayImpactEffects = NULL;

	if ( ! pFnPlayImpactEffects )
		pFnPlayImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 82120 ];

	Usfxpowercustomaction_sentryturretrocket_execPlayImpactEffects_Parms PlayImpactEffects_Parms;
	PlayImpactEffects_Parms.oImpacted = oImpacted;
	memcpy ( &PlayImpactEffects_Parms.ImpactLocation, &ImpactLocation, 0xC );
	memcpy ( &PlayImpactEffects_Parms.ImpactNormal, &ImpactNormal, 0xC );

	this->ProcessEvent ( pFnPlayImpactEffects, &PlayImpactEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayImpactSounds
// [0x00420002] 
// Parameters infos:
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// class UWwiseEvent*             BaseSound                      ( CPF_Parm )
// TArray< struct FEvolvedSoundStruct > EvolvedSounds                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_sentryturretrocket::PlayImpactSounds ( struct FVector ImpactLocation, class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds )
{
	static UFunction* pFnPlayImpactSounds = NULL;

	if ( ! pFnPlayImpactSounds )
		pFnPlayImpactSounds = (UFunction*) UObject::GObjObjects()->Data[ 82113 ];

	Usfxpowercustomaction_sentryturretrocket_execPlayImpactSounds_Parms PlayImpactSounds_Parms;
	memcpy ( &PlayImpactSounds_Parms.ImpactLocation, &ImpactLocation, 0xC );
	PlayImpactSounds_Parms.BaseSound = BaseSound;

	this->ProcessEvent ( pFnPlayImpactSounds, &PlayImpactSounds_Parms, NULL );

	if ( EvolvedSounds )
		memcpy ( EvolvedSounds, &PlayImpactSounds_Parms.EvolvedSounds, 0xC );
};

// Function SFXGame.sfxpowercustomaction.PlayCasterSounds
// [0x00420002] 
// Parameters infos:
// class UWwiseEvent*             BaseSound                      ( CPF_Parm )
// TArray< struct FEvolvedSoundStruct > EvolvedSounds                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_sentryturretrocket::PlayCasterSounds ( class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds )
{
	static UFunction* pFnPlayCasterSounds = NULL;

	if ( ! pFnPlayCasterSounds )
		pFnPlayCasterSounds = (UFunction*) UObject::GObjObjects()->Data[ 82107 ];

	Usfxpowercustomaction_sentryturretrocket_execPlayCasterSounds_Parms PlayCasterSounds_Parms;
	PlayCasterSounds_Parms.BaseSound = BaseSound;

	this->ProcessEvent ( pFnPlayCasterSounds, &PlayCasterSounds_Parms, NULL );

	if ( EvolvedSounds )
		memcpy ( EvolvedSounds, &PlayCasterSounds_Parms.EvolvedSounds, 0xC );
};

// Function SFXGame.sfxpowercustomaction.PlayDetonationEffects
// [0x00024002] 
// Parameters infos:
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// struct FVector                 ImpactNormal                   ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::PlayDetonationEffects ( struct FVector ImpactLocation, struct FVector ImpactNormal, class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnPlayDetonationEffects = NULL;

	if ( ! pFnPlayDetonationEffects )
		pFnPlayDetonationEffects = (UFunction*) UObject::GObjObjects()->Data[ 82095 ];

	Usfxpowercustomaction_sentryturretrocket_execPlayDetonationEffects_Parms PlayDetonationEffects_Parms;
	memcpy ( &PlayDetonationEffects_Parms.ImpactLocation, &ImpactLocation, 0xC );
	memcpy ( &PlayDetonationEffects_Parms.ImpactNormal, &ImpactNormal, 0xC );
	PlayDetonationEffects_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnPlayDetonationEffects, &PlayDetonationEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayReleaseEffects
// [0x00820002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::PlayReleaseEffects ( )
{
	static UFunction* pFnPlayReleaseEffects = NULL;

	if ( ! pFnPlayReleaseEffects )
		pFnPlayReleaseEffects = (UFunction*) UObject::GObjObjects()->Data[ 82091 ];

	Usfxpowercustomaction_sentryturretrocket_execPlayReleaseEffects_Parms PlayReleaseEffects_Parms;

	this->ProcessEvent ( pFnPlayReleaseEffects, &PlayReleaseEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.OnImpact
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 82084 ];

	Usfxpowercustomaction_sentryturretrocket_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetImpactForce
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

float Usfxpowercustomaction_sentryturretrocket::GetImpactForce ( class AActor* oImpacted )
{
	static UFunction* pFnGetImpactForce = NULL;

	if ( ! pFnGetImpactForce )
		pFnGetImpactForce = (UFunction*) UObject::GObjObjects()->Data[ 82081 ];

	Usfxpowercustomaction_sentryturretrocket_execGetImpactForce_Parms GetImpactForce_Parms;
	GetImpactForce_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactForce, &GetImpactForce_Parms, NULL );

	return GetImpactForce_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetNonRagdollDamageType
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* Usfxpowercustomaction_sentryturretrocket::GetNonRagdollDamageType ( )
{
	static UFunction* pFnGetNonRagdollDamageType = NULL;

	if ( ! pFnGetNonRagdollDamageType )
		pFnGetNonRagdollDamageType = (UFunction*) UObject::GObjObjects()->Data[ 82078 ];

	Usfxpowercustomaction_sentryturretrocket_execGetNonRagdollDamageType_Parms GetNonRagdollDamageType_Parms;

	this->ProcessEvent ( pFnGetNonRagdollDamageType, &GetNonRagdollDamageType_Parms, NULL );

	return GetNonRagdollDamageType_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetImpactDamage
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm | CPF_OutParm )

float Usfxpowercustomaction_sentryturretrocket::GetImpactDamage ( class AActor* oImpacted, class UClass** DamageType )
{
	static UFunction* pFnGetImpactDamage = NULL;

	if ( ! pFnGetImpactDamage )
		pFnGetImpactDamage = (UFunction*) UObject::GObjObjects()->Data[ 82073 ];

	Usfxpowercustomaction_sentryturretrocket_execGetImpactDamage_Parms GetImpactDamage_Parms;
	GetImpactDamage_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactDamage, &GetImpactDamage_Parms, NULL );

	if ( DamageType )
		*DamageType = GetImpactDamage_Parms.DamageType;

	return GetImpactDamage_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.DoAreaExplosionForActor
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 location                       ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          fForce                         ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// int                            MaxRagdollOverride             ( CPF_Parm )
// struct FScriptDelegate         ImpactCallback                 ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  MaxRagdollDmgTypeOverride      ( CPF_OptionalParm | CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::DoAreaExplosionForActor ( class AActor* oActor, struct FVector location, int ImpactCount, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxRagdollOverride, struct FScriptDelegate ImpactCallback, class UClass* MaxRagdollDmgTypeOverride )
{
	static UFunction* pFnDoAreaExplosionForActor = NULL;

	if ( ! pFnDoAreaExplosionForActor )
		pFnDoAreaExplosionForActor = (UFunction*) UObject::GObjObjects()->Data[ 67390 ];

	Usfxpowercustomaction_sentryturretrocket_execDoAreaExplosionForActor_Parms DoAreaExplosionForActor_Parms;
	DoAreaExplosionForActor_Parms.oActor = oActor;
	memcpy ( &DoAreaExplosionForActor_Parms.location, &location, 0xC );
	DoAreaExplosionForActor_Parms.ImpactCount = ImpactCount;
	DoAreaExplosionForActor_Parms.fDamage = fDamage;
	DoAreaExplosionForActor_Parms.DamageType = DamageType;
	DoAreaExplosionForActor_Parms.fForce = fForce;
	memcpy ( &DoAreaExplosionForActor_Parms.Param, &Param, 0x20 );
	DoAreaExplosionForActor_Parms.MaxRagdollOverride = MaxRagdollOverride;
	memcpy ( &DoAreaExplosionForActor_Parms.ImpactCallback, &ImpactCallback, 0xC );
	DoAreaExplosionForActor_Parms.MaxRagdollDmgTypeOverride = MaxRagdollDmgTypeOverride;

	this->ProcessEvent ( pFnDoAreaExplosionForActor, &DoAreaExplosionForActor_Parms, NULL );

	return DoAreaExplosionForActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AreaExplosion
// [0x00024002] 
// Parameters infos:
// struct FVector                 location                       ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          fForce                         ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// int                            MaxImpactCount                 ( CPF_Parm )
// struct FScriptDelegate         ImpactCallback                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            MaxRagdollOverride             ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  MaxRagdollDmgTypeOverride      ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::AreaExplosion ( struct FVector location, float fRadius, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxImpactCount, struct FScriptDelegate ImpactCallback, int MaxRagdollOverride, class UClass* MaxRagdollDmgTypeOverride )
{
	static UFunction* pFnAreaExplosion = NULL;

	if ( ! pFnAreaExplosion )
		pFnAreaExplosion = (UFunction*) UObject::GObjObjects()->Data[ 82042 ];

	Usfxpowercustomaction_sentryturretrocket_execAreaExplosion_Parms AreaExplosion_Parms;
	memcpy ( &AreaExplosion_Parms.location, &location, 0xC );
	AreaExplosion_Parms.fRadius = fRadius;
	AreaExplosion_Parms.fDamage = fDamage;
	AreaExplosion_Parms.DamageType = DamageType;
	AreaExplosion_Parms.fForce = fForce;
	memcpy ( &AreaExplosion_Parms.Param, &Param, 0x20 );
	AreaExplosion_Parms.MaxImpactCount = MaxImpactCount;
	memcpy ( &AreaExplosion_Parms.ImpactCallback, &ImpactCallback, 0xC );
	AreaExplosion_Parms.MaxRagdollOverride = MaxRagdollOverride;
	AreaExplosion_Parms.MaxRagdollDmgTypeOverride = MaxRagdollDmgTypeOverride;

	this->ProcessEvent ( pFnAreaExplosion, &AreaExplosion_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerSubsequentImpact
// [0x00024000] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 82035 ];

	Usfxpowercustomaction_sentryturretrocket_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerComboImpact
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// float                          PowerRank                      ( CPF_Parm )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ClientDoPowerComboImpact ( class AActor* oActor, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags )
{
	static UFunction* pFnClientDoPowerComboImpact = NULL;

	if ( ! pFnClientDoPowerComboImpact )
		pFnClientDoPowerComboImpact = (UFunction*) UObject::GObjObjects()->Data[ 53812 ];

	Usfxpowercustomaction_sentryturretrocket_execClientDoPowerComboImpact_Parms ClientDoPowerComboImpact_Parms;
	ClientDoPowerComboImpact_Parms.oActor = oActor;
	ClientDoPowerComboImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerComboImpact_Parms.PowerRank = PowerRank;
	ClientDoPowerComboImpact_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;
	ClientDoPowerComboImpact_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnClientDoPowerComboImpact, &ClientDoPowerComboImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 82022 ];

	Usfxpowercustomaction_sentryturretrocket_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DoPowerDetonatedForActor
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            nImpactCount                   ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::DoPowerDetonatedForActor ( class AActor* oActor, struct FVector HitLocation, struct FVector HitNormal, int nImpactCount, unsigned long bFirstTarget, class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnDoPowerDetonatedForActor = NULL;

	if ( ! pFnDoPowerDetonatedForActor )
		pFnDoPowerDetonatedForActor = (UFunction*) UObject::GObjObjects()->Data[ 82002 ];

	Usfxpowercustomaction_sentryturretrocket_execDoPowerDetonatedForActor_Parms DoPowerDetonatedForActor_Parms;
	DoPowerDetonatedForActor_Parms.oActor = oActor;
	memcpy ( &DoPowerDetonatedForActor_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoPowerDetonatedForActor_Parms.HitNormal, &HitNormal, 0xC );
	DoPowerDetonatedForActor_Parms.nImpactCount = nImpactCount;
	DoPowerDetonatedForActor_Parms.bFirstTarget = bFirstTarget;
	DoPowerDetonatedForActor_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnDoPowerDetonatedForActor, &DoPowerDetonatedForActor_Parms, NULL );

	return DoPowerDetonatedForActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.OnPowerDetonated
// [0x00024002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor )
{
	static UFunction* pFnOnPowerDetonated = NULL;

	if ( ! pFnOnPowerDetonated )
		pFnOnPowerDetonated = (UFunction*) UObject::GObjObjects()->Data[ 81986 ];

	Usfxpowercustomaction_sentryturretrocket_execOnPowerDetonated_Parms OnPowerDetonated_Parms;
	memcpy ( &OnPowerDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerDetonated_Parms.HitNormal, &HitNormal, 0xC );
	OnPowerDetonated_Parms.oProjectile = oProjectile;
	OnPowerDetonated_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnOnPowerDetonated, &OnPowerDetonated_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseBuffPower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::ReleaseBuffPower ( )
{
	static UFunction* pFnReleaseBuffPower = NULL;

	if ( ! pFnReleaseBuffPower )
		pFnReleaseBuffPower = (UFunction*) UObject::GObjObjects()->Data[ 81980 ];

	Usfxpowercustomaction_sentryturretrocket_execReleaseBuffPower_Parms ReleaseBuffPower_Parms;

	this->ProcessEvent ( pFnReleaseBuffPower, &ReleaseBuffPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseMeleePower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::ReleaseMeleePower ( )
{
	static UFunction* pFnReleaseMeleePower = NULL;

	if ( ! pFnReleaseMeleePower )
		pFnReleaseMeleePower = (UFunction*) UObject::GObjObjects()->Data[ 81979 ];

	Usfxpowercustomaction_sentryturretrocket_execReleaseMeleePower_Parms ReleaseMeleePower_Parms;

	this->ProcessEvent ( pFnReleaseMeleePower, &ReleaseMeleePower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseInstantPower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::ReleaseInstantPower ( )
{
	static UFunction* pFnReleaseInstantPower = NULL;

	if ( ! pFnReleaseInstantPower )
		pFnReleaseInstantPower = (UFunction*) UObject::GObjObjects()->Data[ 81974 ];

	Usfxpowercustomaction_sentryturretrocket_execReleaseInstantPower_Parms ReleaseInstantPower_Parms;

	this->ProcessEvent ( pFnReleaseInstantPower, &ReleaseInstantPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.OnClientPowerProjectileSpawned
// [0x00020002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* NewProjectile                  ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::OnClientPowerProjectileSpawned ( class ASFXProjectile_PowerCustomAction* NewProjectile )
{
	static UFunction* pFnOnClientPowerProjectileSpawned = NULL;

	if ( ! pFnOnClientPowerProjectileSpawned )
		pFnOnClientPowerProjectileSpawned = (UFunction*) UObject::GObjObjects()->Data[ 81971 ];

	Usfxpowercustomaction_sentryturretrocket_execOnClientPowerProjectileSpawned_Parms OnClientPowerProjectileSpawned_Parms;
	OnClientPowerProjectileSpawned_Parms.NewProjectile = NewProjectile;

	this->ProcessEvent ( pFnOnClientPowerProjectileSpawned, &OnClientPowerProjectileSpawned_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseProjectilePower
// [0x00020002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXProjectile_PowerCustomAction* Usfxpowercustomaction_sentryturretrocket::ReleaseProjectilePower ( )
{
	static UFunction* pFnReleaseProjectilePower = NULL;

	if ( ! pFnReleaseProjectilePower )
		pFnReleaseProjectilePower = (UFunction*) UObject::GObjObjects()->Data[ 81956 ];

	Usfxpowercustomaction_sentryturretrocket_execReleaseProjectilePower_Parms ReleaseProjectilePower_Parms;

	this->ProcessEvent ( pFnReleaseProjectilePower, &ReleaseProjectilePower_Parms, NULL );

	return ReleaseProjectilePower_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetProjectileAttachPoint
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AttachPoint                    ( CPF_Parm | CPF_OutParm )

bool Usfxpowercustomaction_sentryturretrocket::GetProjectileAttachPoint ( struct FVector* AttachPoint )
{
	static UFunction* pFnGetProjectileAttachPoint = NULL;

	if ( ! pFnGetProjectileAttachPoint )
		pFnGetProjectileAttachPoint = (UFunction*) UObject::GObjObjects()->Data[ 55631 ];

	Usfxpowercustomaction_sentryturretrocket_execGetProjectileAttachPoint_Parms GetProjectileAttachPoint_Parms;

	this->ProcessEvent ( pFnGetProjectileAttachPoint, &GetProjectileAttachPoint_Parms, NULL );

	if ( AttachPoint )
		memcpy ( AttachPoint, &GetProjectileAttachPoint_Parms.AttachPoint, 0xC );

	return GetProjectileAttachPoint_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ReleasePower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::ReleasePower ( )
{
	static UFunction* pFnReleasePower = NULL;

	if ( ! pFnReleasePower )
		pFnReleasePower = (UFunction*) UObject::GObjObjects()->Data[ 81949 ];

	Usfxpowercustomaction_sentryturretrocket_execReleasePower_Parms ReleasePower_Parms;

	this->ProcessEvent ( pFnReleasePower, &ReleasePower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ResetPowerCooldown
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::ResetPowerCooldown ( )
{
	static UFunction* pFnResetPowerCooldown = NULL;

	if ( ! pFnResetPowerCooldown )
		pFnResetPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81948 ];

	Usfxpowercustomaction_sentryturretrocket_execResetPowerCooldown_Parms ResetPowerCooldown_Parms;

	this->ProcessEvent ( pFnResetPowerCooldown, &ResetPowerCooldown_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartPowerCooldown
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::StartPowerCooldown ( )
{
	static UFunction* pFnStartPowerCooldown = NULL;

	if ( ! pFnStartPowerCooldown )
		pFnStartPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81945 ];

	Usfxpowercustomaction_sentryturretrocket_execStartPowerCooldown_Parms StartPowerCooldown_Parms;

	this->ProcessEvent ( pFnStartPowerCooldown, &StartPowerCooldown_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerCooldown
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Usfxpowercustomaction_sentryturretrocket::GetPowerCooldown ( )
{
	static UFunction* pFnGetPowerCooldown = NULL;

	if ( ! pFnGetPowerCooldown )
		pFnGetPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81943 ];

	Usfxpowercustomaction_sentryturretrocket_execGetPowerCooldown_Parms GetPowerCooldown_Parms;

	this->ProcessEvent ( pFnGetPowerCooldown, &GetPowerCooldown_Parms, NULL );

	return GetPowerCooldown_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.TickCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::eventTickCustomAction ( float fDeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81938 ];

	Usfxpowercustomaction_sentryturretrocket_eventTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void Usfxpowercustomaction_sentryturretrocket::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 81932 ];

	Usfxpowercustomaction_sentryturretrocket_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81926 ];

	Usfxpowercustomaction_sentryturretrocket_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.EndThisCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::EndThisCustomAction ( )
{
	static UFunction* pFnEndThisCustomAction = NULL;

	if ( ! pFnEndThisCustomAction )
		pFnEndThisCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81925 ];

	Usfxpowercustomaction_sentryturretrocket_execEndThisCustomAction_Parms EndThisCustomAction_Parms;

	this->ProcessEvent ( pFnEndThisCustomAction, &EndThisCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayBodyStance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBodyStance             BodyStance                     ( CPF_Parm | CPF_NeedCtorLink )
// float                          fStanceBlendInTime             ( CPF_Parm )
// float                          fStanceBlendOutTime            ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::PlayBodyStance ( struct FBodyStance BodyStance, float fStanceBlendInTime, float fStanceBlendOutTime )
{
	static UFunction* pFnPlayBodyStance = NULL;

	if ( ! pFnPlayBodyStance )
		pFnPlayBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 81917 ];

	Usfxpowercustomaction_sentryturretrocket_execPlayBodyStance_Parms PlayBodyStance_Parms;
	memcpy ( &PlayBodyStance_Parms.BodyStance, &BodyStance, 0xC );
	PlayBodyStance_Parms.fStanceBlendInTime = fStanceBlendInTime;
	PlayBodyStance_Parms.fStanceBlendOutTime = fStanceBlendOutTime;

	this->ProcessEvent ( pFnPlayBodyStance, &PlayBodyStance_Parms, NULL );

	return PlayBodyStance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.StartCastAnimations
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::StartCastAnimations ( )
{
	static UFunction* pFnStartCastAnimations = NULL;

	if ( ! pFnStartCastAnimations )
		pFnStartCastAnimations = (UFunction*) UObject::GObjObjects()->Data[ 81911 ];

	Usfxpowercustomaction_sentryturretrocket_execStartCastAnimations_Parms StartCastAnimations_Parms;

	this->ProcessEvent ( pFnStartCastAnimations, &StartCastAnimations_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartPower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::StartPower ( )
{
	static UFunction* pFnStartPower = NULL;

	if ( ! pFnStartPower )
		pFnStartPower = (UFunction*) UObject::GObjObjects()->Data[ 81904 ];

	Usfxpowercustomaction_sentryturretrocket_execStartPower_Parms StartPower_Parms;

	this->ProcessEvent ( pFnStartPower, &StartPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_sentryturretrocket::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81892 ];

	Usfxpowercustomaction_sentryturretrocket_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ChangeCoverAction
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxpowercustomaction_sentryturretrocket::ChangeCoverAction ( )
{
	static UFunction* pFnChangeCoverAction = NULL;

	if ( ! pFnChangeCoverAction )
		pFnChangeCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 81887 ];

	Usfxpowercustomaction_sentryturretrocket_execChangeCoverAction_Parms ChangeCoverAction_Parms;

	this->ProcessEvent ( pFnChangeCoverAction, &ChangeCoverAction_Parms, NULL );

	return ChangeCoverAction_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetCurrentBodyStance
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance Usfxpowercustomaction_sentryturretrocket::GetCurrentBodyStance ( )
{
	static UFunction* pFnGetCurrentBodyStance = NULL;

	if ( ! pFnGetCurrentBodyStance )
		pFnGetCurrentBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 81884 ];

	Usfxpowercustomaction_sentryturretrocket_execGetCurrentBodyStance_Parms GetCurrentBodyStance_Parms;

	this->ProcessEvent ( pFnGetCurrentBodyStance, &GetCurrentBodyStance_Parms, NULL );

	return GetCurrentBodyStance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.LoadAnimSet
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxpowercustomaction_sentryturretrocket::LoadAnimSet ( )
{
	static UFunction* pFnLoadAnimSet = NULL;

	if ( ! pFnLoadAnimSet )
		pFnLoadAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 81880 ];

	Usfxpowercustomaction_sentryturretrocket_execLoadAnimSet_Parms LoadAnimSet_Parms;

	this->ProcessEvent ( pFnLoadAnimSet, &LoadAnimSet_Parms, NULL );

	return LoadAnimSet_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.CanUsePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::CanUsePower ( class AActor* oTarget )
{
	static UFunction* pFnCanUsePower = NULL;

	if ( ! pFnCanUsePower )
		pFnCanUsePower = (UFunction*) UObject::GObjObjects()->Data[ 55613 ];

	Usfxpowercustomaction_sentryturretrocket_execCanUsePower_Parms CanUsePower_Parms;
	CanUsePower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanUsePower, &CanUsePower_Parms, NULL );

	return CanUsePower_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool Usfxpowercustomaction_sentryturretrocket::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81868 ];

	Usfxpowercustomaction_sentryturretrocket_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_sentryturretrocket::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 81862 ];

	Usfxpowercustomaction_sentryturretrocket_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.DelayedSetWeaponPower
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::DelayedSetWeaponPower ( )
{
	static UFunction* pFnDelayedSetWeaponPower = NULL;

	if ( ! pFnDelayedSetWeaponPower )
		pFnDelayedSetWeaponPower = (UFunction*) UObject::GObjObjects()->Data[ 106495 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execDelayedSetWeaponPower_Parms DelayedSetWeaponPower_Parms;

	this->ProcessEvent ( pFnDelayedSetWeaponPower, &DelayedSetWeaponPower_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 106503 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.DoJoinInProgress
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::DoJoinInProgress ( )
{
	static UFunction* pFnDoJoinInProgress = NULL;

	if ( ! pFnDoJoinInProgress )
		pFnDoJoinInProgress = (UFunction*) UObject::GObjObjects()->Data[ 106506 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execDoJoinInProgress_Parms DoJoinInProgress_Parms;

	this->ProcessEvent ( pFnDoJoinInProgress, &DoJoinInProgress_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.SetupEffect
// [0x00024000] 
// Parameters infos:
// class USFXGameEffect_AmmoPower* Effect                         ( CPF_Parm )
// class ABioPawn*                oPawn                          ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::SetupEffect ( class USFXGameEffect_AmmoPower* Effect, class ABioPawn* oPawn )
{
	static UFunction* pFnSetupEffect = NULL;

	if ( ! pFnSetupEffect )
		pFnSetupEffect = (UFunction*) UObject::GObjObjects()->Data[ 106509 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execSetupEffect_Parms SetupEffect_Parms;
	SetupEffect_Parms.Effect = Effect;
	SetupEffect_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnSetupEffect, &SetupEffect_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.OnPowerRankIncreased
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::OnPowerRankIncreased ( )
{
	static UFunction* pFnOnPowerRankIncreased = NULL;

	if ( ! pFnOnPowerRankIncreased )
		pFnOnPowerRankIncreased = (UFunction*) UObject::GObjObjects()->Data[ 106512 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execOnPowerRankIncreased_Parms OnPowerRankIncreased_Parms;

	this->ProcessEvent ( pFnOnPowerRankIncreased, &OnPowerRankIncreased_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ShouldUsePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::ShouldUsePower ( class AActor* Target, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 106521 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execShouldUsePower_Parms ShouldUsePower_Parms;
	ShouldUsePower_Parms.Target = Target;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePower_Parms.sOptionalInfo, 0xC );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.DoConcussiveShotSpecialImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  oImpacted                      ( CPF_Parm )
// float                          ImpactEffectDuration           ( CPF_Parm )

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::DoConcussiveShotSpecialImpact ( class AActor* oImpacted, float ImpactEffectDuration )
{
	static UFunction* pFnDoConcussiveShotSpecialImpact = NULL;

	if ( ! pFnDoConcussiveShotSpecialImpact )
		pFnDoConcussiveShotSpecialImpact = (UFunction*) UObject::GObjObjects()->Data[ 106524 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execDoConcussiveShotSpecialImpact_Parms DoConcussiveShotSpecialImpact_Parms;
	DoConcussiveShotSpecialImpact_Parms.oImpacted = oImpacted;
	DoConcussiveShotSpecialImpact_Parms.ImpactEffectDuration = ImpactEffectDuration;

	this->ProcessEvent ( pFnDoConcussiveShotSpecialImpact, &DoConcussiveShotSpecialImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ClientDoPowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 106531 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ReplicateConcussiveShotSpecialImpact
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oImpacted                      ( CPF_Parm )
// float                          DurationOfEffect               ( CPF_Parm )

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::ReplicateConcussiveShotSpecialImpact ( class ABioPawn* oImpacted, float DurationOfEffect )
{
	static UFunction* pFnReplicateConcussiveShotSpecialImpact = NULL;

	if ( ! pFnReplicateConcussiveShotSpecialImpact )
		pFnReplicateConcussiveShotSpecialImpact = (UFunction*) UObject::GObjObjects()->Data[ 106534 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execReplicateConcussiveShotSpecialImpact_Parms ReplicateConcussiveShotSpecialImpact_Parms;
	ReplicateConcussiveShotSpecialImpact_Parms.oImpacted = oImpacted;
	ReplicateConcussiveShotSpecialImpact_Parms.DurationOfEffect = DurationOfEffect;

	this->ProcessEvent ( pFnReplicateConcussiveShotSpecialImpact, &ReplicateConcussiveShotSpecialImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ConcussiveShotCustomImpact
// [0x00020000] 
// Parameters infos:
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::ConcussiveShotCustomImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnConcussiveShotCustomImpact = NULL;

	if ( ! pFnConcussiveShotCustomImpact )
		pFnConcussiveShotCustomImpact = (UFunction*) UObject::GObjObjects()->Data[ 106540 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execConcussiveShotCustomImpact_Parms ConcussiveShotCustomImpact_Parms;
	ConcussiveShotCustomImpact_Parms.Resistance = Resistance;
	ConcussiveShotCustomImpact_Parms.oImpacted = oImpacted;
	ConcussiveShotCustomImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &ConcussiveShotCustomImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ConcussiveShotCustomImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnConcussiveShotCustomImpact, &ConcussiveShotCustomImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ApplyPowerEffects
// [0x00020000] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// class ASFXWeapon*              oWeapon                        ( CPF_Parm )

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::ApplyPowerEffects ( class ABioPawn* oPawn, class ASFXWeapon* oWeapon )
{
	static UFunction* pFnApplyPowerEffects = NULL;

	if ( ! pFnApplyPowerEffects )
		pFnApplyPowerEffects = (UFunction*) UObject::GObjObjects()->Data[ 106543 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execApplyPowerEffects_Parms ApplyPowerEffects_Parms;
	ApplyPowerEffects_Parms.oPawn = oPawn;
	ApplyPowerEffects_Parms.oWeapon = oWeapon;

	this->ProcessEvent ( pFnApplyPowerEffects, &ApplyPowerEffects_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.SetWeaponPower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )
// class ASFXWeapon*              oWeapon                        ( CPF_Parm )
// unsigned long                  bOverrideCurrentPower          ( CPF_Parm )

bool USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::SetWeaponPower ( class ABioPawn* oPawn, class ASFXWeapon* oWeapon, unsigned long bOverrideCurrentPower )
{
	static UFunction* pFnSetWeaponPower = NULL;

	if ( ! pFnSetWeaponPower )
		pFnSetWeaponPower = (UFunction*) UObject::GObjObjects()->Data[ 106557 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execSetWeaponPower_Parms SetWeaponPower_Parms;
	SetWeaponPower_Parms.oPawn = oPawn;
	SetWeaponPower_Parms.oWeapon = oWeapon;
	SetWeaponPower_Parms.bOverrideCurrentPower = bOverrideCurrentPower;

	this->ProcessEvent ( pFnSetWeaponPower, &SetWeaponPower_Parms, NULL );

	return SetWeaponPower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.DeferedSetWeaponPower
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::DeferedSetWeaponPower ( )
{
	static UFunction* pFnDeferedSetWeaponPower = NULL;

	if ( ! pFnDeferedSetWeaponPower )
		pFnDeferedSetWeaponPower = (UFunction*) UObject::GObjObjects()->Data[ 106558 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execDeferedSetWeaponPower_Parms DeferedSetWeaponPower_Parms;

	this->ProcessEvent ( pFnDeferedSetWeaponPower, &DeferedSetWeaponPower_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.OnImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 106566 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ReloadAmmoPower
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::ReloadAmmoPower ( class ABioPawn* Target, class ASFXWeapon* Weapon )
{
	static UFunction* pFnReloadAmmoPower = NULL;

	if ( ! pFnReloadAmmoPower )
		pFnReloadAmmoPower = (UFunction*) UObject::GObjObjects()->Data[ 106569 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execReloadAmmoPower_Parms ReloadAmmoPower_Parms;
	ReloadAmmoPower_Parms.Target = Target;
	ReloadAmmoPower_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnReloadAmmoPower, &ReloadAmmoPower_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.StopOmniTool
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::StopOmniTool ( )
{
	static UFunction* pFnStopOmniTool = NULL;

	if ( ! pFnStopOmniTool )
		pFnStopOmniTool = (UFunction*) UObject::GObjObjects()->Data[ 106570 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execStopOmniTool_Parms StopOmniTool_Parms;

	this->ProcessEvent ( pFnStopOmniTool, &StopOmniTool_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 106576 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.CanUsePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::CanUsePower ( class AActor* oTarget )
{
	static UFunction* pFnCanUsePower = NULL;

	if ( ! pFnCanUsePower )
		pFnCanUsePower = (UFunction*) UObject::GObjObjects()->Data[ 106582 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execCanUsePower_Parms CanUsePower_Parms;
	CanUsePower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanUsePower, &CanUsePower_Parms, NULL );

	return CanUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXPowerCustomAction_SentryTurretArmorPiercingAmmo::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 106586 ];

	USFXPowerCustomAction_SentryTurretArmorPiercingAmmo_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurretCryoAmmo.ShouldUsePower
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomAction_SentryTurretCryoAmmo::eventShouldUsePower ( class AActor* Target, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 106038 ];

	USFXPowerCustomAction_SentryTurretCryoAmmo_eventShouldUsePower_Parms ShouldUsePower_Parms;
	ShouldUsePower_Parms.Target = Target;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePower_Parms.sOptionalInfo, 0xC );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurretCryoAmmo.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_SentryTurretCryoAmmo::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 106049 ];

	USFXPowerCustomAction_SentryTurretCryoAmmo_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurretCryoAmmo.SetupEffect
// [0x00024002] 
// Parameters infos:
// class USFXGameEffect_AmmoPower* Effect                         ( CPF_Parm )
// class ABioPawn*                oPawn                          ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_SentryTurretCryoAmmo::SetupEffect ( class USFXGameEffect_AmmoPower* Effect, class ABioPawn* oPawn )
{
	static UFunction* pFnSetupEffect = NULL;

	if ( ! pFnSetupEffect )
		pFnSetupEffect = (UFunction*) UObject::GObjObjects()->Data[ 106053 ];

	USFXPowerCustomAction_SentryTurretCryoAmmo_execSetupEffect_Parms SetupEffect_Parms;
	SetupEffect_Parms.Effect = Effect;
	SetupEffect_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnSetupEffect, &SetupEffect_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurretCryoAmmo.ApplyPowerEffects
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// class ASFXWeapon*              oWeapon                        ( CPF_Parm )

void USFXPowerCustomAction_SentryTurretCryoAmmo::ApplyPowerEffects ( class ABioPawn* oPawn, class ASFXWeapon* oWeapon )
{
	static UFunction* pFnApplyPowerEffects = NULL;

	if ( ! pFnApplyPowerEffects )
		pFnApplyPowerEffects = (UFunction*) UObject::GObjObjects()->Data[ 106058 ];

	USFXPowerCustomAction_SentryTurretCryoAmmo_execApplyPowerEffects_Parms ApplyPowerEffects_Parms;
	ApplyPowerEffects_Parms.oPawn = oPawn;
	ApplyPowerEffects_Parms.oWeapon = oWeapon;

	this->ProcessEvent ( pFnApplyPowerEffects, &ApplyPowerEffects_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXPowerCustomAction_SentryTurret::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 106085 ];

	USFXPowerCustomAction_SentryTurret_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_SentryTurret::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 106086 ];

	USFXPowerCustomAction_SentryTurret_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_SentryTurret::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 106090 ];

	USFXPowerCustomAction_SentryTurret_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_SentryTurret::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 106092 ];

	USFXPowerCustomAction_SentryTurret_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void USFXPowerCustomAction_SentryTurret::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 106096 ];

	USFXPowerCustomAction_SentryTurret_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.ShouldUsePower
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomAction_SentryTurret::eventShouldUsePower ( class AActor* Target, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 106101 ];

	USFXPowerCustomAction_SentryTurret_eventShouldUsePower_Parms ShouldUsePower_Parms;
	ShouldUsePower_Parms.Target = Target;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePower_Parms.sOptionalInfo, 0xC );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.OnTurretKilled
// [0x00020002] 
// Parameters infos:
// class Asfxpawn_sentryturret*   oTurret                        ( CPF_Parm )

void USFXPowerCustomAction_SentryTurret::OnTurretKilled ( class Asfxpawn_sentryturret* oTurret )
{
	static UFunction* pFnOnTurretKilled = NULL;

	if ( ! pFnOnTurretKilled )
		pFnOnTurretKilled = (UFunction*) UObject::GObjObjects()->Data[ 106104 ];

	USFXPowerCustomAction_SentryTurret_execOnTurretKilled_Parms OnTurretKilled_Parms;
	OnTurretKilled_Parms.oTurret = oTurret;

	this->ProcessEvent ( pFnOnTurretKilled, &OnTurretKilled_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.DespawnTurret
// [0x00020002] 
// Parameters infos:
// class Asfxpawn_sentryturret*   oTurret                        ( CPF_Parm )

void USFXPowerCustomAction_SentryTurret::DespawnTurret ( class Asfxpawn_sentryturret* oTurret )
{
	static UFunction* pFnDespawnTurret = NULL;

	if ( ! pFnDespawnTurret )
		pFnDespawnTurret = (UFunction*) UObject::GObjObjects()->Data[ 106106 ];

	USFXPowerCustomAction_SentryTurret_execDespawnTurret_Parms DespawnTurret_Parms;
	DespawnTurret_Parms.oTurret = oTurret;

	this->ProcessEvent ( pFnDespawnTurret, &DespawnTurret_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.OnPowerRankIncreased
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_SentryTurret::OnPowerRankIncreased ( )
{
	static UFunction* pFnOnPowerRankIncreased = NULL;

	if ( ! pFnOnPowerRankIncreased )
		pFnOnPowerRankIncreased = (UFunction*) UObject::GObjObjects()->Data[ 106107 ];

	USFXPowerCustomAction_SentryTurret_execOnPowerRankIncreased_Parms OnPowerRankIncreased_Parms;

	this->ProcessEvent ( pFnOnPowerRankIncreased, &OnPowerRankIncreased_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.IsTurretAlive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXPowerCustomAction_SentryTurret::IsTurretAlive ( )
{
	static UFunction* pFnIsTurretAlive = NULL;

	if ( ! pFnIsTurretAlive )
		pFnIsTurretAlive = (UFunction*) UObject::GObjObjects()->Data[ 106109 ];

	USFXPowerCustomAction_SentryTurret_execIsTurretAlive_Parms IsTurretAlive_Parms;

	this->ProcessEvent ( pFnIsTurretAlive, &IsTurretAlive_Parms, NULL );

	return IsTurretAlive_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.SetupCurrentTurret
// [0x00820002] 
// Parameters infos:

void USFXPowerCustomAction_SentryTurret::SetupCurrentTurret ( )
{
	static UFunction* pFnSetupCurrentTurret = NULL;

	if ( ! pFnSetupCurrentTurret )
		pFnSetupCurrentTurret = (UFunction*) UObject::GObjObjects()->Data[ 106134 ];

	USFXPowerCustomAction_SentryTurret_execSetupCurrentTurret_Parms SetupCurrentTurret_Parms;

	this->ProcessEvent ( pFnSetupCurrentTurret, &SetupCurrentTurret_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.NonCombatDespawnTurret
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXPowerCustomAction_SentryTurret::NonCombatDespawnTurret ( )
{
	static UFunction* pFnNonCombatDespawnTurret = NULL;

	if ( ! pFnNonCombatDespawnTurret )
		pFnNonCombatDespawnTurret = (UFunction*) UObject::GObjObjects()->Data[ 106137 ];

	USFXPowerCustomAction_SentryTurret_execNonCombatDespawnTurret_Parms NonCombatDespawnTurret_Parms;

	this->ProcessEvent ( pFnNonCombatDespawnTurret, &NonCombatDespawnTurret_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.TurretNonCombatCheck
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXPowerCustomAction_SentryTurret::TurretNonCombatCheck ( )
{
	static UFunction* pFnTurretNonCombatCheck = NULL;

	if ( ! pFnTurretNonCombatCheck )
		pFnTurretNonCombatCheck = (UFunction*) UObject::GObjObjects()->Data[ 106141 ];

	USFXPowerCustomAction_SentryTurret_execTurretNonCombatCheck_Parms TurretNonCombatCheck_Parms;

	this->ProcessEvent ( pFnTurretNonCombatCheck, &TurretNonCombatCheck_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.SpawnTurret
// [0x00020002] 
// Parameters infos:
// class Asfxpawn_sentryturret*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 location                       ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )

class Asfxpawn_sentryturret* USFXPowerCustomAction_SentryTurret::SpawnTurret ( struct FVector location, struct FRotator Rotation )
{
	static UFunction* pFnSpawnTurret = NULL;

	if ( ! pFnSpawnTurret )
		pFnSpawnTurret = (UFunction*) UObject::GObjObjects()->Data[ 106147 ];

	USFXPowerCustomAction_SentryTurret_execSpawnTurret_Parms SpawnTurret_Parms;
	memcpy ( &SpawnTurret_Parms.location, &location, 0xC );
	memcpy ( &SpawnTurret_Parms.Rotation, &Rotation, 0xC );

	this->ProcessEvent ( pFnSpawnTurret, &SpawnTurret_Parms, NULL );

	return SpawnTurret_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.DelayedSpawn
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_SentryTurret::DelayedSpawn ( )
{
	static UFunction* pFnDelayedSpawn = NULL;

	if ( ! pFnDelayedSpawn )
		pFnDelayedSpawn = (UFunction*) UObject::GObjObjects()->Data[ 106150 ];

	USFXPowerCustomAction_SentryTurret_execDelayedSpawn_Parms DelayedSpawn_Parms;

	this->ProcessEvent ( pFnDelayedSpawn, &DelayedSpawn_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.OnPowerDetonated
// [0x00024002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_SentryTurret::OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor )
{
	static UFunction* pFnOnPowerDetonated = NULL;

	if ( ! pFnOnPowerDetonated )
		pFnOnPowerDetonated = (UFunction*) UObject::GObjObjects()->Data[ 106159 ];

	USFXPowerCustomAction_SentryTurret_execOnPowerDetonated_Parms OnPowerDetonated_Parms;
	memcpy ( &OnPowerDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerDetonated_Parms.HitNormal, &HitNormal, 0xC );
	OnPowerDetonated_Parms.oProjectile = oProjectile;
	OnPowerDetonated_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnOnPowerDetonated, &OnPowerDetonated_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_SentryTurret.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_SentryTurret::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 106160 ];

	USFXPowerCustomAction_SentryTurret_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_sentryturret.GetPetOwner
// [0x00020102] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* Asfxpawn_sentryturret::GetPetOwner ( )
{
	static UFunction* pFnGetPetOwner = NULL;

	if ( ! pFnGetPetOwner )
		pFnGetPetOwner = (UFunction*) UObject::GObjObjects()->Data[ 106662 ];

	Asfxpawn_sentryturret_execGetPetOwner_Parms GetPetOwner_Parms;

	this->ProcessEvent ( pFnGetPetOwner, &GetPetOwner_Parms, NULL );

	return GetPetOwner_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpawn_sentryturret.PlayDeathVocalization
// [0x00020100] 
// Parameters infos:
// class ABioPawn*                Killer                         ( CPF_Parm )

void Asfxpawn_sentryturret::PlayDeathVocalization ( class ABioPawn* Killer )
{
	static UFunction* pFnPlayDeathVocalization = NULL;

	if ( ! pFnPlayDeathVocalization )
		pFnPlayDeathVocalization = (UFunction*) UObject::GObjObjects()->Data[ 106664 ];

	Asfxpawn_sentryturret_execPlayDeathVocalization_Parms PlayDeathVocalization_Parms;
	PlayDeathVocalization_Parms.Killer = Killer;

	this->ProcessEvent ( pFnPlayDeathVocalization, &PlayDeathVocalization_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_sentryturret.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void Asfxpawn_sentryturret::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 106670 ];

	Asfxpawn_sentryturret_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_sentryturret.TakeDamage
// [0x00024102] 
// Parameters infos:
// float                          DamageAmount                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void Asfxpawn_sentryturret::TakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 106679 ];

	Asfxpawn_sentryturret_execTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageAmount = DamageAmount;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_sentryturret.TurretCreatorInfoUpdated
// [0x00020102] 
// Parameters infos:

void Asfxpawn_sentryturret::TurretCreatorInfoUpdated ( )
{
	static UFunction* pFnTurretCreatorInfoUpdated = NULL;

	if ( ! pFnTurretCreatorInfoUpdated )
		pFnTurretCreatorInfoUpdated = (UFunction*) UObject::GObjObjects()->Data[ 106686 ];

	Asfxpawn_sentryturret_execTurretCreatorInfoUpdated_Parms TurretCreatorInfoUpdated_Parms;

	this->ProcessEvent ( pFnTurretCreatorInfoUpdated, &TurretCreatorInfoUpdated_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_sentryturret.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void Asfxpawn_sentryturret::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 106688 ];

	Asfxpawn_sentryturret_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_sentryturret.StartVFX
// [0x00820103] ( FUNC_Final )
// Parameters infos:

void Asfxpawn_sentryturret::StartVFX ( )
{
	static UFunction* pFnStartVFX = NULL;

	if ( ! pFnStartVFX )
		pFnStartVFX = (UFunction*) UObject::GObjObjects()->Data[ 106696 ];

	Asfxpawn_sentryturret_execStartVFX_Parms StartVFX_Parms;

	this->ProcessEvent ( pFnStartVFX, &StartVFX_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_sentryturret.SetupCasterAndReplication
// [0x00020102] 
// Parameters infos:
// class AActor*                  NewCaster                      ( CPF_Parm )
// int                            CasterPowerCustomAction        ( CPF_Parm )

void Asfxpawn_sentryturret::SetupCasterAndReplication ( class AActor* NewCaster, int CasterPowerCustomAction )
{
	static UFunction* pFnSetupCasterAndReplication = NULL;

	if ( ! pFnSetupCasterAndReplication )
		pFnSetupCasterAndReplication = (UFunction*) UObject::GObjObjects()->Data[ 106702 ];

	Asfxpawn_sentryturret_execSetupCasterAndReplication_Parms SetupCasterAndReplication_Parms;
	SetupCasterAndReplication_Parms.NewCaster = NewCaster;
	SetupCasterAndReplication_Parms.CasterPowerCustomAction = CasterPowerCustomAction;

	this->ProcessEvent ( pFnSetupCasterAndReplication, &SetupCasterAndReplication_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_sentryturret.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxpawn_sentryturret::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 106705 ];

	Asfxpawn_sentryturret_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_sentryturret.OnTurretKilled
// [0x00120000] 
// Parameters infos:
// class Asfxpawn_sentryturret*   oTurret                        ( CPF_Parm )

void Asfxpawn_sentryturret::OnTurretKilled ( class Asfxpawn_sentryturret* oTurret )
{
	static UFunction* pFnOnTurretKilled = NULL;

	if ( ! pFnOnTurretKilled )
		pFnOnTurretKilled = (UFunction*) UObject::GObjObjects()->Data[ 106707 ];

	Asfxpawn_sentryturret_execOnTurretKilled_Parms OnTurretKilled_Parms;
	OnTurretKilled_Parms.oTurret = oTurret;

	this->ProcessEvent ( pFnOnTurretKilled, &OnTurretKilled_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_Decoy::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 106170 ];

	USFXPowerCustomAction_Decoy_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_Decoy::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 106174 ];

	USFXPowerCustomAction_Decoy_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void USFXPowerCustomAction_Decoy::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 106181 ];

	USFXPowerCustomAction_Decoy_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_Decoy::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 106183 ];

	USFXPowerCustomAction_Decoy_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.OnPowerRankIncreased
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_Decoy::OnPowerRankIncreased ( )
{
	static UFunction* pFnOnPowerRankIncreased = NULL;

	if ( ! pFnOnPowerRankIncreased )
		pFnOnPowerRankIncreased = (UFunction*) UObject::GObjObjects()->Data[ 106184 ];

	USFXPowerCustomAction_Decoy_execOnPowerRankIncreased_Parms OnPowerRankIncreased_Parms;

	this->ProcessEvent ( pFnOnPowerRankIncreased, &OnPowerRankIncreased_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.IsDecoyAlive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXPowerCustomAction_Decoy::IsDecoyAlive ( )
{
	static UFunction* pFnIsDecoyAlive = NULL;

	if ( ! pFnIsDecoyAlive )
		pFnIsDecoyAlive = (UFunction*) UObject::GObjObjects()->Data[ 106186 ];

	USFXPowerCustomAction_Decoy_execIsDecoyAlive_Parms IsDecoyAlive_Parms;

	this->ProcessEvent ( pFnIsDecoyAlive, &IsDecoyAlive_Parms, NULL );

	return IsDecoyAlive_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.SetupSpawnedDecoy
// [0x00820002] 
// Parameters infos:
// class Asfxpawn_decoy*          SpawnedDecoy                   ( CPF_Parm )

void USFXPowerCustomAction_Decoy::SetupSpawnedDecoy ( class Asfxpawn_decoy* SpawnedDecoy )
{
	static UFunction* pFnSetupSpawnedDecoy = NULL;

	if ( ! pFnSetupSpawnedDecoy )
		pFnSetupSpawnedDecoy = (UFunction*) UObject::GObjObjects()->Data[ 106195 ];

	USFXPowerCustomAction_Decoy_execSetupSpawnedDecoy_Parms SetupSpawnedDecoy_Parms;
	SetupSpawnedDecoy_Parms.SpawnedDecoy = SpawnedDecoy;

	this->ProcessEvent ( pFnSetupSpawnedDecoy, &SetupSpawnedDecoy_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.OnPowerDetonated
// [0x00024002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_Decoy::OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor )
{
	static UFunction* pFnOnPowerDetonated = NULL;

	if ( ! pFnOnPowerDetonated )
		pFnOnPowerDetonated = (UFunction*) UObject::GObjObjects()->Data[ 106207 ];

	USFXPowerCustomAction_Decoy_execOnPowerDetonated_Parms OnPowerDetonated_Parms;
	memcpy ( &OnPowerDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerDetonated_Parms.HitNormal, &HitNormal, 0xC );
	OnPowerDetonated_Parms.oProjectile = oProjectile;
	OnPowerDetonated_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnOnPowerDetonated, &OnPowerDetonated_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_Decoy::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 106208 ];

	USFXPowerCustomAction_Decoy_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.IsSafeSpawnLocation
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm | CPF_OutParm )

bool USFXPowerCustomAction_Decoy::IsSafeSpawnLocation ( struct FVector* SpawnLocation )
{
	static UFunction* pFnIsSafeSpawnLocation = NULL;

	if ( ! pFnIsSafeSpawnLocation )
		pFnIsSafeSpawnLocation = (UFunction*) UObject::GObjObjects()->Data[ 106213 ];

	USFXPowerCustomAction_Decoy_execIsSafeSpawnLocation_Parms IsSafeSpawnLocation_Parms;

	this->ProcessEvent ( pFnIsSafeSpawnLocation, &IsSafeSpawnLocation_Parms, NULL );

	if ( SpawnLocation )
		memcpy ( SpawnLocation, &IsSafeSpawnLocation_Parms.SpawnLocation, 0xC );

	return IsSafeSpawnLocation_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.CanImpactActor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool USFXPowerCustomAction_Decoy::CanImpactActor ( class AActor* oActor )
{
	static UFunction* pFnCanImpactActor = NULL;

	if ( ! pFnCanImpactActor )
		pFnCanImpactActor = (UFunction*) UObject::GObjObjects()->Data[ 106216 ];

	USFXPowerCustomAction_Decoy_execCanImpactActor_Parms CanImpactActor_Parms;
	CanImpactActor_Parms.oActor = oActor;

	this->ProcessEvent ( pFnCanImpactActor, &CanImpactActor_Parms, NULL );

	return CanImpactActor_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.ClientDoPowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_Decoy::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 106223 ];

	USFXPowerCustomAction_Decoy_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.ClientDoCustomActionImpact
// [0x00024000] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_Decoy::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 106230 ];

	USFXPowerCustomAction_Decoy_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.ReplicatePowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_Decoy::ReplicatePowerSubsequentImpact ( class ABioPawn* Target, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnReplicatePowerSubsequentImpact = NULL;

	if ( ! pFnReplicatePowerSubsequentImpact )
		pFnReplicatePowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 106237 ];

	USFXPowerCustomAction_Decoy_execReplicatePowerSubsequentImpact_Parms ReplicatePowerSubsequentImpact_Parms;
	ReplicatePowerSubsequentImpact_Parms.Target = Target;
	ReplicatePowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ReplicatePowerSubsequentImpact_Parms.Duration = Duration;
	ReplicatePowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ReplicatePowerSubsequentImpact_Parms.Delay = Delay;
	ReplicatePowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnReplicatePowerSubsequentImpact, &ReplicatePowerSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.OnShockImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXPowerCustomAction_Decoy::OnShockImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnShockImpact = NULL;

	if ( ! pFnOnShockImpact )
		pFnOnShockImpact = (UFunction*) UObject::GObjObjects()->Data[ 106245 ];

	USFXPowerCustomAction_Decoy_execOnShockImpact_Parms OnShockImpact_Parms;
	OnShockImpact_Parms.Resistance = Resistance;
	OnShockImpact_Parms.oImpacted = oImpacted;
	OnShockImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnShockImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnShockImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnShockImpact, &OnShockImpact_Parms, NULL );

	return OnShockImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.OnDeathExplosionImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXPowerCustomAction_Decoy::OnDeathExplosionImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnDeathExplosionImpact = NULL;

	if ( ! pFnOnDeathExplosionImpact )
		pFnOnDeathExplosionImpact = (UFunction*) UObject::GObjObjects()->Data[ 106253 ];

	USFXPowerCustomAction_Decoy_execOnDeathExplosionImpact_Parms OnDeathExplosionImpact_Parms;
	OnDeathExplosionImpact_Parms.Resistance = Resistance;
	OnDeathExplosionImpact_Parms.oImpacted = oImpacted;
	OnDeathExplosionImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnDeathExplosionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnDeathExplosionImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnDeathExplosionImpact, &OnDeathExplosionImpact_Parms, NULL );

	return OnDeathExplosionImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.DecoyKilledExplosion
// [0x00020002] 
// Parameters infos:
// class Asfxpawn_decoy*          oDecoy                         ( CPF_Parm )

void USFXPowerCustomAction_Decoy::DecoyKilledExplosion ( class Asfxpawn_decoy* oDecoy )
{
	static UFunction* pFnDecoyKilledExplosion = NULL;

	if ( ! pFnDecoyKilledExplosion )
		pFnDecoyKilledExplosion = (UFunction*) UObject::GObjObjects()->Data[ 106257 ];

	USFXPowerCustomAction_Decoy_execDecoyKilledExplosion_Parms DecoyKilledExplosion_Parms;
	DecoyKilledExplosion_Parms.oDecoy = oDecoy;

	this->ProcessEvent ( pFnDecoyKilledExplosion, &DecoyKilledExplosion_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.OnDecoyKilled
// [0x00020002] 
// Parameters infos:
// class Asfxpawn_decoy*          oDecoy                         ( CPF_Parm )

void USFXPowerCustomAction_Decoy::OnDecoyKilled ( class Asfxpawn_decoy* oDecoy )
{
	static UFunction* pFnOnDecoyKilled = NULL;

	if ( ! pFnOnDecoyKilled )
		pFnOnDecoyKilled = (UFunction*) UObject::GObjObjects()->Data[ 106264 ];

	USFXPowerCustomAction_Decoy_execOnDecoyKilled_Parms OnDecoyKilled_Parms;
	OnDecoyKilled_Parms.oDecoy = oDecoy;

	this->ProcessEvent ( pFnOnDecoyKilled, &OnDecoyKilled_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.DespawnDecoy
// [0x00020002] 
// Parameters infos:
// class Asfxpawn_decoy*          oDecoy                         ( CPF_Parm )

void USFXPowerCustomAction_Decoy::DespawnDecoy ( class Asfxpawn_decoy* oDecoy )
{
	static UFunction* pFnDespawnDecoy = NULL;

	if ( ! pFnDespawnDecoy )
		pFnDespawnDecoy = (UFunction*) UObject::GObjObjects()->Data[ 106266 ];

	USFXPowerCustomAction_Decoy_execDespawnDecoy_Parms DespawnDecoy_Parms;
	DespawnDecoy_Parms.oDecoy = oDecoy;

	this->ProcessEvent ( pFnDespawnDecoy, &DespawnDecoy_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.CastShock
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_Decoy::CastShock ( )
{
	static UFunction* pFnCastShock = NULL;

	if ( ! pFnCastShock )
		pFnCastShock = (UFunction*) UObject::GObjObjects()->Data[ 106273 ];

	USFXPowerCustomAction_Decoy_execCastShock_Parms CastShock_Parms;

	this->ProcessEvent ( pFnCastShock, &CastShock_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Decoy.SpawnDecoy
// [0x00020002] 
// Parameters infos:
// class Asfxpawn_decoy*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 location                       ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )

class Asfxpawn_decoy* USFXPowerCustomAction_Decoy::SpawnDecoy ( struct FVector location, struct FRotator Rotation )
{
	static UFunction* pFnSpawnDecoy = NULL;

	if ( ! pFnSpawnDecoy )
		pFnSpawnDecoy = (UFunction*) UObject::GObjObjects()->Data[ 106282 ];

	USFXPowerCustomAction_Decoy_execSpawnDecoy_Parms SpawnDecoy_Parms;
	memcpy ( &SpawnDecoy_Parms.location, &location, 0xC );
	memcpy ( &SpawnDecoy_Parms.Rotation, &Rotation, 0xC );

	this->ProcessEvent ( pFnSpawnDecoy, &SpawnDecoy_Parms, NULL );

	return SpawnDecoy_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpawn_decoy.GetPetOwner
// [0x00020102] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* Asfxpawn_decoy::GetPetOwner ( )
{
	static UFunction* pFnGetPetOwner = NULL;

	if ( ! pFnGetPetOwner )
		pFnGetPetOwner = (UFunction*) UObject::GObjObjects()->Data[ 106739 ];

	Asfxpawn_decoy_execGetPetOwner_Parms GetPetOwner_Parms;

	this->ProcessEvent ( pFnGetPetOwner, &GetPetOwner_Parms, NULL );

	return GetPetOwner_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpawn_decoy.ShockCollideTest
// [0x00020002] 
// Parameters infos:

void Asfxpawn_decoy::ShockCollideTest ( )
{
	static UFunction* pFnShockCollideTest = NULL;

	if ( ! pFnShockCollideTest )
		pFnShockCollideTest = (UFunction*) UObject::GObjObjects()->Data[ 106743 ];

	Asfxpawn_decoy_execShockCollideTest_Parms ShockCollideTest_Parms;

	this->ProcessEvent ( pFnShockCollideTest, &ShockCollideTest_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_decoy.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void Asfxpawn_decoy::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 106744 ];

	Asfxpawn_decoy_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_decoy.StartDecoyVFX
// [0x00820103] ( FUNC_Final )
// Parameters infos:

void Asfxpawn_decoy::StartDecoyVFX ( )
{
	static UFunction* pFnStartDecoyVFX = NULL;

	if ( ! pFnStartDecoyVFX )
		pFnStartDecoyVFX = (UFunction*) UObject::GObjObjects()->Data[ 106750 ];

	Asfxpawn_decoy_execStartDecoyVFX_Parms StartDecoyVFX_Parms;

	this->ProcessEvent ( pFnStartDecoyVFX, &StartDecoyVFX_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_decoy.SetDeathTimer
// [0x00020002] 
// Parameters infos:

void Asfxpawn_decoy::SetDeathTimer ( )
{
	static UFunction* pFnSetDeathTimer = NULL;

	if ( ! pFnSetDeathTimer )
		pFnSetDeathTimer = (UFunction*) UObject::GObjObjects()->Data[ 106752 ];

	Asfxpawn_decoy_execSetDeathTimer_Parms SetDeathTimer_Parms;

	this->ProcessEvent ( pFnSetDeathTimer, &SetDeathTimer_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_decoy.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxpawn_decoy::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 106755 ];

	Asfxpawn_decoy_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_decoy.PlayDeathVocalization
// [0x00020100] 
// Parameters infos:
// class ABioPawn*                Killer                         ( CPF_Parm )

void Asfxpawn_decoy::PlayDeathVocalization ( class ABioPawn* Killer )
{
	static UFunction* pFnPlayDeathVocalization = NULL;

	if ( ! pFnPlayDeathVocalization )
		pFnPlayDeathVocalization = (UFunction*) UObject::GObjObjects()->Data[ 106757 ];

	Asfxpawn_decoy_execPlayDeathVocalization_Parms PlayDeathVocalization_Parms;
	PlayDeathVocalization_Parms.Killer = Killer;

	this->ProcessEvent ( pFnPlayDeathVocalization, &PlayDeathVocalization_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_decoy.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void Asfxpawn_decoy::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 106764 ];

	Asfxpawn_decoy_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_decoy.PlayDyingHelper
// [0x00020002] 
// Parameters infos:

void Asfxpawn_decoy::PlayDyingHelper ( )
{
	static UFunction* pFnPlayDyingHelper = NULL;

	if ( ! pFnPlayDyingHelper )
		pFnPlayDyingHelper = (UFunction*) UObject::GObjObjects()->Data[ 106765 ];

	Asfxpawn_decoy_execPlayDyingHelper_Parms PlayDyingHelper_Parms;

	this->ProcessEvent ( pFnPlayDyingHelper, &PlayDyingHelper_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_decoy.DecoyCreatorInfoUpdated
// [0x00020102] 
// Parameters infos:

void Asfxpawn_decoy::DecoyCreatorInfoUpdated ( )
{
	static UFunction* pFnDecoyCreatorInfoUpdated = NULL;

	if ( ! pFnDecoyCreatorInfoUpdated )
		pFnDecoyCreatorInfoUpdated = (UFunction*) UObject::GObjObjects()->Data[ 106771 ];

	Asfxpawn_decoy_execDecoyCreatorInfoUpdated_Parms DecoyCreatorInfoUpdated_Parms;

	this->ProcessEvent ( pFnDecoyCreatorInfoUpdated, &DecoyCreatorInfoUpdated_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_decoy.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void Asfxpawn_decoy::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 106773 ];

	Asfxpawn_decoy_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_decoy.SetupCasterAndReplication
// [0x00020102] 
// Parameters infos:
// class AActor*                  NewCaster                      ( CPF_Parm )

void Asfxpawn_decoy::SetupCasterAndReplication ( class AActor* NewCaster )
{
	static UFunction* pFnSetupCasterAndReplication = NULL;

	if ( ! pFnSetupCasterAndReplication )
		pFnSetupCasterAndReplication = (UFunction*) UObject::GObjObjects()->Data[ 106778 ];

	Asfxpawn_decoy_execSetupCasterAndReplication_Parms SetupCasterAndReplication_Parms;
	SetupCasterAndReplication_Parms.NewCaster = NewCaster;

	this->ProcessEvent ( pFnSetupCasterAndReplication, &SetupCasterAndReplication_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_decoy.OnDecoyKilled
// [0x00120000] 
// Parameters infos:
// class Asfxpawn_decoy*          oDecoy                         ( CPF_Parm )

void Asfxpawn_decoy::OnDecoyKilled ( class Asfxpawn_decoy* oDecoy )
{
	static UFunction* pFnOnDecoyKilled = NULL;

	if ( ! pFnOnDecoyKilled )
		pFnOnDecoyKilled = (UFunction*) UObject::GObjObjects()->Data[ 106780 ];

	Asfxpawn_decoy_execOnDecoyKilled_Parms OnDecoyKilled_Parms;
	OnDecoyKilled_Parms.oDecoy = oDecoy;

	this->ProcessEvent ( pFnOnDecoyKilled, &OnDecoyKilled_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetSaveGamePowerState
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXPowerCustomAction_CombatDroneRocket::GetSaveGamePowerState ( )
{
	static UFunction* pFnGetSaveGamePowerState = NULL;

	if ( ! pFnGetSaveGamePowerState )
		pFnGetSaveGamePowerState = (UFunction*) UObject::GObjObjects()->Data[ 82415 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetSaveGamePowerState_Parms GetSaveGamePowerState_Parms;

	this->ProcessEvent ( pFnGetSaveGamePowerState, &GetSaveGamePowerState_Parms, NULL );

	return GetSaveGamePowerState_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.SetSaveGamePowerState
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nState                         ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::SetSaveGamePowerState ( int nState )
{
	static UFunction* pFnSetSaveGamePowerState = NULL;

	if ( ! pFnSetSaveGamePowerState )
		pFnSetSaveGamePowerState = (UFunction*) UObject::GObjObjects()->Data[ 82413 ];

	USFXPowerCustomAction_CombatDroneRocket_execSetSaveGamePowerState_Parms SetSaveGamePowerState_Parms;
	SetSaveGamePowerState_Parms.nState = nState;

	this->ProcessEvent ( pFnSetSaveGamePowerState, &SetSaveGamePowerState_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetUniquePowerPlayerVariable
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName USFXPowerCustomAction_CombatDroneRocket::GetUniquePowerPlayerVariable ( )
{
	static UFunction* pFnGetUniquePowerPlayerVariable = NULL;

	if ( ! pFnGetUniquePowerPlayerVariable )
		pFnGetUniquePowerPlayerVariable = (UFunction*) UObject::GObjObjects()->Data[ 82411 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetUniquePowerPlayerVariable_Parms GetUniquePowerPlayerVariable_Parms;

	this->ProcessEvent ( pFnGetUniquePowerPlayerVariable, &GetUniquePowerPlayerVariable_Parms, NULL );

	return GetUniquePowerPlayerVariable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.RestoreSaveState
// [0x00020000] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::RestoreSaveState ( )
{
	static UFunction* pFnRestoreSaveState = NULL;

	if ( ! pFnRestoreSaveState )
		pFnRestoreSaveState = (UFunction*) UObject::GObjObjects()->Data[ 82410 ];

	USFXPowerCustomAction_CombatDroneRocket_execRestoreSaveState_Parms RestoreSaveState_Parms;

	this->ProcessEvent ( pFnRestoreSaveState, &RestoreSaveState_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicationDecodeDelayAndResistance
// [0x00420002] 
// Parameters infos:
// int                            EncodedData                    ( CPF_Parm )
// float                          fDelay                         ( CPF_Parm | CPF_OutParm )
// unsigned char                  Resistance                     ( CPF_Parm | CPF_OutParm )

void USFXPowerCustomAction_CombatDroneRocket::ReplicationDecodeDelayAndResistance ( int EncodedData, float* fDelay, unsigned char* Resistance )
{
	static UFunction* pFnReplicationDecodeDelayAndResistance = NULL;

	if ( ! pFnReplicationDecodeDelayAndResistance )
		pFnReplicationDecodeDelayAndResistance = (UFunction*) UObject::GObjObjects()->Data[ 82406 ];

	USFXPowerCustomAction_CombatDroneRocket_execReplicationDecodeDelayAndResistance_Parms ReplicationDecodeDelayAndResistance_Parms;
	ReplicationDecodeDelayAndResistance_Parms.EncodedData = EncodedData;

	this->ProcessEvent ( pFnReplicationDecodeDelayAndResistance, &ReplicationDecodeDelayAndResistance_Parms, NULL );

	if ( fDelay )
		*fDelay = ReplicationDecodeDelayAndResistance_Parms.fDelay;

	if ( Resistance )
		*Resistance = ReplicationDecodeDelayAndResistance_Parms.Resistance;
};

// Function SFXGame.sfxpowercustomaction.ReplicationEncodeDelayAndResistance
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDelay                         ( CPF_Parm )
// unsigned char                  Resistance                     ( CPF_Parm )

int USFXPowerCustomAction_CombatDroneRocket::ReplicationEncodeDelayAndResistance ( float fDelay, unsigned char Resistance )
{
	static UFunction* pFnReplicationEncodeDelayAndResistance = NULL;

	if ( ! pFnReplicationEncodeDelayAndResistance )
		pFnReplicationEncodeDelayAndResistance = (UFunction*) UObject::GObjObjects()->Data[ 82402 ];

	USFXPowerCustomAction_CombatDroneRocket_execReplicationEncodeDelayAndResistance_Parms ReplicationEncodeDelayAndResistance_Parms;
	ReplicationEncodeDelayAndResistance_Parms.fDelay = fDelay;
	ReplicationEncodeDelayAndResistance_Parms.Resistance = Resistance;

	this->ProcessEvent ( pFnReplicationEncodeDelayAndResistance, &ReplicationEncodeDelayAndResistance_Parms, NULL );

	return ReplicationEncodeDelayAndResistance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.OnSourcePowerBioticDetonation
// [0x00020000] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::OnSourcePowerBioticDetonation ( )
{
	static UFunction* pFnOnSourcePowerBioticDetonation = NULL;

	if ( ! pFnOnSourcePowerBioticDetonation )
		pFnOnSourcePowerBioticDetonation = (UFunction*) UObject::GObjObjects()->Data[ 82401 ];

	USFXPowerCustomAction_CombatDroneRocket_execOnSourcePowerBioticDetonation_Parms OnSourcePowerBioticDetonation_Parms;

	this->ProcessEvent ( pFnOnSourcePowerBioticDetonation, &OnSourcePowerBioticDetonation_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerComboClassFromUniqueID
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )

struct FString USFXPowerCustomAction_CombatDroneRocket::GetPowerComboClassFromUniqueID ( int PowerComboTypeUniqueID )
{
	static UFunction* pFnGetPowerComboClassFromUniqueID = NULL;

	if ( ! pFnGetPowerComboClassFromUniqueID )
		pFnGetPowerComboClassFromUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 82398 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetPowerComboClassFromUniqueID_Parms GetPowerComboClassFromUniqueID_Parms;
	GetPowerComboClassFromUniqueID_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;

	this->ProcessEvent ( pFnGetPowerComboClassFromUniqueID, &GetPowerComboClassFromUniqueID_Parms, NULL );

	return GetPowerComboClassFromUniqueID_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPowerComboTypeUniqueIDFromClass
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 className                      ( CPF_Parm | CPF_NeedCtorLink )

int USFXPowerCustomAction_CombatDroneRocket::GetPowerComboTypeUniqueIDFromClass ( struct FString className )
{
	static UFunction* pFnGetPowerComboTypeUniqueIDFromClass = NULL;

	if ( ! pFnGetPowerComboTypeUniqueIDFromClass )
		pFnGetPowerComboTypeUniqueIDFromClass = (UFunction*) UObject::GObjObjects()->Data[ 69117 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetPowerComboTypeUniqueIDFromClass_Parms GetPowerComboTypeUniqueIDFromClass_Parms;
	memcpy ( &GetPowerComboTypeUniqueIDFromClass_Parms.className, &className, 0xC );

	this->ProcessEvent ( pFnGetPowerComboTypeUniqueIDFromClass, &GetPowerComboTypeUniqueIDFromClass_Parms, NULL );

	return GetPowerComboTypeUniqueIDFromClass_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerComboImpactFromEffect
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// struct FString                 EffectClassName                ( CPF_Parm | CPF_NeedCtorLink )
// float                          DetonatorPowerRank             ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ClientDoPowerComboImpactFromEffect ( class AActor* oTarget, int CustomActionReactionType, struct FString EffectClassName, float DetonatorPowerRank, int MiscFlags )
{
	static UFunction* pFnClientDoPowerComboImpactFromEffect = NULL;

	if ( ! pFnClientDoPowerComboImpactFromEffect )
		pFnClientDoPowerComboImpactFromEffect = (UFunction*) UObject::GObjObjects()->Data[ 82387 ];

	USFXPowerCustomAction_CombatDroneRocket_execClientDoPowerComboImpactFromEffect_Parms ClientDoPowerComboImpactFromEffect_Parms;
	ClientDoPowerComboImpactFromEffect_Parms.oTarget = oTarget;
	ClientDoPowerComboImpactFromEffect_Parms.CustomActionReactionType = CustomActionReactionType;
	memcpy ( &ClientDoPowerComboImpactFromEffect_Parms.EffectClassName, &EffectClassName, 0xC );
	ClientDoPowerComboImpactFromEffect_Parms.DetonatorPowerRank = DetonatorPowerRank;
	ClientDoPowerComboImpactFromEffect_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnClientDoPowerComboImpactFromEffect, &ClientDoPowerComboImpactFromEffect_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerCombo
// [0x00020002] 
// Parameters infos:
// class UClass*                  EffectClass                    ( CPF_Parm )
// int                            SourcePowerID                  ( CPF_Parm )
// class ABioPawn*                SourcePowerInstigator          ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ClientDoPowerCombo ( class UClass* EffectClass, int SourcePowerID, class ABioPawn* SourcePowerInstigator, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnClientDoPowerCombo = NULL;

	if ( ! pFnClientDoPowerCombo )
		pFnClientDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82375 ];

	USFXPowerCustomAction_CombatDroneRocket_execClientDoPowerCombo_Parms ClientDoPowerCombo_Parms;
	ClientDoPowerCombo_Parms.EffectClass = EffectClass;
	ClientDoPowerCombo_Parms.SourcePowerID = SourcePowerID;
	ClientDoPowerCombo_Parms.SourcePowerInstigator = SourcePowerInstigator;
	ClientDoPowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &ClientDoPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoPowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnClientDoPowerCombo, &ClientDoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerCombo
// [0x00020002] 
// Parameters infos:
// class Usfxgameeffect_powercombo* ComboEffect                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ReplicatePowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnReplicatePowerCombo = NULL;

	if ( ! pFnReplicatePowerCombo )
		pFnReplicatePowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82370 ];

	USFXPowerCustomAction_CombatDroneRocket_execReplicatePowerCombo_Parms ReplicatePowerCombo_Parms;
	ReplicatePowerCombo_Parms.ComboEffect = ComboEffect;
	ReplicatePowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &ReplicatePowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicatePowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnReplicatePowerCombo, &ReplicatePowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DelayedDoPowerCombo
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::DelayedDoPowerCombo ( )
{
	static UFunction* pFnDelayedDoPowerCombo = NULL;

	if ( ! pFnDelayedDoPowerCombo )
		pFnDelayedDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82369 ];

	USFXPowerCustomAction_CombatDroneRocket_execDelayedDoPowerCombo_Parms DelayedDoPowerCombo_Parms;

	this->ProcessEvent ( pFnDelayedDoPowerCombo, &DelayedDoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DoPowerCombo
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// class Usfxgameeffect_powercombo* ComboEffect                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// unsigned long                  bDelayed                       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::DoPowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal, unsigned long bDelayed )
{
	static UFunction* pFnDoPowerCombo = NULL;

	if ( ! pFnDoPowerCombo )
		pFnDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82357 ];

	USFXPowerCustomAction_CombatDroneRocket_execDoPowerCombo_Parms DoPowerCombo_Parms;
	DoPowerCombo_Parms.ComboEffect = ComboEffect;
	DoPowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &DoPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoPowerCombo_Parms.HitNormal, &HitNormal, 0xC );
	DoPowerCombo_Parms.bDelayed = bDelayed;

	this->ProcessEvent ( pFnDoPowerCombo, &DoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CheckForPowerCombo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// unsigned char                  Resistance                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::CheckForPowerCombo ( class AActor* Target, unsigned char Resistance, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnCheckForPowerCombo = NULL;

	if ( ! pFnCheckForPowerCombo )
		pFnCheckForPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82021 ];

	USFXPowerCustomAction_CombatDroneRocket_execCheckForPowerCombo_Parms CheckForPowerCombo_Parms;
	CheckForPowerCombo_Parms.Target = Target;
	CheckForPowerCombo_Parms.Resistance = Resistance;
	memcpy ( &CheckForPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &CheckForPowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnCheckForPowerCombo, &CheckForPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.AddComboEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class Usfxgameeffect_powercombo* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// class UClass*                  ComboClass                     ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )

class Usfxgameeffect_powercombo* USFXPowerCustomAction_CombatDroneRocket::AddComboEffect ( class AActor* Target, class UClass* ComboClass, float Duration )
{
	static UFunction* pFnAddComboEffect = NULL;

	if ( ! pFnAddComboEffect )
		pFnAddComboEffect = (UFunction*) UObject::GObjObjects()->Data[ 82341 ];

	USFXPowerCustomAction_CombatDroneRocket_execAddComboEffect_Parms AddComboEffect_Parms;
	AddComboEffect_Parms.Target = Target;
	AddComboEffect_Parms.ComboClass = ComboClass;
	AddComboEffect_Parms.Duration = Duration;

	this->ProcessEvent ( pFnAddComboEffect, &AddComboEffect_Parms, NULL );

	return AddComboEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 82338 ];

	USFXPowerCustomAction_CombatDroneRocket_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CombatEnded
// [0x00020000] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::CombatEnded ( )
{
	static UFunction* pFnCombatEnded = NULL;

	if ( ! pFnCombatEnded )
		pFnCombatEnded = (UFunction*) UObject::GObjObjects()->Data[ 82337 ];

	USFXPowerCustomAction_CombatDroneRocket_execCombatEnded_Parms CombatEnded_Parms;

	this->ProcessEvent ( pFnCombatEnded, &CombatEnded_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplaceAnimSetWithDynamic
// [0x00020002] 
// Parameters infos:
// class UAnimSet*                DynAnimSet                     ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ReplaceAnimSetWithDynamic ( class UAnimSet* DynAnimSet )
{
	static UFunction* pFnReplaceAnimSetWithDynamic = NULL;

	if ( ! pFnReplaceAnimSetWithDynamic )
		pFnReplaceAnimSetWithDynamic = (UFunction*) UObject::GObjObjects()->Data[ 82335 ];

	USFXPowerCustomAction_CombatDroneRocket_execReplaceAnimSetWithDynamic_Parms ReplaceAnimSetWithDynamic_Parms;
	ReplaceAnimSetWithDynamic_Parms.DynAnimSet = DynAnimSet;

	this->ProcessEvent ( pFnReplaceAnimSetWithDynamic, &ReplaceAnimSetWithDynamic_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerAnimInfo
// [0x00420002] 
// Parameters infos:
// class UAnimSet*                AnimSet                        ( CPF_Parm | CPF_OutParm )
// TArray< struct FName >         AnimNames                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerCustomAction_CombatDroneRocket::GetPowerAnimInfo ( class UAnimSet** AnimSet, TArray< struct FName >* AnimNames )
{
	static UFunction* pFnGetPowerAnimInfo = NULL;

	if ( ! pFnGetPowerAnimInfo )
		pFnGetPowerAnimInfo = (UFunction*) UObject::GObjObjects()->Data[ 82330 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetPowerAnimInfo_Parms GetPowerAnimInfo_Parms;

	this->ProcessEvent ( pFnGetPowerAnimInfo, &GetPowerAnimInfo_Parms, NULL );

	if ( AnimSet )
		*AnimSet = GetPowerAnimInfo_Parms.AnimSet;

	if ( AnimNames )
		memcpy ( AnimNames, &GetPowerAnimInfo_Parms.AnimNames, 0xC );
};

// Function SFXGame.sfxpowercustomaction.CleanUpProjectile
// [0x00024002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::CleanUpProjectile ( class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnCleanUpProjectile = NULL;

	if ( ! pFnCleanUpProjectile )
		pFnCleanUpProjectile = (UFunction*) UObject::GObjObjects()->Data[ 82325 ];

	USFXPowerCustomAction_CombatDroneRocket_execCleanUpProjectile_Parms CleanUpProjectile_Parms;
	CleanUpProjectile_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnCleanUpProjectile, &CleanUpProjectile_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerComboImpact
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// float                          PowerRank                      ( CPF_Parm )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ReplicatePowerComboImpact ( class ABioPawn* Target, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags )
{
	static UFunction* pFnReplicatePowerComboImpact = NULL;

	if ( ! pFnReplicatePowerComboImpact )
		pFnReplicatePowerComboImpact = (UFunction*) UObject::GObjObjects()->Data[ 82319 ];

	USFXPowerCustomAction_CombatDroneRocket_execReplicatePowerComboImpact_Parms ReplicatePowerComboImpact_Parms;
	ReplicatePowerComboImpact_Parms.Target = Target;
	ReplicatePowerComboImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ReplicatePowerComboImpact_Parms.PowerRank = PowerRank;
	ReplicatePowerComboImpact_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;
	ReplicatePowerComboImpact_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnReplicatePowerComboImpact, &ReplicatePowerComboImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ReplicatePowerSubsequentImpact ( class ABioPawn* Target, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnReplicatePowerSubsequentImpact = NULL;

	if ( ! pFnReplicatePowerSubsequentImpact )
		pFnReplicatePowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 82312 ];

	USFXPowerCustomAction_CombatDroneRocket_execReplicatePowerSubsequentImpact_Parms ReplicatePowerSubsequentImpact_Parms;
	ReplicatePowerSubsequentImpact_Parms.Target = Target;
	ReplicatePowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ReplicatePowerSubsequentImpact_Parms.Duration = Duration;
	ReplicatePowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ReplicatePowerSubsequentImpact_Parms.Delay = Delay;
	ReplicatePowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnReplicatePowerSubsequentImpact, &ReplicatePowerSubsequentImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicateImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnReplicateImpact = NULL;

	if ( ! pFnReplicateImpact )
		pFnReplicateImpact = (UFunction*) UObject::GObjObjects()->Data[ 82305 ];

	USFXPowerCustomAction_CombatDroneRocket_execReplicateImpact_Parms ReplicateImpact_Parms;
	ReplicateImpact_Parms.Target = Target;
	ReplicateImpact_Parms.ImpactCount = ImpactCount;
	ReplicateImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ReplicateImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicateImpact_Parms.HitNormal, &HitNormal, 0xC );
	ReplicateImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnReplicateImpact, &ReplicateImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoCustomAction
// [0x00024002] 
// Parameters infos:
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ClientDoCustomAction ( unsigned long bForced )
{
	static UFunction* pFnClientDoCustomAction = NULL;

	if ( ! pFnClientDoCustomAction )
		pFnClientDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 82303 ];

	USFXPowerCustomAction_CombatDroneRocket_execClientDoCustomAction_Parms ClientDoCustomAction_Parms;
	ClientDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnClientDoCustomAction, &ClientDoCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.Replicate
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::Replicate ( )
{
	static UFunction* pFnReplicate = NULL;

	if ( ! pFnReplicate )
		pFnReplicate = (UFunction*) UObject::GObjObjects()->Data[ 82302 ];

	USFXPowerCustomAction_CombatDroneRocket_execReplicate_Parms Replicate_Parms;

	this->ProcessEvent ( pFnReplicate, &Replicate_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayPowerScreenShake
// [0x00820002] 
// Parameters infos:
// class UClass*                  ScreenShakeClass               ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::PlayPowerScreenShake ( class UClass* ScreenShakeClass, struct FVector HitLocation )
{
	static UFunction* pFnPlayPowerScreenShake = NULL;

	if ( ! pFnPlayPowerScreenShake )
		pFnPlayPowerScreenShake = (UFunction*) UObject::GObjObjects()->Data[ 82293 ];

	USFXPowerCustomAction_CombatDroneRocket_execPlayPowerScreenShake_Parms PlayPowerScreenShake_Parms;
	PlayPowerScreenShake_Parms.ScreenShakeClass = ScreenShakeClass;
	memcpy ( &PlayPowerScreenShake_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayPowerScreenShake, &PlayPowerScreenShake_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayPowerControllerRumble
// [0x00020002] 
// Parameters infos:
// class UClass*                  RumbleClass                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::PlayPowerControllerRumble ( class UClass* RumbleClass, struct FVector HitLocation )
{
	static UFunction* pFnPlayPowerControllerRumble = NULL;

	if ( ! pFnPlayPowerControllerRumble )
		pFnPlayPowerControllerRumble = (UFunction*) UObject::GObjObjects()->Data[ 82283 ];

	USFXPowerCustomAction_CombatDroneRocket_execPlayPowerControllerRumble_Parms PlayPowerControllerRumble_Parms;
	PlayPowerControllerRumble_Parms.RumbleClass = RumbleClass;
	memcpy ( &PlayPowerControllerRumble_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayPowerControllerRumble, &PlayPowerControllerRumble_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetDefaultClientEffectParams
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USFXPowerCustomAction_CombatDroneRocket::GetDefaultClientEffectParams ( )
{
	static UFunction* pFnGetDefaultClientEffectParams = NULL;

	if ( ! pFnGetDefaultClientEffectParams )
		pFnGetDefaultClientEffectParams = (UFunction*) UObject::GObjObjects()->Data[ 82280 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetDefaultClientEffectParams_Parms GetDefaultClientEffectParams_Parms;

	this->ProcessEvent ( pFnGetDefaultClientEffectParams, &GetDefaultClientEffectParams_Parms, NULL );

	return GetDefaultClientEffectParams_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AddEvolvedRankBonus
// [0x00420002] 
// Parameters infos:
// float                          Bonus                          ( CPF_Parm )
// struct FPowerData              Data                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerCustomAction_CombatDroneRocket::AddEvolvedRankBonus ( float Bonus, struct FPowerData* Data )
{
	static UFunction* pFnAddEvolvedRankBonus = NULL;

	if ( ! pFnAddEvolvedRankBonus )
		pFnAddEvolvedRankBonus = (UFunction*) UObject::GObjObjects()->Data[ 82276 ];

	USFXPowerCustomAction_CombatDroneRocket_execAddEvolvedRankBonus_Parms AddEvolvedRankBonus_Parms;
	AddEvolvedRankBonus_Parms.Bonus = Bonus;

	this->ProcessEvent ( pFnAddEvolvedRankBonus, &AddEvolvedRankBonus_Parms, NULL );

	if ( Data )
		memcpy ( Data, &AddEvolvedRankBonus_Parms.Data, 0x30 );
};

// Function SFXGame.sfxpowercustomaction.ApplyForceToActor
// [0x00020002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 vForce                         ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ApplyForceToActor ( class AActor* oActor, struct FVector vForce )
{
	static UFunction* pFnApplyForceToActor = NULL;

	if ( ! pFnApplyForceToActor )
		pFnApplyForceToActor = (UFunction*) UObject::GObjObjects()->Data[ 82271 ];

	USFXPowerCustomAction_CombatDroneRocket_execApplyForceToActor_Parms ApplyForceToActor_Parms;
	ApplyForceToActor_Parms.oActor = oActor;
	memcpy ( &ApplyForceToActor_Parms.vForce, &vForce, 0xC );

	this->ProcessEvent ( pFnApplyForceToActor, &ApplyForceToActor_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ApplyShieldBonus
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// float                          fShieldValue                   ( CPF_Parm )
// unsigned long                  bShieldValueIsPercent          ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// struct FName                   Category                       ( CPF_Parm )
// unsigned long                  bRemoveEffectWhenShieldsDown   ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ApplyShieldBonus ( class ABioPawn* oPawn, float fShieldValue, unsigned long bShieldValueIsPercent, float fDuration, struct FName Category, unsigned long bRemoveEffectWhenShieldsDown )
{
	static UFunction* pFnApplyShieldBonus = NULL;

	if ( ! pFnApplyShieldBonus )
		pFnApplyShieldBonus = (UFunction*) UObject::GObjObjects()->Data[ 82262 ];

	USFXPowerCustomAction_CombatDroneRocket_execApplyShieldBonus_Parms ApplyShieldBonus_Parms;
	ApplyShieldBonus_Parms.oPawn = oPawn;
	ApplyShieldBonus_Parms.fShieldValue = fShieldValue;
	ApplyShieldBonus_Parms.bShieldValueIsPercent = bShieldValueIsPercent;
	ApplyShieldBonus_Parms.fDuration = fDuration;
	memcpy ( &ApplyShieldBonus_Parms.Category, &Category, 0x8 );
	ApplyShieldBonus_Parms.bRemoveEffectWhenShieldsDown = bRemoveEffectWhenShieldsDown;

	this->ProcessEvent ( pFnApplyShieldBonus, &ApplyShieldBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ApplyHealthBonus
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// float                          fHealthValue                   ( CPF_Parm )
// unsigned long                  bHealthValueIsPercent          ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// struct FName                   Category                       ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ApplyHealthBonus ( class ABioPawn* oPawn, float fHealthValue, unsigned long bHealthValueIsPercent, float fDuration, struct FName Category )
{
	static UFunction* pFnApplyHealthBonus = NULL;

	if ( ! pFnApplyHealthBonus )
		pFnApplyHealthBonus = (UFunction*) UObject::GObjObjects()->Data[ 82254 ];

	USFXPowerCustomAction_CombatDroneRocket_execApplyHealthBonus_Parms ApplyHealthBonus_Parms;
	ApplyHealthBonus_Parms.oPawn = oPawn;
	ApplyHealthBonus_Parms.fHealthValue = fHealthValue;
	ApplyHealthBonus_Parms.bHealthValueIsPercent = bHealthValueIsPercent;
	ApplyHealthBonus_Parms.fDuration = fDuration;
	memcpy ( &ApplyHealthBonus_Parms.Category, &Category, 0x8 );

	this->ProcessEvent ( pFnApplyHealthBonus, &ApplyHealthBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayParticleSystemOnSocket
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UParticleSystem*         PS_Template                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FName                   SocketName                     ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::PlayParticleSystemOnSocket ( class UParticleSystem* PS_Template, class ABioPawn* TargetPawn, struct FName SocketName, struct FRotator Rotation )
{
	static UFunction* pFnPlayParticleSystemOnSocket = NULL;

	if ( ! pFnPlayParticleSystemOnSocket )
		pFnPlayParticleSystemOnSocket = (UFunction*) UObject::GObjObjects()->Data[ 67470 ];

	USFXPowerCustomAction_CombatDroneRocket_execPlayParticleSystemOnSocket_Parms PlayParticleSystemOnSocket_Parms;
	PlayParticleSystemOnSocket_Parms.PS_Template = PS_Template;
	PlayParticleSystemOnSocket_Parms.TargetPawn = TargetPawn;
	memcpy ( &PlayParticleSystemOnSocket_Parms.SocketName, &SocketName, 0x8 );
	memcpy ( &PlayParticleSystemOnSocket_Parms.Rotation, &Rotation, 0xC );

	this->ProcessEvent ( pFnPlayParticleSystemOnSocket, &PlayParticleSystemOnSocket_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.HasRemainingShieldOfType
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )
// class UClass*                  ShieldClass                    ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::HasRemainingShieldOfType ( class ABioPawn* oPawn, class UClass* ShieldClass )
{
	static UFunction* pFnHasRemainingShieldOfType = NULL;

	if ( ! pFnHasRemainingShieldOfType )
		pFnHasRemainingShieldOfType = (UFunction*) UObject::GObjObjects()->Data[ 82243 ];

	USFXPowerCustomAction_CombatDroneRocket_execHasRemainingShieldOfType_Parms HasRemainingShieldOfType_Parms;
	HasRemainingShieldOfType_Parms.oPawn = oPawn;
	HasRemainingShieldOfType_Parms.ShieldClass = ShieldClass;

	this->ProcessEvent ( pFnHasRemainingShieldOfType, &HasRemainingShieldOfType_Parms, NULL );

	return HasRemainingShieldOfType_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsPlaceable
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::IsPlaceable ( class AActor* oImpacted )
{
	static UFunction* pFnIsPlaceable = NULL;

	if ( ! pFnIsPlaceable )
		pFnIsPlaceable = (UFunction*) UObject::GObjObjects()->Data[ 82240 ];

	USFXPowerCustomAction_CombatDroneRocket_execIsPlaceable_Parms IsPlaceable_Parms;
	IsPlaceable_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsPlaceable, &IsPlaceable_Parms, NULL );

	return IsPlaceable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyPermanentGameEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class UClass*                  className                      ( CPF_Parm )
// float                          fEffectValue                   ( CPF_Parm )
// struct FName                   nmCategory                     ( CPF_Parm )
// class AController*             Instigator                     ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::ApplyPermanentGameEffect ( class AActor* oTarget, class UClass* className, float fEffectValue, struct FName nmCategory, class AController* Instigator )
{
	static UFunction* pFnApplyPermanentGameEffect = NULL;

	if ( ! pFnApplyPermanentGameEffect )
		pFnApplyPermanentGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 82231 ];

	USFXPowerCustomAction_CombatDroneRocket_execApplyPermanentGameEffect_Parms ApplyPermanentGameEffect_Parms;
	ApplyPermanentGameEffect_Parms.oTarget = oTarget;
	ApplyPermanentGameEffect_Parms.className = className;
	ApplyPermanentGameEffect_Parms.fEffectValue = fEffectValue;
	memcpy ( &ApplyPermanentGameEffect_Parms.nmCategory, &nmCategory, 0x8 );
	ApplyPermanentGameEffect_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnApplyPermanentGameEffect, &ApplyPermanentGameEffect_Parms, NULL );

	return ApplyPermanentGameEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyTemporaryGameEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class UClass*                  className                      ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// float                          fEffectValue                   ( CPF_Parm )
// struct FName                   nmCategory                     ( CPF_Parm )
// class AController*             Instigator                     ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::ApplyTemporaryGameEffect ( class AActor* oTarget, class UClass* className, float fDuration, float fEffectValue, struct FName nmCategory, class AController* Instigator )
{
	static UFunction* pFnApplyTemporaryGameEffect = NULL;

	if ( ! pFnApplyTemporaryGameEffect )
		pFnApplyTemporaryGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 67380 ];

	USFXPowerCustomAction_CombatDroneRocket_execApplyTemporaryGameEffect_Parms ApplyTemporaryGameEffect_Parms;
	ApplyTemporaryGameEffect_Parms.oTarget = oTarget;
	ApplyTemporaryGameEffect_Parms.className = className;
	ApplyTemporaryGameEffect_Parms.fDuration = fDuration;
	ApplyTemporaryGameEffect_Parms.fEffectValue = fEffectValue;
	memcpy ( &ApplyTemporaryGameEffect_Parms.nmCategory, &nmCategory, 0x8 );
	ApplyTemporaryGameEffect_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnApplyTemporaryGameEffect, &ApplyTemporaryGameEffect_Parms, NULL );

	return ApplyTemporaryGameEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsOfRace
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// unsigned char                  eRace                          ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::IsOfRace ( class AActor* oImpacted, unsigned char eRace )
{
	static UFunction* pFnIsOfRace = NULL;

	if ( ! pFnIsOfRace )
		pFnIsOfRace = (UFunction*) UObject::GObjObjects()->Data[ 82218 ];

	USFXPowerCustomAction_CombatDroneRocket_execIsOfRace_Parms IsOfRace_Parms;
	IsOfRace_Parms.oImpacted = oImpacted;
	IsOfRace_Parms.eRace = eRace;

	this->ProcessEvent ( pFnIsOfRace, &IsOfRace_Parms, NULL );

	return IsOfRace_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.CanBeRagdolledByPowers
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::CanBeRagdolledByPowers ( class ABioPawn* oPawn )
{
	static UFunction* pFnCanBeRagdolledByPowers = NULL;

	if ( ! pFnCanBeRagdolledByPowers )
		pFnCanBeRagdolledByPowers = (UFunction*) UObject::GObjObjects()->Data[ 82215 ];

	USFXPowerCustomAction_CombatDroneRocket_execCanBeRagdolledByPowers_Parms CanBeRagdolledByPowers_Parms;
	CanBeRagdolledByPowers_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnCanBeRagdolledByPowers, &CanBeRagdolledByPowers_Parms, NULL );

	return CanBeRagdolledByPowers_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ImpactPlaceable
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// float                          PlotPlaceableDamage            ( CPF_Parm )
// unsigned long                  bForceDamage                   ( CPF_OptionalParm | CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::ImpactPlaceable ( class AActor* oCaster, class AActor* oImpacted, struct FVector Momentum, float PlotPlaceableDamage, unsigned long bForceDamage )
{
	static UFunction* pFnImpactPlaceable = NULL;

	if ( ! pFnImpactPlaceable )
		pFnImpactPlaceable = (UFunction*) UObject::GObjObjects()->Data[ 82203 ];

	USFXPowerCustomAction_CombatDroneRocket_execImpactPlaceable_Parms ImpactPlaceable_Parms;
	ImpactPlaceable_Parms.oCaster = oCaster;
	ImpactPlaceable_Parms.oImpacted = oImpacted;
	memcpy ( &ImpactPlaceable_Parms.Momentum, &Momentum, 0xC );
	ImpactPlaceable_Parms.PlotPlaceableDamage = PlotPlaceableDamage;
	ImpactPlaceable_Parms.bForceDamage = bForceDamage;

	this->ProcessEvent ( pFnImpactPlaceable, &ImpactPlaceable_Parms, NULL );

	return ImpactPlaceable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPhysicsLevelResistance
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

float USFXPowerCustomAction_CombatDroneRocket::GetPhysicsLevelResistance ( class AActor* oTarget )
{
	static UFunction* pFnGetPhysicsLevelResistance = NULL;

	if ( ! pFnGetPhysicsLevelResistance )
		pFnGetPhysicsLevelResistance = (UFunction*) UObject::GObjObjects()->Data[ 82198 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetPhysicsLevelResistance_Parms GetPhysicsLevelResistance_Parms;
	GetPhysicsLevelResistance_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnGetPhysicsLevelResistance, &GetPhysicsLevelResistance_Parms, NULL );

	return GetPhysicsLevelResistance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPhysicsLevel
// [0x00026002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// unsigned long                  bIgnoreResistance              ( CPF_OptionalParm | CPF_Parm )

int USFXPowerCustomAction_CombatDroneRocket::GetPhysicsLevel ( class AActor* oImpacted, unsigned long bIgnoreResistance )
{
	static UFunction* pFnGetPhysicsLevel = NULL;

	if ( ! pFnGetPhysicsLevel )
		pFnGetPhysicsLevel = (UFunction*) UObject::GObjObjects()->Data[ 82192 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetPhysicsLevel_Parms GetPhysicsLevel_Parms;
	GetPhysicsLevel_Parms.oImpacted = oImpacted;
	GetPhysicsLevel_Parms.bIgnoreResistance = bIgnoreResistance;

	this->ProcessEvent ( pFnGetPhysicsLevel, &GetPhysicsLevel_Parms, NULL );

	return GetPhysicsLevel_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsMachineRace
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::IsMachineRace ( class AActor* oImpacted )
{
	static UFunction* pFnIsMachineRace = NULL;

	if ( ! pFnIsMachineRace )
		pFnIsMachineRace = (UFunction*) UObject::GObjObjects()->Data[ 82188 ];

	USFXPowerCustomAction_CombatDroneRocket_execIsMachineRace_Parms IsMachineRace_Parms;
	IsMachineRace_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsMachineRace, &IsMachineRace_Parms, NULL );

	return IsMachineRace_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ShouldUsePowerOnShields
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomAction_CombatDroneRocket::ShouldUsePowerOnShields ( class ABioPawn* Target, class UClass* DamageType, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePowerOnShields = NULL;

	if ( ! pFnShouldUsePowerOnShields )
		pFnShouldUsePowerOnShields = (UFunction*) UObject::GObjObjects()->Data[ 82180 ];

	USFXPowerCustomAction_CombatDroneRocket_execShouldUsePowerOnShields_Parms ShouldUsePowerOnShields_Parms;
	ShouldUsePowerOnShields_Parms.Target = Target;
	ShouldUsePowerOnShields_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnShouldUsePowerOnShields, &ShouldUsePowerOnShields_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePowerOnShields_Parms.sOptionalInfo, 0xC );

	return ShouldUsePowerOnShields_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.RagdollPhysicsImpact
// [0x00020002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )
// class AActor*                  oImpactActor                   ( CPF_Parm )
// struct FVector                 vImpactDir                     ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::RagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir )
{
	static UFunction* pFnRagdollPhysicsImpact = NULL;

	if ( ! pFnRagdollPhysicsImpact )
		pFnRagdollPhysicsImpact = (UFunction*) UObject::GObjObjects()->Data[ 82166 ];

	USFXPowerCustomAction_CombatDroneRocket_execRagdollPhysicsImpact_Parms RagdollPhysicsImpact_Parms;
	RagdollPhysicsImpact_Parms.oPawn = oPawn;
	RagdollPhysicsImpact_Parms.oImpactActor = oImpactActor;
	memcpy ( &RagdollPhysicsImpact_Parms.vImpactDir, &vImpactDir, 0xC );

	this->ProcessEvent ( pFnRagdollPhysicsImpact, &RagdollPhysicsImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CanImpactActor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::CanImpactActor ( class AActor* oActor )
{
	static UFunction* pFnCanImpactActor = NULL;

	if ( ! pFnCanImpactActor )
		pFnCanImpactActor = (UFunction*) UObject::GObjObjects()->Data[ 82163 ];

	USFXPowerCustomAction_CombatDroneRocket_execCanImpactActor_Parms CanImpactActor_Parms;
	CanImpactActor_Parms.oActor = oActor;

	this->ProcessEvent ( pFnCanImpactActor, &CanImpactActor_Parms, NULL );

	return CanImpactActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AddActorToImpactedList
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 vImpactLocation                ( CPF_Parm )
// TArray< class AActor* >        ImpactedActors                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomAction_CombatDroneRocket::AddActorToImpactedList ( class AActor* oActor, struct FVector vImpactLocation, TArray< class AActor* >* ImpactedActors )
{
	static UFunction* pFnAddActorToImpactedList = NULL;

	if ( ! pFnAddActorToImpactedList )
		pFnAddActorToImpactedList = (UFunction*) UObject::GObjObjects()->Data[ 82152 ];

	USFXPowerCustomAction_CombatDroneRocket_execAddActorToImpactedList_Parms AddActorToImpactedList_Parms;
	AddActorToImpactedList_Parms.oActor = oActor;
	memcpy ( &AddActorToImpactedList_Parms.vImpactLocation, &vImpactLocation, 0xC );

	this->ProcessEvent ( pFnAddActorToImpactedList, &AddActorToImpactedList_Parms, NULL );

	if ( ImpactedActors )
		memcpy ( ImpactedActors, &AddActorToImpactedList_Parms.ImpactedActors, 0xC );

	return AddActorToImpactedList_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.DetonationHitsTarget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FAreaEffectParameters   DetonationParams               ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::DetonationHitsTarget ( struct FVector HitLocation, float MaxRange, class AActor* HitActor, struct FAreaEffectParameters DetonationParams )
{
	static UFunction* pFnDetonationHitsTarget = NULL;

	if ( ! pFnDetonationHitsTarget )
		pFnDetonationHitsTarget = (UFunction*) UObject::GObjObjects()->Data[ 81999 ];

	USFXPowerCustomAction_CombatDroneRocket_execDetonationHitsTarget_Parms DetonationHitsTarget_Parms;
	memcpy ( &DetonationHitsTarget_Parms.HitLocation, &HitLocation, 0xC );
	DetonationHitsTarget_Parms.MaxRange = MaxRange;
	DetonationHitsTarget_Parms.HitActor = HitActor;
	memcpy ( &DetonationHitsTarget_Parms.DetonationParams, &DetonationParams, 0x20 );

	this->ProcessEvent ( pFnDetonationHitsTarget, &DetonationHitsTarget_Parms, NULL );

	return DetonationHitsTarget_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetNearbyActors
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// TArray< class AActor* >        ImpactedActors                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomAction_CombatDroneRocket::GetNearbyActors ( struct FVector HitLocation, float Radius, float MaxRange, struct FAreaEffectParameters Param, TArray< class AActor* >* ImpactedActors )
{
	static UFunction* pFnGetNearbyActors = NULL;

	if ( ! pFnGetNearbyActors )
		pFnGetNearbyActors = (UFunction*) UObject::GObjObjects()->Data[ 67385 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetNearbyActors_Parms GetNearbyActors_Parms;
	memcpy ( &GetNearbyActors_Parms.HitLocation, &HitLocation, 0xC );
	GetNearbyActors_Parms.Radius = Radius;
	GetNearbyActors_Parms.MaxRange = MaxRange;
	memcpy ( &GetNearbyActors_Parms.Param, &Param, 0x20 );

	this->ProcessEvent ( pFnGetNearbyActors, &GetNearbyActors_Parms, NULL );

	if ( ImpactedActors )
		memcpy ( ImpactedActors, &GetNearbyActors_Parms.ImpactedActors, 0xC );

	return GetNearbyActors_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyBonusToParameter
// [0x00424002] 
// Parameters infos:
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )
// struct FPowerData              Parameter                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerCustomAction_CombatDroneRocket::ApplyBonusToParameter ( class USFXGameEffect* Bonus, unsigned long bRemove, struct FPowerData* Parameter )
{
	static UFunction* pFnApplyBonusToParameter = NULL;

	if ( ! pFnApplyBonusToParameter )
		pFnApplyBonusToParameter = (UFunction*) UObject::GObjObjects()->Data[ 82130 ];

	USFXPowerCustomAction_CombatDroneRocket_execApplyBonusToParameter_Parms ApplyBonusToParameter_Parms;
	ApplyBonusToParameter_Parms.Bonus = Bonus;
	ApplyBonusToParameter_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonusToParameter, &ApplyBonusToParameter_Parms, NULL );

	if ( Parameter )
		memcpy ( Parameter, &ApplyBonusToParameter_Parms.Parameter, 0x30 );
};

// Function SFXGame.sfxpowercustomaction.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 82126 ];

	USFXPowerCustomAction_CombatDroneRocket_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayImpactEffects
// [0x00020002] 
// Parameters infos:
// class AActor*                  oImpacted                      ( CPF_Parm )
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// struct FVector                 ImpactNormal                   ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::PlayImpactEffects ( class AActor* oImpacted, struct FVector ImpactLocation, struct FVector ImpactNormal )
{
	static UFunction* pFnPlayImpactEffects = NULL;

	if ( ! pFnPlayImpactEffects )
		pFnPlayImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 82120 ];

	USFXPowerCustomAction_CombatDroneRocket_execPlayImpactEffects_Parms PlayImpactEffects_Parms;
	PlayImpactEffects_Parms.oImpacted = oImpacted;
	memcpy ( &PlayImpactEffects_Parms.ImpactLocation, &ImpactLocation, 0xC );
	memcpy ( &PlayImpactEffects_Parms.ImpactNormal, &ImpactNormal, 0xC );

	this->ProcessEvent ( pFnPlayImpactEffects, &PlayImpactEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayImpactSounds
// [0x00420002] 
// Parameters infos:
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// class UWwiseEvent*             BaseSound                      ( CPF_Parm )
// TArray< struct FEvolvedSoundStruct > EvolvedSounds                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerCustomAction_CombatDroneRocket::PlayImpactSounds ( struct FVector ImpactLocation, class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds )
{
	static UFunction* pFnPlayImpactSounds = NULL;

	if ( ! pFnPlayImpactSounds )
		pFnPlayImpactSounds = (UFunction*) UObject::GObjObjects()->Data[ 82113 ];

	USFXPowerCustomAction_CombatDroneRocket_execPlayImpactSounds_Parms PlayImpactSounds_Parms;
	memcpy ( &PlayImpactSounds_Parms.ImpactLocation, &ImpactLocation, 0xC );
	PlayImpactSounds_Parms.BaseSound = BaseSound;

	this->ProcessEvent ( pFnPlayImpactSounds, &PlayImpactSounds_Parms, NULL );

	if ( EvolvedSounds )
		memcpy ( EvolvedSounds, &PlayImpactSounds_Parms.EvolvedSounds, 0xC );
};

// Function SFXGame.sfxpowercustomaction.PlayCasterSounds
// [0x00420002] 
// Parameters infos:
// class UWwiseEvent*             BaseSound                      ( CPF_Parm )
// TArray< struct FEvolvedSoundStruct > EvolvedSounds                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerCustomAction_CombatDroneRocket::PlayCasterSounds ( class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds )
{
	static UFunction* pFnPlayCasterSounds = NULL;

	if ( ! pFnPlayCasterSounds )
		pFnPlayCasterSounds = (UFunction*) UObject::GObjObjects()->Data[ 82107 ];

	USFXPowerCustomAction_CombatDroneRocket_execPlayCasterSounds_Parms PlayCasterSounds_Parms;
	PlayCasterSounds_Parms.BaseSound = BaseSound;

	this->ProcessEvent ( pFnPlayCasterSounds, &PlayCasterSounds_Parms, NULL );

	if ( EvolvedSounds )
		memcpy ( EvolvedSounds, &PlayCasterSounds_Parms.EvolvedSounds, 0xC );
};

// Function SFXGame.sfxpowercustomaction.PlayDetonationEffects
// [0x00024002] 
// Parameters infos:
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// struct FVector                 ImpactNormal                   ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::PlayDetonationEffects ( struct FVector ImpactLocation, struct FVector ImpactNormal, class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnPlayDetonationEffects = NULL;

	if ( ! pFnPlayDetonationEffects )
		pFnPlayDetonationEffects = (UFunction*) UObject::GObjObjects()->Data[ 82095 ];

	USFXPowerCustomAction_CombatDroneRocket_execPlayDetonationEffects_Parms PlayDetonationEffects_Parms;
	memcpy ( &PlayDetonationEffects_Parms.ImpactLocation, &ImpactLocation, 0xC );
	memcpy ( &PlayDetonationEffects_Parms.ImpactNormal, &ImpactNormal, 0xC );
	PlayDetonationEffects_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnPlayDetonationEffects, &PlayDetonationEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayReleaseEffects
// [0x00820002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::PlayReleaseEffects ( )
{
	static UFunction* pFnPlayReleaseEffects = NULL;

	if ( ! pFnPlayReleaseEffects )
		pFnPlayReleaseEffects = (UFunction*) UObject::GObjObjects()->Data[ 82091 ];

	USFXPowerCustomAction_CombatDroneRocket_execPlayReleaseEffects_Parms PlayReleaseEffects_Parms;

	this->ProcessEvent ( pFnPlayReleaseEffects, &PlayReleaseEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.OnImpact
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 82084 ];

	USFXPowerCustomAction_CombatDroneRocket_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetImpactForce
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

float USFXPowerCustomAction_CombatDroneRocket::GetImpactForce ( class AActor* oImpacted )
{
	static UFunction* pFnGetImpactForce = NULL;

	if ( ! pFnGetImpactForce )
		pFnGetImpactForce = (UFunction*) UObject::GObjObjects()->Data[ 82081 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetImpactForce_Parms GetImpactForce_Parms;
	GetImpactForce_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactForce, &GetImpactForce_Parms, NULL );

	return GetImpactForce_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetNonRagdollDamageType
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* USFXPowerCustomAction_CombatDroneRocket::GetNonRagdollDamageType ( )
{
	static UFunction* pFnGetNonRagdollDamageType = NULL;

	if ( ! pFnGetNonRagdollDamageType )
		pFnGetNonRagdollDamageType = (UFunction*) UObject::GObjObjects()->Data[ 82078 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetNonRagdollDamageType_Parms GetNonRagdollDamageType_Parms;

	this->ProcessEvent ( pFnGetNonRagdollDamageType, &GetNonRagdollDamageType_Parms, NULL );

	return GetNonRagdollDamageType_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetImpactDamage
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm | CPF_OutParm )

float USFXPowerCustomAction_CombatDroneRocket::GetImpactDamage ( class AActor* oImpacted, class UClass** DamageType )
{
	static UFunction* pFnGetImpactDamage = NULL;

	if ( ! pFnGetImpactDamage )
		pFnGetImpactDamage = (UFunction*) UObject::GObjObjects()->Data[ 82073 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetImpactDamage_Parms GetImpactDamage_Parms;
	GetImpactDamage_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactDamage, &GetImpactDamage_Parms, NULL );

	if ( DamageType )
		*DamageType = GetImpactDamage_Parms.DamageType;

	return GetImpactDamage_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.DoAreaExplosionForActor
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 location                       ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          fForce                         ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// int                            MaxRagdollOverride             ( CPF_Parm )
// struct FScriptDelegate         ImpactCallback                 ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  MaxRagdollDmgTypeOverride      ( CPF_OptionalParm | CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::DoAreaExplosionForActor ( class AActor* oActor, struct FVector location, int ImpactCount, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxRagdollOverride, struct FScriptDelegate ImpactCallback, class UClass* MaxRagdollDmgTypeOverride )
{
	static UFunction* pFnDoAreaExplosionForActor = NULL;

	if ( ! pFnDoAreaExplosionForActor )
		pFnDoAreaExplosionForActor = (UFunction*) UObject::GObjObjects()->Data[ 67390 ];

	USFXPowerCustomAction_CombatDroneRocket_execDoAreaExplosionForActor_Parms DoAreaExplosionForActor_Parms;
	DoAreaExplosionForActor_Parms.oActor = oActor;
	memcpy ( &DoAreaExplosionForActor_Parms.location, &location, 0xC );
	DoAreaExplosionForActor_Parms.ImpactCount = ImpactCount;
	DoAreaExplosionForActor_Parms.fDamage = fDamage;
	DoAreaExplosionForActor_Parms.DamageType = DamageType;
	DoAreaExplosionForActor_Parms.fForce = fForce;
	memcpy ( &DoAreaExplosionForActor_Parms.Param, &Param, 0x20 );
	DoAreaExplosionForActor_Parms.MaxRagdollOverride = MaxRagdollOverride;
	memcpy ( &DoAreaExplosionForActor_Parms.ImpactCallback, &ImpactCallback, 0xC );
	DoAreaExplosionForActor_Parms.MaxRagdollDmgTypeOverride = MaxRagdollDmgTypeOverride;

	this->ProcessEvent ( pFnDoAreaExplosionForActor, &DoAreaExplosionForActor_Parms, NULL );

	return DoAreaExplosionForActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AreaExplosion
// [0x00024002] 
// Parameters infos:
// struct FVector                 location                       ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          fForce                         ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// int                            MaxImpactCount                 ( CPF_Parm )
// struct FScriptDelegate         ImpactCallback                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            MaxRagdollOverride             ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  MaxRagdollDmgTypeOverride      ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::AreaExplosion ( struct FVector location, float fRadius, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxImpactCount, struct FScriptDelegate ImpactCallback, int MaxRagdollOverride, class UClass* MaxRagdollDmgTypeOverride )
{
	static UFunction* pFnAreaExplosion = NULL;

	if ( ! pFnAreaExplosion )
		pFnAreaExplosion = (UFunction*) UObject::GObjObjects()->Data[ 82042 ];

	USFXPowerCustomAction_CombatDroneRocket_execAreaExplosion_Parms AreaExplosion_Parms;
	memcpy ( &AreaExplosion_Parms.location, &location, 0xC );
	AreaExplosion_Parms.fRadius = fRadius;
	AreaExplosion_Parms.fDamage = fDamage;
	AreaExplosion_Parms.DamageType = DamageType;
	AreaExplosion_Parms.fForce = fForce;
	memcpy ( &AreaExplosion_Parms.Param, &Param, 0x20 );
	AreaExplosion_Parms.MaxImpactCount = MaxImpactCount;
	memcpy ( &AreaExplosion_Parms.ImpactCallback, &ImpactCallback, 0xC );
	AreaExplosion_Parms.MaxRagdollOverride = MaxRagdollOverride;
	AreaExplosion_Parms.MaxRagdollDmgTypeOverride = MaxRagdollDmgTypeOverride;

	this->ProcessEvent ( pFnAreaExplosion, &AreaExplosion_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerSubsequentImpact
// [0x00024000] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 82035 ];

	USFXPowerCustomAction_CombatDroneRocket_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerComboImpact
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// float                          PowerRank                      ( CPF_Parm )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ClientDoPowerComboImpact ( class AActor* oActor, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags )
{
	static UFunction* pFnClientDoPowerComboImpact = NULL;

	if ( ! pFnClientDoPowerComboImpact )
		pFnClientDoPowerComboImpact = (UFunction*) UObject::GObjObjects()->Data[ 53812 ];

	USFXPowerCustomAction_CombatDroneRocket_execClientDoPowerComboImpact_Parms ClientDoPowerComboImpact_Parms;
	ClientDoPowerComboImpact_Parms.oActor = oActor;
	ClientDoPowerComboImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerComboImpact_Parms.PowerRank = PowerRank;
	ClientDoPowerComboImpact_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;
	ClientDoPowerComboImpact_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnClientDoPowerComboImpact, &ClientDoPowerComboImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 82022 ];

	USFXPowerCustomAction_CombatDroneRocket_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DoPowerDetonatedForActor
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            nImpactCount                   ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::DoPowerDetonatedForActor ( class AActor* oActor, struct FVector HitLocation, struct FVector HitNormal, int nImpactCount, unsigned long bFirstTarget, class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnDoPowerDetonatedForActor = NULL;

	if ( ! pFnDoPowerDetonatedForActor )
		pFnDoPowerDetonatedForActor = (UFunction*) UObject::GObjObjects()->Data[ 82002 ];

	USFXPowerCustomAction_CombatDroneRocket_execDoPowerDetonatedForActor_Parms DoPowerDetonatedForActor_Parms;
	DoPowerDetonatedForActor_Parms.oActor = oActor;
	memcpy ( &DoPowerDetonatedForActor_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoPowerDetonatedForActor_Parms.HitNormal, &HitNormal, 0xC );
	DoPowerDetonatedForActor_Parms.nImpactCount = nImpactCount;
	DoPowerDetonatedForActor_Parms.bFirstTarget = bFirstTarget;
	DoPowerDetonatedForActor_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnDoPowerDetonatedForActor, &DoPowerDetonatedForActor_Parms, NULL );

	return DoPowerDetonatedForActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.OnPowerDetonated
// [0x00024002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor )
{
	static UFunction* pFnOnPowerDetonated = NULL;

	if ( ! pFnOnPowerDetonated )
		pFnOnPowerDetonated = (UFunction*) UObject::GObjObjects()->Data[ 81986 ];

	USFXPowerCustomAction_CombatDroneRocket_execOnPowerDetonated_Parms OnPowerDetonated_Parms;
	memcpy ( &OnPowerDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerDetonated_Parms.HitNormal, &HitNormal, 0xC );
	OnPowerDetonated_Parms.oProjectile = oProjectile;
	OnPowerDetonated_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnOnPowerDetonated, &OnPowerDetonated_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseBuffPower
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::ReleaseBuffPower ( )
{
	static UFunction* pFnReleaseBuffPower = NULL;

	if ( ! pFnReleaseBuffPower )
		pFnReleaseBuffPower = (UFunction*) UObject::GObjObjects()->Data[ 81980 ];

	USFXPowerCustomAction_CombatDroneRocket_execReleaseBuffPower_Parms ReleaseBuffPower_Parms;

	this->ProcessEvent ( pFnReleaseBuffPower, &ReleaseBuffPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseMeleePower
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::ReleaseMeleePower ( )
{
	static UFunction* pFnReleaseMeleePower = NULL;

	if ( ! pFnReleaseMeleePower )
		pFnReleaseMeleePower = (UFunction*) UObject::GObjObjects()->Data[ 81979 ];

	USFXPowerCustomAction_CombatDroneRocket_execReleaseMeleePower_Parms ReleaseMeleePower_Parms;

	this->ProcessEvent ( pFnReleaseMeleePower, &ReleaseMeleePower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseInstantPower
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::ReleaseInstantPower ( )
{
	static UFunction* pFnReleaseInstantPower = NULL;

	if ( ! pFnReleaseInstantPower )
		pFnReleaseInstantPower = (UFunction*) UObject::GObjObjects()->Data[ 81974 ];

	USFXPowerCustomAction_CombatDroneRocket_execReleaseInstantPower_Parms ReleaseInstantPower_Parms;

	this->ProcessEvent ( pFnReleaseInstantPower, &ReleaseInstantPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.OnClientPowerProjectileSpawned
// [0x00020002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* NewProjectile                  ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::OnClientPowerProjectileSpawned ( class ASFXProjectile_PowerCustomAction* NewProjectile )
{
	static UFunction* pFnOnClientPowerProjectileSpawned = NULL;

	if ( ! pFnOnClientPowerProjectileSpawned )
		pFnOnClientPowerProjectileSpawned = (UFunction*) UObject::GObjObjects()->Data[ 81971 ];

	USFXPowerCustomAction_CombatDroneRocket_execOnClientPowerProjectileSpawned_Parms OnClientPowerProjectileSpawned_Parms;
	OnClientPowerProjectileSpawned_Parms.NewProjectile = NewProjectile;

	this->ProcessEvent ( pFnOnClientPowerProjectileSpawned, &OnClientPowerProjectileSpawned_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseProjectilePower
// [0x00020002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXProjectile_PowerCustomAction* USFXPowerCustomAction_CombatDroneRocket::ReleaseProjectilePower ( )
{
	static UFunction* pFnReleaseProjectilePower = NULL;

	if ( ! pFnReleaseProjectilePower )
		pFnReleaseProjectilePower = (UFunction*) UObject::GObjObjects()->Data[ 81956 ];

	USFXPowerCustomAction_CombatDroneRocket_execReleaseProjectilePower_Parms ReleaseProjectilePower_Parms;

	this->ProcessEvent ( pFnReleaseProjectilePower, &ReleaseProjectilePower_Parms, NULL );

	return ReleaseProjectilePower_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetProjectileAttachPoint
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AttachPoint                    ( CPF_Parm | CPF_OutParm )

bool USFXPowerCustomAction_CombatDroneRocket::GetProjectileAttachPoint ( struct FVector* AttachPoint )
{
	static UFunction* pFnGetProjectileAttachPoint = NULL;

	if ( ! pFnGetProjectileAttachPoint )
		pFnGetProjectileAttachPoint = (UFunction*) UObject::GObjObjects()->Data[ 55631 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetProjectileAttachPoint_Parms GetProjectileAttachPoint_Parms;

	this->ProcessEvent ( pFnGetProjectileAttachPoint, &GetProjectileAttachPoint_Parms, NULL );

	if ( AttachPoint )
		memcpy ( AttachPoint, &GetProjectileAttachPoint_Parms.AttachPoint, 0xC );

	return GetProjectileAttachPoint_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ReleasePower
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::ReleasePower ( )
{
	static UFunction* pFnReleasePower = NULL;

	if ( ! pFnReleasePower )
		pFnReleasePower = (UFunction*) UObject::GObjObjects()->Data[ 81949 ];

	USFXPowerCustomAction_CombatDroneRocket_execReleasePower_Parms ReleasePower_Parms;

	this->ProcessEvent ( pFnReleasePower, &ReleasePower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ResetPowerCooldown
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::ResetPowerCooldown ( )
{
	static UFunction* pFnResetPowerCooldown = NULL;

	if ( ! pFnResetPowerCooldown )
		pFnResetPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81948 ];

	USFXPowerCustomAction_CombatDroneRocket_execResetPowerCooldown_Parms ResetPowerCooldown_Parms;

	this->ProcessEvent ( pFnResetPowerCooldown, &ResetPowerCooldown_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartPowerCooldown
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::StartPowerCooldown ( )
{
	static UFunction* pFnStartPowerCooldown = NULL;

	if ( ! pFnStartPowerCooldown )
		pFnStartPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81945 ];

	USFXPowerCustomAction_CombatDroneRocket_execStartPowerCooldown_Parms StartPowerCooldown_Parms;

	this->ProcessEvent ( pFnStartPowerCooldown, &StartPowerCooldown_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerCooldown
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXPowerCustomAction_CombatDroneRocket::GetPowerCooldown ( )
{
	static UFunction* pFnGetPowerCooldown = NULL;

	if ( ! pFnGetPowerCooldown )
		pFnGetPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81943 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetPowerCooldown_Parms GetPowerCooldown_Parms;

	this->ProcessEvent ( pFnGetPowerCooldown, &GetPowerCooldown_Parms, NULL );

	return GetPowerCooldown_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.TickCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::eventTickCustomAction ( float fDeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81938 ];

	USFXPowerCustomAction_CombatDroneRocket_eventTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneRocket::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 81932 ];

	USFXPowerCustomAction_CombatDroneRocket_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81926 ];

	USFXPowerCustomAction_CombatDroneRocket_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.EndThisCustomAction
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::EndThisCustomAction ( )
{
	static UFunction* pFnEndThisCustomAction = NULL;

	if ( ! pFnEndThisCustomAction )
		pFnEndThisCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81925 ];

	USFXPowerCustomAction_CombatDroneRocket_execEndThisCustomAction_Parms EndThisCustomAction_Parms;

	this->ProcessEvent ( pFnEndThisCustomAction, &EndThisCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayBodyStance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBodyStance             BodyStance                     ( CPF_Parm | CPF_NeedCtorLink )
// float                          fStanceBlendInTime             ( CPF_Parm )
// float                          fStanceBlendOutTime            ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::PlayBodyStance ( struct FBodyStance BodyStance, float fStanceBlendInTime, float fStanceBlendOutTime )
{
	static UFunction* pFnPlayBodyStance = NULL;

	if ( ! pFnPlayBodyStance )
		pFnPlayBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 81917 ];

	USFXPowerCustomAction_CombatDroneRocket_execPlayBodyStance_Parms PlayBodyStance_Parms;
	memcpy ( &PlayBodyStance_Parms.BodyStance, &BodyStance, 0xC );
	PlayBodyStance_Parms.fStanceBlendInTime = fStanceBlendInTime;
	PlayBodyStance_Parms.fStanceBlendOutTime = fStanceBlendOutTime;

	this->ProcessEvent ( pFnPlayBodyStance, &PlayBodyStance_Parms, NULL );

	return PlayBodyStance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.StartCastAnimations
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::StartCastAnimations ( )
{
	static UFunction* pFnStartCastAnimations = NULL;

	if ( ! pFnStartCastAnimations )
		pFnStartCastAnimations = (UFunction*) UObject::GObjObjects()->Data[ 81911 ];

	USFXPowerCustomAction_CombatDroneRocket_execStartCastAnimations_Parms StartCastAnimations_Parms;

	this->ProcessEvent ( pFnStartCastAnimations, &StartCastAnimations_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartPower
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::StartPower ( )
{
	static UFunction* pFnStartPower = NULL;

	if ( ! pFnStartPower )
		pFnStartPower = (UFunction*) UObject::GObjObjects()->Data[ 81904 ];

	USFXPowerCustomAction_CombatDroneRocket_execStartPower_Parms StartPower_Parms;

	this->ProcessEvent ( pFnStartPower, &StartPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_CombatDroneRocket::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81892 ];

	USFXPowerCustomAction_CombatDroneRocket_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ChangeCoverAction
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXPowerCustomAction_CombatDroneRocket::ChangeCoverAction ( )
{
	static UFunction* pFnChangeCoverAction = NULL;

	if ( ! pFnChangeCoverAction )
		pFnChangeCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 81887 ];

	USFXPowerCustomAction_CombatDroneRocket_execChangeCoverAction_Parms ChangeCoverAction_Parms;

	this->ProcessEvent ( pFnChangeCoverAction, &ChangeCoverAction_Parms, NULL );

	return ChangeCoverAction_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetCurrentBodyStance
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXPowerCustomAction_CombatDroneRocket::GetCurrentBodyStance ( )
{
	static UFunction* pFnGetCurrentBodyStance = NULL;

	if ( ! pFnGetCurrentBodyStance )
		pFnGetCurrentBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 81884 ];

	USFXPowerCustomAction_CombatDroneRocket_execGetCurrentBodyStance_Parms GetCurrentBodyStance_Parms;

	this->ProcessEvent ( pFnGetCurrentBodyStance, &GetCurrentBodyStance_Parms, NULL );

	return GetCurrentBodyStance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.LoadAnimSet
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXPowerCustomAction_CombatDroneRocket::LoadAnimSet ( )
{
	static UFunction* pFnLoadAnimSet = NULL;

	if ( ! pFnLoadAnimSet )
		pFnLoadAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 81880 ];

	USFXPowerCustomAction_CombatDroneRocket_execLoadAnimSet_Parms LoadAnimSet_Parms;

	this->ProcessEvent ( pFnLoadAnimSet, &LoadAnimSet_Parms, NULL );

	return LoadAnimSet_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.CanUsePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::CanUsePower ( class AActor* oTarget )
{
	static UFunction* pFnCanUsePower = NULL;

	if ( ! pFnCanUsePower )
		pFnCanUsePower = (UFunction*) UObject::GObjObjects()->Data[ 55613 ];

	USFXPowerCustomAction_CombatDroneRocket_execCanUsePower_Parms CanUsePower_Parms;
	CanUsePower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanUsePower, &CanUsePower_Parms, NULL );

	return CanUsePower_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneRocket::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81868 ];

	USFXPowerCustomAction_CombatDroneRocket_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerCustomAction_CombatDroneRocket::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 81862 ];

	USFXPowerCustomAction_CombatDroneRocket_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.sfxpowercustomaction.GetSaveGamePowerState
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int Usfxpowercustomaction_combatdroneshock::GetSaveGamePowerState ( )
{
	static UFunction* pFnGetSaveGamePowerState = NULL;

	if ( ! pFnGetSaveGamePowerState )
		pFnGetSaveGamePowerState = (UFunction*) UObject::GObjObjects()->Data[ 82415 ];

	Usfxpowercustomaction_combatdroneshock_execGetSaveGamePowerState_Parms GetSaveGamePowerState_Parms;

	this->ProcessEvent ( pFnGetSaveGamePowerState, &GetSaveGamePowerState_Parms, NULL );

	return GetSaveGamePowerState_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.SetSaveGamePowerState
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nState                         ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::SetSaveGamePowerState ( int nState )
{
	static UFunction* pFnSetSaveGamePowerState = NULL;

	if ( ! pFnSetSaveGamePowerState )
		pFnSetSaveGamePowerState = (UFunction*) UObject::GObjObjects()->Data[ 82413 ];

	Usfxpowercustomaction_combatdroneshock_execSetSaveGamePowerState_Parms SetSaveGamePowerState_Parms;
	SetSaveGamePowerState_Parms.nState = nState;

	this->ProcessEvent ( pFnSetSaveGamePowerState, &SetSaveGamePowerState_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetUniquePowerPlayerVariable
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName Usfxpowercustomaction_combatdroneshock::GetUniquePowerPlayerVariable ( )
{
	static UFunction* pFnGetUniquePowerPlayerVariable = NULL;

	if ( ! pFnGetUniquePowerPlayerVariable )
		pFnGetUniquePowerPlayerVariable = (UFunction*) UObject::GObjObjects()->Data[ 82411 ];

	Usfxpowercustomaction_combatdroneshock_execGetUniquePowerPlayerVariable_Parms GetUniquePowerPlayerVariable_Parms;

	this->ProcessEvent ( pFnGetUniquePowerPlayerVariable, &GetUniquePowerPlayerVariable_Parms, NULL );

	return GetUniquePowerPlayerVariable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.RestoreSaveState
// [0x00020000] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::RestoreSaveState ( )
{
	static UFunction* pFnRestoreSaveState = NULL;

	if ( ! pFnRestoreSaveState )
		pFnRestoreSaveState = (UFunction*) UObject::GObjObjects()->Data[ 82410 ];

	Usfxpowercustomaction_combatdroneshock_execRestoreSaveState_Parms RestoreSaveState_Parms;

	this->ProcessEvent ( pFnRestoreSaveState, &RestoreSaveState_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicationDecodeDelayAndResistance
// [0x00420002] 
// Parameters infos:
// int                            EncodedData                    ( CPF_Parm )
// float                          fDelay                         ( CPF_Parm | CPF_OutParm )
// unsigned char                  Resistance                     ( CPF_Parm | CPF_OutParm )

void Usfxpowercustomaction_combatdroneshock::ReplicationDecodeDelayAndResistance ( int EncodedData, float* fDelay, unsigned char* Resistance )
{
	static UFunction* pFnReplicationDecodeDelayAndResistance = NULL;

	if ( ! pFnReplicationDecodeDelayAndResistance )
		pFnReplicationDecodeDelayAndResistance = (UFunction*) UObject::GObjObjects()->Data[ 82406 ];

	Usfxpowercustomaction_combatdroneshock_execReplicationDecodeDelayAndResistance_Parms ReplicationDecodeDelayAndResistance_Parms;
	ReplicationDecodeDelayAndResistance_Parms.EncodedData = EncodedData;

	this->ProcessEvent ( pFnReplicationDecodeDelayAndResistance, &ReplicationDecodeDelayAndResistance_Parms, NULL );

	if ( fDelay )
		*fDelay = ReplicationDecodeDelayAndResistance_Parms.fDelay;

	if ( Resistance )
		*Resistance = ReplicationDecodeDelayAndResistance_Parms.Resistance;
};

// Function SFXGame.sfxpowercustomaction.ReplicationEncodeDelayAndResistance
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDelay                         ( CPF_Parm )
// unsigned char                  Resistance                     ( CPF_Parm )

int Usfxpowercustomaction_combatdroneshock::ReplicationEncodeDelayAndResistance ( float fDelay, unsigned char Resistance )
{
	static UFunction* pFnReplicationEncodeDelayAndResistance = NULL;

	if ( ! pFnReplicationEncodeDelayAndResistance )
		pFnReplicationEncodeDelayAndResistance = (UFunction*) UObject::GObjObjects()->Data[ 82402 ];

	Usfxpowercustomaction_combatdroneshock_execReplicationEncodeDelayAndResistance_Parms ReplicationEncodeDelayAndResistance_Parms;
	ReplicationEncodeDelayAndResistance_Parms.fDelay = fDelay;
	ReplicationEncodeDelayAndResistance_Parms.Resistance = Resistance;

	this->ProcessEvent ( pFnReplicationEncodeDelayAndResistance, &ReplicationEncodeDelayAndResistance_Parms, NULL );

	return ReplicationEncodeDelayAndResistance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.OnSourcePowerBioticDetonation
// [0x00020000] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::OnSourcePowerBioticDetonation ( )
{
	static UFunction* pFnOnSourcePowerBioticDetonation = NULL;

	if ( ! pFnOnSourcePowerBioticDetonation )
		pFnOnSourcePowerBioticDetonation = (UFunction*) UObject::GObjObjects()->Data[ 82401 ];

	Usfxpowercustomaction_combatdroneshock_execOnSourcePowerBioticDetonation_Parms OnSourcePowerBioticDetonation_Parms;

	this->ProcessEvent ( pFnOnSourcePowerBioticDetonation, &OnSourcePowerBioticDetonation_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerComboClassFromUniqueID
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )

struct FString Usfxpowercustomaction_combatdroneshock::GetPowerComboClassFromUniqueID ( int PowerComboTypeUniqueID )
{
	static UFunction* pFnGetPowerComboClassFromUniqueID = NULL;

	if ( ! pFnGetPowerComboClassFromUniqueID )
		pFnGetPowerComboClassFromUniqueID = (UFunction*) UObject::GObjObjects()->Data[ 82398 ];

	Usfxpowercustomaction_combatdroneshock_execGetPowerComboClassFromUniqueID_Parms GetPowerComboClassFromUniqueID_Parms;
	GetPowerComboClassFromUniqueID_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;

	this->ProcessEvent ( pFnGetPowerComboClassFromUniqueID, &GetPowerComboClassFromUniqueID_Parms, NULL );

	return GetPowerComboClassFromUniqueID_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPowerComboTypeUniqueIDFromClass
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 className                      ( CPF_Parm | CPF_NeedCtorLink )

int Usfxpowercustomaction_combatdroneshock::GetPowerComboTypeUniqueIDFromClass ( struct FString className )
{
	static UFunction* pFnGetPowerComboTypeUniqueIDFromClass = NULL;

	if ( ! pFnGetPowerComboTypeUniqueIDFromClass )
		pFnGetPowerComboTypeUniqueIDFromClass = (UFunction*) UObject::GObjObjects()->Data[ 69117 ];

	Usfxpowercustomaction_combatdroneshock_execGetPowerComboTypeUniqueIDFromClass_Parms GetPowerComboTypeUniqueIDFromClass_Parms;
	memcpy ( &GetPowerComboTypeUniqueIDFromClass_Parms.className, &className, 0xC );

	this->ProcessEvent ( pFnGetPowerComboTypeUniqueIDFromClass, &GetPowerComboTypeUniqueIDFromClass_Parms, NULL );

	return GetPowerComboTypeUniqueIDFromClass_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerComboImpactFromEffect
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// struct FString                 EffectClassName                ( CPF_Parm | CPF_NeedCtorLink )
// float                          DetonatorPowerRank             ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ClientDoPowerComboImpactFromEffect ( class AActor* oTarget, int CustomActionReactionType, struct FString EffectClassName, float DetonatorPowerRank, int MiscFlags )
{
	static UFunction* pFnClientDoPowerComboImpactFromEffect = NULL;

	if ( ! pFnClientDoPowerComboImpactFromEffect )
		pFnClientDoPowerComboImpactFromEffect = (UFunction*) UObject::GObjObjects()->Data[ 82387 ];

	Usfxpowercustomaction_combatdroneshock_execClientDoPowerComboImpactFromEffect_Parms ClientDoPowerComboImpactFromEffect_Parms;
	ClientDoPowerComboImpactFromEffect_Parms.oTarget = oTarget;
	ClientDoPowerComboImpactFromEffect_Parms.CustomActionReactionType = CustomActionReactionType;
	memcpy ( &ClientDoPowerComboImpactFromEffect_Parms.EffectClassName, &EffectClassName, 0xC );
	ClientDoPowerComboImpactFromEffect_Parms.DetonatorPowerRank = DetonatorPowerRank;
	ClientDoPowerComboImpactFromEffect_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnClientDoPowerComboImpactFromEffect, &ClientDoPowerComboImpactFromEffect_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerCombo
// [0x00020002] 
// Parameters infos:
// class UClass*                  EffectClass                    ( CPF_Parm )
// int                            SourcePowerID                  ( CPF_Parm )
// class ABioPawn*                SourcePowerInstigator          ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ClientDoPowerCombo ( class UClass* EffectClass, int SourcePowerID, class ABioPawn* SourcePowerInstigator, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnClientDoPowerCombo = NULL;

	if ( ! pFnClientDoPowerCombo )
		pFnClientDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82375 ];

	Usfxpowercustomaction_combatdroneshock_execClientDoPowerCombo_Parms ClientDoPowerCombo_Parms;
	ClientDoPowerCombo_Parms.EffectClass = EffectClass;
	ClientDoPowerCombo_Parms.SourcePowerID = SourcePowerID;
	ClientDoPowerCombo_Parms.SourcePowerInstigator = SourcePowerInstigator;
	ClientDoPowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &ClientDoPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoPowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnClientDoPowerCombo, &ClientDoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerCombo
// [0x00020002] 
// Parameters infos:
// class Usfxgameeffect_powercombo* ComboEffect                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ReplicatePowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnReplicatePowerCombo = NULL;

	if ( ! pFnReplicatePowerCombo )
		pFnReplicatePowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82370 ];

	Usfxpowercustomaction_combatdroneshock_execReplicatePowerCombo_Parms ReplicatePowerCombo_Parms;
	ReplicatePowerCombo_Parms.ComboEffect = ComboEffect;
	ReplicatePowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &ReplicatePowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicatePowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnReplicatePowerCombo, &ReplicatePowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DelayedDoPowerCombo
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::DelayedDoPowerCombo ( )
{
	static UFunction* pFnDelayedDoPowerCombo = NULL;

	if ( ! pFnDelayedDoPowerCombo )
		pFnDelayedDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82369 ];

	Usfxpowercustomaction_combatdroneshock_execDelayedDoPowerCombo_Parms DelayedDoPowerCombo_Parms;

	this->ProcessEvent ( pFnDelayedDoPowerCombo, &DelayedDoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DoPowerCombo
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// class Usfxgameeffect_powercombo* ComboEffect                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// unsigned long                  bDelayed                       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::DoPowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal, unsigned long bDelayed )
{
	static UFunction* pFnDoPowerCombo = NULL;

	if ( ! pFnDoPowerCombo )
		pFnDoPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82357 ];

	Usfxpowercustomaction_combatdroneshock_execDoPowerCombo_Parms DoPowerCombo_Parms;
	DoPowerCombo_Parms.ComboEffect = ComboEffect;
	DoPowerCombo_Parms.TargetPawn = TargetPawn;
	memcpy ( &DoPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoPowerCombo_Parms.HitNormal, &HitNormal, 0xC );
	DoPowerCombo_Parms.bDelayed = bDelayed;

	this->ProcessEvent ( pFnDoPowerCombo, &DoPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CheckForPowerCombo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// unsigned char                  Resistance                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::CheckForPowerCombo ( class AActor* Target, unsigned char Resistance, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnCheckForPowerCombo = NULL;

	if ( ! pFnCheckForPowerCombo )
		pFnCheckForPowerCombo = (UFunction*) UObject::GObjObjects()->Data[ 82021 ];

	Usfxpowercustomaction_combatdroneshock_execCheckForPowerCombo_Parms CheckForPowerCombo_Parms;
	CheckForPowerCombo_Parms.Target = Target;
	CheckForPowerCombo_Parms.Resistance = Resistance;
	memcpy ( &CheckForPowerCombo_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &CheckForPowerCombo_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnCheckForPowerCombo, &CheckForPowerCombo_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.AddComboEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class Usfxgameeffect_powercombo* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// class UClass*                  ComboClass                     ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )

class Usfxgameeffect_powercombo* Usfxpowercustomaction_combatdroneshock::AddComboEffect ( class AActor* Target, class UClass* ComboClass, float Duration )
{
	static UFunction* pFnAddComboEffect = NULL;

	if ( ! pFnAddComboEffect )
		pFnAddComboEffect = (UFunction*) UObject::GObjObjects()->Data[ 82341 ];

	Usfxpowercustomaction_combatdroneshock_execAddComboEffect_Parms AddComboEffect_Parms;
	AddComboEffect_Parms.Target = Target;
	AddComboEffect_Parms.ComboClass = ComboClass;
	AddComboEffect_Parms.Duration = Duration;

	this->ProcessEvent ( pFnAddComboEffect, &AddComboEffect_Parms, NULL );

	return AddComboEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 82338 ];

	Usfxpowercustomaction_combatdroneshock_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CombatEnded
// [0x00020000] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::CombatEnded ( )
{
	static UFunction* pFnCombatEnded = NULL;

	if ( ! pFnCombatEnded )
		pFnCombatEnded = (UFunction*) UObject::GObjObjects()->Data[ 82337 ];

	Usfxpowercustomaction_combatdroneshock_execCombatEnded_Parms CombatEnded_Parms;

	this->ProcessEvent ( pFnCombatEnded, &CombatEnded_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplaceAnimSetWithDynamic
// [0x00020002] 
// Parameters infos:
// class UAnimSet*                DynAnimSet                     ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ReplaceAnimSetWithDynamic ( class UAnimSet* DynAnimSet )
{
	static UFunction* pFnReplaceAnimSetWithDynamic = NULL;

	if ( ! pFnReplaceAnimSetWithDynamic )
		pFnReplaceAnimSetWithDynamic = (UFunction*) UObject::GObjObjects()->Data[ 82335 ];

	Usfxpowercustomaction_combatdroneshock_execReplaceAnimSetWithDynamic_Parms ReplaceAnimSetWithDynamic_Parms;
	ReplaceAnimSetWithDynamic_Parms.DynAnimSet = DynAnimSet;

	this->ProcessEvent ( pFnReplaceAnimSetWithDynamic, &ReplaceAnimSetWithDynamic_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerAnimInfo
// [0x00420002] 
// Parameters infos:
// class UAnimSet*                AnimSet                        ( CPF_Parm | CPF_OutParm )
// TArray< struct FName >         AnimNames                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_combatdroneshock::GetPowerAnimInfo ( class UAnimSet** AnimSet, TArray< struct FName >* AnimNames )
{
	static UFunction* pFnGetPowerAnimInfo = NULL;

	if ( ! pFnGetPowerAnimInfo )
		pFnGetPowerAnimInfo = (UFunction*) UObject::GObjObjects()->Data[ 82330 ];

	Usfxpowercustomaction_combatdroneshock_execGetPowerAnimInfo_Parms GetPowerAnimInfo_Parms;

	this->ProcessEvent ( pFnGetPowerAnimInfo, &GetPowerAnimInfo_Parms, NULL );

	if ( AnimSet )
		*AnimSet = GetPowerAnimInfo_Parms.AnimSet;

	if ( AnimNames )
		memcpy ( AnimNames, &GetPowerAnimInfo_Parms.AnimNames, 0xC );
};

// Function SFXGame.sfxpowercustomaction.CleanUpProjectile
// [0x00024002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::CleanUpProjectile ( class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnCleanUpProjectile = NULL;

	if ( ! pFnCleanUpProjectile )
		pFnCleanUpProjectile = (UFunction*) UObject::GObjObjects()->Data[ 82325 ];

	Usfxpowercustomaction_combatdroneshock_execCleanUpProjectile_Parms CleanUpProjectile_Parms;
	CleanUpProjectile_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnCleanUpProjectile, &CleanUpProjectile_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerComboImpact
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// float                          PowerRank                      ( CPF_Parm )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ReplicatePowerComboImpact ( class ABioPawn* Target, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags )
{
	static UFunction* pFnReplicatePowerComboImpact = NULL;

	if ( ! pFnReplicatePowerComboImpact )
		pFnReplicatePowerComboImpact = (UFunction*) UObject::GObjObjects()->Data[ 82319 ];

	Usfxpowercustomaction_combatdroneshock_execReplicatePowerComboImpact_Parms ReplicatePowerComboImpact_Parms;
	ReplicatePowerComboImpact_Parms.Target = Target;
	ReplicatePowerComboImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ReplicatePowerComboImpact_Parms.PowerRank = PowerRank;
	ReplicatePowerComboImpact_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;
	ReplicatePowerComboImpact_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnReplicatePowerComboImpact, &ReplicatePowerComboImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicatePowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ReplicatePowerSubsequentImpact ( class ABioPawn* Target, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnReplicatePowerSubsequentImpact = NULL;

	if ( ! pFnReplicatePowerSubsequentImpact )
		pFnReplicatePowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 82312 ];

	Usfxpowercustomaction_combatdroneshock_execReplicatePowerSubsequentImpact_Parms ReplicatePowerSubsequentImpact_Parms;
	ReplicatePowerSubsequentImpact_Parms.Target = Target;
	ReplicatePowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ReplicatePowerSubsequentImpact_Parms.Duration = Duration;
	ReplicatePowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ReplicatePowerSubsequentImpact_Parms.Delay = Delay;
	ReplicatePowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnReplicatePowerSubsequentImpact, &ReplicatePowerSubsequentImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReplicateImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnReplicateImpact = NULL;

	if ( ! pFnReplicateImpact )
		pFnReplicateImpact = (UFunction*) UObject::GObjObjects()->Data[ 82305 ];

	Usfxpowercustomaction_combatdroneshock_execReplicateImpact_Parms ReplicateImpact_Parms;
	ReplicateImpact_Parms.Target = Target;
	ReplicateImpact_Parms.ImpactCount = ImpactCount;
	ReplicateImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ReplicateImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicateImpact_Parms.HitNormal, &HitNormal, 0xC );
	ReplicateImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnReplicateImpact, &ReplicateImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoCustomAction
// [0x00024002] 
// Parameters infos:
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ClientDoCustomAction ( unsigned long bForced )
{
	static UFunction* pFnClientDoCustomAction = NULL;

	if ( ! pFnClientDoCustomAction )
		pFnClientDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 82303 ];

	Usfxpowercustomaction_combatdroneshock_execClientDoCustomAction_Parms ClientDoCustomAction_Parms;
	ClientDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnClientDoCustomAction, &ClientDoCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.Replicate
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::Replicate ( )
{
	static UFunction* pFnReplicate = NULL;

	if ( ! pFnReplicate )
		pFnReplicate = (UFunction*) UObject::GObjObjects()->Data[ 82302 ];

	Usfxpowercustomaction_combatdroneshock_execReplicate_Parms Replicate_Parms;

	this->ProcessEvent ( pFnReplicate, &Replicate_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayPowerScreenShake
// [0x00820002] 
// Parameters infos:
// class UClass*                  ScreenShakeClass               ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::PlayPowerScreenShake ( class UClass* ScreenShakeClass, struct FVector HitLocation )
{
	static UFunction* pFnPlayPowerScreenShake = NULL;

	if ( ! pFnPlayPowerScreenShake )
		pFnPlayPowerScreenShake = (UFunction*) UObject::GObjObjects()->Data[ 82293 ];

	Usfxpowercustomaction_combatdroneshock_execPlayPowerScreenShake_Parms PlayPowerScreenShake_Parms;
	PlayPowerScreenShake_Parms.ScreenShakeClass = ScreenShakeClass;
	memcpy ( &PlayPowerScreenShake_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayPowerScreenShake, &PlayPowerScreenShake_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayPowerControllerRumble
// [0x00020002] 
// Parameters infos:
// class UClass*                  RumbleClass                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::PlayPowerControllerRumble ( class UClass* RumbleClass, struct FVector HitLocation )
{
	static UFunction* pFnPlayPowerControllerRumble = NULL;

	if ( ! pFnPlayPowerControllerRumble )
		pFnPlayPowerControllerRumble = (UFunction*) UObject::GObjObjects()->Data[ 82283 ];

	Usfxpowercustomaction_combatdroneshock_execPlayPowerControllerRumble_Parms PlayPowerControllerRumble_Parms;
	PlayPowerControllerRumble_Parms.RumbleClass = RumbleClass;
	memcpy ( &PlayPowerControllerRumble_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayPowerControllerRumble, &PlayPowerControllerRumble_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetDefaultClientEffectParams
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector Usfxpowercustomaction_combatdroneshock::GetDefaultClientEffectParams ( )
{
	static UFunction* pFnGetDefaultClientEffectParams = NULL;

	if ( ! pFnGetDefaultClientEffectParams )
		pFnGetDefaultClientEffectParams = (UFunction*) UObject::GObjObjects()->Data[ 82280 ];

	Usfxpowercustomaction_combatdroneshock_execGetDefaultClientEffectParams_Parms GetDefaultClientEffectParams_Parms;

	this->ProcessEvent ( pFnGetDefaultClientEffectParams, &GetDefaultClientEffectParams_Parms, NULL );

	return GetDefaultClientEffectParams_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AddEvolvedRankBonus
// [0x00420002] 
// Parameters infos:
// float                          Bonus                          ( CPF_Parm )
// struct FPowerData              Data                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_combatdroneshock::AddEvolvedRankBonus ( float Bonus, struct FPowerData* Data )
{
	static UFunction* pFnAddEvolvedRankBonus = NULL;

	if ( ! pFnAddEvolvedRankBonus )
		pFnAddEvolvedRankBonus = (UFunction*) UObject::GObjObjects()->Data[ 82276 ];

	Usfxpowercustomaction_combatdroneshock_execAddEvolvedRankBonus_Parms AddEvolvedRankBonus_Parms;
	AddEvolvedRankBonus_Parms.Bonus = Bonus;

	this->ProcessEvent ( pFnAddEvolvedRankBonus, &AddEvolvedRankBonus_Parms, NULL );

	if ( Data )
		memcpy ( Data, &AddEvolvedRankBonus_Parms.Data, 0x30 );
};

// Function SFXGame.sfxpowercustomaction.ApplyForceToActor
// [0x00020002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 vForce                         ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ApplyForceToActor ( class AActor* oActor, struct FVector vForce )
{
	static UFunction* pFnApplyForceToActor = NULL;

	if ( ! pFnApplyForceToActor )
		pFnApplyForceToActor = (UFunction*) UObject::GObjObjects()->Data[ 82271 ];

	Usfxpowercustomaction_combatdroneshock_execApplyForceToActor_Parms ApplyForceToActor_Parms;
	ApplyForceToActor_Parms.oActor = oActor;
	memcpy ( &ApplyForceToActor_Parms.vForce, &vForce, 0xC );

	this->ProcessEvent ( pFnApplyForceToActor, &ApplyForceToActor_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ApplyShieldBonus
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// float                          fShieldValue                   ( CPF_Parm )
// unsigned long                  bShieldValueIsPercent          ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// struct FName                   Category                       ( CPF_Parm )
// unsigned long                  bRemoveEffectWhenShieldsDown   ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ApplyShieldBonus ( class ABioPawn* oPawn, float fShieldValue, unsigned long bShieldValueIsPercent, float fDuration, struct FName Category, unsigned long bRemoveEffectWhenShieldsDown )
{
	static UFunction* pFnApplyShieldBonus = NULL;

	if ( ! pFnApplyShieldBonus )
		pFnApplyShieldBonus = (UFunction*) UObject::GObjObjects()->Data[ 82262 ];

	Usfxpowercustomaction_combatdroneshock_execApplyShieldBonus_Parms ApplyShieldBonus_Parms;
	ApplyShieldBonus_Parms.oPawn = oPawn;
	ApplyShieldBonus_Parms.fShieldValue = fShieldValue;
	ApplyShieldBonus_Parms.bShieldValueIsPercent = bShieldValueIsPercent;
	ApplyShieldBonus_Parms.fDuration = fDuration;
	memcpy ( &ApplyShieldBonus_Parms.Category, &Category, 0x8 );
	ApplyShieldBonus_Parms.bRemoveEffectWhenShieldsDown = bRemoveEffectWhenShieldsDown;

	this->ProcessEvent ( pFnApplyShieldBonus, &ApplyShieldBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ApplyHealthBonus
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// float                          fHealthValue                   ( CPF_Parm )
// unsigned long                  bHealthValueIsPercent          ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// struct FName                   Category                       ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ApplyHealthBonus ( class ABioPawn* oPawn, float fHealthValue, unsigned long bHealthValueIsPercent, float fDuration, struct FName Category )
{
	static UFunction* pFnApplyHealthBonus = NULL;

	if ( ! pFnApplyHealthBonus )
		pFnApplyHealthBonus = (UFunction*) UObject::GObjObjects()->Data[ 82254 ];

	Usfxpowercustomaction_combatdroneshock_execApplyHealthBonus_Parms ApplyHealthBonus_Parms;
	ApplyHealthBonus_Parms.oPawn = oPawn;
	ApplyHealthBonus_Parms.fHealthValue = fHealthValue;
	ApplyHealthBonus_Parms.bHealthValueIsPercent = bHealthValueIsPercent;
	ApplyHealthBonus_Parms.fDuration = fDuration;
	memcpy ( &ApplyHealthBonus_Parms.Category, &Category, 0x8 );

	this->ProcessEvent ( pFnApplyHealthBonus, &ApplyHealthBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayParticleSystemOnSocket
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UParticleSystem*         PS_Template                    ( CPF_Parm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FName                   SocketName                     ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::PlayParticleSystemOnSocket ( class UParticleSystem* PS_Template, class ABioPawn* TargetPawn, struct FName SocketName, struct FRotator Rotation )
{
	static UFunction* pFnPlayParticleSystemOnSocket = NULL;

	if ( ! pFnPlayParticleSystemOnSocket )
		pFnPlayParticleSystemOnSocket = (UFunction*) UObject::GObjObjects()->Data[ 67470 ];

	Usfxpowercustomaction_combatdroneshock_execPlayParticleSystemOnSocket_Parms PlayParticleSystemOnSocket_Parms;
	PlayParticleSystemOnSocket_Parms.PS_Template = PS_Template;
	PlayParticleSystemOnSocket_Parms.TargetPawn = TargetPawn;
	memcpy ( &PlayParticleSystemOnSocket_Parms.SocketName, &SocketName, 0x8 );
	memcpy ( &PlayParticleSystemOnSocket_Parms.Rotation, &Rotation, 0xC );

	this->ProcessEvent ( pFnPlayParticleSystemOnSocket, &PlayParticleSystemOnSocket_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.HasRemainingShieldOfType
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )
// class UClass*                  ShieldClass                    ( CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::HasRemainingShieldOfType ( class ABioPawn* oPawn, class UClass* ShieldClass )
{
	static UFunction* pFnHasRemainingShieldOfType = NULL;

	if ( ! pFnHasRemainingShieldOfType )
		pFnHasRemainingShieldOfType = (UFunction*) UObject::GObjObjects()->Data[ 82243 ];

	Usfxpowercustomaction_combatdroneshock_execHasRemainingShieldOfType_Parms HasRemainingShieldOfType_Parms;
	HasRemainingShieldOfType_Parms.oPawn = oPawn;
	HasRemainingShieldOfType_Parms.ShieldClass = ShieldClass;

	this->ProcessEvent ( pFnHasRemainingShieldOfType, &HasRemainingShieldOfType_Parms, NULL );

	return HasRemainingShieldOfType_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsPlaceable
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::IsPlaceable ( class AActor* oImpacted )
{
	static UFunction* pFnIsPlaceable = NULL;

	if ( ! pFnIsPlaceable )
		pFnIsPlaceable = (UFunction*) UObject::GObjObjects()->Data[ 82240 ];

	Usfxpowercustomaction_combatdroneshock_execIsPlaceable_Parms IsPlaceable_Parms;
	IsPlaceable_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsPlaceable, &IsPlaceable_Parms, NULL );

	return IsPlaceable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyPermanentGameEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class UClass*                  className                      ( CPF_Parm )
// float                          fEffectValue                   ( CPF_Parm )
// struct FName                   nmCategory                     ( CPF_Parm )
// class AController*             Instigator                     ( CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::ApplyPermanentGameEffect ( class AActor* oTarget, class UClass* className, float fEffectValue, struct FName nmCategory, class AController* Instigator )
{
	static UFunction* pFnApplyPermanentGameEffect = NULL;

	if ( ! pFnApplyPermanentGameEffect )
		pFnApplyPermanentGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 82231 ];

	Usfxpowercustomaction_combatdroneshock_execApplyPermanentGameEffect_Parms ApplyPermanentGameEffect_Parms;
	ApplyPermanentGameEffect_Parms.oTarget = oTarget;
	ApplyPermanentGameEffect_Parms.className = className;
	ApplyPermanentGameEffect_Parms.fEffectValue = fEffectValue;
	memcpy ( &ApplyPermanentGameEffect_Parms.nmCategory, &nmCategory, 0x8 );
	ApplyPermanentGameEffect_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnApplyPermanentGameEffect, &ApplyPermanentGameEffect_Parms, NULL );

	return ApplyPermanentGameEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyTemporaryGameEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class UClass*                  className                      ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// float                          fEffectValue                   ( CPF_Parm )
// struct FName                   nmCategory                     ( CPF_Parm )
// class AController*             Instigator                     ( CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::ApplyTemporaryGameEffect ( class AActor* oTarget, class UClass* className, float fDuration, float fEffectValue, struct FName nmCategory, class AController* Instigator )
{
	static UFunction* pFnApplyTemporaryGameEffect = NULL;

	if ( ! pFnApplyTemporaryGameEffect )
		pFnApplyTemporaryGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 67380 ];

	Usfxpowercustomaction_combatdroneshock_execApplyTemporaryGameEffect_Parms ApplyTemporaryGameEffect_Parms;
	ApplyTemporaryGameEffect_Parms.oTarget = oTarget;
	ApplyTemporaryGameEffect_Parms.className = className;
	ApplyTemporaryGameEffect_Parms.fDuration = fDuration;
	ApplyTemporaryGameEffect_Parms.fEffectValue = fEffectValue;
	memcpy ( &ApplyTemporaryGameEffect_Parms.nmCategory, &nmCategory, 0x8 );
	ApplyTemporaryGameEffect_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnApplyTemporaryGameEffect, &ApplyTemporaryGameEffect_Parms, NULL );

	return ApplyTemporaryGameEffect_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsOfRace
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// unsigned char                  eRace                          ( CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::IsOfRace ( class AActor* oImpacted, unsigned char eRace )
{
	static UFunction* pFnIsOfRace = NULL;

	if ( ! pFnIsOfRace )
		pFnIsOfRace = (UFunction*) UObject::GObjObjects()->Data[ 82218 ];

	Usfxpowercustomaction_combatdroneshock_execIsOfRace_Parms IsOfRace_Parms;
	IsOfRace_Parms.oImpacted = oImpacted;
	IsOfRace_Parms.eRace = eRace;

	this->ProcessEvent ( pFnIsOfRace, &IsOfRace_Parms, NULL );

	return IsOfRace_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.CanBeRagdolledByPowers
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::CanBeRagdolledByPowers ( class ABioPawn* oPawn )
{
	static UFunction* pFnCanBeRagdolledByPowers = NULL;

	if ( ! pFnCanBeRagdolledByPowers )
		pFnCanBeRagdolledByPowers = (UFunction*) UObject::GObjObjects()->Data[ 82215 ];

	Usfxpowercustomaction_combatdroneshock_execCanBeRagdolledByPowers_Parms CanBeRagdolledByPowers_Parms;
	CanBeRagdolledByPowers_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnCanBeRagdolledByPowers, &CanBeRagdolledByPowers_Parms, NULL );

	return CanBeRagdolledByPowers_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ImpactPlaceable
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// float                          PlotPlaceableDamage            ( CPF_Parm )
// unsigned long                  bForceDamage                   ( CPF_OptionalParm | CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::ImpactPlaceable ( class AActor* oCaster, class AActor* oImpacted, struct FVector Momentum, float PlotPlaceableDamage, unsigned long bForceDamage )
{
	static UFunction* pFnImpactPlaceable = NULL;

	if ( ! pFnImpactPlaceable )
		pFnImpactPlaceable = (UFunction*) UObject::GObjObjects()->Data[ 82203 ];

	Usfxpowercustomaction_combatdroneshock_execImpactPlaceable_Parms ImpactPlaceable_Parms;
	ImpactPlaceable_Parms.oCaster = oCaster;
	ImpactPlaceable_Parms.oImpacted = oImpacted;
	memcpy ( &ImpactPlaceable_Parms.Momentum, &Momentum, 0xC );
	ImpactPlaceable_Parms.PlotPlaceableDamage = PlotPlaceableDamage;
	ImpactPlaceable_Parms.bForceDamage = bForceDamage;

	this->ProcessEvent ( pFnImpactPlaceable, &ImpactPlaceable_Parms, NULL );

	return ImpactPlaceable_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPhysicsLevelResistance
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

float Usfxpowercustomaction_combatdroneshock::GetPhysicsLevelResistance ( class AActor* oTarget )
{
	static UFunction* pFnGetPhysicsLevelResistance = NULL;

	if ( ! pFnGetPhysicsLevelResistance )
		pFnGetPhysicsLevelResistance = (UFunction*) UObject::GObjObjects()->Data[ 82198 ];

	Usfxpowercustomaction_combatdroneshock_execGetPhysicsLevelResistance_Parms GetPhysicsLevelResistance_Parms;
	GetPhysicsLevelResistance_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnGetPhysicsLevelResistance, &GetPhysicsLevelResistance_Parms, NULL );

	return GetPhysicsLevelResistance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetPhysicsLevel
// [0x00026002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// unsigned long                  bIgnoreResistance              ( CPF_OptionalParm | CPF_Parm )

int Usfxpowercustomaction_combatdroneshock::GetPhysicsLevel ( class AActor* oImpacted, unsigned long bIgnoreResistance )
{
	static UFunction* pFnGetPhysicsLevel = NULL;

	if ( ! pFnGetPhysicsLevel )
		pFnGetPhysicsLevel = (UFunction*) UObject::GObjObjects()->Data[ 82192 ];

	Usfxpowercustomaction_combatdroneshock_execGetPhysicsLevel_Parms GetPhysicsLevel_Parms;
	GetPhysicsLevel_Parms.oImpacted = oImpacted;
	GetPhysicsLevel_Parms.bIgnoreResistance = bIgnoreResistance;

	this->ProcessEvent ( pFnGetPhysicsLevel, &GetPhysicsLevel_Parms, NULL );

	return GetPhysicsLevel_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.IsMachineRace
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::IsMachineRace ( class AActor* oImpacted )
{
	static UFunction* pFnIsMachineRace = NULL;

	if ( ! pFnIsMachineRace )
		pFnIsMachineRace = (UFunction*) UObject::GObjObjects()->Data[ 82188 ];

	Usfxpowercustomaction_combatdroneshock_execIsMachineRace_Parms IsMachineRace_Parms;
	IsMachineRace_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsMachineRace, &IsMachineRace_Parms, NULL );

	return IsMachineRace_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ShouldUsePowerOnShields
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxpowercustomaction_combatdroneshock::ShouldUsePowerOnShields ( class ABioPawn* Target, class UClass* DamageType, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePowerOnShields = NULL;

	if ( ! pFnShouldUsePowerOnShields )
		pFnShouldUsePowerOnShields = (UFunction*) UObject::GObjObjects()->Data[ 82180 ];

	Usfxpowercustomaction_combatdroneshock_execShouldUsePowerOnShields_Parms ShouldUsePowerOnShields_Parms;
	ShouldUsePowerOnShields_Parms.Target = Target;
	ShouldUsePowerOnShields_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnShouldUsePowerOnShields, &ShouldUsePowerOnShields_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePowerOnShields_Parms.sOptionalInfo, 0xC );

	return ShouldUsePowerOnShields_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.RagdollPhysicsImpact
// [0x00020002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )
// class AActor*                  oImpactActor                   ( CPF_Parm )
// struct FVector                 vImpactDir                     ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::RagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir )
{
	static UFunction* pFnRagdollPhysicsImpact = NULL;

	if ( ! pFnRagdollPhysicsImpact )
		pFnRagdollPhysicsImpact = (UFunction*) UObject::GObjObjects()->Data[ 82166 ];

	Usfxpowercustomaction_combatdroneshock_execRagdollPhysicsImpact_Parms RagdollPhysicsImpact_Parms;
	RagdollPhysicsImpact_Parms.oPawn = oPawn;
	RagdollPhysicsImpact_Parms.oImpactActor = oImpactActor;
	memcpy ( &RagdollPhysicsImpact_Parms.vImpactDir, &vImpactDir, 0xC );

	this->ProcessEvent ( pFnRagdollPhysicsImpact, &RagdollPhysicsImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.CanImpactActor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::CanImpactActor ( class AActor* oActor )
{
	static UFunction* pFnCanImpactActor = NULL;

	if ( ! pFnCanImpactActor )
		pFnCanImpactActor = (UFunction*) UObject::GObjObjects()->Data[ 82163 ];

	Usfxpowercustomaction_combatdroneshock_execCanImpactActor_Parms CanImpactActor_Parms;
	CanImpactActor_Parms.oActor = oActor;

	this->ProcessEvent ( pFnCanImpactActor, &CanImpactActor_Parms, NULL );

	return CanImpactActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AddActorToImpactedList
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 vImpactLocation                ( CPF_Parm )
// TArray< class AActor* >        ImpactedActors                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxpowercustomaction_combatdroneshock::AddActorToImpactedList ( class AActor* oActor, struct FVector vImpactLocation, TArray< class AActor* >* ImpactedActors )
{
	static UFunction* pFnAddActorToImpactedList = NULL;

	if ( ! pFnAddActorToImpactedList )
		pFnAddActorToImpactedList = (UFunction*) UObject::GObjObjects()->Data[ 82152 ];

	Usfxpowercustomaction_combatdroneshock_execAddActorToImpactedList_Parms AddActorToImpactedList_Parms;
	AddActorToImpactedList_Parms.oActor = oActor;
	memcpy ( &AddActorToImpactedList_Parms.vImpactLocation, &vImpactLocation, 0xC );

	this->ProcessEvent ( pFnAddActorToImpactedList, &AddActorToImpactedList_Parms, NULL );

	if ( ImpactedActors )
		memcpy ( ImpactedActors, &AddActorToImpactedList_Parms.ImpactedActors, 0xC );

	return AddActorToImpactedList_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.DetonationHitsTarget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FAreaEffectParameters   DetonationParams               ( CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::DetonationHitsTarget ( struct FVector HitLocation, float MaxRange, class AActor* HitActor, struct FAreaEffectParameters DetonationParams )
{
	static UFunction* pFnDetonationHitsTarget = NULL;

	if ( ! pFnDetonationHitsTarget )
		pFnDetonationHitsTarget = (UFunction*) UObject::GObjObjects()->Data[ 81999 ];

	Usfxpowercustomaction_combatdroneshock_execDetonationHitsTarget_Parms DetonationHitsTarget_Parms;
	memcpy ( &DetonationHitsTarget_Parms.HitLocation, &HitLocation, 0xC );
	DetonationHitsTarget_Parms.MaxRange = MaxRange;
	DetonationHitsTarget_Parms.HitActor = HitActor;
	memcpy ( &DetonationHitsTarget_Parms.DetonationParams, &DetonationParams, 0x20 );

	this->ProcessEvent ( pFnDetonationHitsTarget, &DetonationHitsTarget_Parms, NULL );

	return DetonationHitsTarget_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetNearbyActors
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// TArray< class AActor* >        ImpactedActors                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxpowercustomaction_combatdroneshock::GetNearbyActors ( struct FVector HitLocation, float Radius, float MaxRange, struct FAreaEffectParameters Param, TArray< class AActor* >* ImpactedActors )
{
	static UFunction* pFnGetNearbyActors = NULL;

	if ( ! pFnGetNearbyActors )
		pFnGetNearbyActors = (UFunction*) UObject::GObjObjects()->Data[ 67385 ];

	Usfxpowercustomaction_combatdroneshock_execGetNearbyActors_Parms GetNearbyActors_Parms;
	memcpy ( &GetNearbyActors_Parms.HitLocation, &HitLocation, 0xC );
	GetNearbyActors_Parms.Radius = Radius;
	GetNearbyActors_Parms.MaxRange = MaxRange;
	memcpy ( &GetNearbyActors_Parms.Param, &Param, 0x20 );

	this->ProcessEvent ( pFnGetNearbyActors, &GetNearbyActors_Parms, NULL );

	if ( ImpactedActors )
		memcpy ( ImpactedActors, &GetNearbyActors_Parms.ImpactedActors, 0xC );

	return GetNearbyActors_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ApplyBonusToParameter
// [0x00424002] 
// Parameters infos:
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )
// struct FPowerData              Parameter                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_combatdroneshock::ApplyBonusToParameter ( class USFXGameEffect* Bonus, unsigned long bRemove, struct FPowerData* Parameter )
{
	static UFunction* pFnApplyBonusToParameter = NULL;

	if ( ! pFnApplyBonusToParameter )
		pFnApplyBonusToParameter = (UFunction*) UObject::GObjObjects()->Data[ 82130 ];

	Usfxpowercustomaction_combatdroneshock_execApplyBonusToParameter_Parms ApplyBonusToParameter_Parms;
	ApplyBonusToParameter_Parms.Bonus = Bonus;
	ApplyBonusToParameter_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonusToParameter, &ApplyBonusToParameter_Parms, NULL );

	if ( Parameter )
		memcpy ( Parameter, &ApplyBonusToParameter_Parms.Parameter, 0x30 );
};

// Function SFXGame.sfxpowercustomaction.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 82126 ];

	Usfxpowercustomaction_combatdroneshock_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayImpactEffects
// [0x00020002] 
// Parameters infos:
// class AActor*                  oImpacted                      ( CPF_Parm )
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// struct FVector                 ImpactNormal                   ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::PlayImpactEffects ( class AActor* oImpacted, struct FVector ImpactLocation, struct FVector ImpactNormal )
{
	static UFunction* pFnPlayImpactEffects = NULL;

	if ( ! pFnPlayImpactEffects )
		pFnPlayImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 82120 ];

	Usfxpowercustomaction_combatdroneshock_execPlayImpactEffects_Parms PlayImpactEffects_Parms;
	PlayImpactEffects_Parms.oImpacted = oImpacted;
	memcpy ( &PlayImpactEffects_Parms.ImpactLocation, &ImpactLocation, 0xC );
	memcpy ( &PlayImpactEffects_Parms.ImpactNormal, &ImpactNormal, 0xC );

	this->ProcessEvent ( pFnPlayImpactEffects, &PlayImpactEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayImpactSounds
// [0x00420002] 
// Parameters infos:
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// class UWwiseEvent*             BaseSound                      ( CPF_Parm )
// TArray< struct FEvolvedSoundStruct > EvolvedSounds                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_combatdroneshock::PlayImpactSounds ( struct FVector ImpactLocation, class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds )
{
	static UFunction* pFnPlayImpactSounds = NULL;

	if ( ! pFnPlayImpactSounds )
		pFnPlayImpactSounds = (UFunction*) UObject::GObjObjects()->Data[ 82113 ];

	Usfxpowercustomaction_combatdroneshock_execPlayImpactSounds_Parms PlayImpactSounds_Parms;
	memcpy ( &PlayImpactSounds_Parms.ImpactLocation, &ImpactLocation, 0xC );
	PlayImpactSounds_Parms.BaseSound = BaseSound;

	this->ProcessEvent ( pFnPlayImpactSounds, &PlayImpactSounds_Parms, NULL );

	if ( EvolvedSounds )
		memcpy ( EvolvedSounds, &PlayImpactSounds_Parms.EvolvedSounds, 0xC );
};

// Function SFXGame.sfxpowercustomaction.PlayCasterSounds
// [0x00420002] 
// Parameters infos:
// class UWwiseEvent*             BaseSound                      ( CPF_Parm )
// TArray< struct FEvolvedSoundStruct > EvolvedSounds                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_combatdroneshock::PlayCasterSounds ( class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds )
{
	static UFunction* pFnPlayCasterSounds = NULL;

	if ( ! pFnPlayCasterSounds )
		pFnPlayCasterSounds = (UFunction*) UObject::GObjObjects()->Data[ 82107 ];

	Usfxpowercustomaction_combatdroneshock_execPlayCasterSounds_Parms PlayCasterSounds_Parms;
	PlayCasterSounds_Parms.BaseSound = BaseSound;

	this->ProcessEvent ( pFnPlayCasterSounds, &PlayCasterSounds_Parms, NULL );

	if ( EvolvedSounds )
		memcpy ( EvolvedSounds, &PlayCasterSounds_Parms.EvolvedSounds, 0xC );
};

// Function SFXGame.sfxpowercustomaction.PlayDetonationEffects
// [0x00024002] 
// Parameters infos:
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// struct FVector                 ImpactNormal                   ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::PlayDetonationEffects ( struct FVector ImpactLocation, struct FVector ImpactNormal, class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnPlayDetonationEffects = NULL;

	if ( ! pFnPlayDetonationEffects )
		pFnPlayDetonationEffects = (UFunction*) UObject::GObjObjects()->Data[ 82095 ];

	Usfxpowercustomaction_combatdroneshock_execPlayDetonationEffects_Parms PlayDetonationEffects_Parms;
	memcpy ( &PlayDetonationEffects_Parms.ImpactLocation, &ImpactLocation, 0xC );
	memcpy ( &PlayDetonationEffects_Parms.ImpactNormal, &ImpactNormal, 0xC );
	PlayDetonationEffects_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnPlayDetonationEffects, &PlayDetonationEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayReleaseEffects
// [0x00820002] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::PlayReleaseEffects ( )
{
	static UFunction* pFnPlayReleaseEffects = NULL;

	if ( ! pFnPlayReleaseEffects )
		pFnPlayReleaseEffects = (UFunction*) UObject::GObjObjects()->Data[ 82091 ];

	Usfxpowercustomaction_combatdroneshock_execPlayReleaseEffects_Parms PlayReleaseEffects_Parms;

	this->ProcessEvent ( pFnPlayReleaseEffects, &PlayReleaseEffects_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.OnImpact
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 82084 ];

	Usfxpowercustomaction_combatdroneshock_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetImpactForce
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

float Usfxpowercustomaction_combatdroneshock::GetImpactForce ( class AActor* oImpacted )
{
	static UFunction* pFnGetImpactForce = NULL;

	if ( ! pFnGetImpactForce )
		pFnGetImpactForce = (UFunction*) UObject::GObjObjects()->Data[ 82081 ];

	Usfxpowercustomaction_combatdroneshock_execGetImpactForce_Parms GetImpactForce_Parms;
	GetImpactForce_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactForce, &GetImpactForce_Parms, NULL );

	return GetImpactForce_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetNonRagdollDamageType
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* Usfxpowercustomaction_combatdroneshock::GetNonRagdollDamageType ( )
{
	static UFunction* pFnGetNonRagdollDamageType = NULL;

	if ( ! pFnGetNonRagdollDamageType )
		pFnGetNonRagdollDamageType = (UFunction*) UObject::GObjObjects()->Data[ 82078 ];

	Usfxpowercustomaction_combatdroneshock_execGetNonRagdollDamageType_Parms GetNonRagdollDamageType_Parms;

	this->ProcessEvent ( pFnGetNonRagdollDamageType, &GetNonRagdollDamageType_Parms, NULL );

	return GetNonRagdollDamageType_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetImpactDamage
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm | CPF_OutParm )

float Usfxpowercustomaction_combatdroneshock::GetImpactDamage ( class AActor* oImpacted, class UClass** DamageType )
{
	static UFunction* pFnGetImpactDamage = NULL;

	if ( ! pFnGetImpactDamage )
		pFnGetImpactDamage = (UFunction*) UObject::GObjObjects()->Data[ 82073 ];

	Usfxpowercustomaction_combatdroneshock_execGetImpactDamage_Parms GetImpactDamage_Parms;
	GetImpactDamage_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactDamage, &GetImpactDamage_Parms, NULL );

	if ( DamageType )
		*DamageType = GetImpactDamage_Parms.DamageType;

	return GetImpactDamage_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.DoAreaExplosionForActor
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 location                       ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          fForce                         ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// int                            MaxRagdollOverride             ( CPF_Parm )
// struct FScriptDelegate         ImpactCallback                 ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  MaxRagdollDmgTypeOverride      ( CPF_OptionalParm | CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::DoAreaExplosionForActor ( class AActor* oActor, struct FVector location, int ImpactCount, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxRagdollOverride, struct FScriptDelegate ImpactCallback, class UClass* MaxRagdollDmgTypeOverride )
{
	static UFunction* pFnDoAreaExplosionForActor = NULL;

	if ( ! pFnDoAreaExplosionForActor )
		pFnDoAreaExplosionForActor = (UFunction*) UObject::GObjObjects()->Data[ 67390 ];

	Usfxpowercustomaction_combatdroneshock_execDoAreaExplosionForActor_Parms DoAreaExplosionForActor_Parms;
	DoAreaExplosionForActor_Parms.oActor = oActor;
	memcpy ( &DoAreaExplosionForActor_Parms.location, &location, 0xC );
	DoAreaExplosionForActor_Parms.ImpactCount = ImpactCount;
	DoAreaExplosionForActor_Parms.fDamage = fDamage;
	DoAreaExplosionForActor_Parms.DamageType = DamageType;
	DoAreaExplosionForActor_Parms.fForce = fForce;
	memcpy ( &DoAreaExplosionForActor_Parms.Param, &Param, 0x20 );
	DoAreaExplosionForActor_Parms.MaxRagdollOverride = MaxRagdollOverride;
	memcpy ( &DoAreaExplosionForActor_Parms.ImpactCallback, &ImpactCallback, 0xC );
	DoAreaExplosionForActor_Parms.MaxRagdollDmgTypeOverride = MaxRagdollDmgTypeOverride;

	this->ProcessEvent ( pFnDoAreaExplosionForActor, &DoAreaExplosionForActor_Parms, NULL );

	return DoAreaExplosionForActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.AreaExplosion
// [0x00024002] 
// Parameters infos:
// struct FVector                 location                       ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          fForce                         ( CPF_Parm )
// struct FAreaEffectParameters   Param                          ( CPF_Parm )
// int                            MaxImpactCount                 ( CPF_Parm )
// struct FScriptDelegate         ImpactCallback                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            MaxRagdollOverride             ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  MaxRagdollDmgTypeOverride      ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::AreaExplosion ( struct FVector location, float fRadius, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxImpactCount, struct FScriptDelegate ImpactCallback, int MaxRagdollOverride, class UClass* MaxRagdollDmgTypeOverride )
{
	static UFunction* pFnAreaExplosion = NULL;

	if ( ! pFnAreaExplosion )
		pFnAreaExplosion = (UFunction*) UObject::GObjObjects()->Data[ 82042 ];

	Usfxpowercustomaction_combatdroneshock_execAreaExplosion_Parms AreaExplosion_Parms;
	memcpy ( &AreaExplosion_Parms.location, &location, 0xC );
	AreaExplosion_Parms.fRadius = fRadius;
	AreaExplosion_Parms.fDamage = fDamage;
	AreaExplosion_Parms.DamageType = DamageType;
	AreaExplosion_Parms.fForce = fForce;
	memcpy ( &AreaExplosion_Parms.Param, &Param, 0x20 );
	AreaExplosion_Parms.MaxImpactCount = MaxImpactCount;
	memcpy ( &AreaExplosion_Parms.ImpactCallback, &ImpactCallback, 0xC );
	AreaExplosion_Parms.MaxRagdollOverride = MaxRagdollOverride;
	AreaExplosion_Parms.MaxRagdollDmgTypeOverride = MaxRagdollDmgTypeOverride;

	this->ProcessEvent ( pFnAreaExplosion, &AreaExplosion_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerSubsequentImpact
// [0x00024000] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 82035 ];

	Usfxpowercustomaction_combatdroneshock_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoPowerComboImpact
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// float                          PowerRank                      ( CPF_Parm )
// int                            PowerComboTypeUniqueID         ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ClientDoPowerComboImpact ( class AActor* oActor, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags )
{
	static UFunction* pFnClientDoPowerComboImpact = NULL;

	if ( ! pFnClientDoPowerComboImpact )
		pFnClientDoPowerComboImpact = (UFunction*) UObject::GObjObjects()->Data[ 53812 ];

	Usfxpowercustomaction_combatdroneshock_execClientDoPowerComboImpact_Parms ClientDoPowerComboImpact_Parms;
	ClientDoPowerComboImpact_Parms.oActor = oActor;
	ClientDoPowerComboImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerComboImpact_Parms.PowerRank = PowerRank;
	ClientDoPowerComboImpact_Parms.PowerComboTypeUniqueID = PowerComboTypeUniqueID;
	ClientDoPowerComboImpact_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnClientDoPowerComboImpact, &ClientDoPowerComboImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 82022 ];

	Usfxpowercustomaction_combatdroneshock_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.DoPowerDetonatedForActor
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            nImpactCount                   ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::DoPowerDetonatedForActor ( class AActor* oActor, struct FVector HitLocation, struct FVector HitNormal, int nImpactCount, unsigned long bFirstTarget, class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnDoPowerDetonatedForActor = NULL;

	if ( ! pFnDoPowerDetonatedForActor )
		pFnDoPowerDetonatedForActor = (UFunction*) UObject::GObjObjects()->Data[ 82002 ];

	Usfxpowercustomaction_combatdroneshock_execDoPowerDetonatedForActor_Parms DoPowerDetonatedForActor_Parms;
	DoPowerDetonatedForActor_Parms.oActor = oActor;
	memcpy ( &DoPowerDetonatedForActor_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoPowerDetonatedForActor_Parms.HitNormal, &HitNormal, 0xC );
	DoPowerDetonatedForActor_Parms.nImpactCount = nImpactCount;
	DoPowerDetonatedForActor_Parms.bFirstTarget = bFirstTarget;
	DoPowerDetonatedForActor_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnDoPowerDetonatedForActor, &DoPowerDetonatedForActor_Parms, NULL );

	return DoPowerDetonatedForActor_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.OnPowerDetonated
// [0x00024002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor )
{
	static UFunction* pFnOnPowerDetonated = NULL;

	if ( ! pFnOnPowerDetonated )
		pFnOnPowerDetonated = (UFunction*) UObject::GObjObjects()->Data[ 81986 ];

	Usfxpowercustomaction_combatdroneshock_execOnPowerDetonated_Parms OnPowerDetonated_Parms;
	memcpy ( &OnPowerDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerDetonated_Parms.HitNormal, &HitNormal, 0xC );
	OnPowerDetonated_Parms.oProjectile = oProjectile;
	OnPowerDetonated_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnOnPowerDetonated, &OnPowerDetonated_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseBuffPower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::ReleaseBuffPower ( )
{
	static UFunction* pFnReleaseBuffPower = NULL;

	if ( ! pFnReleaseBuffPower )
		pFnReleaseBuffPower = (UFunction*) UObject::GObjObjects()->Data[ 81980 ];

	Usfxpowercustomaction_combatdroneshock_execReleaseBuffPower_Parms ReleaseBuffPower_Parms;

	this->ProcessEvent ( pFnReleaseBuffPower, &ReleaseBuffPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseMeleePower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::ReleaseMeleePower ( )
{
	static UFunction* pFnReleaseMeleePower = NULL;

	if ( ! pFnReleaseMeleePower )
		pFnReleaseMeleePower = (UFunction*) UObject::GObjObjects()->Data[ 81979 ];

	Usfxpowercustomaction_combatdroneshock_execReleaseMeleePower_Parms ReleaseMeleePower_Parms;

	this->ProcessEvent ( pFnReleaseMeleePower, &ReleaseMeleePower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseInstantPower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::ReleaseInstantPower ( )
{
	static UFunction* pFnReleaseInstantPower = NULL;

	if ( ! pFnReleaseInstantPower )
		pFnReleaseInstantPower = (UFunction*) UObject::GObjObjects()->Data[ 81974 ];

	Usfxpowercustomaction_combatdroneshock_execReleaseInstantPower_Parms ReleaseInstantPower_Parms;

	this->ProcessEvent ( pFnReleaseInstantPower, &ReleaseInstantPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.OnClientPowerProjectileSpawned
// [0x00020002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* NewProjectile                  ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::OnClientPowerProjectileSpawned ( class ASFXProjectile_PowerCustomAction* NewProjectile )
{
	static UFunction* pFnOnClientPowerProjectileSpawned = NULL;

	if ( ! pFnOnClientPowerProjectileSpawned )
		pFnOnClientPowerProjectileSpawned = (UFunction*) UObject::GObjObjects()->Data[ 81971 ];

	Usfxpowercustomaction_combatdroneshock_execOnClientPowerProjectileSpawned_Parms OnClientPowerProjectileSpawned_Parms;
	OnClientPowerProjectileSpawned_Parms.NewProjectile = NewProjectile;

	this->ProcessEvent ( pFnOnClientPowerProjectileSpawned, &OnClientPowerProjectileSpawned_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ReleaseProjectilePower
// [0x00020002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXProjectile_PowerCustomAction* Usfxpowercustomaction_combatdroneshock::ReleaseProjectilePower ( )
{
	static UFunction* pFnReleaseProjectilePower = NULL;

	if ( ! pFnReleaseProjectilePower )
		pFnReleaseProjectilePower = (UFunction*) UObject::GObjObjects()->Data[ 81956 ];

	Usfxpowercustomaction_combatdroneshock_execReleaseProjectilePower_Parms ReleaseProjectilePower_Parms;

	this->ProcessEvent ( pFnReleaseProjectilePower, &ReleaseProjectilePower_Parms, NULL );

	return ReleaseProjectilePower_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetProjectileAttachPoint
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AttachPoint                    ( CPF_Parm | CPF_OutParm )

bool Usfxpowercustomaction_combatdroneshock::GetProjectileAttachPoint ( struct FVector* AttachPoint )
{
	static UFunction* pFnGetProjectileAttachPoint = NULL;

	if ( ! pFnGetProjectileAttachPoint )
		pFnGetProjectileAttachPoint = (UFunction*) UObject::GObjObjects()->Data[ 55631 ];

	Usfxpowercustomaction_combatdroneshock_execGetProjectileAttachPoint_Parms GetProjectileAttachPoint_Parms;

	this->ProcessEvent ( pFnGetProjectileAttachPoint, &GetProjectileAttachPoint_Parms, NULL );

	if ( AttachPoint )
		memcpy ( AttachPoint, &GetProjectileAttachPoint_Parms.AttachPoint, 0xC );

	return GetProjectileAttachPoint_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.ReleasePower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::ReleasePower ( )
{
	static UFunction* pFnReleasePower = NULL;

	if ( ! pFnReleasePower )
		pFnReleasePower = (UFunction*) UObject::GObjObjects()->Data[ 81949 ];

	Usfxpowercustomaction_combatdroneshock_execReleasePower_Parms ReleasePower_Parms;

	this->ProcessEvent ( pFnReleasePower, &ReleasePower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ResetPowerCooldown
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::ResetPowerCooldown ( )
{
	static UFunction* pFnResetPowerCooldown = NULL;

	if ( ! pFnResetPowerCooldown )
		pFnResetPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81948 ];

	Usfxpowercustomaction_combatdroneshock_execResetPowerCooldown_Parms ResetPowerCooldown_Parms;

	this->ProcessEvent ( pFnResetPowerCooldown, &ResetPowerCooldown_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartPowerCooldown
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::StartPowerCooldown ( )
{
	static UFunction* pFnStartPowerCooldown = NULL;

	if ( ! pFnStartPowerCooldown )
		pFnStartPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81945 ];

	Usfxpowercustomaction_combatdroneshock_execStartPowerCooldown_Parms StartPowerCooldown_Parms;

	this->ProcessEvent ( pFnStartPowerCooldown, &StartPowerCooldown_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.GetPowerCooldown
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float Usfxpowercustomaction_combatdroneshock::GetPowerCooldown ( )
{
	static UFunction* pFnGetPowerCooldown = NULL;

	if ( ! pFnGetPowerCooldown )
		pFnGetPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 81943 ];

	Usfxpowercustomaction_combatdroneshock_execGetPowerCooldown_Parms GetPowerCooldown_Parms;

	this->ProcessEvent ( pFnGetPowerCooldown, &GetPowerCooldown_Parms, NULL );

	return GetPowerCooldown_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.TickCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::eventTickCustomAction ( float fDeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81938 ];

	Usfxpowercustomaction_combatdroneshock_eventTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void Usfxpowercustomaction_combatdroneshock::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 81932 ];

	Usfxpowercustomaction_combatdroneshock_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81926 ];

	Usfxpowercustomaction_combatdroneshock_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.EndThisCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::EndThisCustomAction ( )
{
	static UFunction* pFnEndThisCustomAction = NULL;

	if ( ! pFnEndThisCustomAction )
		pFnEndThisCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81925 ];

	Usfxpowercustomaction_combatdroneshock_execEndThisCustomAction_Parms EndThisCustomAction_Parms;

	this->ProcessEvent ( pFnEndThisCustomAction, &EndThisCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.PlayBodyStance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBodyStance             BodyStance                     ( CPF_Parm | CPF_NeedCtorLink )
// float                          fStanceBlendInTime             ( CPF_Parm )
// float                          fStanceBlendOutTime            ( CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::PlayBodyStance ( struct FBodyStance BodyStance, float fStanceBlendInTime, float fStanceBlendOutTime )
{
	static UFunction* pFnPlayBodyStance = NULL;

	if ( ! pFnPlayBodyStance )
		pFnPlayBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 81917 ];

	Usfxpowercustomaction_combatdroneshock_execPlayBodyStance_Parms PlayBodyStance_Parms;
	memcpy ( &PlayBodyStance_Parms.BodyStance, &BodyStance, 0xC );
	PlayBodyStance_Parms.fStanceBlendInTime = fStanceBlendInTime;
	PlayBodyStance_Parms.fStanceBlendOutTime = fStanceBlendOutTime;

	this->ProcessEvent ( pFnPlayBodyStance, &PlayBodyStance_Parms, NULL );

	return PlayBodyStance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.StartCastAnimations
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::StartCastAnimations ( )
{
	static UFunction* pFnStartCastAnimations = NULL;

	if ( ! pFnStartCastAnimations )
		pFnStartCastAnimations = (UFunction*) UObject::GObjObjects()->Data[ 81911 ];

	Usfxpowercustomaction_combatdroneshock_execStartCastAnimations_Parms StartCastAnimations_Parms;

	this->ProcessEvent ( pFnStartCastAnimations, &StartCastAnimations_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartPower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::StartPower ( )
{
	static UFunction* pFnStartPower = NULL;

	if ( ! pFnStartPower )
		pFnStartPower = (UFunction*) UObject::GObjObjects()->Data[ 81904 ];

	Usfxpowercustomaction_combatdroneshock_execStartPower_Parms StartPower_Parms;

	this->ProcessEvent ( pFnStartPower, &StartPower_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_combatdroneshock::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81892 ];

	Usfxpowercustomaction_combatdroneshock_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.sfxpowercustomaction.ChangeCoverAction
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxpowercustomaction_combatdroneshock::ChangeCoverAction ( )
{
	static UFunction* pFnChangeCoverAction = NULL;

	if ( ! pFnChangeCoverAction )
		pFnChangeCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 81887 ];

	Usfxpowercustomaction_combatdroneshock_execChangeCoverAction_Parms ChangeCoverAction_Parms;

	this->ProcessEvent ( pFnChangeCoverAction, &ChangeCoverAction_Parms, NULL );

	return ChangeCoverAction_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetCurrentBodyStance
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance Usfxpowercustomaction_combatdroneshock::GetCurrentBodyStance ( )
{
	static UFunction* pFnGetCurrentBodyStance = NULL;

	if ( ! pFnGetCurrentBodyStance )
		pFnGetCurrentBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 81884 ];

	Usfxpowercustomaction_combatdroneshock_execGetCurrentBodyStance_Parms GetCurrentBodyStance_Parms;

	this->ProcessEvent ( pFnGetCurrentBodyStance, &GetCurrentBodyStance_Parms, NULL );

	return GetCurrentBodyStance_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.LoadAnimSet
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxpowercustomaction_combatdroneshock::LoadAnimSet ( )
{
	static UFunction* pFnLoadAnimSet = NULL;

	if ( ! pFnLoadAnimSet )
		pFnLoadAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 81880 ];

	Usfxpowercustomaction_combatdroneshock_execLoadAnimSet_Parms LoadAnimSet_Parms;

	this->ProcessEvent ( pFnLoadAnimSet, &LoadAnimSet_Parms, NULL );

	return LoadAnimSet_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.CanUsePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::CanUsePower ( class AActor* oTarget )
{
	static UFunction* pFnCanUsePower = NULL;

	if ( ! pFnCanUsePower )
		pFnCanUsePower = (UFunction*) UObject::GObjObjects()->Data[ 55613 ];

	Usfxpowercustomaction_combatdroneshock_execCanUsePower_Parms CanUsePower_Parms;
	CanUsePower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanUsePower, &CanUsePower_Parms, NULL );

	return CanUsePower_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool Usfxpowercustomaction_combatdroneshock::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 81868 ];

	Usfxpowercustomaction_combatdroneshock_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function SFXGame.sfxpowercustomaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxpowercustomaction_combatdroneshock::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 81862 ];

	Usfxpowercustomaction_combatdroneshock_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.sfxpawn_combatdrone.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void Asfxpawn_combatdrone::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 106821 ];

	Asfxpawn_combatdrone_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_combatdrone.TakeDamage
// [0x00024102] 
// Parameters infos:
// float                          DamageAmount                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void Asfxpawn_combatdrone::TakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 106830 ];

	Asfxpawn_combatdrone_execTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageAmount = DamageAmount;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_combatdrone.StartDroneVFX
// [0x00820103] ( FUNC_Final )
// Parameters infos:

void Asfxpawn_combatdrone::StartDroneVFX ( )
{
	static UFunction* pFnStartDroneVFX = NULL;

	if ( ! pFnStartDroneVFX )
		pFnStartDroneVFX = (UFunction*) UObject::GObjObjects()->Data[ 106838 ];

	Asfxpawn_combatdrone_execStartDroneVFX_Parms StartDroneVFX_Parms;

	this->ProcessEvent ( pFnStartDroneVFX, &StartDroneVFX_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_combatdrone.SetupCasterAndReplication
// [0x00020102] 
// Parameters infos:
// class AActor*                  NewCaster                      ( CPF_Parm )

void Asfxpawn_combatdrone::SetupCasterAndReplication ( class AActor* NewCaster )
{
	static UFunction* pFnSetupCasterAndReplication = NULL;

	if ( ! pFnSetupCasterAndReplication )
		pFnSetupCasterAndReplication = (UFunction*) UObject::GObjObjects()->Data[ 106840 ];

	Asfxpawn_combatdrone_execSetupCasterAndReplication_Parms SetupCasterAndReplication_Parms;
	SetupCasterAndReplication_Parms.NewCaster = NewCaster;

	this->ProcessEvent ( pFnSetupCasterAndReplication, &SetupCasterAndReplication_Parms, NULL );
};

// Function sfxgamecontent.sfxpawn_combatdrone.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void Asfxpawn_combatdrone::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 106843 ];

	Asfxpawn_combatdrone_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDroneBase.GetBackLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

struct FVector USFXPowerCustomAction_CombatDroneBase::GetBackLocation ( class AActor* Target )
{
	static UFunction* pFnGetBackLocation = NULL;

	if ( ! pFnGetBackLocation )
		pFnGetBackLocation = (UFunction*) UObject::GObjObjects()->Data[ 106458 ];

	USFXPowerCustomAction_CombatDroneBase_execGetBackLocation_Parms GetBackLocation_Parms;
	GetBackLocation_Parms.Target = Target;

	this->ProcessEvent ( pFnGetBackLocation, &GetBackLocation_Parms, NULL );

	return GetBackLocation_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDroneBase.GetFrontLocation
// [0x00024002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// float                          YawOffset                      ( CPF_OptionalParm | CPF_Parm )

struct FVector USFXPowerCustomAction_CombatDroneBase::GetFrontLocation ( class AActor* Target, float YawOffset )
{
	static UFunction* pFnGetFrontLocation = NULL;

	if ( ! pFnGetFrontLocation )
		pFnGetFrontLocation = (UFunction*) UObject::GObjObjects()->Data[ 106464 ];

	USFXPowerCustomAction_CombatDroneBase_execGetFrontLocation_Parms GetFrontLocation_Parms;
	GetFrontLocation_Parms.Target = Target;
	GetFrontLocation_Parms.YawOffset = YawOffset;

	this->ProcessEvent ( pFnGetFrontLocation, &GetFrontLocation_Parms, NULL );

	return GetFrontLocation_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDroneBase.IsSafeSpawnLocation
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm | CPF_OutParm )

bool USFXPowerCustomAction_CombatDroneBase::IsSafeSpawnLocation ( struct FVector* SpawnLocation )
{
	static UFunction* pFnIsSafeSpawnLocation = NULL;

	if ( ! pFnIsSafeSpawnLocation )
		pFnIsSafeSpawnLocation = (UFunction*) UObject::GObjObjects()->Data[ 106468 ];

	USFXPowerCustomAction_CombatDroneBase_execIsSafeSpawnLocation_Parms IsSafeSpawnLocation_Parms;

	this->ProcessEvent ( pFnIsSafeSpawnLocation, &IsSafeSpawnLocation_Parms, NULL );

	if ( SpawnLocation )
		memcpy ( SpawnLocation, &IsSafeSpawnLocation_Parms.SpawnLocation, 0xC );

	return IsSafeSpawnLocation_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDroneBase.OnDroneKilled
// [0x00020000] 
// Parameters infos:
// class ASFXPawn_CombatDroneBase* oDrone                         ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneBase::OnDroneKilled ( class ASFXPawn_CombatDroneBase* oDrone )
{
	static UFunction* pFnOnDroneKilled = NULL;

	if ( ! pFnOnDroneKilled )
		pFnOnDroneKilled = (UFunction*) UObject::GObjObjects()->Data[ 106470 ];

	USFXPowerCustomAction_CombatDroneBase_execOnDroneKilled_Parms OnDroneKilled_Parms;
	OnDroneKilled_Parms.oDrone = oDrone;

	this->ProcessEvent ( pFnOnDroneKilled, &OnDroneKilled_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDroneBase.DespawnDrone
// [0x00020002] 
// Parameters infos:
// class ASFXPawn_CombatDroneBase* oDrone                         ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneBase::DespawnDrone ( class ASFXPawn_CombatDroneBase* oDrone )
{
	static UFunction* pFnDespawnDrone = NULL;

	if ( ! pFnDespawnDrone )
		pFnDespawnDrone = (UFunction*) UObject::GObjObjects()->Data[ 106472 ];

	USFXPowerCustomAction_CombatDroneBase_execDespawnDrone_Parms DespawnDrone_Parms;
	DespawnDrone_Parms.oDrone = oDrone;

	this->ProcessEvent ( pFnDespawnDrone, &DespawnDrone_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDroneBase.SetupSpawnedDrone
// [0x00020002] 
// Parameters infos:
// class ASFXPawn_CombatDroneBase* SpawnedDrone                   ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneBase::SetupSpawnedDrone ( class ASFXPawn_CombatDroneBase* SpawnedDrone )
{
	static UFunction* pFnSetupSpawnedDrone = NULL;

	if ( ! pFnSetupSpawnedDrone )
		pFnSetupSpawnedDrone = (UFunction*) UObject::GObjObjects()->Data[ 106475 ];

	USFXPowerCustomAction_CombatDroneBase_execSetupSpawnedDrone_Parms SetupSpawnedDrone_Parms;
	SetupSpawnedDrone_Parms.SpawnedDrone = SpawnedDrone;

	this->ProcessEvent ( pFnSetupSpawnedDrone, &SetupSpawnedDrone_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDroneBase.SpawnDrone
// [0x00020002] 
// Parameters infos:
// class ASFXPawn_CombatDroneBase* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 location                       ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )

class ASFXPawn_CombatDroneBase* USFXPowerCustomAction_CombatDroneBase::SpawnDrone ( struct FVector location, struct FRotator Rotation )
{
	static UFunction* pFnSpawnDrone = NULL;

	if ( ! pFnSpawnDrone )
		pFnSpawnDrone = (UFunction*) UObject::GObjObjects()->Data[ 106483 ];

	USFXPowerCustomAction_CombatDroneBase_execSpawnDrone_Parms SpawnDrone_Parms;
	memcpy ( &SpawnDrone_Parms.location, &location, 0xC );
	memcpy ( &SpawnDrone_Parms.Rotation, &Rotation, 0xC );

	this->ProcessEvent ( pFnSpawnDrone, &SpawnDrone_Parms, NULL );

	return SpawnDrone_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGUI_HeavyWeaponReticle.TargetCanHitChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bCanHit                        ( CPF_Parm )

void USFXGUI_HeavyWeaponReticle::eventTargetCanHitChanged ( unsigned long bCanHit )
{
	static UFunction* pFnTargetCanHitChanged = NULL;

	if ( ! pFnTargetCanHitChanged )
		pFnTargetCanHitChanged = (UFunction*) UObject::GObjObjects()->Data[ 106895 ];

	USFXGUI_HeavyWeaponReticle_eventTargetCanHitChanged_Parms TargetCanHitChanged_Parms;
	TargetCanHitChanged_Parms.bCanHit = bCanHit;

	this->ProcessEvent ( pFnTargetCanHitChanged, &TargetCanHitChanged_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_HeavyWeaponReticle.WeaponAmmoChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nAmmo                          ( CPF_Parm )

void USFXGUI_HeavyWeaponReticle::eventWeaponAmmoChanged ( int nAmmo )
{
	static UFunction* pFnWeaponAmmoChanged = NULL;

	if ( ! pFnWeaponAmmoChanged )
		pFnWeaponAmmoChanged = (UFunction*) UObject::GObjObjects()->Data[ 106897 ];

	USFXGUI_HeavyWeaponReticle_eventWeaponAmmoChanged_Parms WeaponAmmoChanged_Parms;
	WeaponAmmoChanged_Parms.nAmmo = nAmmo;

	this->ProcessEvent ( pFnWeaponAmmoChanged, &WeaponAmmoChanged_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_HeavyWeaponReticle.OnReticleLoaded
// [0x00020002] 
// Parameters infos:

void USFXGUI_HeavyWeaponReticle::OnReticleLoaded ( )
{
	static UFunction* pFnOnReticleLoaded = NULL;

	if ( ! pFnOnReticleLoaded )
		pFnOnReticleLoaded = (UFunction*) UObject::GObjObjects()->Data[ 106900 ];

	USFXGUI_HeavyWeaponReticle_execOnReticleLoaded_Parms OnReticleLoaded_Parms;

	this->ProcessEvent ( pFnOnReticleLoaded, &OnReticleLoaded_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_HeavyWeaponReticle.PerformReticleHide
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInstant                       ( CPF_Parm )

void USFXGUI_HeavyWeaponReticle::eventPerformReticleHide ( unsigned long bInstant )
{
	static UFunction* pFnPerformReticleHide = NULL;

	if ( ! pFnPerformReticleHide )
		pFnPerformReticleHide = (UFunction*) UObject::GObjObjects()->Data[ 106902 ];

	USFXGUI_HeavyWeaponReticle_eventPerformReticleHide_Parms PerformReticleHide_Parms;
	PerformReticleHide_Parms.bInstant = bInstant;

	this->ProcessEvent ( pFnPerformReticleHide, &PerformReticleHide_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_HeavyWeaponReticle.PerformReticleShow
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInstant                       ( CPF_Parm )

void USFXGUI_HeavyWeaponReticle::eventPerformReticleShow ( unsigned long bInstant )
{
	static UFunction* pFnPerformReticleShow = NULL;

	if ( ! pFnPerformReticleShow )
		pFnPerformReticleShow = (UFunction*) UObject::GObjObjects()->Data[ 106905 ];

	USFXGUI_HeavyWeaponReticle_eventPerformReticleShow_Parms PerformReticleShow_Parms;
	PerformReticleShow_Parms.bInstant = bInstant;

	this->ProcessEvent ( pFnPerformReticleShow, &PerformReticleShow_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponVFXChange.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponVFXChange::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 106908 ];

	USFXGameEffect_WeaponVFXChange_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponVFXChange.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponVFXChange::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 106917 ];

	USFXGameEffect_WeaponVFXChange_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.sfxgameeffect_powercombo_electric.OnImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxgameeffect_powercombo_electric::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 106976 ];

	Usfxgameeffect_powercombo_electric_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGameEffect_IgnorePawn.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_IgnorePawn::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 107020 ];

	USFXGameEffect_IgnorePawn_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_IgnorePawn.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_IgnorePawn::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107023 ];

	USFXGameEffect_IgnorePawn_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.sfxgameeffect_powercombo_fire.OnImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxgameeffect_powercombo_fire::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 106953 ];

	Usfxgameeffect_powercombo_fire_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxgameeffect_powercombo_fire.OnPowerComboDetonated
// [0x00020002] 
// Parameters infos:
// class Usfxpowercustomaction*   DetonationPower                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void Usfxgameeffect_powercombo_fire::OnPowerComboDetonated ( class Usfxpowercustomaction* DetonationPower, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnPowerComboDetonated = NULL;

	if ( ! pFnOnPowerComboDetonated )
		pFnOnPowerComboDetonated = (UFunction*) UObject::GObjObjects()->Data[ 106958 ];

	Usfxgameeffect_powercombo_fire_execOnPowerComboDetonated_Parms OnPowerComboDetonated_Parms;
	OnPowerComboDetonated_Parms.DetonationPower = DetonationPower;
	memcpy ( &OnPowerComboDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerComboDetonated_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnPowerComboDetonated, &OnPowerComboDetonated_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_FireDamageOverTime.DoDamage
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_FireDamageOverTime::DoDamage ( )
{
	static UFunction* pFnDoDamage = NULL;

	if ( ! pFnDoDamage )
		pFnDoDamage = (UFunction*) UObject::GObjObjects()->Data[ 107036 ];

	USFXGameEffect_FireDamageOverTime_execDoDamage_Parms DoDamage_Parms;

	this->ProcessEvent ( pFnDoDamage, &DoDamage_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_FireDamageOverTime.AddFireDamage
// [0x00020002] 
// Parameters infos:
// float                          AddedDamage                    ( CPF_Parm )
// float                          NewDuration                    ( CPF_Parm )

void USFXGameEffect_FireDamageOverTime::AddFireDamage ( float AddedDamage, float NewDuration )
{
	static UFunction* pFnAddFireDamage = NULL;

	if ( ! pFnAddFireDamage )
		pFnAddFireDamage = (UFunction*) UObject::GObjObjects()->Data[ 107044 ];

	USFXGameEffect_FireDamageOverTime_execAddFireDamage_Parms AddFireDamage_Parms;
	AddFireDamage_Parms.AddedDamage = AddedDamage;
	AddFireDamage_Parms.NewDuration = NewDuration;

	this->ProcessEvent ( pFnAddFireDamage, &AddFireDamage_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_FireDamageOverTime.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_FireDamageOverTime::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107047 ];

	USFXGameEffect_FireDamageOverTime_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_ElectricComboBeam.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_ElectricComboBeam::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 107055 ];

	USFXGameEffect_ElectricComboBeam_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_ElectricComboBeam.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_ElectricComboBeam::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 107057 ];

	USFXGameEffect_ElectricComboBeam_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_ElectricComboBeam.PlayBeamEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UParticleSystemComponent* PS                             ( CPF_Parm | CPF_EditInline )
// struct FVector                 TargetLocation                 ( CPF_Parm )

void USFXGameEffect_ElectricComboBeam::PlayBeamEffect ( class UParticleSystemComponent* PS, struct FVector TargetLocation )
{
	static UFunction* pFnPlayBeamEffect = NULL;

	if ( ! pFnPlayBeamEffect )
		pFnPlayBeamEffect = (UFunction*) UObject::GObjObjects()->Data[ 107062 ];

	USFXGameEffect_ElectricComboBeam_execPlayBeamEffect_Parms PlayBeamEffect_Parms;
	PlayBeamEffect_Parms.PS = PS;
	memcpy ( &PlayBeamEffect_Parms.TargetLocation, &TargetLocation, 0xC );

	this->ProcessEvent ( pFnPlayBeamEffect, &PlayBeamEffect_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_ElectricComboBeam.OnApplied
// [0x00820002] 
// Parameters infos:

void USFXGameEffect_ElectricComboBeam::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107072 ];

	USFXGameEffect_ElectricComboBeam_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.sfxgameeffect_powercombo_cryo.OnImpact
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxgameeffect_powercombo_cryo::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 107000 ];

	Usfxgameeffect_powercombo_cryo_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.CheckOwnerInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Attacker                       ( CPF_Parm )

class AController* USFXGameEffect_DamageImmunity::CheckOwnerInstigator ( class AController* Attacker )
{
	static UFunction* pFnCheckOwnerInstigator = NULL;

	if ( ! pFnCheckOwnerInstigator )
		pFnCheckOwnerInstigator = (UFunction*) UObject::GObjObjects()->Data[ 52269 ];

	USFXGameEffect_DamageImmunity_execCheckOwnerInstigator_Parms CheckOwnerInstigator_Parms;
	CheckOwnerInstigator_Parms.Attacker = Attacker;

	this->ProcessEvent ( pFnCheckOwnerInstigator, &CheckOwnerInstigator_Parms, NULL );

	return CheckOwnerInstigator_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.SpawnWeaponImpactVFX
// [0x00026002] 
// Parameters infos:
// class AActor*                  inInstigator                   ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )
// unsigned long                  UseImpactNormal                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  UseGodBone                     ( CPF_OptionalParm | CPF_Parm )
// float                          DrawScale                      ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_DamageImmunity::SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale )
{
	static UFunction* pFnSpawnWeaponImpactVFX = NULL;

	if ( ! pFnSpawnWeaponImpactVFX )
		pFnSpawnWeaponImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 52254 ];

	USFXGameEffect_DamageImmunity_execSpawnWeaponImpactVFX_Parms SpawnWeaponImpactVFX_Parms;
	SpawnWeaponImpactVFX_Parms.inInstigator = inInstigator;
	memcpy ( &SpawnWeaponImpactVFX_Parms.Impact, &Impact, 0x54 );
	SpawnWeaponImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;
	SpawnWeaponImpactVFX_Parms.UseImpactNormal = UseImpactNormal;
	SpawnWeaponImpactVFX_Parms.UseGodBone = UseGodBone;
	SpawnWeaponImpactVFX_Parms.DrawScale = DrawScale;

	this->ProcessEvent ( pFnSpawnWeaponImpactVFX, &SpawnWeaponImpactVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_DamageImmunity::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 52251 ];

	USFXGameEffect_DamageImmunity_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.LoadGameEffectClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GEClassName                    ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXGameEffect_DamageImmunity::LoadGameEffectClass ( struct FString GEClassName )
{
	static UFunction* pFnLoadGameEffectClass = NULL;

	if ( ! pFnLoadGameEffectClass )
		pFnLoadGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 52248 ];

	USFXGameEffect_DamageImmunity_execLoadGameEffectClass_Parms LoadGameEffectClass_Parms;
	memcpy ( &LoadGameEffectClass_Parms.GEClassName, &GEClassName, 0xC );

	this->ProcessEvent ( pFnLoadGameEffectClass, &LoadGameEffectClass_Parms, NULL );

	return LoadGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.OnUnpaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_DamageImmunity::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 52247 ];

	USFXGameEffect_DamageImmunity_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnPaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_DamageImmunity::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 52246 ];

	USFXGameEffect_DamageImmunity_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnCombatEnd
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_DamageImmunity::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	USFXGameEffect_DamageImmunity_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnRemoved
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXGameEffect_DamageImmunity::eventOnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 52244 ];

	USFXGameEffect_DamageImmunity_eventOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnUpdate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_DamageImmunity::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 52242 ];

	USFXGameEffect_DamageImmunity_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_DamageImmunity::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	USFXGameEffect_DamageImmunity_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.ComputeCustomEffectValue
// [0x00420000] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_DamageImmunity::ComputeCustomEffectValue ( float* Value )
{
	static UFunction* pFnComputeCustomEffectValue = NULL;

	if ( ! pFnComputeCustomEffectValue )
		pFnComputeCustomEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 52239 ];

	USFXGameEffect_DamageImmunity_execComputeCustomEffectValue_Parms ComputeCustomEffectValue_Parms;

	this->ProcessEvent ( pFnComputeCustomEffectValue, &ComputeCustomEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeCustomEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect.CheckOwnerInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Attacker                       ( CPF_Parm )

class AController* USFXGameEffect_PartBasedDamageTakenBonus::CheckOwnerInstigator ( class AController* Attacker )
{
	static UFunction* pFnCheckOwnerInstigator = NULL;

	if ( ! pFnCheckOwnerInstigator )
		pFnCheckOwnerInstigator = (UFunction*) UObject::GObjObjects()->Data[ 52269 ];

	USFXGameEffect_PartBasedDamageTakenBonus_execCheckOwnerInstigator_Parms CheckOwnerInstigator_Parms;
	CheckOwnerInstigator_Parms.Attacker = Attacker;

	this->ProcessEvent ( pFnCheckOwnerInstigator, &CheckOwnerInstigator_Parms, NULL );

	return CheckOwnerInstigator_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.SpawnWeaponImpactVFX
// [0x00026002] 
// Parameters infos:
// class AActor*                  inInstigator                   ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )
// unsigned long                  UseImpactNormal                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  UseGodBone                     ( CPF_OptionalParm | CPF_Parm )
// float                          DrawScale                      ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_PartBasedDamageTakenBonus::SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale )
{
	static UFunction* pFnSpawnWeaponImpactVFX = NULL;

	if ( ! pFnSpawnWeaponImpactVFX )
		pFnSpawnWeaponImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 52254 ];

	USFXGameEffect_PartBasedDamageTakenBonus_execSpawnWeaponImpactVFX_Parms SpawnWeaponImpactVFX_Parms;
	SpawnWeaponImpactVFX_Parms.inInstigator = inInstigator;
	memcpy ( &SpawnWeaponImpactVFX_Parms.Impact, &Impact, 0x54 );
	SpawnWeaponImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;
	SpawnWeaponImpactVFX_Parms.UseImpactNormal = UseImpactNormal;
	SpawnWeaponImpactVFX_Parms.UseGodBone = UseGodBone;
	SpawnWeaponImpactVFX_Parms.DrawScale = DrawScale;

	this->ProcessEvent ( pFnSpawnWeaponImpactVFX, &SpawnWeaponImpactVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_PartBasedDamageTakenBonus::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 52251 ];

	USFXGameEffect_PartBasedDamageTakenBonus_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.LoadGameEffectClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GEClassName                    ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXGameEffect_PartBasedDamageTakenBonus::LoadGameEffectClass ( struct FString GEClassName )
{
	static UFunction* pFnLoadGameEffectClass = NULL;

	if ( ! pFnLoadGameEffectClass )
		pFnLoadGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 52248 ];

	USFXGameEffect_PartBasedDamageTakenBonus_execLoadGameEffectClass_Parms LoadGameEffectClass_Parms;
	memcpy ( &LoadGameEffectClass_Parms.GEClassName, &GEClassName, 0xC );

	this->ProcessEvent ( pFnLoadGameEffectClass, &LoadGameEffectClass_Parms, NULL );

	return LoadGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.OnUnpaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_PartBasedDamageTakenBonus::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 52247 ];

	USFXGameEffect_PartBasedDamageTakenBonus_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnPaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_PartBasedDamageTakenBonus::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 52246 ];

	USFXGameEffect_PartBasedDamageTakenBonus_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnCombatEnd
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_PartBasedDamageTakenBonus::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	USFXGameEffect_PartBasedDamageTakenBonus_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnRemoved
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXGameEffect_PartBasedDamageTakenBonus::eventOnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 52244 ];

	USFXGameEffect_PartBasedDamageTakenBonus_eventOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnUpdate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_PartBasedDamageTakenBonus::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 52242 ];

	USFXGameEffect_PartBasedDamageTakenBonus_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_PartBasedDamageTakenBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	USFXGameEffect_PartBasedDamageTakenBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.ComputeCustomEffectValue
// [0x00420000] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PartBasedDamageTakenBonus::ComputeCustomEffectValue ( float* Value )
{
	static UFunction* pFnComputeCustomEffectValue = NULL;

	if ( ! pFnComputeCustomEffectValue )
		pFnComputeCustomEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 52239 ];

	USFXGameEffect_PartBasedDamageTakenBonus_execComputeCustomEffectValue_Parms ComputeCustomEffectValue_Parms;

	this->ProcessEvent ( pFnComputeCustomEffectValue, &ComputeCustomEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeCustomEffectValue_Parms.Value;
};

// Function sfxgamecontent.SFXGameEffect_CryoFreeze.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CryoFreeze::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 107108 ];

	USFXGameEffect_CryoFreeze_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_CryoFreeze.OnUpdate
// [0x00820002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_CryoFreeze::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 107120 ];

	USFXGameEffect_CryoFreeze_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_CryoFreeze.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CryoFreeze::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107125 ];

	USFXGameEffect_CryoFreeze_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_CryoFreeze.OnFrozenPawnDied
// [0x00120000] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )

void USFXGameEffect_CryoFreeze::OnFrozenPawnDied ( class ABioPawn* oPawn )
{
	static UFunction* pFnOnFrozenPawnDied = NULL;

	if ( ! pFnOnFrozenPawnDied )
		pFnOnFrozenPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 107127 ];

	USFXGameEffect_CryoFreeze_execOnFrozenPawnDied_Parms OnFrozenPawnDied_Parms;
	OnFrozenPawnDied_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnOnFrozenPawnDied, &OnFrozenPawnDied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_DelayedCryoFreeze.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_DelayedCryoFreeze::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 107080 ];

	USFXGameEffect_DelayedCryoFreeze_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_DelayedCryoFreeze.OnUpdate
// [0x00820002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_DelayedCryoFreeze::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 107088 ];

	USFXGameEffect_DelayedCryoFreeze_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_DelayedCryoFreeze.OnApplied
// [0x00820002] 
// Parameters infos:

void USFXGameEffect_DelayedCryoFreeze::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107095 ];

	USFXGameEffect_DelayedCryoFreeze_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_DelayedCryoFreeze.OnFrozenPawnDied
// [0x00120000] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )

void USFXGameEffect_DelayedCryoFreeze::OnFrozenPawnDied ( class ABioPawn* oPawn )
{
	static UFunction* pFnOnFrozenPawnDied = NULL;

	if ( ! pFnOnFrozenPawnDied )
		pFnOnFrozenPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 107097 ];

	USFXGameEffect_DelayedCryoFreeze_execOnFrozenPawnDied_Parms OnFrozenPawnDied_Parms;
	OnFrozenPawnDied_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnOnFrozenPawnDied, &OnFrozenPawnDied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_CryoAmmo.GetDamageVocProbabilityMod
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXGameEffect_CryoAmmo::GetDamageVocProbabilityMod ( )
{
	static UFunction* pFnGetDamageVocProbabilityMod = NULL;

	if ( ! pFnGetDamageVocProbabilityMod )
		pFnGetDamageVocProbabilityMod = (UFunction*) UObject::GObjObjects()->Data[ 107138 ];

	USFXGameEffect_CryoAmmo_execGetDamageVocProbabilityMod_Parms GetDamageVocProbabilityMod_Parms;

	this->ProcessEvent ( pFnGetDamageVocProbabilityMod, &GetDamageVocProbabilityMod_Parms, NULL );

	return GetDamageVocProbabilityMod_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGameEffect_CryoAmmo.DoFreezeEffect
// [0x00824002] 
// Parameters infos:
// class ABioPawn*                oHitPawn                       ( CPF_Parm )
// float                          fDelay                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )
// unsigned char                  ForcedResistance               ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_CryoAmmo::DoFreezeEffect ( class ABioPawn* oHitPawn, float fDelay, struct FVector HitLocation, struct FVector HitNormal, unsigned long bForced, unsigned char ForcedResistance )
{
	static UFunction* pFnDoFreezeEffect = NULL;

	if ( ! pFnDoFreezeEffect )
		pFnDoFreezeEffect = (UFunction*) UObject::GObjObjects()->Data[ 107163 ];

	USFXGameEffect_CryoAmmo_execDoFreezeEffect_Parms DoFreezeEffect_Parms;
	DoFreezeEffect_Parms.oHitPawn = oHitPawn;
	DoFreezeEffect_Parms.fDelay = fDelay;
	memcpy ( &DoFreezeEffect_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoFreezeEffect_Parms.HitNormal, &HitNormal, 0xC );
	DoFreezeEffect_Parms.bForced = bForced;
	DoFreezeEffect_Parms.ForcedResistance = ForcedResistance;

	this->ProcessEvent ( pFnDoFreezeEffect, &DoFreezeEffect_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_CryoAmmo.OnWeaponImpact
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void USFXGameEffect_CryoAmmo::OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact )
{
	static UFunction* pFnOnWeaponImpact = NULL;

	if ( ! pFnOnWeaponImpact )
		pFnOnWeaponImpact = (UFunction*) UObject::GObjObjects()->Data[ 107174 ];

	USFXGameEffect_CryoAmmo_execOnWeaponImpact_Parms OnWeaponImpact_Parms;
	OnWeaponImpact_Parms.Weapon = Weapon;
	memcpy ( &OnWeaponImpact_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnOnWeaponImpact, &OnWeaponImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_CryoAmmo.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CryoAmmo::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107177 ];

	USFXGameEffect_CryoAmmo_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDroneZap.ClientDoPowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_CombatDroneZap::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 106293 ];

	USFXPowerCustomAction_CombatDroneZap_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDroneZap.CreateZapChainEffect
// [0x00020002] 
// Parameters infos:
// class USFXGameEffect_CombatDroneZapChain* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXModule_GameEffectManager* oManager                       ( CPF_Parm )

class USFXGameEffect_CombatDroneZapChain* USFXPowerCustomAction_CombatDroneZap::CreateZapChainEffect ( class USFXModule_GameEffectManager* oManager )
{
	static UFunction* pFnCreateZapChainEffect = NULL;

	if ( ! pFnCreateZapChainEffect )
		pFnCreateZapChainEffect = (UFunction*) UObject::GObjObjects()->Data[ 106300 ];

	USFXPowerCustomAction_CombatDroneZap_execCreateZapChainEffect_Parms CreateZapChainEffect_Parms;
	CreateZapChainEffect_Parms.oManager = oManager;

	this->ProcessEvent ( pFnCreateZapChainEffect, &CreateZapChainEffect_Parms, NULL );

	return CreateZapChainEffect_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDroneZap.OnImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXPowerCustomAction_CombatDroneZap::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 106310 ];

	USFXPowerCustomAction_CombatDroneZap_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDroneZap.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXPowerCustomAction_CombatDroneZap::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 106313 ];

	USFXPowerCustomAction_CombatDroneZap_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDroneZap.GetImpactForce
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

float USFXPowerCustomAction_CombatDroneZap::GetImpactForce ( class AActor* oImpacted )
{
	static UFunction* pFnGetImpactForce = NULL;

	if ( ! pFnGetImpactForce )
		pFnGetImpactForce = (UFunction*) UObject::GObjObjects()->Data[ 106316 ];

	USFXPowerCustomAction_CombatDroneZap_execGetImpactForce_Parms GetImpactForce_Parms;
	GetImpactForce_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactForce, &GetImpactForce_Parms, NULL );

	return GetImpactForce_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_CombatDroneZap.GetImpactDamage
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm | CPF_OutParm )

float USFXPowerCustomAction_CombatDroneZap::GetImpactDamage ( class AActor* oImpacted, class UClass** DamageType )
{
	static UFunction* pFnGetImpactDamage = NULL;

	if ( ! pFnGetImpactDamage )
		pFnGetImpactDamage = (UFunction*) UObject::GObjObjects()->Data[ 106320 ];

	USFXPowerCustomAction_CombatDroneZap_execGetImpactDamage_Parms GetImpactDamage_Parms;
	GetImpactDamage_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactDamage, &GetImpactDamage_Parms, NULL );

	if ( DamageType )
		*DamageType = GetImpactDamage_Parms.DamageType;

	return GetImpactDamage_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGameEffect_CombatDroneZapChain.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CombatDroneZapChain::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 107198 ];

	USFXGameEffect_CombatDroneZapChain_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_CombatDroneZapChain.ImpactAdditionalTarget
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool USFXGameEffect_CombatDroneZapChain::ImpactAdditionalTarget ( class AActor* oActor )
{
	static UFunction* pFnImpactAdditionalTarget = NULL;

	if ( ! pFnImpactAdditionalTarget )
		pFnImpactAdditionalTarget = (UFunction*) UObject::GObjObjects()->Data[ 107203 ];

	USFXGameEffect_CombatDroneZapChain_execImpactAdditionalTarget_Parms ImpactAdditionalTarget_Parms;
	ImpactAdditionalTarget_Parms.oActor = oActor;

	this->ProcessEvent ( pFnImpactAdditionalTarget, &ImpactAdditionalTarget_Parms, NULL );

	return ImpactAdditionalTarget_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGameEffect_CombatDroneZapChain.SelectAndImpactNextTarget
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CombatDroneZapChain::SelectAndImpactNextTarget ( )
{
	static UFunction* pFnSelectAndImpactNextTarget = NULL;

	if ( ! pFnSelectAndImpactNextTarget )
		pFnSelectAndImpactNextTarget = (UFunction*) UObject::GObjObjects()->Data[ 107210 ];

	USFXGameEffect_CombatDroneZapChain_execSelectAndImpactNextTarget_Parms SelectAndImpactNextTarget_Parms;

	this->ProcessEvent ( pFnSelectAndImpactNextTarget, &SelectAndImpactNextTarget_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_CombatDroneZapChain.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_CombatDroneZapChain::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 107214 ];

	USFXGameEffect_CombatDroneZapChain_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_CombatDroneZapChain.PlayBeamEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UParticleSystemComponent* PS                             ( CPF_Parm | CPF_EditInline )
// struct FVector                 TargetLocation                 ( CPF_Parm )

void USFXGameEffect_CombatDroneZapChain::PlayBeamEffect ( class UParticleSystemComponent* PS, struct FVector TargetLocation )
{
	static UFunction* pFnPlayBeamEffect = NULL;

	if ( ! pFnPlayBeamEffect )
		pFnPlayBeamEffect = (UFunction*) UObject::GObjObjects()->Data[ 107221 ];

	USFXGameEffect_CombatDroneZapChain_execPlayBeamEffect_Parms PlayBeamEffect_Parms;
	PlayBeamEffect_Parms.PS = PS;
	memcpy ( &PlayBeamEffect_Parms.TargetLocation, &TargetLocation, 0xC );

	this->ProcessEvent ( pFnPlayBeamEffect, &PlayBeamEffect_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_CombatDroneZapChain.OnApplied
// [0x00820002] 
// Parameters infos:

void USFXGameEffect_CombatDroneZapChain::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107247 ];

	USFXGameEffect_CombatDroneZapChain_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_CombatDroneZapChain.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_CombatDroneZapChain::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 107251 ];

	USFXGameEffect_CombatDroneZapChain_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.CheckOwnerInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Attacker                       ( CPF_Parm )

class AController* USFXGameEffect_ArmorWeakness::CheckOwnerInstigator ( class AController* Attacker )
{
	static UFunction* pFnCheckOwnerInstigator = NULL;

	if ( ! pFnCheckOwnerInstigator )
		pFnCheckOwnerInstigator = (UFunction*) UObject::GObjObjects()->Data[ 52269 ];

	USFXGameEffect_ArmorWeakness_execCheckOwnerInstigator_Parms CheckOwnerInstigator_Parms;
	CheckOwnerInstigator_Parms.Attacker = Attacker;

	this->ProcessEvent ( pFnCheckOwnerInstigator, &CheckOwnerInstigator_Parms, NULL );

	return CheckOwnerInstigator_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.SpawnWeaponImpactVFX
// [0x00026002] 
// Parameters infos:
// class AActor*                  inInstigator                   ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )
// unsigned long                  UseImpactNormal                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  UseGodBone                     ( CPF_OptionalParm | CPF_Parm )
// float                          DrawScale                      ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_ArmorWeakness::SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale )
{
	static UFunction* pFnSpawnWeaponImpactVFX = NULL;

	if ( ! pFnSpawnWeaponImpactVFX )
		pFnSpawnWeaponImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 52254 ];

	USFXGameEffect_ArmorWeakness_execSpawnWeaponImpactVFX_Parms SpawnWeaponImpactVFX_Parms;
	SpawnWeaponImpactVFX_Parms.inInstigator = inInstigator;
	memcpy ( &SpawnWeaponImpactVFX_Parms.Impact, &Impact, 0x54 );
	SpawnWeaponImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;
	SpawnWeaponImpactVFX_Parms.UseImpactNormal = UseImpactNormal;
	SpawnWeaponImpactVFX_Parms.UseGodBone = UseGodBone;
	SpawnWeaponImpactVFX_Parms.DrawScale = DrawScale;

	this->ProcessEvent ( pFnSpawnWeaponImpactVFX, &SpawnWeaponImpactVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_ArmorWeakness::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 52251 ];

	USFXGameEffect_ArmorWeakness_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.LoadGameEffectClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GEClassName                    ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXGameEffect_ArmorWeakness::LoadGameEffectClass ( struct FString GEClassName )
{
	static UFunction* pFnLoadGameEffectClass = NULL;

	if ( ! pFnLoadGameEffectClass )
		pFnLoadGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 52248 ];

	USFXGameEffect_ArmorWeakness_execLoadGameEffectClass_Parms LoadGameEffectClass_Parms;
	memcpy ( &LoadGameEffectClass_Parms.GEClassName, &GEClassName, 0xC );

	this->ProcessEvent ( pFnLoadGameEffectClass, &LoadGameEffectClass_Parms, NULL );

	return LoadGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.OnUnpaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_ArmorWeakness::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 52247 ];

	USFXGameEffect_ArmorWeakness_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnPaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_ArmorWeakness::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 52246 ];

	USFXGameEffect_ArmorWeakness_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnCombatEnd
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_ArmorWeakness::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	USFXGameEffect_ArmorWeakness_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnRemoved
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXGameEffect_ArmorWeakness::eventOnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 52244 ];

	USFXGameEffect_ArmorWeakness_eventOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnUpdate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_ArmorWeakness::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 52242 ];

	USFXGameEffect_ArmorWeakness_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_ArmorWeakness::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	USFXGameEffect_ArmorWeakness_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.ComputeCustomEffectValue
// [0x00420000] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_ArmorWeakness::ComputeCustomEffectValue ( float* Value )
{
	static UFunction* pFnComputeCustomEffectValue = NULL;

	if ( ! pFnComputeCustomEffectValue )
		pFnComputeCustomEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 52239 ];

	USFXGameEffect_ArmorWeakness_execComputeCustomEffectValue_Parms ComputeCustomEffectValue_Parms;

	this->ProcessEvent ( pFnComputeCustomEffectValue, &ComputeCustomEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeCustomEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect.CheckOwnerInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Attacker                       ( CPF_Parm )

class AController* USFXGameEffect_ArmorPiercingBonus::CheckOwnerInstigator ( class AController* Attacker )
{
	static UFunction* pFnCheckOwnerInstigator = NULL;

	if ( ! pFnCheckOwnerInstigator )
		pFnCheckOwnerInstigator = (UFunction*) UObject::GObjObjects()->Data[ 52269 ];

	USFXGameEffect_ArmorPiercingBonus_execCheckOwnerInstigator_Parms CheckOwnerInstigator_Parms;
	CheckOwnerInstigator_Parms.Attacker = Attacker;

	this->ProcessEvent ( pFnCheckOwnerInstigator, &CheckOwnerInstigator_Parms, NULL );

	return CheckOwnerInstigator_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.SpawnWeaponImpactVFX
// [0x00026002] 
// Parameters infos:
// class AActor*                  inInstigator                   ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )
// unsigned long                  UseImpactNormal                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  UseGodBone                     ( CPF_OptionalParm | CPF_Parm )
// float                          DrawScale                      ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_ArmorPiercingBonus::SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale )
{
	static UFunction* pFnSpawnWeaponImpactVFX = NULL;

	if ( ! pFnSpawnWeaponImpactVFX )
		pFnSpawnWeaponImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 52254 ];

	USFXGameEffect_ArmorPiercingBonus_execSpawnWeaponImpactVFX_Parms SpawnWeaponImpactVFX_Parms;
	SpawnWeaponImpactVFX_Parms.inInstigator = inInstigator;
	memcpy ( &SpawnWeaponImpactVFX_Parms.Impact, &Impact, 0x54 );
	SpawnWeaponImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;
	SpawnWeaponImpactVFX_Parms.UseImpactNormal = UseImpactNormal;
	SpawnWeaponImpactVFX_Parms.UseGodBone = UseGodBone;
	SpawnWeaponImpactVFX_Parms.DrawScale = DrawScale;

	this->ProcessEvent ( pFnSpawnWeaponImpactVFX, &SpawnWeaponImpactVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_ArmorPiercingBonus::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 52251 ];

	USFXGameEffect_ArmorPiercingBonus_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.LoadGameEffectClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GEClassName                    ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXGameEffect_ArmorPiercingBonus::LoadGameEffectClass ( struct FString GEClassName )
{
	static UFunction* pFnLoadGameEffectClass = NULL;

	if ( ! pFnLoadGameEffectClass )
		pFnLoadGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 52248 ];

	USFXGameEffect_ArmorPiercingBonus_execLoadGameEffectClass_Parms LoadGameEffectClass_Parms;
	memcpy ( &LoadGameEffectClass_Parms.GEClassName, &GEClassName, 0xC );

	this->ProcessEvent ( pFnLoadGameEffectClass, &LoadGameEffectClass_Parms, NULL );

	return LoadGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.OnUnpaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_ArmorPiercingBonus::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 52247 ];

	USFXGameEffect_ArmorPiercingBonus_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnPaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_ArmorPiercingBonus::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 52246 ];

	USFXGameEffect_ArmorPiercingBonus_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnCombatEnd
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_ArmorPiercingBonus::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	USFXGameEffect_ArmorPiercingBonus_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnRemoved
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXGameEffect_ArmorPiercingBonus::eventOnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 52244 ];

	USFXGameEffect_ArmorPiercingBonus_eventOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnUpdate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_ArmorPiercingBonus::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 52242 ];

	USFXGameEffect_ArmorPiercingBonus_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_ArmorPiercingBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	USFXGameEffect_ArmorPiercingBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.ComputeCustomEffectValue
// [0x00420000] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_ArmorPiercingBonus::ComputeCustomEffectValue ( float* Value )
{
	static UFunction* pFnComputeCustomEffectValue = NULL;

	if ( ! pFnComputeCustomEffectValue )
		pFnComputeCustomEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 52239 ];

	USFXGameEffect_ArmorPiercingBonus_execComputeCustomEffectValue_Parms ComputeCustomEffectValue_Parms;

	this->ProcessEvent ( pFnComputeCustomEffectValue, &ComputeCustomEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeCustomEffectValue_Parms.Value;
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void Usfxgameeffect_penetrationdamagebonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	Usfxgameeffect_penetrationdamagebonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponMod::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	USFXGameEffect_WeaponMod_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PenetrationBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	USFXGameEffect_PenetrationBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.CheckOwnerInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Attacker                       ( CPF_Parm )

class AController* USFXGameEffect_ConstraintDmgBonus::CheckOwnerInstigator ( class AController* Attacker )
{
	static UFunction* pFnCheckOwnerInstigator = NULL;

	if ( ! pFnCheckOwnerInstigator )
		pFnCheckOwnerInstigator = (UFunction*) UObject::GObjObjects()->Data[ 52269 ];

	USFXGameEffect_ConstraintDmgBonus_execCheckOwnerInstigator_Parms CheckOwnerInstigator_Parms;
	CheckOwnerInstigator_Parms.Attacker = Attacker;

	this->ProcessEvent ( pFnCheckOwnerInstigator, &CheckOwnerInstigator_Parms, NULL );

	return CheckOwnerInstigator_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.SpawnWeaponImpactVFX
// [0x00026002] 
// Parameters infos:
// class AActor*                  inInstigator                   ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )
// unsigned long                  UseImpactNormal                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  UseGodBone                     ( CPF_OptionalParm | CPF_Parm )
// float                          DrawScale                      ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_ConstraintDmgBonus::SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale )
{
	static UFunction* pFnSpawnWeaponImpactVFX = NULL;

	if ( ! pFnSpawnWeaponImpactVFX )
		pFnSpawnWeaponImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 52254 ];

	USFXGameEffect_ConstraintDmgBonus_execSpawnWeaponImpactVFX_Parms SpawnWeaponImpactVFX_Parms;
	SpawnWeaponImpactVFX_Parms.inInstigator = inInstigator;
	memcpy ( &SpawnWeaponImpactVFX_Parms.Impact, &Impact, 0x54 );
	SpawnWeaponImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;
	SpawnWeaponImpactVFX_Parms.UseImpactNormal = UseImpactNormal;
	SpawnWeaponImpactVFX_Parms.UseGodBone = UseGodBone;
	SpawnWeaponImpactVFX_Parms.DrawScale = DrawScale;

	this->ProcessEvent ( pFnSpawnWeaponImpactVFX, &SpawnWeaponImpactVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_ConstraintDmgBonus::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 52251 ];

	USFXGameEffect_ConstraintDmgBonus_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.LoadGameEffectClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GEClassName                    ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXGameEffect_ConstraintDmgBonus::LoadGameEffectClass ( struct FString GEClassName )
{
	static UFunction* pFnLoadGameEffectClass = NULL;

	if ( ! pFnLoadGameEffectClass )
		pFnLoadGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 52248 ];

	USFXGameEffect_ConstraintDmgBonus_execLoadGameEffectClass_Parms LoadGameEffectClass_Parms;
	memcpy ( &LoadGameEffectClass_Parms.GEClassName, &GEClassName, 0xC );

	this->ProcessEvent ( pFnLoadGameEffectClass, &LoadGameEffectClass_Parms, NULL );

	return LoadGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.OnUnpaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_ConstraintDmgBonus::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 52247 ];

	USFXGameEffect_ConstraintDmgBonus_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnPaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_ConstraintDmgBonus::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 52246 ];

	USFXGameEffect_ConstraintDmgBonus_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnCombatEnd
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_ConstraintDmgBonus::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	USFXGameEffect_ConstraintDmgBonus_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnRemoved
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXGameEffect_ConstraintDmgBonus::eventOnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 52244 ];

	USFXGameEffect_ConstraintDmgBonus_eventOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnUpdate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_ConstraintDmgBonus::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 52242 ];

	USFXGameEffect_ConstraintDmgBonus_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_ConstraintDmgBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	USFXGameEffect_ConstraintDmgBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.ComputeCustomEffectValue
// [0x00420000] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_ConstraintDmgBonus::ComputeCustomEffectValue ( float* Value )
{
	static UFunction* pFnComputeCustomEffectValue = NULL;

	if ( ! pFnComputeCustomEffectValue )
		pFnComputeCustomEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 52239 ];

	USFXGameEffect_ConstraintDmgBonus_execComputeCustomEffectValue_Parms ComputeCustomEffectValue_Parms;

	this->ProcessEvent ( pFnComputeCustomEffectValue, &ComputeCustomEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeCustomEffectValue_Parms.Value;
};

// Function sfxgamecontent.SFXGameEffect_SpareAmmo.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_SpareAmmo::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 106921 ];

	USFXGameEffect_SpareAmmo_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_SpareAmmo.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_SpareAmmo::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 106924 ];

	USFXGameEffect_SpareAmmo_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_ArmorPiercingAmmo.OnWeaponImpact
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void USFXGameEffect_ArmorPiercingAmmo::OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact )
{
	static UFunction* pFnOnWeaponImpact = NULL;

	if ( ! pFnOnWeaponImpact )
		pFnOnWeaponImpact = (UFunction*) UObject::GObjObjects()->Data[ 107293 ];

	USFXGameEffect_ArmorPiercingAmmo_execOnWeaponImpact_Parms OnWeaponImpact_Parms;
	OnWeaponImpact_Parms.Weapon = Weapon;
	memcpy ( &OnWeaponImpact_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnOnWeaponImpact, &OnWeaponImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_ArmorPiercingAmmo.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_ArmorPiercingAmmo::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 107295 ];

	USFXGameEffect_ArmorPiercingAmmo_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_ArmorPiercingAmmo.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_ArmorPiercingAmmo::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107308 ];

	USFXGameEffect_ArmorPiercingAmmo_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_ArmorPiercingAmmo.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_ArmorPiercingAmmo::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 107313 ];

	USFXGameEffect_ArmorPiercingAmmo_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.DelayedSetWeaponPower
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXPowerCustomAction_AmmoPower::DelayedSetWeaponPower ( )
{
	static UFunction* pFnDelayedSetWeaponPower = NULL;

	if ( ! pFnDelayedSetWeaponPower )
		pFnDelayedSetWeaponPower = (UFunction*) UObject::GObjObjects()->Data[ 106495 ];

	USFXPowerCustomAction_AmmoPower_execDelayedSetWeaponPower_Parms DelayedSetWeaponPower_Parms;

	this->ProcessEvent ( pFnDelayedSetWeaponPower, &DelayedSetWeaponPower_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_AmmoPower::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 106503 ];

	USFXPowerCustomAction_AmmoPower_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.DoJoinInProgress
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_AmmoPower::DoJoinInProgress ( )
{
	static UFunction* pFnDoJoinInProgress = NULL;

	if ( ! pFnDoJoinInProgress )
		pFnDoJoinInProgress = (UFunction*) UObject::GObjObjects()->Data[ 106506 ];

	USFXPowerCustomAction_AmmoPower_execDoJoinInProgress_Parms DoJoinInProgress_Parms;

	this->ProcessEvent ( pFnDoJoinInProgress, &DoJoinInProgress_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.SetupEffect
// [0x00024000] 
// Parameters infos:
// class USFXGameEffect_AmmoPower* Effect                         ( CPF_Parm )
// class ABioPawn*                oPawn                          ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_AmmoPower::SetupEffect ( class USFXGameEffect_AmmoPower* Effect, class ABioPawn* oPawn )
{
	static UFunction* pFnSetupEffect = NULL;

	if ( ! pFnSetupEffect )
		pFnSetupEffect = (UFunction*) UObject::GObjObjects()->Data[ 106509 ];

	USFXPowerCustomAction_AmmoPower_execSetupEffect_Parms SetupEffect_Parms;
	SetupEffect_Parms.Effect = Effect;
	SetupEffect_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnSetupEffect, &SetupEffect_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.OnPowerRankIncreased
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_AmmoPower::OnPowerRankIncreased ( )
{
	static UFunction* pFnOnPowerRankIncreased = NULL;

	if ( ! pFnOnPowerRankIncreased )
		pFnOnPowerRankIncreased = (UFunction*) UObject::GObjObjects()->Data[ 106512 ];

	USFXPowerCustomAction_AmmoPower_execOnPowerRankIncreased_Parms OnPowerRankIncreased_Parms;

	this->ProcessEvent ( pFnOnPowerRankIncreased, &OnPowerRankIncreased_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ShouldUsePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomAction_AmmoPower::ShouldUsePower ( class AActor* Target, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 106521 ];

	USFXPowerCustomAction_AmmoPower_execShouldUsePower_Parms ShouldUsePower_Parms;
	ShouldUsePower_Parms.Target = Target;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePower_Parms.sOptionalInfo, 0xC );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.DoConcussiveShotSpecialImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  oImpacted                      ( CPF_Parm )
// float                          ImpactEffectDuration           ( CPF_Parm )

void USFXPowerCustomAction_AmmoPower::DoConcussiveShotSpecialImpact ( class AActor* oImpacted, float ImpactEffectDuration )
{
	static UFunction* pFnDoConcussiveShotSpecialImpact = NULL;

	if ( ! pFnDoConcussiveShotSpecialImpact )
		pFnDoConcussiveShotSpecialImpact = (UFunction*) UObject::GObjObjects()->Data[ 106524 ];

	USFXPowerCustomAction_AmmoPower_execDoConcussiveShotSpecialImpact_Parms DoConcussiveShotSpecialImpact_Parms;
	DoConcussiveShotSpecialImpact_Parms.oImpacted = oImpacted;
	DoConcussiveShotSpecialImpact_Parms.ImpactEffectDuration = ImpactEffectDuration;

	this->ProcessEvent ( pFnDoConcussiveShotSpecialImpact, &DoConcussiveShotSpecialImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ClientDoPowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_AmmoPower::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 106531 ];

	USFXPowerCustomAction_AmmoPower_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ReplicateConcussiveShotSpecialImpact
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oImpacted                      ( CPF_Parm )
// float                          DurationOfEffect               ( CPF_Parm )

void USFXPowerCustomAction_AmmoPower::ReplicateConcussiveShotSpecialImpact ( class ABioPawn* oImpacted, float DurationOfEffect )
{
	static UFunction* pFnReplicateConcussiveShotSpecialImpact = NULL;

	if ( ! pFnReplicateConcussiveShotSpecialImpact )
		pFnReplicateConcussiveShotSpecialImpact = (UFunction*) UObject::GObjObjects()->Data[ 106534 ];

	USFXPowerCustomAction_AmmoPower_execReplicateConcussiveShotSpecialImpact_Parms ReplicateConcussiveShotSpecialImpact_Parms;
	ReplicateConcussiveShotSpecialImpact_Parms.oImpacted = oImpacted;
	ReplicateConcussiveShotSpecialImpact_Parms.DurationOfEffect = DurationOfEffect;

	this->ProcessEvent ( pFnReplicateConcussiveShotSpecialImpact, &ReplicateConcussiveShotSpecialImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ConcussiveShotCustomImpact
// [0x00020000] 
// Parameters infos:
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void USFXPowerCustomAction_AmmoPower::ConcussiveShotCustomImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnConcussiveShotCustomImpact = NULL;

	if ( ! pFnConcussiveShotCustomImpact )
		pFnConcussiveShotCustomImpact = (UFunction*) UObject::GObjObjects()->Data[ 106540 ];

	USFXPowerCustomAction_AmmoPower_execConcussiveShotCustomImpact_Parms ConcussiveShotCustomImpact_Parms;
	ConcussiveShotCustomImpact_Parms.Resistance = Resistance;
	ConcussiveShotCustomImpact_Parms.oImpacted = oImpacted;
	ConcussiveShotCustomImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &ConcussiveShotCustomImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ConcussiveShotCustomImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnConcussiveShotCustomImpact, &ConcussiveShotCustomImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ApplyPowerEffects
// [0x00020000] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// class ASFXWeapon*              oWeapon                        ( CPF_Parm )

void USFXPowerCustomAction_AmmoPower::ApplyPowerEffects ( class ABioPawn* oPawn, class ASFXWeapon* oWeapon )
{
	static UFunction* pFnApplyPowerEffects = NULL;

	if ( ! pFnApplyPowerEffects )
		pFnApplyPowerEffects = (UFunction*) UObject::GObjObjects()->Data[ 106543 ];

	USFXPowerCustomAction_AmmoPower_execApplyPowerEffects_Parms ApplyPowerEffects_Parms;
	ApplyPowerEffects_Parms.oPawn = oPawn;
	ApplyPowerEffects_Parms.oWeapon = oWeapon;

	this->ProcessEvent ( pFnApplyPowerEffects, &ApplyPowerEffects_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.SetWeaponPower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )
// class ASFXWeapon*              oWeapon                        ( CPF_Parm )
// unsigned long                  bOverrideCurrentPower          ( CPF_Parm )

bool USFXPowerCustomAction_AmmoPower::SetWeaponPower ( class ABioPawn* oPawn, class ASFXWeapon* oWeapon, unsigned long bOverrideCurrentPower )
{
	static UFunction* pFnSetWeaponPower = NULL;

	if ( ! pFnSetWeaponPower )
		pFnSetWeaponPower = (UFunction*) UObject::GObjObjects()->Data[ 106557 ];

	USFXPowerCustomAction_AmmoPower_execSetWeaponPower_Parms SetWeaponPower_Parms;
	SetWeaponPower_Parms.oPawn = oPawn;
	SetWeaponPower_Parms.oWeapon = oWeapon;
	SetWeaponPower_Parms.bOverrideCurrentPower = bOverrideCurrentPower;

	this->ProcessEvent ( pFnSetWeaponPower, &SetWeaponPower_Parms, NULL );

	return SetWeaponPower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.DeferedSetWeaponPower
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_AmmoPower::DeferedSetWeaponPower ( )
{
	static UFunction* pFnDeferedSetWeaponPower = NULL;

	if ( ! pFnDeferedSetWeaponPower )
		pFnDeferedSetWeaponPower = (UFunction*) UObject::GObjObjects()->Data[ 106558 ];

	USFXPowerCustomAction_AmmoPower_execDeferedSetWeaponPower_Parms DeferedSetWeaponPower_Parms;

	this->ProcessEvent ( pFnDeferedSetWeaponPower, &DeferedSetWeaponPower_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.OnImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXPowerCustomAction_AmmoPower::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 106566 ];

	USFXPowerCustomAction_AmmoPower_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.ReloadAmmoPower
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void USFXPowerCustomAction_AmmoPower::ReloadAmmoPower ( class ABioPawn* Target, class ASFXWeapon* Weapon )
{
	static UFunction* pFnReloadAmmoPower = NULL;

	if ( ! pFnReloadAmmoPower )
		pFnReloadAmmoPower = (UFunction*) UObject::GObjObjects()->Data[ 106569 ];

	USFXPowerCustomAction_AmmoPower_execReloadAmmoPower_Parms ReloadAmmoPower_Parms;
	ReloadAmmoPower_Parms.Target = Target;
	ReloadAmmoPower_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnReloadAmmoPower, &ReloadAmmoPower_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.StopOmniTool
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXPowerCustomAction_AmmoPower::StopOmniTool ( )
{
	static UFunction* pFnStopOmniTool = NULL;

	if ( ! pFnStopOmniTool )
		pFnStopOmniTool = (UFunction*) UObject::GObjObjects()->Data[ 106570 ];

	USFXPowerCustomAction_AmmoPower_execStopOmniTool_Parms StopOmniTool_Parms;

	this->ProcessEvent ( pFnStopOmniTool, &StopOmniTool_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_AmmoPower::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 106576 ];

	USFXPowerCustomAction_AmmoPower_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.CanUsePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool USFXPowerCustomAction_AmmoPower::CanUsePower ( class AActor* oTarget )
{
	static UFunction* pFnCanUsePower = NULL;

	if ( ! pFnCanUsePower )
		pFnCanUsePower = (UFunction*) UObject::GObjObjects()->Data[ 106582 ];

	USFXPowerCustomAction_AmmoPower_execCanUsePower_Parms CanUsePower_Parms;
	CanUsePower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanUsePower, &CanUsePower_Parms, NULL );

	return CanUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_AmmoPower.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXPowerCustomAction_AmmoPower::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 106586 ];

	USFXPowerCustomAction_AmmoPower_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_AmmoPower.OnUpdate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_AmmoPower::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 107323 ];

	USFXGameEffect_AmmoPower_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_AmmoPower.OnWeaponUnequip
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void USFXGameEffect_AmmoPower::OnWeaponUnequip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponUnequip = NULL;

	if ( ! pFnOnWeaponUnequip )
		pFnOnWeaponUnequip = (UFunction*) UObject::GObjObjects()->Data[ 107325 ];

	USFXGameEffect_AmmoPower_execOnWeaponUnequip_Parms OnWeaponUnequip_Parms;
	OnWeaponUnequip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponUnequip, &OnWeaponUnequip_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_AmmoPower.OnWeaponEquip
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void USFXGameEffect_AmmoPower::OnWeaponEquip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponEquip = NULL;

	if ( ! pFnOnWeaponEquip )
		pFnOnWeaponEquip = (UFunction*) UObject::GObjObjects()->Data[ 107327 ];

	USFXGameEffect_AmmoPower_execOnWeaponEquip_Parms OnWeaponEquip_Parms;
	OnWeaponEquip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponEquip, &OnWeaponEquip_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_AmmoPower.OnWeaponReload
// [0x00020000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void USFXGameEffect_AmmoPower::OnWeaponReload ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponReload = NULL;

	if ( ! pFnOnWeaponReload )
		pFnOnWeaponReload = (UFunction*) UObject::GObjObjects()->Data[ 107329 ];

	USFXGameEffect_AmmoPower_execOnWeaponReload_Parms OnWeaponReload_Parms;
	OnWeaponReload_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponReload, &OnWeaponReload_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_AmmoPower.GetDamageVocProbabilityMod
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXGameEffect_AmmoPower::GetDamageVocProbabilityMod ( )
{
	static UFunction* pFnGetDamageVocProbabilityMod = NULL;

	if ( ! pFnGetDamageVocProbabilityMod )
		pFnGetDamageVocProbabilityMod = (UFunction*) UObject::GObjObjects()->Data[ 107331 ];

	USFXGameEffect_AmmoPower_execGetDamageVocProbabilityMod_Parms GetDamageVocProbabilityMod_Parms;

	this->ProcessEvent ( pFnGetDamageVocProbabilityMod, &GetDamageVocProbabilityMod_Parms, NULL );

	return GetDamageVocProbabilityMod_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGameEffect_AmmoPower.OnWeaponImpact
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void USFXGameEffect_AmmoPower::OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact )
{
	static UFunction* pFnOnWeaponImpact = NULL;

	if ( ! pFnOnWeaponImpact )
		pFnOnWeaponImpact = (UFunction*) UObject::GObjObjects()->Data[ 107335 ];

	USFXGameEffect_AmmoPower_execOnWeaponImpact_Parms OnWeaponImpact_Parms;
	OnWeaponImpact_Parms.Weapon = Weapon;
	memcpy ( &OnWeaponImpact_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnOnWeaponImpact, &OnWeaponImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_AmmoPower.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_AmmoPower::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 107336 ];

	USFXGameEffect_AmmoPower_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_AmmoPower.GetBulletsPerSecond
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

float USFXGameEffect_AmmoPower::GetBulletsPerSecond ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnGetBulletsPerSecond = NULL;

	if ( ! pFnGetBulletsPerSecond )
		pFnGetBulletsPerSecond = (UFunction*) UObject::GObjObjects()->Data[ 107341 ];

	USFXGameEffect_AmmoPower_execGetBulletsPerSecond_Parms GetBulletsPerSecond_Parms;
	GetBulletsPerSecond_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnGetBulletsPerSecond, &GetBulletsPerSecond_Parms, NULL );

	return GetBulletsPerSecond_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGameEffect_AmmoPower.GetWeaponDamage
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

float USFXGameEffect_AmmoPower::GetWeaponDamage ( class ASFXWeapon* Weapon, struct FImpactInfo Impact )
{
	static UFunction* pFnGetWeaponDamage = NULL;

	if ( ! pFnGetWeaponDamage )
		pFnGetWeaponDamage = (UFunction*) UObject::GObjObjects()->Data[ 107346 ];

	USFXGameEffect_AmmoPower_execGetWeaponDamage_Parms GetWeaponDamage_Parms;
	GetWeaponDamage_Parms.Weapon = Weapon;
	memcpy ( &GetWeaponDamage_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnGetWeaponDamage, &GetWeaponDamage_Parms, NULL );

	return GetWeaponDamage_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGameEffect_AmmoPower.GetHitTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

class AActor* USFXGameEffect_AmmoPower::GetHitTarget ( struct FImpactInfo Impact )
{
	static UFunction* pFnGetHitTarget = NULL;

	if ( ! pFnGetHitTarget )
		pFnGetHitTarget = (UFunction*) UObject::GObjObjects()->Data[ 107350 ];

	USFXGameEffect_AmmoPower_execGetHitTarget_Parms GetHitTarget_Parms;
	memcpy ( &GetHitTarget_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnGetHitTarget, &GetHitTarget_Parms, NULL );

	return GetHitTarget_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGameEffect_AmmoPower.SetupFromWeapon
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_AmmoPower::SetupFromWeapon ( )
{
	static UFunction* pFnSetupFromWeapon = NULL;

	if ( ! pFnSetupFromWeapon )
		pFnSetupFromWeapon = (UFunction*) UObject::GObjObjects()->Data[ 107352 ];

	USFXGameEffect_AmmoPower_execSetupFromWeapon_Parms SetupFromWeapon_Parms;

	this->ProcessEvent ( pFnSetupFromWeapon, &SetupFromWeapon_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_AmmoPower.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_AmmoPower::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107358 ];

	USFXGameEffect_AmmoPower_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXDamageType.CalculateDamageMultiplier
// [0x00422002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

float USFXDamageType_HeavyWeapon::CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnCalculateDamageMultiplier = NULL;

	if ( ! pFnCalculateDamageMultiplier )
		pFnCalculateDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 44579 ];

	USFXDamageType_HeavyWeapon_execCalculateDamageMultiplier_Parms CalculateDamageMultiplier_Parms;

	this->ProcessEvent ( pFnCalculateDamageMultiplier, &CalculateDamageMultiplier_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &CalculateDamageMultiplier_Parms.DamageCalc, 0x60 );

	return CalculateDamageMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.ResetDamageCalc
// [0x00422002] 
// Parameters infos:
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

void USFXDamageType_HeavyWeapon::ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnResetDamageCalc = NULL;

	if ( ! pFnResetDamageCalc )
		pFnResetDamageCalc = (UFunction*) UObject::GObjObjects()->Data[ 44554 ];

	USFXDamageType_HeavyWeapon_execResetDamageCalc_Parms ResetDamageCalc_Parms;

	this->ProcessEvent ( pFnResetDamageCalc, &ResetDamageCalc_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &ResetDamageCalc_Parms.DamageCalc, 0x60 );
};

// Function SFXGame.SFXDamageType.CanPlayDeathEffect
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

bool USFXDamageType_HeavyWeapon::CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 44550 ];

	USFXDamageType_HeavyWeapon_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;
	CanPlayDeathEffect_Parms.Target = Target;
	CanPlayDeathEffect_Parms.Killer = Killer;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.CalculateDamageMultiplier
// [0x00422002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

float USFXDamageType_FlameThrower::CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnCalculateDamageMultiplier = NULL;

	if ( ! pFnCalculateDamageMultiplier )
		pFnCalculateDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 44579 ];

	USFXDamageType_FlameThrower_execCalculateDamageMultiplier_Parms CalculateDamageMultiplier_Parms;

	this->ProcessEvent ( pFnCalculateDamageMultiplier, &CalculateDamageMultiplier_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &CalculateDamageMultiplier_Parms.DamageCalc, 0x60 );

	return CalculateDamageMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.ResetDamageCalc
// [0x00422002] 
// Parameters infos:
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

void USFXDamageType_FlameThrower::ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnResetDamageCalc = NULL;

	if ( ! pFnResetDamageCalc )
		pFnResetDamageCalc = (UFunction*) UObject::GObjObjects()->Data[ 44554 ];

	USFXDamageType_FlameThrower_execResetDamageCalc_Parms ResetDamageCalc_Parms;

	this->ProcessEvent ( pFnResetDamageCalc, &ResetDamageCalc_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &ResetDamageCalc_Parms.DamageCalc, 0x60 );
};

// Function SFXGame.SFXDamageType.CanPlayDeathEffect
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

bool USFXDamageType_FlameThrower::CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 44550 ];

	USFXDamageType_FlameThrower_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;
	CanPlayDeathEffect_Parms.Target = Target;
	CanPlayDeathEffect_Parms.Killer = Killer;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.CalculateDamageMultiplier
// [0x00422002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

float USFXDamageType_AssaultRifle::CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnCalculateDamageMultiplier = NULL;

	if ( ! pFnCalculateDamageMultiplier )
		pFnCalculateDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 44579 ];

	USFXDamageType_AssaultRifle_execCalculateDamageMultiplier_Parms CalculateDamageMultiplier_Parms;

	this->ProcessEvent ( pFnCalculateDamageMultiplier, &CalculateDamageMultiplier_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &CalculateDamageMultiplier_Parms.DamageCalc, 0x60 );

	return CalculateDamageMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.ResetDamageCalc
// [0x00422002] 
// Parameters infos:
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

void USFXDamageType_AssaultRifle::ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnResetDamageCalc = NULL;

	if ( ! pFnResetDamageCalc )
		pFnResetDamageCalc = (UFunction*) UObject::GObjObjects()->Data[ 44554 ];

	USFXDamageType_AssaultRifle_execResetDamageCalc_Parms ResetDamageCalc_Parms;

	this->ProcessEvent ( pFnResetDamageCalc, &ResetDamageCalc_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &ResetDamageCalc_Parms.DamageCalc, 0x60 );
};

// Function SFXGame.SFXDamageType.CanPlayDeathEffect
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

bool USFXDamageType_AssaultRifle::CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 44550 ];

	USFXDamageType_AssaultRifle_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;
	CanPlayDeathEffect_Parms.Target = Target;
	CanPlayDeathEffect_Parms.Killer = Killer;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.GetStoreQualification
// [0x00022002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASFXWeapon_AssaultRifle_SentryTurret::GetStoreQualification ( )
{
	static UFunction* pFnGetStoreQualification = NULL;

	if ( ! pFnGetStoreQualification )
		pFnGetStoreQualification = (UFunction*) UObject::GObjObjects()->Data[ 88057 ];

	ASFXWeapon_AssaultRifle_SentryTurret_execGetStoreQualification_Parms GetStoreQualification_Parms;

	this->ProcessEvent ( pFnGetStoreQualification, &GetStoreQualification_Parms, NULL );

	return GetStoreQualification_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.GetWeaponSpecificImpactSound
// [0x00020102] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactSounds* ImpactSounds                   ( CPF_Parm )

class UWwiseEvent* ASFXWeapon_AssaultRifle_SentryTurret::GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds )
{
	static UFunction* pFnGetWeaponSpecificImpactSound = NULL;

	if ( ! pFnGetWeaponSpecificImpactSound )
		pFnGetWeaponSpecificImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 88054 ];

	ASFXWeapon_AssaultRifle_SentryTurret_execGetWeaponSpecificImpactSound_Parms GetWeaponSpecificImpactSound_Parms;
	GetWeaponSpecificImpactSound_Parms.ImpactSounds = ImpactSounds;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactSound, &GetWeaponSpecificImpactSound_Parms, NULL );

	return GetWeaponSpecificImpactSound_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.GetWeaponSpecificImpactEffect
// [0x00022102] 
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactEffects* ImpactEffects                  ( CPF_Parm )

class UParticleSystem* ASFXWeapon_AssaultRifle_SentryTurret::GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects )
{
	static UFunction* pFnGetWeaponSpecificImpactEffect = NULL;

	if ( ! pFnGetWeaponSpecificImpactEffect )
		pFnGetWeaponSpecificImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 88051 ];

	ASFXWeapon_AssaultRifle_SentryTurret_execGetWeaponSpecificImpactEffect_Parms GetWeaponSpecificImpactEffect_Parms;
	GetWeaponSpecificImpactEffect_Parms.ImpactEffects = ImpactEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactEffect, &GetWeaponSpecificImpactEffect_Parms, NULL );

	return GetWeaponSpecificImpactEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.GetWeaponSpecificDecalData
// [0x00420102] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USFXPhysicalMaterialDecals* DecalEffects                   ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm | CPF_OutParm )

class UDecalComponent* ASFXWeapon_AssaultRifle_SentryTurret::GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime )
{
	static UFunction* pFnGetWeaponSpecificDecalData = NULL;

	if ( ! pFnGetWeaponSpecificDecalData )
		pFnGetWeaponSpecificDecalData = (UFunction*) UObject::GObjObjects()->Data[ 88046 ];

	ASFXWeapon_AssaultRifle_SentryTurret_execGetWeaponSpecificDecalData_Parms GetWeaponSpecificDecalData_Parms;
	GetWeaponSpecificDecalData_Parms.DecalEffects = DecalEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificDecalData, &GetWeaponSpecificDecalData_Parms, NULL );

	if ( FadeTime )
		*FadeTime = GetWeaponSpecificDecalData_Parms.FadeTime;

	return GetWeaponSpecificDecalData_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.PlayFireEffects
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_AssaultRifle_SentryTurret::PlayFireEffects ( unsigned char FiringMode, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 88043 ];

	ASFXWeapon_AssaultRifle_SentryTurret_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FiringMode = FiringMode;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.ShouldSpawnTracerFX
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_AssaultRifle_SentryTurret::ShouldSpawnTracerFX ( )
{
	static UFunction* pFnShouldSpawnTracerFX = NULL;

	if ( ! pFnShouldSpawnTracerFX )
		pFnShouldSpawnTracerFX = (UFunction*) UObject::GObjObjects()->Data[ 88040 ];

	ASFXWeapon_AssaultRifle_SentryTurret_execShouldSpawnTracerFX_Parms ShouldSpawnTracerFX_Parms;

	this->ProcessEvent ( pFnShouldSpawnTracerFX, &ShouldSpawnTracerFX_Parms, NULL );

	return ShouldSpawnTracerFX_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.GetAdjustedAim
// [0x00020102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ASFXWeapon_Heavy_Beam_Base::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 105804 ];

	ASFXWeapon_Heavy_Beam_Base_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.PreCalculateAdjustedAim
// [0x00080002] 
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void ASFXWeapon_Heavy_Beam_Base::PreCalculateAdjustedAim ( float fDeltaTime )
{
	static UFunction* pFnPreCalculateAdjustedAim = NULL;

	if ( ! pFnPreCalculateAdjustedAim )
		pFnPreCalculateAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 105813 ];

	ASFXWeapon_Heavy_Beam_Base_execPreCalculateAdjustedAim_Parms PreCalculateAdjustedAim_Parms;
	PreCalculateAdjustedAim_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnPreCalculateAdjustedAim, &PreCalculateAdjustedAim_Parms, NULL );
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.UpdateBeam
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXWeapon_Heavy_Beam_Base::UpdateBeam ( float DeltaTime )
{
	static UFunction* pFnUpdateBeam = NULL;

	if ( ! pFnUpdateBeam )
		pFnUpdateBeam = (UFunction*) UObject::GObjObjects()->Data[ 105820 ];

	ASFXWeapon_Heavy_Beam_Base_execUpdateBeam_Parms UpdateBeam_Parms;
	UpdateBeam_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateBeam, &UpdateBeam_Parms, NULL );
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Heavy_Beam_Base::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 105835 ];

	ASFXWeapon_Heavy_Beam_Base_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x54 );
	ProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.CalcFireStart
// [0x00020002] 
// Parameters infos:

void ASFXWeapon_Heavy_Beam_Base::CalcFireStart ( )
{
	static UFunction* pFnCalcFireStart = NULL;

	if ( ! pFnCalcFireStart )
		pFnCalcFireStart = (UFunction*) UObject::GObjObjects()->Data[ 105846 ];

	ASFXWeapon_Heavy_Beam_Base_execCalcFireStart_Parms CalcFireStart_Parms;

	this->ProcessEvent ( pFnCalcFireStart, &CalcFireStart_Parms, NULL );
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.StopFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_Heavy_Beam_Base::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 105848 ];

	ASFXWeapon_Heavy_Beam_Base_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_Heavy_Beam_Base::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 105850 ];

	ASFXWeapon_Heavy_Beam_Base_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXWeapon_Heavy_Beam_Base::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 105855 ];

	ASFXWeapon_Heavy_Beam_Base_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.SpawnImpactEffects
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_Heavy_Beam_Base::SpawnImpactEffects ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnImpactEffects = NULL;

	if ( ! pFnSpawnImpactEffects )
		pFnSpawnImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 105859 ];

	ASFXWeapon_Heavy_Beam_Base_execSpawnImpactEffects_Parms SpawnImpactEffects_Parms;
	memcpy ( &SpawnImpactEffects_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnSpawnImpactEffects, &SpawnImpactEffects_Parms, NULL );
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.GetWeaponSpecificImpactSound
// [0x00020102] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactSounds* ImpactSounds                   ( CPF_Parm )

class UWwiseEvent* ASFXWeapon_Heavy_Beam_Base::GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds )
{
	static UFunction* pFnGetWeaponSpecificImpactSound = NULL;

	if ( ! pFnGetWeaponSpecificImpactSound )
		pFnGetWeaponSpecificImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 105862 ];

	ASFXWeapon_Heavy_Beam_Base_execGetWeaponSpecificImpactSound_Parms GetWeaponSpecificImpactSound_Parms;
	GetWeaponSpecificImpactSound_Parms.ImpactSounds = ImpactSounds;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactSound, &GetWeaponSpecificImpactSound_Parms, NULL );

	return GetWeaponSpecificImpactSound_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.GetWeaponSpecificImpactEffect
// [0x00022102] 
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactEffects* ImpactEffects                  ( CPF_Parm )

class UParticleSystem* ASFXWeapon_Heavy_Beam_Base::GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects )
{
	static UFunction* pFnGetWeaponSpecificImpactEffect = NULL;

	if ( ! pFnGetWeaponSpecificImpactEffect )
		pFnGetWeaponSpecificImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 105865 ];

	ASFXWeapon_Heavy_Beam_Base_execGetWeaponSpecificImpactEffect_Parms GetWeaponSpecificImpactEffect_Parms;
	GetWeaponSpecificImpactEffect_Parms.ImpactEffects = ImpactEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactEffect, &GetWeaponSpecificImpactEffect_Parms, NULL );

	return GetWeaponSpecificImpactEffect_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.GetWeaponSpecificDecalData
// [0x00420102] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USFXPhysicalMaterialDecals* DecalEffects                   ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm | CPF_OutParm )

class UDecalComponent* ASFXWeapon_Heavy_Beam_Base::GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime )
{
	static UFunction* pFnGetWeaponSpecificDecalData = NULL;

	if ( ! pFnGetWeaponSpecificDecalData )
		pFnGetWeaponSpecificDecalData = (UFunction*) UObject::GObjObjects()->Data[ 105870 ];

	ASFXWeapon_Heavy_Beam_Base_execGetWeaponSpecificDecalData_Parms GetWeaponSpecificDecalData_Parms;
	GetWeaponSpecificDecalData_Parms.DecalEffects = DecalEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificDecalData, &GetWeaponSpecificDecalData_Parms, NULL );

	if ( FadeTime )
		*FadeTime = GetWeaponSpecificDecalData_Parms.FadeTime;

	return GetWeaponSpecificDecalData_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.StopMuzzleFlashEffect
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Heavy_Beam_Base::StopMuzzleFlashEffect ( )
{
	static UFunction* pFnStopMuzzleFlashEffect = NULL;

	if ( ! pFnStopMuzzleFlashEffect )
		pFnStopMuzzleFlashEffect = (UFunction*) UObject::GObjObjects()->Data[ 105871 ];

	ASFXWeapon_Heavy_Beam_Base_execStopMuzzleFlashEffect_Parms StopMuzzleFlashEffect_Parms;

	this->ProcessEvent ( pFnStopMuzzleFlashEffect, &StopMuzzleFlashEffect_Parms, NULL );
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.PlayMuzzleFlashEffect
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Heavy_Beam_Base::PlayMuzzleFlashEffect ( )
{
	static UFunction* pFnPlayMuzzleFlashEffect = NULL;

	if ( ! pFnPlayMuzzleFlashEffect )
		pFnPlayMuzzleFlashEffect = (UFunction*) UObject::GObjObjects()->Data[ 105872 ];

	ASFXWeapon_Heavy_Beam_Base_execPlayMuzzleFlashEffect_Parms PlayMuzzleFlashEffect_Parms;

	this->ProcessEvent ( pFnPlayMuzzleFlashEffect, &PlayMuzzleFlashEffect_Parms, NULL );
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.StretchDecal
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_Heavy_Beam_Base::StretchDecal ( struct FImpactInfo Impact )
{
	static UFunction* pFnStretchDecal = NULL;

	if ( ! pFnStretchDecal )
		pFnStretchDecal = (UFunction*) UObject::GObjObjects()->Data[ 105882 ];

	ASFXWeapon_Heavy_Beam_Base_execStretchDecal_Parms StretchDecal_Parms;
	memcpy ( &StretchDecal_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnStretchDecal, &StretchDecal_Parms, NULL );
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.SpawnADecal
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_Heavy_Beam_Base::SpawnADecal ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnADecal = NULL;

	if ( ! pFnSpawnADecal )
		pFnSpawnADecal = (UFunction*) UObject::GObjObjects()->Data[ 105887 ];

	ASFXWeapon_Heavy_Beam_Base_execSpawnADecal_Parms SpawnADecal_Parms;
	memcpy ( &SpawnADecal_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnSpawnADecal, &SpawnADecal_Parms, NULL );
};

// Function sfxgamecontent.SFXWeapon_Heavy_Beam_Base.InitDefaultDecalProperties
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Heavy_Beam_Base::InitDefaultDecalProperties ( )
{
	static UFunction* pFnInitDefaultDecalProperties = NULL;

	if ( ! pFnInitDefaultDecalProperties )
		pFnInitDefaultDecalProperties = (UFunction*) UObject::GObjObjects()->Data[ 105888 ];

	ASFXWeapon_Heavy_Beam_Base_execInitDefaultDecalProperties_Parms InitDefaultDecalProperties_Parms;

	this->ProcessEvent ( pFnInitDefaultDecalProperties, &InitDefaultDecalProperties_Parms, NULL );
};

// Function sfxgamecontent.sfxweapon_heavy_flamethrower_sentryturret.ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void Asfxweapon_heavy_flamethrower_sentryturret::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 105531 ];

	Asfxweapon_heavy_flamethrower_sentryturret_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x54 );
	ProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function sfxgamecontent.sfxweapon_heavy_flamethrower_sentryturret.StopMuzzleFlashEffect
// [0x00020102] 
// Parameters infos:

void Asfxweapon_heavy_flamethrower_sentryturret::StopMuzzleFlashEffect ( )
{
	static UFunction* pFnStopMuzzleFlashEffect = NULL;

	if ( ! pFnStopMuzzleFlashEffect )
		pFnStopMuzzleFlashEffect = (UFunction*) UObject::GObjObjects()->Data[ 105533 ];

	Asfxweapon_heavy_flamethrower_sentryturret_execStopMuzzleFlashEffect_Parms StopMuzzleFlashEffect_Parms;

	this->ProcessEvent ( pFnStopMuzzleFlashEffect, &StopMuzzleFlashEffect_Parms, NULL );
};

// Function sfxgamecontent.sfxweapon_heavy_flamethrower_sentryturret.AttachMuzzleEffectsComponents
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )
// struct FName                   MuzzleSocket                   ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CasingSocket                   ( CPF_OptionalParm | CPF_Parm )

void Asfxweapon_heavy_flamethrower_sentryturret::eventAttachMuzzleEffectsComponents ( class USkeletalMeshComponent* SkelMesh, struct FName MuzzleSocket, struct FName CasingSocket )
{
	static UFunction* pFnAttachMuzzleEffectsComponents = NULL;

	if ( ! pFnAttachMuzzleEffectsComponents )
		pFnAttachMuzzleEffectsComponents = (UFunction*) UObject::GObjObjects()->Data[ 105545 ];

	Asfxweapon_heavy_flamethrower_sentryturret_eventAttachMuzzleEffectsComponents_Parms AttachMuzzleEffectsComponents_Parms;
	AttachMuzzleEffectsComponents_Parms.SkelMesh = SkelMesh;
	memcpy ( &AttachMuzzleEffectsComponents_Parms.MuzzleSocket, &MuzzleSocket, 0x8 );
	memcpy ( &AttachMuzzleEffectsComponents_Parms.CasingSocket, &CasingSocket, 0x8 );

	this->ProcessEvent ( pFnAttachMuzzleEffectsComponents, &AttachMuzzleEffectsComponents_Parms, NULL );
};

// Function sfxgamecontent.sfxweapon_heavy_flamethrower_sentryturret.WeaponStoppedFiring
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )

void Asfxweapon_heavy_flamethrower_sentryturret::eventWeaponStoppedFiring ( unsigned char FiringMode )
{
	static UFunction* pFnWeaponStoppedFiring = NULL;

	if ( ! pFnWeaponStoppedFiring )
		pFnWeaponStoppedFiring = (UFunction*) UObject::GObjObjects()->Data[ 105549 ];

	Asfxweapon_heavy_flamethrower_sentryturret_eventWeaponStoppedFiring_Parms WeaponStoppedFiring_Parms;
	WeaponStoppedFiring_Parms.FiringMode = FiringMode;

	this->ProcessEvent ( pFnWeaponStoppedFiring, &WeaponStoppedFiring_Parms, NULL );
};

// Function sfxgamecontent.sfxweapon_heavy_flamethrower_sentryturret.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void Asfxweapon_heavy_flamethrower_sentryturret::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 105551 ];

	Asfxweapon_heavy_flamethrower_sentryturret_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function sfxgamecontent.sfxweapon_heavy_flamethrower_sentryturret.PlayWindDownEffects
// [0x00020102] 
// Parameters infos:

void Asfxweapon_heavy_flamethrower_sentryturret::PlayWindDownEffects ( )
{
	static UFunction* pFnPlayWindDownEffects = NULL;

	if ( ! pFnPlayWindDownEffects )
		pFnPlayWindDownEffects = (UFunction*) UObject::GObjObjects()->Data[ 105569 ];

	Asfxweapon_heavy_flamethrower_sentryturret_execPlayWindDownEffects_Parms PlayWindDownEffects_Parms;

	this->ProcessEvent ( pFnPlayWindDownEffects, &PlayWindDownEffects_Parms, NULL );
};

// Function sfxgamecontent.sfxweapon_heavy_flamethrower_sentryturret.PlayWindUpEffects
// [0x00020102] 
// Parameters infos:

void Asfxweapon_heavy_flamethrower_sentryturret::PlayWindUpEffects ( )
{
	static UFunction* pFnPlayWindUpEffects = NULL;

	if ( ! pFnPlayWindUpEffects )
		pFnPlayWindUpEffects = (UFunction*) UObject::GObjObjects()->Data[ 105573 ];

	Asfxweapon_heavy_flamethrower_sentryturret_execPlayWindUpEffects_Parms PlayWindUpEffects_Parms;

	this->ProcessEvent ( pFnPlayWindUpEffects, &PlayWindUpEffects_Parms, NULL );
};

// Function sfxgamecontent.sfxweapon_heavy_flamethrower_sentryturret.FireModeUpdated
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void Asfxweapon_heavy_flamethrower_sentryturret::FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication )
{
	static UFunction* pFnFireModeUpdated = NULL;

	if ( ! pFnFireModeUpdated )
		pFnFireModeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 105579 ];

	Asfxweapon_heavy_flamethrower_sentryturret_execFireModeUpdated_Parms FireModeUpdated_Parms;
	FireModeUpdated_Parms.FiringMode = FiringMode;
	FireModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFireModeUpdated, &FireModeUpdated_Parms, NULL );
};

// Function sfxgamecontent.SFXAICmd_Base_SentryTurret.ChooseWeapon
// [0x00020002] 
// Parameters infos:

void USFXAICmd_Base_SentryTurret::ChooseWeapon ( )
{
	static UFunction* pFnChooseWeapon = NULL;

	if ( ! pFnChooseWeapon )
		pFnChooseWeapon = (UFunction*) UObject::GObjObjects()->Data[ 107412 ];

	USFXAICmd_Base_SentryTurret_execChooseWeapon_Parms ChooseWeapon_Parms;

	this->ProcessEvent ( pFnChooseWeapon, &ChooseWeapon_Parms, NULL );
};

// Function sfxgamecontent.SFXAICmd_Base_SentryTurret.ShouldUsePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PowerName                      ( CPF_Parm | CPF_OutParm )
// class AActor*                  Target                         ( CPF_Parm | CPF_OutParm )

bool USFXAICmd_Base_SentryTurret::ShouldUsePower ( struct FName* PowerName, class AActor** Target )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 107460 ];

	USFXAICmd_Base_SentryTurret_execShouldUsePower_Parms ShouldUsePower_Parms;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( PowerName )
		memcpy ( PowerName, &ShouldUsePower_Parms.PowerName, 0x8 );

	if ( Target )
		*Target = ShouldUsePower_Parms.Target;

	return ShouldUsePower_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.CheckDownedPlayers
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::CheckDownedPlayers ( )
{
	static UFunction* pFnCheckDownedPlayers = NULL;

	if ( ! pFnCheckDownedPlayers )
		pFnCheckDownedPlayers = (UFunction*) UObject::GObjObjects()->Data[ 55864 ];

	ASFXAI_SentryTurret_execCheckDownedPlayers_Parms CheckDownedPlayers_Parms;

	this->ProcessEvent ( pFnCheckDownedPlayers, &CheckDownedPlayers_Parms, NULL );
};

// Function SFXGame.sfxai_core.DrawDifficulty
// [0x00020000] 
// Parameters infos:
// class UBioCheatManager*        CM                             ( CPF_Parm )

void ASFXAI_SentryTurret::DrawDifficulty ( class UBioCheatManager* CM )
{
	static UFunction* pFnDrawDifficulty = NULL;

	if ( ! pFnDrawDifficulty )
		pFnDrawDifficulty = (UFunction*) UObject::GObjObjects()->Data[ 55862 ];

	ASFXAI_SentryTurret_execDrawDifficulty_Parms DrawDifficulty_Parms;
	DrawDifficulty_Parms.CM = CM;

	this->ProcessEvent ( pFnDrawDifficulty, &DrawDifficulty_Parms, NULL );
};

// Function SFXGame.sfxai_core.CanTurretFireAt
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )

bool ASFXAI_SentryTurret::CanTurretFireAt ( class AActor* TestActor )
{
	static UFunction* pFnCanTurretFireAt = NULL;

	if ( ! pFnCanTurretFireAt )
		pFnCanTurretFireAt = (UFunction*) UObject::GObjObjects()->Data[ 55856 ];

	ASFXAI_SentryTurret_execCanTurretFireAt_Parms CanTurretFireAt_Parms;
	CanTurretFireAt_Parms.TestActor = TestActor;

	this->ProcessEvent ( pFnCanTurretFireAt, &CanTurretFireAt_Parms, NULL );

	return CanTurretFireAt_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.OnPossessTurret
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USFXSeqAct_PossessTurret* Action                         ( CPF_Parm )

void ASFXAI_SentryTurret::OnPossessTurret ( class USFXSeqAct_PossessTurret* Action )
{
	static UFunction* pFnOnPossessTurret = NULL;

	if ( ! pFnOnPossessTurret )
		pFnOnPossessTurret = (UFunction*) UObject::GObjObjects()->Data[ 55851 ];

	ASFXAI_SentryTurret_execOnPossessTurret_Parms OnPossessTurret_Parms;
	OnPossessTurret_Parms.Action = Action;

	this->ProcessEvent ( pFnOnPossessTurret, &OnPossessTurret_Parms, NULL );
};

// Function SFXGame.sfxai_core.FindDrivablePawn
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::FindDrivablePawn ( )
{
	static UFunction* pFnFindDrivablePawn = NULL;

	if ( ! pFnFindDrivablePawn )
		pFnFindDrivablePawn = (UFunction*) UObject::GObjObjects()->Data[ 55839 ];

	ASFXAI_SentryTurret_execFindDrivablePawn_Parms FindDrivablePawn_Parms;

	this->ProcessEvent ( pFnFindDrivablePawn, &FindDrivablePawn_Parms, NULL );
};

// Function SFXGame.sfxai_core.GetMinDistanceToAnyPlayer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXAI_SentryTurret::GetMinDistanceToAnyPlayer ( )
{
	static UFunction* pFnGetMinDistanceToAnyPlayer = NULL;

	if ( ! pFnGetMinDistanceToAnyPlayer )
		pFnGetMinDistanceToAnyPlayer = (UFunction*) UObject::GObjObjects()->Data[ 55834 ];

	ASFXAI_SentryTurret_execGetMinDistanceToAnyPlayer_Parms GetMinDistanceToAnyPlayer_Parms;

	this->ProcessEvent ( pFnGetMinDistanceToAnyPlayer, &GetMinDistanceToAnyPlayer_Parms, NULL );

	return GetMinDistanceToAnyPlayer_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.CleanUpStaleAI
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXAI_SentryTurret::CleanUpStaleAI ( )
{
	static UFunction* pFnCleanUpStaleAI = NULL;

	if ( ! pFnCleanUpStaleAI )
		pFnCleanUpStaleAI = (UFunction*) UObject::GObjObjects()->Data[ 55830 ];

	ASFXAI_SentryTurret_execCleanUpStaleAI_Parms CleanUpStaleAI_Parms;

	this->ProcessEvent ( pFnCleanUpStaleAI, &CleanUpStaleAI_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyStuck
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::NotifyStuck ( )
{
	static UFunction* pFnNotifyStuck = NULL;

	if ( ! pFnNotifyStuck )
		pFnNotifyStuck = (UFunction*) UObject::GObjObjects()->Data[ 55829 ];

	ASFXAI_SentryTurret_execNotifyStuck_Parms NotifyStuck_Parms;

	this->ProcessEvent ( pFnNotifyStuck, &NotifyStuck_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyCombatZoneRemoved
// [0x00020000] 
// Parameters infos:

void ASFXAI_SentryTurret::NotifyCombatZoneRemoved ( )
{
	static UFunction* pFnNotifyCombatZoneRemoved = NULL;

	if ( ! pFnNotifyCombatZoneRemoved )
		pFnNotifyCombatZoneRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55828 ];

	ASFXAI_SentryTurret_execNotifyCombatZoneRemoved_Parms NotifyCombatZoneRemoved_Parms;

	this->ProcessEvent ( pFnNotifyCombatZoneRemoved, &NotifyCombatZoneRemoved_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyCombatZoneAdded
// [0x00020000] 
// Parameters infos:

void ASFXAI_SentryTurret::NotifyCombatZoneAdded ( )
{
	static UFunction* pFnNotifyCombatZoneAdded = NULL;

	if ( ! pFnNotifyCombatZoneAdded )
		pFnNotifyCombatZoneAdded = (UFunction*) UObject::GObjObjects()->Data[ 55827 ];

	ASFXAI_SentryTurret_execNotifyCombatZoneAdded_Parms NotifyCombatZoneAdded_Parms;

	this->ProcessEvent ( pFnNotifyCombatZoneAdded, &NotifyCombatZoneAdded_Parms, NULL );
};

// Function SFXGame.sfxai_core.IsAtCover
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::eventIsAtCover ( )
{
	static UFunction* pFnIsAtCover = NULL;

	if ( ! pFnIsAtCover )
		pFnIsAtCover = (UFunction*) UObject::GObjObjects()->Data[ 55825 ];

	ASFXAI_SentryTurret_eventIsAtCover_Parms IsAtCover_Parms;

	this->ProcessEvent ( pFnIsAtCover, &IsAtCover_Parms, NULL );

	return IsAtCover_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.NotifyKnockedOutOfCover
// [0x00020000] 
// Parameters infos:

void ASFXAI_SentryTurret::NotifyKnockedOutOfCover ( )
{
	static UFunction* pFnNotifyKnockedOutOfCover = NULL;

	if ( ! pFnNotifyKnockedOutOfCover )
		pFnNotifyKnockedOutOfCover = (UFunction*) UObject::GObjObjects()->Data[ 55824 ];

	ASFXAI_SentryTurret_execNotifyKnockedOutOfCover_Parms NotifyKnockedOutOfCover_Parms;

	this->ProcessEvent ( pFnNotifyKnockedOutOfCover, &NotifyKnockedOutOfCover_Parms, NULL );
};

// Function SFXGame.sfxai_core.GetMoveFireDelayTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXAI_SentryTurret::GetMoveFireDelayTime ( )
{
	static UFunction* pFnGetMoveFireDelayTime = NULL;

	if ( ! pFnGetMoveFireDelayTime )
		pFnGetMoveFireDelayTime = (UFunction*) UObject::GObjObjects()->Data[ 55821 ];

	ASFXAI_SentryTurret_execGetMoveFireDelayTime_Parms GetMoveFireDelayTime_Parms;

	this->ProcessEvent ( pFnGetMoveFireDelayTime, &GetMoveFireDelayTime_Parms, NULL );

	return GetMoveFireDelayTime_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.DoMeleeAttack
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::DoMeleeAttack ( )
{
	static UFunction* pFnDoMeleeAttack = NULL;

	if ( ! pFnDoMeleeAttack )
		pFnDoMeleeAttack = (UFunction*) UObject::GObjObjects()->Data[ 55820 ];

	ASFXAI_SentryTurret_execDoMeleeAttack_Parms DoMeleeAttack_Parms;

	this->ProcessEvent ( pFnDoMeleeAttack, &DoMeleeAttack_Parms, NULL );
};

// Function SFXGame.sfxai_core.ShouldKillPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   PartyPawn                      ( CPF_Parm )

bool ASFXAI_SentryTurret::ShouldKillPlayer ( class APawn* PartyPawn )
{
	static UFunction* pFnShouldKillPlayer = NULL;

	if ( ! pFnShouldKillPlayer )
		pFnShouldKillPlayer = (UFunction*) UObject::GObjObjects()->Data[ 55815 ];

	ASFXAI_SentryTurret_execShouldKillPlayer_Parms ShouldKillPlayer_Parms;
	ShouldKillPlayer_Parms.PartyPawn = PartyPawn;

	this->ProcessEvent ( pFnShouldKillPlayer, &ShouldKillPlayer_Parms, NULL );

	return ShouldKillPlayer_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ShouldPowerEvade
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::ShouldPowerEvade ( )
{
	static UFunction* pFnShouldPowerEvade = NULL;

	if ( ! pFnShouldPowerEvade )
		pFnShouldPowerEvade = (UFunction*) UObject::GObjObjects()->Data[ 55812 ];

	ASFXAI_SentryTurret_execShouldPowerEvade_Parms ShouldPowerEvade_Parms;

	this->ProcessEvent ( pFnShouldPowerEvade, &ShouldPowerEvade_Parms, NULL );

	return ShouldPowerEvade_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ShouldSyncMelee
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  MeleeTarget                    ( CPF_Parm )

bool ASFXAI_SentryTurret::ShouldSyncMelee ( class AActor* MeleeTarget )
{
	static UFunction* pFnShouldSyncMelee = NULL;

	if ( ! pFnShouldSyncMelee )
		pFnShouldSyncMelee = (UFunction*) UObject::GObjObjects()->Data[ 55805 ];

	ASFXAI_SentryTurret_execShouldSyncMelee_Parms ShouldSyncMelee_Parms;
	ShouldSyncMelee_Parms.MeleeTarget = MeleeTarget;

	this->ProcessEvent ( pFnShouldSyncMelee, &ShouldSyncMelee_Parms, NULL );

	return ShouldSyncMelee_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ShouldMelee
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  MeleeTarget                    ( CPF_Parm )

bool ASFXAI_SentryTurret::ShouldMelee ( class AActor* MeleeTarget )
{
	static UFunction* pFnShouldMelee = NULL;

	if ( ! pFnShouldMelee )
		pFnShouldMelee = (UFunction*) UObject::GObjObjects()->Data[ 55799 ];

	ASFXAI_SentryTurret_execShouldMelee_Parms ShouldMelee_Parms;
	ShouldMelee_Parms.MeleeTarget = MeleeTarget;

	this->ProcessEvent ( pFnShouldMelee, &ShouldMelee_Parms, NULL );

	return ShouldMelee_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.GetBestEvadeDir
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 DangerPoint                    ( CPF_Parm )
// class AProjectile*             Prj                            ( CPF_OptionalParm | CPF_Parm )
// class APawn*                   Shooter                        ( CPF_OptionalParm | CPF_Parm )

unsigned char ASFXAI_SentryTurret::GetBestEvadeDir ( struct FVector DangerPoint, class AProjectile* Prj, class APawn* Shooter )
{
	static UFunction* pFnGetBestEvadeDir = NULL;

	if ( ! pFnGetBestEvadeDir )
		pFnGetBestEvadeDir = (UFunction*) UObject::GObjObjects()->Data[ 55775 ];

	ASFXAI_SentryTurret_execGetBestEvadeDir_Parms GetBestEvadeDir_Parms;
	memcpy ( &GetBestEvadeDir_Parms.DangerPoint, &DangerPoint, 0xC );
	GetBestEvadeDir_Parms.Prj = Prj;
	GetBestEvadeDir_Parms.Shooter = Shooter;

	this->ProcessEvent ( pFnGetBestEvadeDir, &GetBestEvadeDir_Parms, NULL );

	return GetBestEvadeDir_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ShouldPartialLean
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::ShouldPartialLean ( )
{
	static UFunction* pFnShouldPartialLean = NULL;

	if ( ! pFnShouldPartialLean )
		pFnShouldPartialLean = (UFunction*) UObject::GObjObjects()->Data[ 55770 ];

	ASFXAI_SentryTurret_execShouldPartialLean_Parms ShouldPartialLean_Parms;

	this->ProcessEvent ( pFnShouldPartialLean, &ShouldPartialLean_Parms, NULL );

	return ShouldPartialLean_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ShouldCancelMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nReason                        ( CPF_Parm )

bool ASFXAI_SentryTurret::ShouldCancelMove ( int nReason )
{
	static UFunction* pFnShouldCancelMove = NULL;

	if ( ! pFnShouldCancelMove )
		pFnShouldCancelMove = (UFunction*) UObject::GObjObjects()->Data[ 55767 ];

	ASFXAI_SentryTurret_execShouldCancelMove_Parms ShouldCancelMove_Parms;
	ShouldCancelMove_Parms.nReason = nReason;

	this->ProcessEvent ( pFnShouldCancelMove, &ShouldCancelMove_Parms, NULL );

	return ShouldCancelMove_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ShouldStayLeanedOut
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::ShouldStayLeanedOut ( )
{
	static UFunction* pFnShouldStayLeanedOut = NULL;

	if ( ! pFnShouldStayLeanedOut )
		pFnShouldStayLeanedOut = (UFunction*) UObject::GObjObjects()->Data[ 55765 ];

	ASFXAI_SentryTurret_execShouldStayLeanedOut_Parms ShouldStayLeanedOut_Parms;

	this->ProcessEvent ( pFnShouldStayLeanedOut, &ShouldStayLeanedOut_Parms, NULL );

	return ShouldStayLeanedOut_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.HasNearbyEnemy
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   NearbyPawn                     ( CPF_Parm | CPF_OutParm )

bool ASFXAI_SentryTurret::HasNearbyEnemy ( class APawn** NearbyPawn )
{
	static UFunction* pFnHasNearbyEnemy = NULL;

	if ( ! pFnHasNearbyEnemy )
		pFnHasNearbyEnemy = (UFunction*) UObject::GObjObjects()->Data[ 55761 ];

	ASFXAI_SentryTurret_execHasNearbyEnemy_Parms HasNearbyEnemy_Parms;

	this->ProcessEvent ( pFnHasNearbyEnemy, &HasNearbyEnemy_Parms, NULL );

	if ( NearbyPawn )
		*NearbyPawn = HasNearbyEnemy_Parms.NearbyPawn;

	return HasNearbyEnemy_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.GetActorToFollow
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 vLocation                      ( CPF_Parm | CPF_OutParm )

void ASFXAI_SentryTurret::eventGetActorToFollow ( class AActor** oActor, struct FVector* vLocation )
{
	static UFunction* pFnGetActorToFollow = NULL;

	if ( ! pFnGetActorToFollow )
		pFnGetActorToFollow = (UFunction*) UObject::GObjObjects()->Data[ 55758 ];

	ASFXAI_SentryTurret_eventGetActorToFollow_Parms GetActorToFollow_Parms;

	this->ProcessEvent ( pFnGetActorToFollow, &GetActorToFollow_Parms, NULL );

	if ( oActor )
		*oActor = GetActorToFollow_Parms.oActor;

	if ( vLocation )
		memcpy ( vLocation, &GetActorToFollow_Parms.vLocation, 0xC );
};

// Function SFXGame.sfxai_core.BeginCombatCommand
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  CmdClass                       ( CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_SentryTurret::BeginCombatCommand ( class UClass* CmdClass, struct FString Reason, unsigned long bForced )
{
	static UFunction* pFnBeginCombatCommand = NULL;

	if ( ! pFnBeginCombatCommand )
		pFnBeginCombatCommand = (UFunction*) UObject::GObjObjects()->Data[ 55582 ];

	ASFXAI_SentryTurret_execBeginCombatCommand_Parms BeginCombatCommand_Parms;
	BeginCombatCommand_Parms.CmdClass = CmdClass;
	memcpy ( &BeginCombatCommand_Parms.Reason, &Reason, 0xC );
	BeginCombatCommand_Parms.bForced = bForced;

	this->ProcessEvent ( pFnBeginCombatCommand, &BeginCombatCommand_Parms, NULL );
};

// Function SFXGame.sfxai_core.BeginDefaultCommand
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_SentryTurret::BeginDefaultCommand ( struct FString Reason, unsigned long bForced )
{
	static UFunction* pFnBeginDefaultCommand = NULL;

	if ( ! pFnBeginDefaultCommand )
		pFnBeginDefaultCommand = (UFunction*) UObject::GObjObjects()->Data[ 55230 ];

	ASFXAI_SentryTurret_execBeginDefaultCommand_Parms BeginDefaultCommand_Parms;
	memcpy ( &BeginDefaultCommand_Parms.Reason, &Reason, 0xC );
	BeginDefaultCommand_Parms.bForced = bForced;

	this->ProcessEvent ( pFnBeginDefaultCommand, &BeginDefaultCommand_Parms, NULL );
};

// Function SFXGame.sfxai_core.CheckTimedCombatTransition
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXAI_SentryTurret::CheckTimedCombatTransition ( )
{
	static UFunction* pFnCheckTimedCombatTransition = NULL;

	if ( ! pFnCheckTimedCombatTransition )
		pFnCheckTimedCombatTransition = (UFunction*) UObject::GObjObjects()->Data[ 55728 ];

	ASFXAI_SentryTurret_execCheckTimedCombatTransition_Parms CheckTimedCombatTransition_Parms;

	this->ProcessEvent ( pFnCheckTimedCombatTransition, &CheckTimedCombatTransition_Parms, NULL );
};

// Function SFXGame.sfxai_core.InitialCheckTimedCombatTransition
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXAI_SentryTurret::InitialCheckTimedCombatTransition ( )
{
	static UFunction* pFnInitialCheckTimedCombatTransition = NULL;

	if ( ! pFnInitialCheckTimedCombatTransition )
		pFnInitialCheckTimedCombatTransition = (UFunction*) UObject::GObjObjects()->Data[ 55727 ];

	ASFXAI_SentryTurret_execInitialCheckTimedCombatTransition_Parms InitialCheckTimedCombatTransition_Parms;

	this->ProcessEvent ( pFnInitialCheckTimedCombatTransition, &InitialCheckTimedCombatTransition_Parms, NULL );
};

// Function SFXGame.sfxai_core.ReactToFlank
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   FlankingPawn                   ( CPF_Parm )

bool ASFXAI_SentryTurret::ReactToFlank ( class APawn* FlankingPawn )
{
	static UFunction* pFnReactToFlank = NULL;

	if ( ! pFnReactToFlank )
		pFnReactToFlank = (UFunction*) UObject::GObjObjects()->Data[ 55724 ];

	ASFXAI_SentryTurret_execReactToFlank_Parms ReactToFlank_Parms;
	ReactToFlank_Parms.FlankingPawn = FlankingPawn;

	this->ProcessEvent ( pFnReactToFlank, &ReactToFlank_Parms, NULL );

	return ReactToFlank_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ReactToNearbyEnemy
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   NearbyPawn                     ( CPF_Parm )

bool ASFXAI_SentryTurret::ReactToNearbyEnemy ( class APawn* NearbyPawn )
{
	static UFunction* pFnReactToNearbyEnemy = NULL;

	if ( ! pFnReactToNearbyEnemy )
		pFnReactToNearbyEnemy = (UFunction*) UObject::GObjObjects()->Data[ 55721 ];

	ASFXAI_SentryTurret_execReactToNearbyEnemy_Parms ReactToNearbyEnemy_Parms;
	ReactToNearbyEnemy_Parms.NearbyPawn = NearbyPawn;

	this->ProcessEvent ( pFnReactToNearbyEnemy, &ReactToNearbyEnemy_Parms, NULL );

	return ReactToNearbyEnemy_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.IsTargetStealthed
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::IsTargetStealthed ( )
{
	static UFunction* pFnIsTargetStealthed = NULL;

	if ( ! pFnIsTargetStealthed )
		pFnIsTargetStealthed = (UFunction*) UObject::GObjObjects()->Data[ 55717 ];

	ASFXAI_SentryTurret_execIsTargetStealthed_Parms IsTargetStealthed_Parms;

	this->ProcessEvent ( pFnIsTargetStealthed, &IsTargetStealthed_Parms, NULL );

	return IsTargetStealthed_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.IsCombatStale
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::IsCombatStale ( )
{
	static UFunction* pFnIsCombatStale = NULL;

	if ( ! pFnIsCombatStale )
		pFnIsCombatStale = (UFunction*) UObject::GObjObjects()->Data[ 55710 ];

	ASFXAI_SentryTurret_execIsCombatStale_Parms IsCombatStale_Parms;

	this->ProcessEvent ( pFnIsCombatStale, &IsCombatStale_Parms, NULL );

	return IsCombatStale_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.CheckInterruptCombatTransitions
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::CheckInterruptCombatTransitions ( )
{
	static UFunction* pFnCheckInterruptCombatTransitions = NULL;

	if ( ! pFnCheckInterruptCombatTransitions )
		pFnCheckInterruptCombatTransitions = (UFunction*) UObject::GObjObjects()->Data[ 55706 ];

	ASFXAI_SentryTurret_execCheckInterruptCombatTransitions_Parms CheckInterruptCombatTransitions_Parms;

	this->ProcessEvent ( pFnCheckInterruptCombatTransitions, &CheckInterruptCombatTransitions_Parms, NULL );
};

// Function SFXGame.sfxai_core.IgnoreTimeTransitions
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::IgnoreTimeTransitions ( )
{
	static UFunction* pFnIgnoreTimeTransitions = NULL;

	if ( ! pFnIgnoreTimeTransitions )
		pFnIgnoreTimeTransitions = (UFunction*) UObject::GObjObjects()->Data[ 55703 ];

	ASFXAI_SentryTurret_execIgnoreTimeTransitions_Parms IgnoreTimeTransitions_Parms;

	this->ProcessEvent ( pFnIgnoreTimeTransitions, &IgnoreTimeTransitions_Parms, NULL );

	return IgnoreTimeTransitions_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.EnableAI
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnable                        ( CPF_Parm )
// int                            nRequestedBy                   ( CPF_Parm )

bool ASFXAI_SentryTurret::eventEnableAI ( unsigned long bEnable, int nRequestedBy )
{
	static UFunction* pFnEnableAI = NULL;

	if ( ! pFnEnableAI )
		pFnEnableAI = (UFunction*) UObject::GObjObjects()->Data[ 45421 ];

	ASFXAI_SentryTurret_eventEnableAI_Parms EnableAI_Parms;
	EnableAI_Parms.bEnable = bEnable;
	EnableAI_Parms.nRequestedBy = nRequestedBy;

	this->ProcessEvent ( pFnEnableAI, &EnableAI_Parms, NULL );

	return EnableAI_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.NotifyArmourHit
// [0x00024002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// struct FName                   ArmourPiece                    ( CPF_Parm )
// class AController*             instigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_SentryTurret::NotifyArmourHit ( float Damage, struct FName ArmourPiece, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser )
{
	static UFunction* pFnNotifyArmourHit = NULL;

	if ( ! pFnNotifyArmourHit )
		pFnNotifyArmourHit = (UFunction*) UObject::GObjObjects()->Data[ 55689 ];

	ASFXAI_SentryTurret_execNotifyArmourHit_Parms NotifyArmourHit_Parms;
	NotifyArmourHit_Parms.Damage = Damage;
	memcpy ( &NotifyArmourHit_Parms.ArmourPiece, &ArmourPiece, 0x8 );
	NotifyArmourHit_Parms.instigatedBy = instigatedBy;
	memcpy ( &NotifyArmourHit_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &NotifyArmourHit_Parms.Momentum, &Momentum, 0xC );
	NotifyArmourHit_Parms.DamageType = DamageType;
	NotifyArmourHit_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnNotifyArmourHit, &NotifyArmourHit_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyArmourDestroyed
// [0x00020002] 
// Parameters infos:
// struct FName                   ArmourPiece                    ( CPF_Parm )
// class AController*             instigatedBy                   ( CPF_Parm )

void ASFXAI_SentryTurret::NotifyArmourDestroyed ( struct FName ArmourPiece, class AController* instigatedBy )
{
	static UFunction* pFnNotifyArmourDestroyed = NULL;

	if ( ! pFnNotifyArmourDestroyed )
		pFnNotifyArmourDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 55685 ];

	ASFXAI_SentryTurret_execNotifyArmourDestroyed_Parms NotifyArmourDestroyed_Parms;
	memcpy ( &NotifyArmourDestroyed_Parms.ArmourPiece, &ArmourPiece, 0x8 );
	NotifyArmourDestroyed_Parms.instigatedBy = instigatedBy;

	this->ProcessEvent ( pFnNotifyArmourDestroyed, &NotifyArmourDestroyed_Parms, NULL );
};

// Function SFXGame.sfxai_core.FindSuppressionPoint
// [0x00024002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// unsigned char                  Range                          ( CPF_Parm )
// float                          MinDistance                    ( CPF_OptionalParm | CPF_Parm )
// float                          MaxDistance                    ( CPF_OptionalParm | CPF_Parm )

class ANavigationPoint* ASFXAI_SentryTurret::FindSuppressionPoint ( class AActor* Target, unsigned char Range, float MinDistance, float MaxDistance )
{
	static UFunction* pFnFindSuppressionPoint = NULL;

	if ( ! pFnFindSuppressionPoint )
		pFnFindSuppressionPoint = (UFunction*) UObject::GObjObjects()->Data[ 55671 ];

	ASFXAI_SentryTurret_execFindSuppressionPoint_Parms FindSuppressionPoint_Parms;
	FindSuppressionPoint_Parms.Target = Target;
	FindSuppressionPoint_Parms.Range = Range;
	FindSuppressionPoint_Parms.MinDistance = MinDistance;
	FindSuppressionPoint_Parms.MaxDistance = MaxDistance;

	this->ProcessEvent ( pFnFindSuppressionPoint, &FindSuppressionPoint_Parms, NULL );

	return FindSuppressionPoint_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.FindClosestApproachDistance
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

float ASFXAI_SentryTurret::FindClosestApproachDistance ( class AActor* oActor )
{
	static UFunction* pFnFindClosestApproachDistance = NULL;

	if ( ! pFnFindClosestApproachDistance )
		pFnFindClosestApproachDistance = (UFunction*) UObject::GObjObjects()->Data[ 55664 ];

	ASFXAI_SentryTurret_execFindClosestApproachDistance_Parms FindClosestApproachDistance_Parms;
	FindClosestApproachDistance_Parms.oActor = oActor;

	this->ProcessEvent ( pFnFindClosestApproachDistance, &FindClosestApproachDistance_Parms, NULL );

	return FindClosestApproachDistance_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.TeleportToActor
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// unsigned long                  bForceTeleport                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOffsetTeleport                ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_SentryTurret::TeleportToActor ( class AActor* oActor, unsigned long bForceTeleport, unsigned long bOffsetTeleport )
{
	static UFunction* pFnTeleportToActor = NULL;

	if ( ! pFnTeleportToActor )
		pFnTeleportToActor = (UFunction*) UObject::GObjObjects()->Data[ 46359 ];

	ASFXAI_SentryTurret_execTeleportToActor_Parms TeleportToActor_Parms;
	TeleportToActor_Parms.oActor = oActor;
	TeleportToActor_Parms.bForceTeleport = bForceTeleport;
	TeleportToActor_Parms.bOffsetTeleport = bOffsetTeleport;

	this->ProcessEvent ( pFnTeleportToActor, &TeleportToActor_Parms, NULL );

	return TeleportToActor_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.IsInWeaponRange
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool ASFXAI_SentryTurret::IsInWeaponRange ( class AActor* oTarget )
{
	static UFunction* pFnIsInWeaponRange = NULL;

	if ( ! pFnIsInWeaponRange )
		pFnIsInWeaponRange = (UFunction*) UObject::GObjObjects()->Data[ 55653 ];

	ASFXAI_SentryTurret_execIsInWeaponRange_Parms IsInWeaponRange_Parms;
	IsInWeaponRange_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnIsInWeaponRange, &IsInWeaponRange_Parms, NULL );

	return IsInWeaponRange_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.TargetRange
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXAI_SentryTurret::TargetRange ( )
{
	static UFunction* pFnTargetRange = NULL;

	if ( ! pFnTargetRange )
		pFnTargetRange = (UFunction*) UObject::GObjObjects()->Data[ 55651 ];

	ASFXAI_SentryTurret_execTargetRange_Parms TargetRange_Parms;

	this->ProcessEvent ( pFnTargetRange, &TargetRange_Parms, NULL );

	return TargetRange_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ShootWeaponAtFireTarget
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DmgThreshold                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceShoot                    ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_SentryTurret::ShootWeaponAtFireTarget ( float DmgThreshold, unsigned long bForceShoot )
{
	static UFunction* pFnShootWeaponAtFireTarget = NULL;

	if ( ! pFnShootWeaponAtFireTarget )
		pFnShootWeaponAtFireTarget = (UFunction*) UObject::GObjObjects()->Data[ 55643 ];

	ASFXAI_SentryTurret_execShootWeaponAtFireTarget_Parms ShootWeaponAtFireTarget_Parms;
	ShootWeaponAtFireTarget_Parms.DmgThreshold = DmgThreshold;
	ShootWeaponAtFireTarget_Parms.bForceShoot = bForceShoot;

	this->ProcessEvent ( pFnShootWeaponAtFireTarget, &ShootWeaponAtFireTarget_Parms, NULL );

	return ShootWeaponAtFireTarget_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.CanShootWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool ASFXAI_SentryTurret::CanShootWeapon ( class AActor* oTarget )
{
	static UFunction* pFnCanShootWeapon = NULL;

	if ( ! pFnCanShootWeapon )
		pFnCanShootWeapon = (UFunction*) UObject::GObjObjects()->Data[ 55640 ];

	ASFXAI_SentryTurret_execCanShootWeapon_Parms CanShootWeapon_Parms;
	CanShootWeapon_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanShootWeapon, &CanShootWeapon_Parms, NULL );

	return CanShootWeapon_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ChooseDefensivePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPower                        ( CPF_Parm | CPF_OutParm )

bool ASFXAI_SentryTurret::ChooseDefensivePower ( struct FName* nmPower )
{
	static UFunction* pFnChooseDefensivePower = NULL;

	if ( ! pFnChooseDefensivePower )
		pFnChooseDefensivePower = (UFunction*) UObject::GObjObjects()->Data[ 55633 ];

	ASFXAI_SentryTurret_execChooseDefensivePower_Parms ChooseDefensivePower_Parms;

	this->ProcessEvent ( pFnChooseDefensivePower, &ChooseDefensivePower_Parms, NULL );

	if ( nmPower )
		memcpy ( nmPower, &ChooseDefensivePower_Parms.nmPower, 0x8 );

	return ChooseDefensivePower_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ChooseAttackPower
// [0x00424002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// unsigned long                  bPlayerRequest                 ( CPF_OptionalParm | CPF_Parm )
// struct FName                   nmPower                        ( CPF_Parm | CPF_OutParm )
// int                            nRequiresAttackTicket          ( CPF_Parm | CPF_OutParm )
// struct FVector                 AttackOrigin                   ( CPF_Parm | CPF_OutParm )

bool ASFXAI_SentryTurret::ChooseAttackPower ( class AActor* oTarget, unsigned long bPlayerRequest, struct FName* nmPower, int* nRequiresAttackTicket, struct FVector* AttackOrigin )
{
	static UFunction* pFnChooseAttackPower = NULL;

	if ( ! pFnChooseAttackPower )
		pFnChooseAttackPower = (UFunction*) UObject::GObjObjects()->Data[ 55616 ];

	ASFXAI_SentryTurret_execChooseAttackPower_Parms ChooseAttackPower_Parms;
	ChooseAttackPower_Parms.oTarget = oTarget;
	ChooseAttackPower_Parms.bPlayerRequest = bPlayerRequest;

	this->ProcessEvent ( pFnChooseAttackPower, &ChooseAttackPower_Parms, NULL );

	if ( nmPower )
		memcpy ( nmPower, &ChooseAttackPower_Parms.nmPower, 0x8 );

	if ( nRequiresAttackTicket )
		*nRequiresAttackTicket = ChooseAttackPower_Parms.nRequiresAttackTicket;

	if ( AttackOrigin )
		memcpy ( AttackOrigin, &ChooseAttackPower_Parms.AttackOrigin, 0xC );

	return ChooseAttackPower_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.CanChoosePower
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class Usfxpowercustomaction*   oPower                         ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_Parm )
// unsigned long                  bPlayerRequest                 ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_SentryTurret::CanChoosePower ( class Usfxpowercustomaction* oPower, class AActor* oTarget, unsigned long bPlayerRequest )
{
	static UFunction* pFnCanChoosePower = NULL;

	if ( ! pFnCanChoosePower )
		pFnCanChoosePower = (UFunction*) UObject::GObjObjects()->Data[ 55608 ];

	ASFXAI_SentryTurret_execCanChoosePower_Parms CanChoosePower_Parms;
	CanChoosePower_Parms.oPower = oPower;
	CanChoosePower_Parms.oTarget = oTarget;
	CanChoosePower_Parms.bPlayerRequest = bPlayerRequest;

	this->ProcessEvent ( pFnCanChoosePower, &CanChoosePower_Parms, NULL );

	return CanChoosePower_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.UpdateMovementFocus
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::UpdateMovementFocus ( )
{
	static UFunction* pFnUpdateMovementFocus = NULL;

	if ( ! pFnUpdateMovementFocus )
		pFnUpdateMovementFocus = (UFunction*) UObject::GObjObjects()->Data[ 55606 ];

	ASFXAI_SentryTurret_execUpdateMovementFocus_Parms UpdateMovementFocus_Parms;

	this->ProcessEvent ( pFnUpdateMovementFocus, &UpdateMovementFocus_Parms, NULL );
};

// Function SFXGame.sfxai_core.UpdateMovementActions
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXAI_SentryTurret::eventUpdateMovementActions ( )
{
	static UFunction* pFnUpdateMovementActions = NULL;

	if ( ! pFnUpdateMovementActions )
		pFnUpdateMovementActions = (UFunction*) UObject::GObjObjects()->Data[ 55604 ];

	ASFXAI_SentryTurret_eventUpdateMovementActions_Parms UpdateMovementActions_Parms;

	this->ProcessEvent ( pFnUpdateMovementActions, &UpdateMovementActions_Parms, NULL );
};

// Function SFXGame.sfxai_core.OnEnteredPlaypen
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXAI_SentryTurret::eventOnEnteredPlaypen ( )
{
	static UFunction* pFnOnEnteredPlaypen = NULL;

	if ( ! pFnOnEnteredPlaypen )
		pFnOnEnteredPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 55602 ];

	ASFXAI_SentryTurret_eventOnEnteredPlaypen_Parms OnEnteredPlaypen_Parms;

	this->ProcessEvent ( pFnOnEnteredPlaypen, &OnEnteredPlaypen_Parms, NULL );
};

// Function SFXGame.sfxai_core.GetPeriodicMoveInterval
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXAI_SentryTurret::GetPeriodicMoveInterval ( )
{
	static UFunction* pFnGetPeriodicMoveInterval = NULL;

	if ( ! pFnGetPeriodicMoveInterval )
		pFnGetPeriodicMoveInterval = (UFunction*) UObject::GObjObjects()->Data[ 55600 ];

	ASFXAI_SentryTurret_execGetPeriodicMoveInterval_Parms GetPeriodicMoveInterval_Parms;

	this->ProcessEvent ( pFnGetPeriodicMoveInterval, &GetPeriodicMoveInterval_Parms, NULL );

	return GetPeriodicMoveInterval_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.RespondToBump
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool ASFXAI_SentryTurret::RespondToBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnRespondToBump = NULL;

	if ( ! pFnRespondToBump )
		pFnRespondToBump = (UFunction*) UObject::GObjObjects()->Data[ 55596 ];

	ASFXAI_SentryTurret_execRespondToBump_Parms RespondToBump_Parms;
	RespondToBump_Parms.Other = Other;
	memcpy ( &RespondToBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnRespondToBump, &RespondToBump_Parms, NULL );

	return RespondToBump_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.DrawLocationMarker
// [0x00024002] 
// Parameters infos:
// struct FVector                 vLocation                      ( CPF_Parm )
// float                          fSize                          ( CPF_OptionalParm | CPF_Parm )
// int                            nRed                           ( CPF_OptionalParm | CPF_Parm )
// int                            nGreen                         ( CPF_OptionalParm | CPF_Parm )
// int                            nBlue                          ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_SentryTurret::DrawLocationMarker ( struct FVector vLocation, float fSize, int nRed, int nGreen, int nBlue )
{
	static UFunction* pFnDrawLocationMarker = NULL;

	if ( ! pFnDrawLocationMarker )
		pFnDrawLocationMarker = (UFunction*) UObject::GObjObjects()->Data[ 55588 ];

	ASFXAI_SentryTurret_execDrawLocationMarker_Parms DrawLocationMarker_Parms;
	memcpy ( &DrawLocationMarker_Parms.vLocation, &vLocation, 0xC );
	DrawLocationMarker_Parms.fSize = fSize;
	DrawLocationMarker_Parms.nRed = nRed;
	DrawLocationMarker_Parms.nGreen = nGreen;
	DrawLocationMarker_Parms.nBlue = nBlue;

	this->ProcessEvent ( pFnDrawLocationMarker, &DrawLocationMarker_Parms, NULL );
};

// Function SFXGame.sfxai_core.BioClearCrossLevelReferences
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULevel*                  oLevel                         ( CPF_Parm )

void ASFXAI_SentryTurret::eventBioClearCrossLevelReferences ( class ULevel* oLevel )
{
	static UFunction* pFnBioClearCrossLevelReferences = NULL;

	if ( ! pFnBioClearCrossLevelReferences )
		pFnBioClearCrossLevelReferences = (UFunction*) UObject::GObjObjects()->Data[ 55586 ];

	ASFXAI_SentryTurret_eventBioClearCrossLevelReferences_Parms BioClearCrossLevelReferences_Parms;
	BioClearCrossLevelReferences_Parms.oLevel = oLevel;

	this->ProcessEvent ( pFnBioClearCrossLevelReferences, &BioClearCrossLevelReferences_Parms, NULL );
};

// Function SFXGame.sfxai_core.IsActorInPlaypen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool ASFXAI_SentryTurret::IsActorInPlaypen ( class AActor* oActor )
{
	static UFunction* pFnIsActorInPlaypen = NULL;

	if ( ! pFnIsActorInPlaypen )
		pFnIsActorInPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 55583 ];

	ASFXAI_SentryTurret_execIsActorInPlaypen_Parms IsActorInPlaypen_Parms;
	IsActorInPlaypen_Parms.oActor = oActor;

	this->ProcessEvent ( pFnIsActorInPlaypen, &IsActorInPlaypen_Parms, NULL );

	return IsActorInPlaypen_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.OnLeftPlaypen
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXAI_SentryTurret::eventOnLeftPlaypen ( )
{
	static UFunction* pFnOnLeftPlaypen = NULL;

	if ( ! pFnOnLeftPlaypen )
		pFnOnLeftPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 55581 ];

	ASFXAI_SentryTurret_eventOnLeftPlaypen_Parms OnLeftPlaypen_Parms;

	this->ProcessEvent ( pFnOnLeftPlaypen, &OnLeftPlaypen_Parms, NULL );
};

// Function SFXGame.sfxai_core.IsReturningToPlaypen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::IsReturningToPlaypen ( )
{
	static UFunction* pFnIsReturningToPlaypen = NULL;

	if ( ! pFnIsReturningToPlaypen )
		pFnIsReturningToPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 53938 ];

	ASFXAI_SentryTurret_execIsReturningToPlaypen_Parms IsReturningToPlaypen_Parms;

	this->ProcessEvent ( pFnIsReturningToPlaypen, &IsReturningToPlaypen_Parms, NULL );

	return IsReturningToPlaypen_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.IsFlankedByTarget
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// unsigned long                  bUseExactLocation              ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_SentryTurret::IsFlankedByTarget ( class AActor* oTarget, unsigned long bUseExactLocation )
{
	static UFunction* pFnIsFlankedByTarget = NULL;

	if ( ! pFnIsFlankedByTarget )
		pFnIsFlankedByTarget = (UFunction*) UObject::GObjObjects()->Data[ 55570 ];

	ASFXAI_SentryTurret_execIsFlankedByTarget_Parms IsFlankedByTarget_Parms;
	IsFlankedByTarget_Parms.oTarget = oTarget;
	IsFlankedByTarget_Parms.bUseExactLocation = bUseExactLocation;

	this->ProcessEvent ( pFnIsFlankedByTarget, &IsFlankedByTarget_Parms, NULL );

	return IsFlankedByTarget_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.OnEnteringStasis
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::OnEnteringStasis ( )
{
	static UFunction* pFnOnEnteringStasis = NULL;

	if ( ! pFnOnEnteringStasis )
		pFnOnEnteringStasis = (UFunction*) UObject::GObjObjects()->Data[ 55569 ];

	ASFXAI_SentryTurret_execOnEnteringStasis_Parms OnEnteringStasis_Parms;

	this->ProcessEvent ( pFnOnEnteringStasis, &OnEnteringStasis_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyFriendDied
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                FriendPawn                     ( CPF_Parm )

void ASFXAI_SentryTurret::NotifyFriendDied ( class ABioPawn* FriendPawn )
{
	static UFunction* pFnNotifyFriendDied = NULL;

	if ( ! pFnNotifyFriendDied )
		pFnNotifyFriendDied = (UFunction*) UObject::GObjObjects()->Data[ 55566 ];

	ASFXAI_SentryTurret_execNotifyFriendDied_Parms NotifyFriendDied_Parms;
	NotifyFriendDied_Parms.FriendPawn = FriendPawn;

	this->ProcessEvent ( pFnNotifyFriendDied, &NotifyFriendDied_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyDeathBlow
// [0x00020002] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )

void ASFXAI_SentryTurret::NotifyDeathBlow ( class UClass* DamageType )
{
	static UFunction* pFnNotifyDeathBlow = NULL;

	if ( ! pFnNotifyDeathBlow )
		pFnNotifyDeathBlow = (UFunction*) UObject::GObjObjects()->Data[ 55562 ];

	ASFXAI_SentryTurret_execNotifyDeathBlow_Parms NotifyDeathBlow_Parms;
	NotifyDeathBlow_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnNotifyDeathBlow, &NotifyDeathBlow_Parms, NULL );
};

// Function SFXGame.sfxai_core.CheckPendingWeaponSwitch
// [0x00020000] 
// Parameters infos:

void ASFXAI_SentryTurret::CheckPendingWeaponSwitch ( )
{
	static UFunction* pFnCheckPendingWeaponSwitch = NULL;

	if ( ! pFnCheckPendingWeaponSwitch )
		pFnCheckPendingWeaponSwitch = (UFunction*) UObject::GObjObjects()->Data[ 55561 ];

	ASFXAI_SentryTurret_execCheckPendingWeaponSwitch_Parms CheckPendingWeaponSwitch_Parms;

	this->ProcessEvent ( pFnCheckPendingWeaponSwitch, &CheckPendingWeaponSwitch_Parms, NULL );
};

// Function SFXGame.sfxai_core.PlayAmbientVoc
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::PlayAmbientVoc ( )
{
	static UFunction* pFnPlayAmbientVoc = NULL;

	if ( ! pFnPlayAmbientVoc )
		pFnPlayAmbientVoc = (UFunction*) UObject::GObjObjects()->Data[ 55560 ];

	ASFXAI_SentryTurret_execPlayAmbientVoc_Parms PlayAmbientVoc_Parms;

	this->ProcessEvent ( pFnPlayAmbientVoc, &PlayAmbientVoc_Parms, NULL );
};

// Function SFXGame.sfxai_core.Taunt
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::Taunt ( )
{
	static UFunction* pFnTaunt = NULL;

	if ( ! pFnTaunt )
		pFnTaunt = (UFunction*) UObject::GObjObjects()->Data[ 55559 ];

	ASFXAI_SentryTurret_execTaunt_Parms Taunt_Parms;

	this->ProcessEvent ( pFnTaunt, &Taunt_Parms, NULL );
};

// Function SFXGame.sfxai_core.IsInFightingState
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::IsInFightingState ( )
{
	static UFunction* pFnIsInFightingState = NULL;

	if ( ! pFnIsInFightingState )
		pFnIsInFightingState = (UFunction*) UObject::GObjObjects()->Data[ 45913 ];

	ASFXAI_SentryTurret_execIsInFightingState_Parms IsInFightingState_Parms;

	this->ProcessEvent ( pFnIsInFightingState, &IsInFightingState_Parms, NULL );

	return IsInFightingState_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.SwitchWeapon
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              oWeapon                        ( CPF_Parm )

void ASFXAI_SentryTurret::SwitchWeapon ( class ASFXWeapon* oWeapon )
{
	static UFunction* pFnSwitchWeapon = NULL;

	if ( ! pFnSwitchWeapon )
		pFnSwitchWeapon = (UFunction*) UObject::GObjObjects()->Data[ 55556 ];

	ASFXAI_SentryTurret_execSwitchWeapon_Parms SwitchWeapon_Parms;
	SwitchWeapon_Parms.oWeapon = oWeapon;

	this->ProcessEvent ( pFnSwitchWeapon, &SwitchWeapon_Parms, NULL );
};

// Function SFXGame.sfxai_core.SetSquadIntoCombat
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::SetSquadIntoCombat ( )
{
	static UFunction* pFnSetSquadIntoCombat = NULL;

	if ( ! pFnSetSquadIntoCombat )
		pFnSetSquadIntoCombat = (UFunction*) UObject::GObjObjects()->Data[ 55555 ];

	ASFXAI_SentryTurret_execSetSquadIntoCombat_Parms SetSquadIntoCombat_Parms;

	this->ProcessEvent ( pFnSetSquadIntoCombat, &SetSquadIntoCombat_Parms, NULL );
};

// Function SFXGame.sfxai_core.GetPowerUsePercent
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXAI_SentryTurret::GetPowerUsePercent ( )
{
	static UFunction* pFnGetPowerUsePercent = NULL;

	if ( ! pFnGetPowerUsePercent )
		pFnGetPowerUsePercent = (UFunction*) UObject::GObjObjects()->Data[ 55553 ];

	ASFXAI_SentryTurret_execGetPowerUsePercent_Parms GetPowerUsePercent_Parms;

	this->ProcessEvent ( pFnGetPowerUsePercent, &GetPowerUsePercent_Parms, NULL );

	return GetPowerUsePercent_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ReleaseTicket
// [0x00024002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// unsigned char                  eTicket                        ( CPF_Parm )
// unsigned long                  bKillAttackTicket              ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_SentryTurret::ReleaseTicket ( class AActor* oTarget, unsigned char eTicket, unsigned long bKillAttackTicket )
{
	static UFunction* pFnReleaseTicket = NULL;

	if ( ! pFnReleaseTicket )
		pFnReleaseTicket = (UFunction*) UObject::GObjObjects()->Data[ 55548 ];

	ASFXAI_SentryTurret_execReleaseTicket_Parms ReleaseTicket_Parms;
	ReleaseTicket_Parms.oTarget = oTarget;
	ReleaseTicket_Parms.eTicket = eTicket;
	ReleaseTicket_Parms.bKillAttackTicket = bKillAttackTicket;

	this->ProcessEvent ( pFnReleaseTicket, &ReleaseTicket_Parms, NULL );
};

// Function SFXGame.sfxai_core.AcquireTicket
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// unsigned char                  eTicket                        ( CPF_Parm )
// int                            nAttackTicketCost              ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_SentryTurret::AcquireTicket ( class AActor* oTarget, unsigned char eTicket, int nAttackTicketCost )
{
	static UFunction* pFnAcquireTicket = NULL;

	if ( ! pFnAcquireTicket )
		pFnAcquireTicket = (UFunction*) UObject::GObjObjects()->Data[ 55539 ];

	ASFXAI_SentryTurret_execAcquireTicket_Parms AcquireTicket_Parms;
	AcquireTicket_Parms.oTarget = oTarget;
	AcquireTicket_Parms.eTicket = eTicket;
	AcquireTicket_Parms.nAttackTicketCost = nAttackTicketCost;

	this->ProcessEvent ( pFnAcquireTicket, &AcquireTicket_Parms, NULL );

	return AcquireTicket_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ClearPowerReservation
// [0x00024002] 
// Parameters infos:
// struct FName                   nmPower                        ( CPF_Parm )
// unsigned long                  bSkipProjectilePowers          ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_SentryTurret::ClearPowerReservation ( struct FName nmPower, unsigned long bSkipProjectilePowers )
{
	static UFunction* pFnClearPowerReservation = NULL;

	if ( ! pFnClearPowerReservation )
		pFnClearPowerReservation = (UFunction*) UObject::GObjObjects()->Data[ 55536 ];

	ASFXAI_SentryTurret_execClearPowerReservation_Parms ClearPowerReservation_Parms;
	memcpy ( &ClearPowerReservation_Parms.nmPower, &nmPower, 0x8 );
	ClearPowerReservation_Parms.bSkipProjectilePowers = bSkipProjectilePowers;

	this->ProcessEvent ( pFnClearPowerReservation, &ClearPowerReservation_Parms, NULL );
};

// Function SFXGame.sfxai_core.RequestPowerReservation
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPower                        ( CPF_Parm )
// unsigned long                  bForceSuccess                  ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_SentryTurret::RequestPowerReservation ( struct FName nmPower, unsigned long bForceSuccess )
{
	static UFunction* pFnRequestPowerReservation = NULL;

	if ( ! pFnRequestPowerReservation )
		pFnRequestPowerReservation = (UFunction*) UObject::GObjObjects()->Data[ 55525 ];

	ASFXAI_SentryTurret_execRequestPowerReservation_Parms RequestPowerReservation_Parms;
	memcpy ( &RequestPowerReservation_Parms.nmPower, &nmPower, 0x8 );
	RequestPowerReservation_Parms.bForceSuccess = bForceSuccess;

	this->ProcessEvent ( pFnRequestPowerReservation, &RequestPowerReservation_Parms, NULL );

	return RequestPowerReservation_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.RELOAD
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::RELOAD ( )
{
	static UFunction* pFnRELOAD = NULL;

	if ( ! pFnRELOAD )
		pFnRELOAD = (UFunction*) UObject::GObjObjects()->Data[ 55522 ];

	ASFXAI_SentryTurret_execRELOAD_Parms RELOAD_Parms;

	this->ProcessEvent ( pFnRELOAD, &RELOAD_Parms, NULL );

	return RELOAD_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ShouldReload
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::ShouldReload ( )
{
	static UFunction* pFnShouldReload = NULL;

	if ( ! pFnShouldReload )
		pFnShouldReload = (UFunction*) UObject::GObjObjects()->Data[ 55514 ];

	ASFXAI_SentryTurret_execShouldReload_Parms ShouldReload_Parms;

	this->ProcessEvent ( pFnShouldReload, &ShouldReload_Parms, NULL );

	return ShouldReload_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ChooseAttack
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// struct FName                   nmPowerName                    ( CPF_Parm | CPF_OutParm )

bool ASFXAI_SentryTurret::ChooseAttack ( class AActor* oTarget, struct FName* nmPowerName )
{
	static UFunction* pFnChooseAttack = NULL;

	if ( ! pFnChooseAttack )
		pFnChooseAttack = (UFunction*) UObject::GObjObjects()->Data[ 55503 ];

	ASFXAI_SentryTurret_execChooseAttack_Parms ChooseAttack_Parms;
	ChooseAttack_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnChooseAttack, &ChooseAttack_Parms, NULL );

	if ( nmPowerName )
		memcpy ( nmPowerName, &ChooseAttack_Parms.nmPowerName, 0x8 );

	return ChooseAttack_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.Attack
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASFXAI_SentryTurret::Attack ( )
{
	static UFunction* pFnAttack = NULL;

	if ( ! pFnAttack )
		pFnAttack = (UFunction*) UObject::GObjObjects()->Data[ 55495 ];

	ASFXAI_SentryTurret_execAttack_Parms Attack_Parms;

	this->ProcessEvent ( pFnAttack, &Attack_Parms, NULL );

	return Attack_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ClearCancelAction
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::ClearCancelAction ( )
{
	static UFunction* pFnClearCancelAction = NULL;

	if ( ! pFnClearCancelAction )
		pFnClearCancelAction = (UFunction*) UObject::GObjObjects()->Data[ 55494 ];

	ASFXAI_SentryTurret_execClearCancelAction_Parms ClearCancelAction_Parms;

	this->ProcessEvent ( pFnClearCancelAction, &ClearCancelAction_Parms, NULL );
};

// Function SFXGame.sfxai_core.CancelAction
// [0x00024002] 
// Parameters infos:
// int                            nReason                        ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_SentryTurret::CancelAction ( int nReason )
{
	static UFunction* pFnCancelAction = NULL;

	if ( ! pFnCancelAction )
		pFnCancelAction = (UFunction*) UObject::GObjObjects()->Data[ 55487 ];

	ASFXAI_SentryTurret_execCancelAction_Parms CancelAction_Parms;
	CancelAction_Parms.nReason = nReason;

	this->ProcessEvent ( pFnCancelAction, &CancelAction_Parms, NULL );
};

// Function SFXGame.sfxai_core.PrecisionMove
// [0x00020002] 
// Parameters infos:
// struct FVector                 vLocation                      ( CPF_Parm )
// struct FRotator                rRotation                      ( CPF_Parm )

void ASFXAI_SentryTurret::PrecisionMove ( struct FVector vLocation, struct FRotator rRotation )
{
	static UFunction* pFnPrecisionMove = NULL;

	if ( ! pFnPrecisionMove )
		pFnPrecisionMove = (UFunction*) UObject::GObjObjects()->Data[ 55483 ];

	ASFXAI_SentryTurret_execPrecisionMove_Parms PrecisionMove_Parms;
	memcpy ( &PrecisionMove_Parms.vLocation, &vLocation, 0xC );
	memcpy ( &PrecisionMove_Parms.rRotation, &rRotation, 0xC );

	this->ProcessEvent ( pFnPrecisionMove, &PrecisionMove_Parms, NULL );
};

// Function SFXGame.sfxai_core.WantsToRun
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDistance                      ( CPF_Parm )

bool ASFXAI_SentryTurret::WantsToRun ( float fDistance )
{
	static UFunction* pFnWantsToRun = NULL;

	if ( ! pFnWantsToRun )
		pFnWantsToRun = (UFunction*) UObject::GObjObjects()->Data[ 55479 ];

	ASFXAI_SentryTurret_execWantsToRun_Parms WantsToRun_Parms;
	WantsToRun_Parms.fDistance = fDistance;

	this->ProcessEvent ( pFnWantsToRun, &WantsToRun_Parms, NULL );

	return WantsToRun_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.SetMovementSpeed
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::SetMovementSpeed ( )
{
	static UFunction* pFnSetMovementSpeed = NULL;

	if ( ! pFnSetMovementSpeed )
		pFnSetMovementSpeed = (UFunction*) UObject::GObjObjects()->Data[ 55476 ];

	ASFXAI_SentryTurret_execSetMovementSpeed_Parms SetMovementSpeed_Parms;

	this->ProcessEvent ( pFnSetMovementSpeed, &SetMovementSpeed_Parms, NULL );
};

// Function SFXGame.sfxai_core.PeriodicMoveCheck
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::PeriodicMoveCheck ( )
{
	static UFunction* pFnPeriodicMoveCheck = NULL;

	if ( ! pFnPeriodicMoveCheck )
		pFnPeriodicMoveCheck = (UFunction*) UObject::GObjObjects()->Data[ 55474 ];

	ASFXAI_SentryTurret_execPeriodicMoveCheck_Parms PeriodicMoveCheck_Parms;

	this->ProcessEvent ( pFnPeriodicMoveCheck, &PeriodicMoveCheck_Parms, NULL );
};

// Function SFXGame.sfxai_core.SetMoveGoal
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  NewMoveGoal                    ( CPF_Parm )
// float                          NewMoveOffset                  ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_SentryTurret::SetMoveGoal ( class AActor* NewMoveGoal, float NewMoveOffset )
{
	static UFunction* pFnSetMoveGoal = NULL;

	if ( ! pFnSetMoveGoal )
		pFnSetMoveGoal = (UFunction*) UObject::GObjObjects()->Data[ 55470 ];

	ASFXAI_SentryTurret_execSetMoveGoal_Parms SetMoveGoal_Parms;
	SetMoveGoal_Parms.NewMoveGoal = NewMoveGoal;
	SetMoveGoal_Parms.NewMoveOffset = NewMoveOffset;

	this->ProcessEvent ( pFnSetMoveGoal, &SetMoveGoal_Parms, NULL );

	return SetMoveGoal_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ApplyBasePathConstraints
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::ApplyBasePathConstraints ( )
{
	static UFunction* pFnApplyBasePathConstraints = NULL;

	if ( ! pFnApplyBasePathConstraints )
		pFnApplyBasePathConstraints = (UFunction*) UObject::GObjObjects()->Data[ 55466 ];

	ASFXAI_SentryTurret_execApplyBasePathConstraints_Parms ApplyBasePathConstraints_Parms;

	this->ProcessEvent ( pFnApplyBasePathConstraints, &ApplyBasePathConstraints_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyWeaponDelayFinished
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::NotifyWeaponDelayFinished ( )
{
	static UFunction* pFnNotifyWeaponDelayFinished = NULL;

	if ( ! pFnNotifyWeaponDelayFinished )
		pFnNotifyWeaponDelayFinished = (UFunction*) UObject::GObjObjects()->Data[ 55464 ];

	ASFXAI_SentryTurret_execNotifyWeaponDelayFinished_Parms NotifyWeaponDelayFinished_Parms;

	this->ProcessEvent ( pFnNotifyWeaponDelayFinished, &NotifyWeaponDelayFinished_Parms, NULL );
};

// Function SFXGame.sfxai_core.CalculateGrenadeArc
// [0x00420002] 
// Parameters infos:
// float                          MinSpeed                       ( CPF_Parm )
// float                          MaxSpeed                       ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// float                          InitialSpeed                   ( CPF_Parm | CPF_OutParm )
// struct FVector                 InitialDirection               ( CPF_Parm | CPF_OutParm )

void ASFXAI_SentryTurret::CalculateGrenadeArc ( float MinSpeed, float MaxSpeed, float MaxRange, float* InitialSpeed, struct FVector* InitialDirection )
{
	static UFunction* pFnCalculateGrenadeArc = NULL;

	if ( ! pFnCalculateGrenadeArc )
		pFnCalculateGrenadeArc = (UFunction*) UObject::GObjObjects()->Data[ 55450 ];

	ASFXAI_SentryTurret_execCalculateGrenadeArc_Parms CalculateGrenadeArc_Parms;
	CalculateGrenadeArc_Parms.MinSpeed = MinSpeed;
	CalculateGrenadeArc_Parms.MaxSpeed = MaxSpeed;
	CalculateGrenadeArc_Parms.MaxRange = MaxRange;

	this->ProcessEvent ( pFnCalculateGrenadeArc, &CalculateGrenadeArc_Parms, NULL );

	if ( InitialSpeed )
		*InitialSpeed = CalculateGrenadeArc_Parms.InitialSpeed;

	if ( InitialDirection )
		memcpy ( InitialDirection, &CalculateGrenadeArc_Parms.InitialDirection, 0xC );
};

// Function SFXGame.sfxai_core.GetAimLocation
// [0x00024002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oAimTarget                     ( CPF_OptionalParm | CPF_Parm )

struct FVector ASFXAI_SentryTurret::GetAimLocation ( class AActor* oAimTarget )
{
	static UFunction* pFnGetAimLocation = NULL;

	if ( ! pFnGetAimLocation )
		pFnGetAimLocation = (UFunction*) UObject::GObjObjects()->Data[ 55437 ];

	ASFXAI_SentryTurret_execGetAimLocation_Parms GetAimLocation_Parms;
	GetAimLocation_Parms.oAimTarget = oAimTarget;

	this->ProcessEvent ( pFnGetAimLocation, &GetAimLocation_Parms, NULL );

	return GetAimLocation_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.GetBestTargetCoverAction
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FCoverInfo              TargetCover                    ( CPF_Parm )

unsigned char ASFXAI_SentryTurret::GetBestTargetCoverAction ( class ABioPawn* TargetPawn, struct FCoverInfo TargetCover )
{
	static UFunction* pFnGetBestTargetCoverAction = NULL;

	if ( ! pFnGetBestTargetCoverAction )
		pFnGetBestTargetCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 55433 ];

	ASFXAI_SentryTurret_execGetBestTargetCoverAction_Parms GetBestTargetCoverAction_Parms;
	GetBestTargetCoverAction_Parms.TargetPawn = TargetPawn;
	memcpy ( &GetBestTargetCoverAction_Parms.TargetCover, &TargetCover, 0x8 );

	this->ProcessEvent ( pFnGetBestTargetCoverAction, &GetBestTargetCoverAction_Parms, NULL );

	return GetBestTargetCoverAction_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.RespondToPush
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::RespondToPush ( )
{
	static UFunction* pFnRespondToPush = NULL;

	if ( ! pFnRespondToPush )
		pFnRespondToPush = (UFunction*) UObject::GObjObjects()->Data[ 55428 ];

	ASFXAI_SentryTurret_execRespondToPush_Parms RespondToPush_Parms;

	this->ProcessEvent ( pFnRespondToPush, &RespondToPush_Parms, NULL );

	return RespondToPush_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.PushPawn
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXAI_SentryTurret::PushPawn ( class ABioPawn* oPawn, struct FVector HitNormal )
{
	static UFunction* pFnPushPawn = NULL;

	if ( ! pFnPushPawn )
		pFnPushPawn = (UFunction*) UObject::GObjObjects()->Data[ 55422 ];

	ASFXAI_SentryTurret_execPushPawn_Parms PushPawn_Parms;
	PushPawn_Parms.oPawn = oPawn;
	memcpy ( &PushPawn_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnPushPawn, &PushPawn_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyEnemyVisible
// [0x00020002] 
// Parameters infos:
// int                            EnemyIdx                       ( CPF_Parm )
// float                          TimeSinceSeen                  ( CPF_Parm )

void ASFXAI_SentryTurret::NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen )
{
	static UFunction* pFnNotifyEnemyVisible = NULL;

	if ( ! pFnNotifyEnemyVisible )
		pFnNotifyEnemyVisible = (UFunction*) UObject::GObjObjects()->Data[ 55418 ];

	ASFXAI_SentryTurret_execNotifyEnemyVisible_Parms NotifyEnemyVisible_Parms;
	NotifyEnemyVisible_Parms.EnemyIdx = EnemyIdx;
	NotifyEnemyVisible_Parms.TimeSinceSeen = TimeSinceSeen;

	this->ProcessEvent ( pFnNotifyEnemyVisible, &NotifyEnemyVisible_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyHitWall
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )

bool ASFXAI_SentryTurret::NotifyHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = (UFunction*) UObject::GObjObjects()->Data[ 55410 ];

	ASFXAI_SentryTurret_execNotifyHitWall_Parms NotifyHitWall_Parms;
	memcpy ( &NotifyHitWall_Parms.HitNormal, &HitNormal, 0xC );
	NotifyHitWall_Parms.Wall = Wall;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );

	return NotifyHitWall_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.NotifyBump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool ASFXAI_SentryTurret::NotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 55399 ];

	ASFXAI_SentryTurret_execNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.NotifyUnderAttack
// [0x00020002] 
// Parameters infos:
// unsigned long                  bHit                           ( CPF_Parm )

void ASFXAI_SentryTurret::NotifyUnderAttack ( unsigned long bHit )
{
	static UFunction* pFnNotifyUnderAttack = NULL;

	if ( ! pFnNotifyUnderAttack )
		pFnNotifyUnderAttack = (UFunction*) UObject::GObjObjects()->Data[ 55397 ];

	ASFXAI_SentryTurret_execNotifyUnderAttack_Parms NotifyUnderAttack_Parms;
	NotifyUnderAttack_Parms.bHit = bHit;

	this->ProcessEvent ( pFnNotifyUnderAttack, &NotifyUnderAttack_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyPendingPowerImpact
// [0x00020002] 
// Parameters infos:
// struct FName                   Label                          ( CPF_Parm )
// float                          TimeBeforeImpact               ( CPF_Parm )
// class Usfxpowercustomaction*   Power                          ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* Projectile                     ( CPF_Parm )

void ASFXAI_SentryTurret::NotifyPendingPowerImpact ( struct FName Label, float TimeBeforeImpact, class Usfxpowercustomaction* Power, class ASFXProjectile_PowerCustomAction* Projectile )
{
	static UFunction* pFnNotifyPendingPowerImpact = NULL;

	if ( ! pFnNotifyPendingPowerImpact )
		pFnNotifyPendingPowerImpact = (UFunction*) UObject::GObjObjects()->Data[ 55390 ];

	ASFXAI_SentryTurret_execNotifyPendingPowerImpact_Parms NotifyPendingPowerImpact_Parms;
	memcpy ( &NotifyPendingPowerImpact_Parms.Label, &Label, 0x8 );
	NotifyPendingPowerImpact_Parms.TimeBeforeImpact = TimeBeforeImpact;
	NotifyPendingPowerImpact_Parms.Power = Power;
	NotifyPendingPowerImpact_Parms.Projectile = Projectile;

	this->ProcessEvent ( pFnNotifyPendingPowerImpact, &NotifyPendingPowerImpact_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyNearMiss
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXAI_SentryTurret::NotifyNearMiss ( struct FVector HitLocation )
{
	static UFunction* pFnNotifyNearMiss = NULL;

	if ( ! pFnNotifyNearMiss )
		pFnNotifyNearMiss = (UFunction*) UObject::GObjObjects()->Data[ 55387 ];

	ASFXAI_SentryTurret_execNotifyNearMiss_Parms NotifyNearMiss_Parms;
	memcpy ( &NotifyNearMiss_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnNotifyNearMiss, &NotifyNearMiss_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             instigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void ASFXAI_SentryTurret::NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 55379 ];

	ASFXAI_SentryTurret_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.instigatedBy = instigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function SFXGame.sfxai_core.GetBestCoverAction
// [0x00C20003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCoverInfo              ChkCover                       ( CPF_Parm )
// class AActor*                  ChkTarget                      ( CPF_Parm )
// unsigned char                  AttackerCoverAction            ( CPF_Parm | CPF_OutParm )
// unsigned char                  TargetCoverAction              ( CPF_Parm | CPF_OutParm )

bool ASFXAI_SentryTurret::GetBestCoverAction ( struct FCoverInfo ChkCover, class AActor* ChkTarget, unsigned char* AttackerCoverAction, unsigned char* TargetCoverAction )
{
	static UFunction* pFnGetBestCoverAction = NULL;

	if ( ! pFnGetBestCoverAction )
		pFnGetBestCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 55362 ];

	ASFXAI_SentryTurret_execGetBestCoverAction_Parms GetBestCoverAction_Parms;
	memcpy ( &GetBestCoverAction_Parms.ChkCover, &ChkCover, 0x8 );
	GetBestCoverAction_Parms.ChkTarget = ChkTarget;

	this->ProcessEvent ( pFnGetBestCoverAction, &GetBestCoverAction_Parms, NULL );

	if ( AttackerCoverAction )
		*AttackerCoverAction = GetBestCoverAction_Parms.AttackerCoverAction;

	if ( TargetCoverAction )
		*TargetCoverAction = GetBestCoverAction_Parms.TargetCoverAction;

	return GetBestCoverAction_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.CanAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool ASFXAI_SentryTurret::CanAttack ( class AActor* oTarget )
{
	static UFunction* pFnCanAttack = NULL;

	if ( ! pFnCanAttack )
		pFnCanAttack = (UFunction*) UObject::GObjObjects()->Data[ 55347 ];

	ASFXAI_SentryTurret_execCanAttack_Parms CanAttack_Parms;
	CanAttack_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanAttack, &CanAttack_Parms, NULL );

	return CanAttack_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.GetAttackOrigin
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// struct FVector                 AttackOrigin                   ( CPF_Parm | CPF_OutParm )

bool ASFXAI_SentryTurret::GetAttackOrigin ( class AActor* oTarget, struct FVector* AttackOrigin )
{
	static UFunction* pFnGetAttackOrigin = NULL;

	if ( ! pFnGetAttackOrigin )
		pFnGetAttackOrigin = (UFunction*) UObject::GObjObjects()->Data[ 55343 ];

	ASFXAI_SentryTurret_execGetAttackOrigin_Parms GetAttackOrigin_Parms;
	GetAttackOrigin_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnGetAttackOrigin, &GetAttackOrigin_Parms, NULL );

	if ( AttackOrigin )
		memcpy ( AttackOrigin, &GetAttackOrigin_Parms.AttackOrigin, 0xC );

	return GetAttackOrigin_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.GetAdjustedAimFor
// [0x00020002] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ASFXAI_SentryTurret::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 55320 ];

	ASFXAI_SentryTurret_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.UpdateAccuracy
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::UpdateAccuracy ( )
{
	static UFunction* pFnUpdateAccuracy = NULL;

	if ( ! pFnUpdateAccuracy )
		pFnUpdateAccuracy = (UFunction*) UObject::GObjObjects()->Data[ 55317 ];

	ASFXAI_SentryTurret_execUpdateAccuracy_Parms UpdateAccuracy_Parms;

	this->ProcessEvent ( pFnUpdateAccuracy, &UpdateAccuracy_Parms, NULL );
};

// Function SFXGame.sfxai_core.ResetAimInstability
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::ResetAimInstability ( )
{
	static UFunction* pFnResetAimInstability = NULL;

	if ( ! pFnResetAimInstability )
		pFnResetAimInstability = (UFunction*) UObject::GObjObjects()->Data[ 55314 ];

	ASFXAI_SentryTurret_execResetAimInstability_Parms ResetAimInstability_Parms;

	this->ProcessEvent ( pFnResetAimInstability, &ResetAimInstability_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyChangedWeapon
// [0x00020002] 
// Parameters infos:
// class AWeapon*                 PrevWeapon                     ( CPF_Parm )
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void ASFXAI_SentryTurret::NotifyChangedWeapon ( class AWeapon* PrevWeapon, class AWeapon* NewWeapon )
{
	static UFunction* pFnNotifyChangedWeapon = NULL;

	if ( ! pFnNotifyChangedWeapon )
		pFnNotifyChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 55307 ];

	ASFXAI_SentryTurret_execNotifyChangedWeapon_Parms NotifyChangedWeapon_Parms;
	NotifyChangedWeapon_Parms.PrevWeapon = PrevWeapon;
	NotifyChangedWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnNotifyChangedWeapon, &NotifyChangedWeapon_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyAiming
// [0x00020000] 
// Parameters infos:
// class AActor*                  AimTarget                      ( CPF_Parm )
// unsigned long                  bAiming                        ( CPF_Parm )

void ASFXAI_SentryTurret::NotifyAiming ( class AActor* AimTarget, unsigned long bAiming )
{
	static UFunction* pFnNotifyAiming = NULL;

	if ( ! pFnNotifyAiming )
		pFnNotifyAiming = (UFunction*) UObject::GObjObjects()->Data[ 55304 ];

	ASFXAI_SentryTurret_execNotifyAiming_Parms NotifyAiming_Parms;
	NotifyAiming_Parms.AimTarget = AimTarget;
	NotifyAiming_Parms.bAiming = bAiming;

	this->ProcessEvent ( pFnNotifyAiming, &NotifyAiming_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyWeaponFinishedFiring
// [0x00020002] 
// Parameters infos:
// class AWeapon*                 W                              ( CPF_Parm )
// unsigned char                  FireMode                       ( CPF_Parm )

void ASFXAI_SentryTurret::NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFinishedFiring = NULL;

	if ( ! pFnNotifyWeaponFinishedFiring )
		pFnNotifyWeaponFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 55300 ];

	ASFXAI_SentryTurret_execNotifyWeaponFinishedFiring_Parms NotifyWeaponFinishedFiring_Parms;
	NotifyWeaponFinishedFiring_Parms.W = W;
	NotifyWeaponFinishedFiring_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFinishedFiring, &NotifyWeaponFinishedFiring_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyWeaponFired
// [0x00020002] 
// Parameters infos:
// class AWeapon*                 W                              ( CPF_Parm )
// unsigned char                  FireMode                       ( CPF_Parm )

void ASFXAI_SentryTurret::NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFired = NULL;

	if ( ! pFnNotifyWeaponFired )
		pFnNotifyWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 55295 ];

	ASFXAI_SentryTurret_execNotifyWeaponFired_Parms NotifyWeaponFired_Parms;
	NotifyWeaponFired_Parms.W = W;
	NotifyWeaponFired_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFired, &NotifyWeaponFired_Parms, NULL );
};

// Function SFXGame.sfxai_core.StartFiring
// [0x00024002] 
// Parameters infos:
// int                            InBurstsToFire                 ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_SentryTurret::StartFiring ( int InBurstsToFire )
{
	static UFunction* pFnStartFiring = NULL;

	if ( ! pFnStartFiring )
		pFnStartFiring = (UFunction*) UObject::GObjObjects()->Data[ 55291 ];

	ASFXAI_SentryTurret_execStartFiring_Parms StartFiring_Parms;
	StartFiring_Parms.InBurstsToFire = InBurstsToFire;

	this->ProcessEvent ( pFnStartFiring, &StartFiring_Parms, NULL );
};

// Function SFXGame.sfxai_core.IsFriendlyBlockingFireLine
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::IsFriendlyBlockingFireLine ( )
{
	static UFunction* pFnIsFriendlyBlockingFireLine = NULL;

	if ( ! pFnIsFriendlyBlockingFireLine )
		pFnIsFriendlyBlockingFireLine = (UFunction*) UObject::GObjObjects()->Data[ 55283 ];

	ASFXAI_SentryTurret_execIsFriendlyBlockingFireLine_Parms IsFriendlyBlockingFireLine_Parms;

	this->ProcessEvent ( pFnIsFriendlyBlockingFireLine, &IsFriendlyBlockingFireLine_Parms, NULL );

	return IsFriendlyBlockingFireLine_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.IsFireLineObstructed
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::IsFireLineObstructed ( )
{
	static UFunction* pFnIsFireLineObstructed = NULL;

	if ( ! pFnIsFireLineObstructed )
		pFnIsFireLineObstructed = (UFunction*) UObject::GObjObjects()->Data[ 55277 ];

	ASFXAI_SentryTurret_execIsFireLineObstructed_Parms IsFireLineObstructed_Parms;

	this->ProcessEvent ( pFnIsFireLineObstructed, &IsFireLineObstructed_Parms, NULL );

	return IsFireLineObstructed_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.CanFireWeaponNoLOS
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 Wpn                            ( CPF_Parm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool ASFXAI_SentryTurret::CanFireWeaponNoLOS ( class AWeapon* Wpn, unsigned char FireModeNum )
{
	static UFunction* pFnCanFireWeaponNoLOS = NULL;

	if ( ! pFnCanFireWeaponNoLOS )
		pFnCanFireWeaponNoLOS = (UFunction*) UObject::GObjObjects()->Data[ 55278 ];

	ASFXAI_SentryTurret_execCanFireWeaponNoLOS_Parms CanFireWeaponNoLOS_Parms;
	CanFireWeaponNoLOS_Parms.Wpn = Wpn;
	CanFireWeaponNoLOS_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnCanFireWeaponNoLOS, &CanFireWeaponNoLOS_Parms, NULL );

	return CanFireWeaponNoLOS_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.CanFireWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 Wpn                            ( CPF_Parm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool ASFXAI_SentryTurret::CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum )
{
	static UFunction* pFnCanFireWeapon = NULL;

	if ( ! pFnCanFireWeapon )
		pFnCanFireWeapon = (UFunction*) UObject::GObjObjects()->Data[ 55273 ];

	ASFXAI_SentryTurret_execCanFireWeapon_Parms CanFireWeapon_Parms;
	CanFireWeapon_Parms.Wpn = Wpn;
	CanFireWeapon_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnCanFireWeapon, &CanFireWeapon_Parms, NULL );

	return CanFireWeapon_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.IsFiringWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::IsFiringWeapon ( )
{
	static UFunction* pFnIsFiringWeapon = NULL;

	if ( ! pFnIsFiringWeapon )
		pFnIsFiringWeapon = (UFunction*) UObject::GObjObjects()->Data[ 55270 ];

	ASFXAI_SentryTurret_execIsFiringWeapon_Parms IsFiringWeapon_Parms;

	this->ProcessEvent ( pFnIsFiringWeapon, &IsFiringWeapon_Parms, NULL );

	return IsFiringWeapon_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.TriggerAttackVocalization
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::TriggerAttackVocalization ( )
{
	static UFunction* pFnTriggerAttackVocalization = NULL;

	if ( ! pFnTriggerAttackVocalization )
		pFnTriggerAttackVocalization = (UFunction*) UObject::GObjObjects()->Data[ 55269 ];

	ASFXAI_SentryTurret_execTriggerAttackVocalization_Parms TriggerAttackVocalization_Parms;

	this->ProcessEvent ( pFnTriggerAttackVocalization, &TriggerAttackVocalization_Parms, NULL );
};

// Function SFXGame.sfxai_core.OnTargetChanged
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::OnTargetChanged ( )
{
	static UFunction* pFnOnTargetChanged = NULL;

	if ( ! pFnOnTargetChanged )
		pFnOnTargetChanged = (UFunction*) UObject::GObjObjects()->Data[ 55268 ];

	ASFXAI_SentryTurret_execOnTargetChanged_Parms OnTargetChanged_Parms;

	this->ProcessEvent ( pFnOnTargetChanged, &OnTargetChanged_Parms, NULL );
};

// Function SFXGame.sfxai_core.AdjustEnemyRating
// [0x00420000] 
// Parameters infos:
// class APawn*                   EnemyPawn                      ( CPF_Parm )
// float                          fRating                        ( CPF_Parm | CPF_OutParm )

void ASFXAI_SentryTurret::AdjustEnemyRating ( class APawn* EnemyPawn, float* fRating )
{
	static UFunction* pFnAdjustEnemyRating = NULL;

	if ( ! pFnAdjustEnemyRating )
		pFnAdjustEnemyRating = (UFunction*) UObject::GObjObjects()->Data[ 55265 ];

	ASFXAI_SentryTurret_execAdjustEnemyRating_Parms AdjustEnemyRating_Parms;
	AdjustEnemyRating_Parms.EnemyPawn = EnemyPawn;

	this->ProcessEvent ( pFnAdjustEnemyRating, &AdjustEnemyRating_Parms, NULL );

	if ( fRating )
		*fRating = AdjustEnemyRating_Parms.fRating;
};

// Function SFXGame.sfxai_core.AdjustRatingByTickets
// [0x00420002] 
// Parameters infos:
// int                            EnemyIdx                       ( CPF_Parm )
// float                          out_Rating                     ( CPF_Parm | CPF_OutParm )

void ASFXAI_SentryTurret::AdjustRatingByTickets ( int EnemyIdx, float* out_Rating )
{
	static UFunction* pFnAdjustRatingByTickets = NULL;

	if ( ! pFnAdjustRatingByTickets )
		pFnAdjustRatingByTickets = (UFunction*) UObject::GObjObjects()->Data[ 55258 ];

	ASFXAI_SentryTurret_execAdjustRatingByTickets_Parms AdjustRatingByTickets_Parms;
	AdjustRatingByTickets_Parms.EnemyIdx = EnemyIdx;

	this->ProcessEvent ( pFnAdjustRatingByTickets, &AdjustRatingByTickets_Parms, NULL );

	if ( out_Rating )
		*out_Rating = AdjustRatingByTickets_Parms.out_Rating;
};

// Function SFXGame.sfxai_core.SelectTarget
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::SelectTarget ( )
{
	static UFunction* pFnSelectTarget = NULL;

	if ( ! pFnSelectTarget )
		pFnSelectTarget = (UFunction*) UObject::GObjObjects()->Data[ 55241 ];

	ASFXAI_SentryTurret_execSelectTarget_Parms SelectTarget_Parms;

	this->ProcessEvent ( pFnSelectTarget, &SelectTarget_Parms, NULL );

	return SelectTarget_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.NotifyMoodChange
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::NotifyMoodChange ( )
{
	static UFunction* pFnNotifyMoodChange = NULL;

	if ( ! pFnNotifyMoodChange )
		pFnNotifyMoodChange = (UFunction*) UObject::GObjObjects()->Data[ 55236 ];

	ASFXAI_SentryTurret_execNotifyMoodChange_Parms NotifyMoodChange_Parms;

	this->ProcessEvent ( pFnNotifyMoodChange, &NotifyMoodChange_Parms, NULL );

	return NotifyMoodChange_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.ResetCombatMood
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::ResetCombatMood ( )
{
	static UFunction* pFnResetCombatMood = NULL;

	if ( ! pFnResetCombatMood )
		pFnResetCombatMood = (UFunction*) UObject::GObjObjects()->Data[ 55234 ];

	ASFXAI_SentryTurret_execResetCombatMood_Parms ResetCombatMood_Parms;

	this->ProcessEvent ( pFnResetCombatMood, &ResetCombatMood_Parms, NULL );
};

// Function SFXGame.sfxai_core.CanSwitchMood
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  NewMood                        ( CPF_Parm )

bool ASFXAI_SentryTurret::CanSwitchMood ( unsigned char NewMood )
{
	static UFunction* pFnCanSwitchMood = NULL;

	if ( ! pFnCanSwitchMood )
		pFnCanSwitchMood = (UFunction*) UObject::GObjObjects()->Data[ 55231 ];

	ASFXAI_SentryTurret_execCanSwitchMood_Parms CanSwitchMood_Parms;
	CanSwitchMood_Parms.NewMood = NewMood;

	this->ProcessEvent ( pFnCanSwitchMood, &CanSwitchMood_Parms, NULL );

	return CanSwitchMood_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.SetCombatMood
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  NewMood                        ( CPF_Parm )
// float                          fDuration                      ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_SentryTurret::SetCombatMood ( unsigned char NewMood, float fDuration )
{
	static UFunction* pFnSetCombatMood = NULL;

	if ( ! pFnSetCombatMood )
		pFnSetCombatMood = (UFunction*) UObject::GObjObjects()->Data[ 45432 ];

	ASFXAI_SentryTurret_execSetCombatMood_Parms SetCombatMood_Parms;
	SetCombatMood_Parms.NewMood = NewMood;
	SetCombatMood_Parms.fDuration = fDuration;

	this->ProcessEvent ( pFnSetCombatMood, &SetCombatMood_Parms, NULL );

	return SetCombatMood_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.Initialize
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 55221 ];

	ASFXAI_SentryTurret_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.sfxai_core.ResetEvadeDamage
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::ResetEvadeDamage ( )
{
	static UFunction* pFnResetEvadeDamage = NULL;

	if ( ! pFnResetEvadeDamage )
		pFnResetEvadeDamage = (UFunction*) UObject::GObjObjects()->Data[ 55219 ];

	ASFXAI_SentryTurret_execResetEvadeDamage_Parms ResetEvadeDamage_Parms;

	this->ProcessEvent ( pFnResetEvadeDamage, &ResetEvadeDamage_Parms, NULL );
};

// Function SFXGame.sfxai_core.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 55217 ];

	ASFXAI_SentryTurret_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.sfxai_core.Reset
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 55203 ];

	ASFXAI_SentryTurret_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function SFXGame.sfxai_core.ClearGoHereDelegates
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::ClearGoHereDelegates ( )
{
	static UFunction* pFnClearGoHereDelegates = NULL;

	if ( ! pFnClearGoHereDelegates )
		pFnClearGoHereDelegates = (UFunction*) UObject::GObjObjects()->Data[ 55202 ];

	ASFXAI_SentryTurret_execClearGoHereDelegates_Parms ClearGoHereDelegates_Parms;

	this->ProcessEvent ( pFnClearGoHereDelegates, &ClearGoHereDelegates_Parms, NULL );
};

// Function SFXGame.sfxai_core.AssignGoHereDelegates
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         RangeDel                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         FlankDel                       ( CPF_Parm | CPF_NeedCtorLink )

void ASFXAI_SentryTurret::AssignGoHereDelegates ( struct FScriptDelegate RangeDel, struct FScriptDelegate FlankDel )
{
	static UFunction* pFnAssignGoHereDelegates = NULL;

	if ( ! pFnAssignGoHereDelegates )
		pFnAssignGoHereDelegates = (UFunction*) UObject::GObjObjects()->Data[ 55197 ];

	ASFXAI_SentryTurret_execAssignGoHereDelegates_Parms AssignGoHereDelegates_Parms;
	memcpy ( &AssignGoHereDelegates_Parms.RangeDel, &RangeDel, 0xC );
	memcpy ( &AssignGoHereDelegates_Parms.FlankDel, &FlankDel, 0xC );

	this->ProcessEvent ( pFnAssignGoHereDelegates, &AssignGoHereDelegates_Parms, NULL );
};

// Function SFXGame.sfxai_core.StopFollowingActor
// [0x00020002] 
// Parameters infos:

void ASFXAI_SentryTurret::StopFollowingActor ( )
{
	static UFunction* pFnStopFollowingActor = NULL;

	if ( ! pFnStopFollowingActor )
		pFnStopFollowingActor = (UFunction*) UObject::GObjObjects()->Data[ 55194 ];

	ASFXAI_SentryTurret_execStopFollowingActor_Parms StopFollowingActor_Parms;

	this->ProcessEvent ( pFnStopFollowingActor, &StopFollowingActor_Parms, NULL );
};

// Function SFXGame.sfxai_core.StartFollowingActor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ActorToFollow                  ( CPF_Parm )

bool ASFXAI_SentryTurret::StartFollowingActor ( class AActor* ActorToFollow )
{
	static UFunction* pFnStartFollowingActor = NULL;

	if ( ! pFnStartFollowingActor )
		pFnStartFollowingActor = (UFunction*) UObject::GObjObjects()->Data[ 55188 ];

	ASFXAI_SentryTurret_execStartFollowingActor_Parms StartFollowingActor_Parms;
	StartFollowingActor_Parms.ActorToFollow = ActorToFollow;

	this->ProcessEvent ( pFnStartFollowingActor, &StartFollowingActor_Parms, NULL );

	return StartFollowingActor_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.GetCurrentKismetOrder
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASFXAI_SentryTurret::GetCurrentKismetOrder ( )
{
	static UFunction* pFnGetCurrentKismetOrder = NULL;

	if ( ! pFnGetCurrentKismetOrder )
		pFnGetCurrentKismetOrder = (UFunction*) UObject::GObjObjects()->Data[ 45644 ];

	ASFXAI_SentryTurret_execGetCurrentKismetOrder_Parms GetCurrentKismetOrder_Parms;

	this->ProcessEvent ( pFnGetCurrentKismetOrder, &GetCurrentKismetOrder_Parms, NULL );

	return GetCurrentKismetOrder_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.MoveToGoalExternal
// [0x00024002] 
// Parameters infos:
// class AActor*                  NewMoveGoal                    ( CPF_Parm )
// float                          NewMoveOffset                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bImmediateMove                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceWalk                     ( CPF_OptionalParm | CPF_Parm )
// struct FScriptDelegate         MoveDelegate                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ASFXAI_SentryTurret::MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, unsigned long bImmediateMove, unsigned long bForceWalk, struct FScriptDelegate MoveDelegate )
{
	static UFunction* pFnMoveToGoalExternal = NULL;

	if ( ! pFnMoveToGoalExternal )
		pFnMoveToGoalExternal = (UFunction*) UObject::GObjObjects()->Data[ 55176 ];

	ASFXAI_SentryTurret_execMoveToGoalExternal_Parms MoveToGoalExternal_Parms;
	MoveToGoalExternal_Parms.NewMoveGoal = NewMoveGoal;
	MoveToGoalExternal_Parms.NewMoveOffset = NewMoveOffset;
	MoveToGoalExternal_Parms.bImmediateMove = bImmediateMove;
	MoveToGoalExternal_Parms.bForceWalk = bForceWalk;
	memcpy ( &MoveToGoalExternal_Parms.MoveDelegate, &MoveDelegate, 0xC );

	this->ProcessEvent ( pFnMoveToGoalExternal, &MoveToGoalExternal_Parms, NULL );
};

// Function SFXGame.sfxai_core.FireWeaponAtTarget
// [0x00024002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// unsigned long                  bCheckLOS                      ( CPF_Parm )
// unsigned long                  bForceShoot                    ( CPF_Parm )
// float                          fAttackDuration                ( CPF_Parm )
// struct FScriptDelegate         FireDelegate                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ASFXAI_SentryTurret::FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, unsigned long bForceShoot, float fAttackDuration, struct FScriptDelegate FireDelegate )
{
	static UFunction* pFnFireWeaponAtTarget = NULL;

	if ( ! pFnFireWeaponAtTarget )
		pFnFireWeaponAtTarget = (UFunction*) UObject::GObjObjects()->Data[ 55164 ];

	ASFXAI_SentryTurret_execFireWeaponAtTarget_Parms FireWeaponAtTarget_Parms;
	FireWeaponAtTarget_Parms.oTarget = oTarget;
	FireWeaponAtTarget_Parms.bCheckLOS = bCheckLOS;
	FireWeaponAtTarget_Parms.bForceShoot = bForceShoot;
	FireWeaponAtTarget_Parms.fAttackDuration = fAttackDuration;
	memcpy ( &FireWeaponAtTarget_Parms.FireDelegate, &FireDelegate, 0xC );

	this->ProcessEvent ( pFnFireWeaponAtTarget, &FireWeaponAtTarget_Parms, NULL );
};

// Function SFXGame.sfxai_core.UsePowerOnTarget
// [0x00024002] 
// Parameters infos:
// struct FName                   nmPowerToUse                   ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_Parm )
// struct FScriptDelegate         PowerDelegate                  ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreSuppression             ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_SentryTurret::UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression )
{
	static UFunction* pFnUsePowerOnTarget = NULL;

	if ( ! pFnUsePowerOnTarget )
		pFnUsePowerOnTarget = (UFunction*) UObject::GObjObjects()->Data[ 55155 ];

	ASFXAI_SentryTurret_execUsePowerOnTarget_Parms UsePowerOnTarget_Parms;
	memcpy ( &UsePowerOnTarget_Parms.nmPowerToUse, &nmPowerToUse, 0x8 );
	UsePowerOnTarget_Parms.oTarget = oTarget;
	memcpy ( &UsePowerOnTarget_Parms.PowerDelegate, &PowerDelegate, 0xC );
	UsePowerOnTarget_Parms.bIgnoreSuppression = bIgnoreSuppression;

	this->ProcessEvent ( pFnUsePowerOnTarget, &UsePowerOnTarget_Parms, NULL );
};

// Function SFXGame.sfxai_core.NotifyPlaypenChanged
// [0x00020000] 
// Parameters infos:

void ASFXAI_SentryTurret::NotifyPlaypenChanged ( )
{
	static UFunction* pFnNotifyPlaypenChanged = NULL;

	if ( ! pFnNotifyPlaypenChanged )
		pFnNotifyPlaypenChanged = (UFunction*) UObject::GObjObjects()->Data[ 55154 ];

	ASFXAI_SentryTurret_execNotifyPlaypenChanged_Parms NotifyPlaypenChanged_Parms;

	this->ProcessEvent ( pFnNotifyPlaypenChanged, &NotifyPlaypenChanged_Parms, NULL );
};

// Function SFXGame.sfxai_core.TryInvalidateTargetFlank
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_SentryTurret::TryInvalidateTargetFlank ( )
{
	static UFunction* pFnTryInvalidateTargetFlank = NULL;

	if ( ! pFnTryInvalidateTargetFlank )
		pFnTryInvalidateTargetFlank = (UFunction*) UObject::GObjObjects()->Data[ 55152 ];

	ASFXAI_SentryTurret_execTryInvalidateTargetFlank_Parms TryInvalidateTargetFlank_Parms;

	this->ProcessEvent ( pFnTryInvalidateTargetFlank, &TryInvalidateTargetFlank_Parms, NULL );

	return TryInvalidateTargetFlank_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.TryInvalidateTargetRange
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fRangeToTarget                 ( CPF_Parm )

bool ASFXAI_SentryTurret::TryInvalidateTargetRange ( float fRangeToTarget )
{
	static UFunction* pFnTryInvalidateTargetRange = NULL;

	if ( ! pFnTryInvalidateTargetRange )
		pFnTryInvalidateTargetRange = (UFunction*) UObject::GObjObjects()->Data[ 55149 ];

	ASFXAI_SentryTurret_execTryInvalidateTargetRange_Parms TryInvalidateTargetRange_Parms;
	TryInvalidateTargetRange_Parms.fRangeToTarget = fRangeToTarget;

	this->ProcessEvent ( pFnTryInvalidateTargetRange, &TryInvalidateTargetRange_Parms, NULL );

	return TryInvalidateTargetRange_Parms.ReturnValue;
};

// Function SFXGame.sfxai_core.MoveToDelegate
// [0x00120000] 
// Parameters infos:
// int                            nReason                        ( CPF_Parm )

void ASFXAI_SentryTurret::MoveToDelegate ( int nReason )
{
	static UFunction* pFnMoveToDelegate = NULL;

	if ( ! pFnMoveToDelegate )
		pFnMoveToDelegate = (UFunction*) UObject::GObjObjects()->Data[ 55142 ];

	ASFXAI_SentryTurret_execMoveToDelegate_Parms MoveToDelegate_Parms;
	MoveToDelegate_Parms.nReason = nReason;

	this->ProcessEvent ( pFnMoveToDelegate, &MoveToDelegate_Parms, NULL );
};

// Function SFXGame.sfxai_core.FireWeaponDelegate
// [0x00120000] 
// Parameters infos:
// int                            nReason                        ( CPF_Parm )

void ASFXAI_SentryTurret::FireWeaponDelegate ( int nReason )
{
	static UFunction* pFnFireWeaponDelegate = NULL;

	if ( ! pFnFireWeaponDelegate )
		pFnFireWeaponDelegate = (UFunction*) UObject::GObjObjects()->Data[ 55144 ];

	ASFXAI_SentryTurret_execFireWeaponDelegate_Parms FireWeaponDelegate_Parms;
	FireWeaponDelegate_Parms.nReason = nReason;

	this->ProcessEvent ( pFnFireWeaponDelegate, &FireWeaponDelegate_Parms, NULL );
};

// Function SFXGame.sfxai_core.UsePowerDelegate
// [0x00120000] 
// Parameters infos:
// int                            nReason                        ( CPF_Parm )

void ASFXAI_SentryTurret::UsePowerDelegate ( int nReason )
{
	static UFunction* pFnUsePowerDelegate = NULL;

	if ( ! pFnUsePowerDelegate )
		pFnUsePowerDelegate = (UFunction*) UObject::GObjObjects()->Data[ 55145 ];

	ASFXAI_SentryTurret_execUsePowerDelegate_Parms UsePowerDelegate_Parms;
	UsePowerDelegate_Parms.nReason = nReason;

	this->ProcessEvent ( pFnUsePowerDelegate, &UsePowerDelegate_Parms, NULL );
};

// Function sfxgamecontent.SFXAICmd_Base_CombatDrone.ShouldUsePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PowerName                      ( CPF_Parm | CPF_OutParm )

bool USFXAICmd_Base_CombatDrone::ShouldUsePower ( struct FName* PowerName )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 107469 ];

	USFXAICmd_Base_CombatDrone_execShouldUsePower_Parms ShouldUsePower_Parms;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( PowerName )
		memcpy ( PowerName, &ShouldUsePower_Parms.PowerName, 0x8 );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXAICmd_Base_CombatDrone.GetIdealRange
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXAICmd_Base_CombatDrone::GetIdealRange ( )
{
	static UFunction* pFnGetIdealRange = NULL;

	if ( ! pFnGetIdealRange )
		pFnGetIdealRange = (UFunction*) UObject::GObjObjects()->Data[ 107472 ];

	USFXAICmd_Base_CombatDrone_execGetIdealRange_Parms GetIdealRange_Parms;

	this->ProcessEvent ( pFnGetIdealRange, &GetIdealRange_Parms, NULL );

	return GetIdealRange_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXAICmd_Base_CombatDrone.Pushed
// [0x00020002] 
// Parameters infos:

void USFXAICmd_Base_CombatDrone::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = (UFunction*) UObject::GObjObjects()->Data[ 107478 ];

	USFXAICmd_Base_CombatDrone_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function sfxgamecontent.SFXPawn_CombatDroneBase.GetPetOwner
// [0x00020102] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ASFXPawn_CombatDroneBase::GetPetOwner ( )
{
	static UFunction* pFnGetPetOwner = NULL;

	if ( ! pFnGetPetOwner )
		pFnGetPetOwner = (UFunction*) UObject::GObjObjects()->Data[ 106869 ];

	ASFXPawn_CombatDroneBase_execGetPetOwner_Parms GetPetOwner_Parms;

	this->ProcessEvent ( pFnGetPetOwner, &GetPetOwner_Parms, NULL );

	return GetPetOwner_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPawn_CombatDroneBase.PlayDeathVocalization
// [0x00020100] 
// Parameters infos:
// class ABioPawn*                Killer                         ( CPF_Parm )

void ASFXPawn_CombatDroneBase::PlayDeathVocalization ( class ABioPawn* Killer )
{
	static UFunction* pFnPlayDeathVocalization = NULL;

	if ( ! pFnPlayDeathVocalization )
		pFnPlayDeathVocalization = (UFunction*) UObject::GObjObjects()->Data[ 106871 ];

	ASFXPawn_CombatDroneBase_execPlayDeathVocalization_Parms PlayDeathVocalization_Parms;
	PlayDeathVocalization_Parms.Killer = Killer;

	this->ProcessEvent ( pFnPlayDeathVocalization, &PlayDeathVocalization_Parms, NULL );
};

// Function sfxgamecontent.SFXPawn_CombatDroneBase.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ASFXPawn_CombatDroneBase::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 106874 ];

	ASFXPawn_CombatDroneBase_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function sfxgamecontent.SFXPawn_CombatDroneBase.DroneCreatorInfoUpdated
// [0x00020102] 
// Parameters infos:

void ASFXPawn_CombatDroneBase::DroneCreatorInfoUpdated ( )
{
	static UFunction* pFnDroneCreatorInfoUpdated = NULL;

	if ( ! pFnDroneCreatorInfoUpdated )
		pFnDroneCreatorInfoUpdated = (UFunction*) UObject::GObjObjects()->Data[ 106879 ];

	ASFXPawn_CombatDroneBase_execDroneCreatorInfoUpdated_Parms DroneCreatorInfoUpdated_Parms;

	this->ProcessEvent ( pFnDroneCreatorInfoUpdated, &DroneCreatorInfoUpdated_Parms, NULL );
};

// Function sfxgamecontent.SFXPawn_CombatDroneBase.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASFXPawn_CombatDroneBase::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 106881 ];

	ASFXPawn_CombatDroneBase_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function sfxgamecontent.SFXPawn_CombatDroneBase.SetupCasterAndReplication
// [0x00020102] 
// Parameters infos:
// class AActor*                  NewCaster                      ( CPF_Parm )

void ASFXPawn_CombatDroneBase::SetupCasterAndReplication ( class AActor* NewCaster )
{
	static UFunction* pFnSetupCasterAndReplication = NULL;

	if ( ! pFnSetupCasterAndReplication )
		pFnSetupCasterAndReplication = (UFunction*) UObject::GObjObjects()->Data[ 106885 ];

	ASFXPawn_CombatDroneBase_execSetupCasterAndReplication_Parms SetupCasterAndReplication_Parms;
	SetupCasterAndReplication_Parms.NewCaster = NewCaster;

	this->ProcessEvent ( pFnSetupCasterAndReplication, &SetupCasterAndReplication_Parms, NULL );
};

// Function sfxgamecontent.SFXPawn_CombatDroneBase.OnDroneKilled
// [0x00120000] 
// Parameters infos:
// class ASFXPawn_CombatDroneBase* oDrone                         ( CPF_Parm )

void ASFXPawn_CombatDroneBase::OnDroneKilled ( class ASFXPawn_CombatDroneBase* oDrone )
{
	static UFunction* pFnOnDroneKilled = NULL;

	if ( ! pFnOnDroneKilled )
		pFnOnDroneKilled = (UFunction*) UObject::GObjObjects()->Data[ 106887 ];

	ASFXPawn_CombatDroneBase_execOnDroneKilled_Parms OnDroneKilled_Parms;
	OnDroneKilled_Parms.oDrone = oDrone;

	this->ProcessEvent ( pFnOnDroneKilled, &OnDroneKilled_Parms, NULL );
};

// Function sfxgamecontent.sfxai_combatdrone.BioClearCrossLevelReferences
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULevel*                  ClearedLevel                   ( CPF_Parm )

void Asfxai_combatdrone::eventBioClearCrossLevelReferences ( class ULevel* ClearedLevel )
{
	static UFunction* pFnBioClearCrossLevelReferences = NULL;

	if ( ! pFnBioClearCrossLevelReferences )
		pFnBioClearCrossLevelReferences = (UFunction*) UObject::GObjObjects()->Data[ 107490 ];

	Asfxai_combatdrone_eventBioClearCrossLevelReferences_Parms BioClearCrossLevelReferences_Parms;
	BioClearCrossLevelReferences_Parms.ClearedLevel = ClearedLevel;

	this->ProcessEvent ( pFnBioClearCrossLevelReferences, &BioClearCrossLevelReferences_Parms, NULL );
};

// Function sfxgamecontent.sfxai_combatdrone.PeriodicMoveCheck
// [0x00020002] 
// Parameters infos:

void Asfxai_combatdrone::PeriodicMoveCheck ( )
{
	static UFunction* pFnPeriodicMoveCheck = NULL;

	if ( ! pFnPeriodicMoveCheck )
		pFnPeriodicMoveCheck = (UFunction*) UObject::GObjObjects()->Data[ 107493 ];

	Asfxai_combatdrone_execPeriodicMoveCheck_Parms PeriodicMoveCheck_Parms;

	this->ProcessEvent ( pFnPeriodicMoveCheck, &PeriodicMoveCheck_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_revive.BodyStanceAnimEndNotification
// [0x00020000] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void Usfxcustomaction_revive::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 128200 ];

	Usfxcustomaction_revive_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_revive.Replicate
// [0x00020002] 
// Parameters infos:

void Usfxcustomaction_revive::Replicate ( )
{
	static UFunction* pFnReplicate = NULL;

	if ( ! pFnReplicate )
		pFnReplicate = (UFunction*) UObject::GObjObjects()->Data[ 128199 ];

	Usfxcustomaction_revive_execReplicate_Parms Replicate_Parms;

	this->ProcessEvent ( pFnReplicate, &Replicate_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_revive.ClientDoCustomAction
// [0x00024002] 
// Parameters infos:
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )

void Usfxcustomaction_revive::ClientDoCustomAction ( unsigned long bForced )
{
	static UFunction* pFnClientDoCustomAction = NULL;

	if ( ! pFnClientDoCustomAction )
		pFnClientDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128197 ];

	Usfxcustomaction_revive_execClientDoCustomAction_Parms ClientDoCustomAction_Parms;
	ClientDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnClientDoCustomAction, &ClientDoCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_revive.CheckFiring
// [0x00020002] 
// Parameters infos:

void Usfxcustomaction_revive::CheckFiring ( )
{
	static UFunction* pFnCheckFiring = NULL;

	if ( ! pFnCheckFiring )
		pFnCheckFiring = (UFunction*) UObject::GObjObjects()->Data[ 128196 ];

	Usfxcustomaction_revive_execCheckFiring_Parms CheckFiring_Parms;

	this->ProcessEvent ( pFnCheckFiring, &CheckFiring_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_revive.TickCustomAction
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void Usfxcustomaction_revive::TickCustomAction ( float DeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128194 ];

	Usfxcustomaction_revive_execTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_revive.StopCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxcustomaction_revive::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128193 ];

	Usfxcustomaction_revive_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_revive.Resurrect
// [0x00020002] 
// Parameters infos:

void Usfxcustomaction_revive::Resurrect ( )
{
	static UFunction* pFnResurrect = NULL;

	if ( ! pFnResurrect )
		pFnResurrect = (UFunction*) UObject::GObjObjects()->Data[ 128190 ];

	Usfxcustomaction_revive_execResurrect_Parms Resurrect_Parms;

	this->ProcessEvent ( pFnResurrect, &Resurrect_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_revive.StartCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxcustomaction_revive::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128187 ];

	Usfxcustomaction_revive_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_revive.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool Usfxcustomaction_revive::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128183 ];

	Usfxcustomaction_revive_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_Reload.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Reload::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128181 ];

	USFXCustomAction_Reload_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_Reload.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Reload::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128178 ];

	USFXCustomAction_Reload_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_Reload.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_Reload::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 128174 ];

	USFXCustomAction_Reload_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_ActivateWeaponFlashlight.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_ActivateWeaponFlashlight::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127581 ];

	USFXCustomAction_ActivateWeaponFlashlight_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_ActivateWeaponFlashlight.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_ActivateWeaponFlashlight::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127579 ];

	USFXCustomAction_ActivateWeaponFlashlight_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_MantleLookAt.FlinchActionOverride
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MantleLookAt::FlinchActionOverride ( )
{
	static UFunction* pFnFlinchActionOverride = NULL;

	if ( ! pFnFlinchActionOverride )
		pFnFlinchActionOverride = (UFunction*) UObject::GObjObjects()->Data[ 127818 ];

	USFXCustomAction_MantleLookAt_execFlinchActionOverride_Parms FlinchActionOverride_Parms;

	this->ProcessEvent ( pFnFlinchActionOverride, &FlinchActionOverride_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_MantleLookAt.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_MantleLookAt::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 127815 ];

	USFXCustomAction_MantleLookAt_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_MantleLookAt.GetEndBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_MantleLookAt::GetEndBodyStanceAnim ( )
{
	static UFunction* pFnGetEndBodyStanceAnim = NULL;

	if ( ! pFnGetEndBodyStanceAnim )
		pFnGetEndBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 127811 ];

	USFXCustomAction_MantleLookAt_execGetEndBodyStanceAnim_Parms GetEndBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetEndBodyStanceAnim, &GetEndBodyStanceAnim_Parms, NULL );

	return GetEndBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_MantleLookAt.GetLoopBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_MantleLookAt::GetLoopBodyStanceAnim ( )
{
	static UFunction* pFnGetLoopBodyStanceAnim = NULL;

	if ( ! pFnGetLoopBodyStanceAnim )
		pFnGetLoopBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 127807 ];

	USFXCustomAction_MantleLookAt_execGetLoopBodyStanceAnim_Parms GetLoopBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetLoopBodyStanceAnim, &GetLoopBodyStanceAnim_Parms, NULL );

	return GetLoopBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_MantleLookAt.GetStartBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_MantleLookAt::GetStartBodyStanceAnim ( )
{
	static UFunction* pFnGetStartBodyStanceAnim = NULL;

	if ( ! pFnGetStartBodyStanceAnim )
		pFnGetStartBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 127803 ];

	USFXCustomAction_MantleLookAt_execGetStartBodyStanceAnim_Parms GetStartBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetStartBodyStanceAnim, &GetStartBodyStanceAnim_Parms, NULL );

	return GetStartBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_CoverSlipLookAt.FlinchActionOverride
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_CoverSlipLookAt::FlinchActionOverride ( )
{
	static UFunction* pFnFlinchActionOverride = NULL;

	if ( ! pFnFlinchActionOverride )
		pFnFlinchActionOverride = (UFunction*) UObject::GObjObjects()->Data[ 127684 ];

	USFXCustomAction_CoverSlipLookAt_execFlinchActionOverride_Parms FlinchActionOverride_Parms;

	this->ProcessEvent ( pFnFlinchActionOverride, &FlinchActionOverride_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_CoverSlipLookAt.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_CoverSlipLookAt::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 127681 ];

	USFXCustomAction_CoverSlipLookAt_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_CoverSlipLookAt.GetEndBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_CoverSlipLookAt::GetEndBodyStanceAnim ( )
{
	static UFunction* pFnGetEndBodyStanceAnim = NULL;

	if ( ! pFnGetEndBodyStanceAnim )
		pFnGetEndBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 127677 ];

	USFXCustomAction_CoverSlipLookAt_execGetEndBodyStanceAnim_Parms GetEndBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetEndBodyStanceAnim, &GetEndBodyStanceAnim_Parms, NULL );

	return GetEndBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_CoverSlipLookAt.GetLoopBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_CoverSlipLookAt::GetLoopBodyStanceAnim ( )
{
	static UFunction* pFnGetLoopBodyStanceAnim = NULL;

	if ( ! pFnGetLoopBodyStanceAnim )
		pFnGetLoopBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 127673 ];

	USFXCustomAction_CoverSlipLookAt_execGetLoopBodyStanceAnim_Parms GetLoopBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetLoopBodyStanceAnim, &GetLoopBodyStanceAnim_Parms, NULL );

	return GetLoopBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_CoverSlipLookAt.GetStartBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_CoverSlipLookAt::GetStartBodyStanceAnim ( )
{
	static UFunction* pFnGetStartBodyStanceAnim = NULL;

	if ( ! pFnGetStartBodyStanceAnim )
		pFnGetStartBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 127669 ];

	USFXCustomAction_CoverSlipLookAt_execGetStartBodyStanceAnim_Parms GetStartBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetStartBodyStanceAnim, &GetStartBodyStanceAnim_Parms, NULL );

	return GetStartBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_StdCoverSlipLookAt.FlinchActionOverride
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdCoverSlipLookAt::FlinchActionOverride ( )
{
	static UFunction* pFnFlinchActionOverride = NULL;

	if ( ! pFnFlinchActionOverride )
		pFnFlinchActionOverride = (UFunction*) UObject::GObjObjects()->Data[ 128300 ];

	USFXCustomAction_StdCoverSlipLookAt_execFlinchActionOverride_Parms FlinchActionOverride_Parms;

	this->ProcessEvent ( pFnFlinchActionOverride, &FlinchActionOverride_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_StdCoverSlipLookAt.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_StdCoverSlipLookAt::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 128297 ];

	USFXCustomAction_StdCoverSlipLookAt_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_StdCoverSlipLookAt.GetEndBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_StdCoverSlipLookAt::GetEndBodyStanceAnim ( )
{
	static UFunction* pFnGetEndBodyStanceAnim = NULL;

	if ( ! pFnGetEndBodyStanceAnim )
		pFnGetEndBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 128293 ];

	USFXCustomAction_StdCoverSlipLookAt_execGetEndBodyStanceAnim_Parms GetEndBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetEndBodyStanceAnim, &GetEndBodyStanceAnim_Parms, NULL );

	return GetEndBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_StdCoverSlipLookAt.GetLoopBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_StdCoverSlipLookAt::GetLoopBodyStanceAnim ( )
{
	static UFunction* pFnGetLoopBodyStanceAnim = NULL;

	if ( ! pFnGetLoopBodyStanceAnim )
		pFnGetLoopBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 128289 ];

	USFXCustomAction_StdCoverSlipLookAt_execGetLoopBodyStanceAnim_Parms GetLoopBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetLoopBodyStanceAnim, &GetLoopBodyStanceAnim_Parms, NULL );

	return GetLoopBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_StdCoverSlipLookAt.GetStartBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_StdCoverSlipLookAt::GetStartBodyStanceAnim ( )
{
	static UFunction* pFnGetStartBodyStanceAnim = NULL;

	if ( ! pFnGetStartBodyStanceAnim )
		pFnGetStartBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 128285 ];

	USFXCustomAction_StdCoverSlipLookAt_execGetStartBodyStanceAnim_Parms GetStartBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetStartBodyStanceAnim, &GetStartBodyStanceAnim_Parms, NULL );

	return GetStartBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_SwatTurnLookAt.FlinchActionOverride
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_SwatTurnLookAt::FlinchActionOverride ( )
{
	static UFunction* pFnFlinchActionOverride = NULL;

	if ( ! pFnFlinchActionOverride )
		pFnFlinchActionOverride = (UFunction*) UObject::GObjObjects()->Data[ 128336 ];

	USFXCustomAction_SwatTurnLookAt_execFlinchActionOverride_Parms FlinchActionOverride_Parms;

	this->ProcessEvent ( pFnFlinchActionOverride, &FlinchActionOverride_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SwatTurnLookAt.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_SwatTurnLookAt::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 128333 ];

	USFXCustomAction_SwatTurnLookAt_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_SwatTurnLookAt.GetEndBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_SwatTurnLookAt::GetEndBodyStanceAnim ( )
{
	static UFunction* pFnGetEndBodyStanceAnim = NULL;

	if ( ! pFnGetEndBodyStanceAnim )
		pFnGetEndBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 128329 ];

	USFXCustomAction_SwatTurnLookAt_execGetEndBodyStanceAnim_Parms GetEndBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetEndBodyStanceAnim, &GetEndBodyStanceAnim_Parms, NULL );

	return GetEndBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_SwatTurnLookAt.GetLoopBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_SwatTurnLookAt::GetLoopBodyStanceAnim ( )
{
	static UFunction* pFnGetLoopBodyStanceAnim = NULL;

	if ( ! pFnGetLoopBodyStanceAnim )
		pFnGetLoopBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 128325 ];

	USFXCustomAction_SwatTurnLookAt_execGetLoopBodyStanceAnim_Parms GetLoopBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetLoopBodyStanceAnim, &GetLoopBodyStanceAnim_Parms, NULL );

	return GetLoopBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_SwatTurnLookAt.GetStartBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_SwatTurnLookAt::GetStartBodyStanceAnim ( )
{
	static UFunction* pFnGetStartBodyStanceAnim = NULL;

	if ( ! pFnGetStartBodyStanceAnim )
		pFnGetStartBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 128321 ];

	USFXCustomAction_SwatTurnLookAt_execGetStartBodyStanceAnim_Parms GetStartBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetStartBodyStanceAnim, &GetStartBodyStanceAnim_Parms, NULL );

	return GetStartBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_StdSwatTurnLookAt.FlinchActionOverride
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdSwatTurnLookAt::FlinchActionOverride ( )
{
	static UFunction* pFnFlinchActionOverride = NULL;

	if ( ! pFnFlinchActionOverride )
		pFnFlinchActionOverride = (UFunction*) UObject::GObjObjects()->Data[ 128318 ];

	USFXCustomAction_StdSwatTurnLookAt_execFlinchActionOverride_Parms FlinchActionOverride_Parms;

	this->ProcessEvent ( pFnFlinchActionOverride, &FlinchActionOverride_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_StdSwatTurnLookAt.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_StdSwatTurnLookAt::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 128315 ];

	USFXCustomAction_StdSwatTurnLookAt_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_StdSwatTurnLookAt.GetEndBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_StdSwatTurnLookAt::GetEndBodyStanceAnim ( )
{
	static UFunction* pFnGetEndBodyStanceAnim = NULL;

	if ( ! pFnGetEndBodyStanceAnim )
		pFnGetEndBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 128311 ];

	USFXCustomAction_StdSwatTurnLookAt_execGetEndBodyStanceAnim_Parms GetEndBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetEndBodyStanceAnim, &GetEndBodyStanceAnim_Parms, NULL );

	return GetEndBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_StdSwatTurnLookAt.GetLoopBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_StdSwatTurnLookAt::GetLoopBodyStanceAnim ( )
{
	static UFunction* pFnGetLoopBodyStanceAnim = NULL;

	if ( ! pFnGetLoopBodyStanceAnim )
		pFnGetLoopBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 128307 ];

	USFXCustomAction_StdSwatTurnLookAt_execGetLoopBodyStanceAnim_Parms GetLoopBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetLoopBodyStanceAnim, &GetLoopBodyStanceAnim_Parms, NULL );

	return GetLoopBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_StdSwatTurnLookAt.GetStartBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_StdSwatTurnLookAt::GetStartBodyStanceAnim ( )
{
	static UFunction* pFnGetStartBodyStanceAnim = NULL;

	if ( ! pFnGetStartBodyStanceAnim )
		pFnGetStartBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 128303 ];

	USFXCustomAction_StdSwatTurnLookAt_execGetStartBodyStanceAnim_Parms GetStartBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetStartBodyStanceAnim, &GetStartBodyStanceAnim_Parms, NULL );

	return GetStartBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_GapJump.NotifyBump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_GapJump::NotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 127761 ];

	USFXCustomAction_GapJump_execNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_GapJump.EndThisCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_GapJump::EndThisCustomAction ( )
{
	static UFunction* pFnEndThisCustomAction = NULL;

	if ( ! pFnEndThisCustomAction )
		pFnEndThisCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127760 ];

	USFXCustomAction_GapJump_execEndThisCustomAction_Parms EndThisCustomAction_Parms;

	this->ProcessEvent ( pFnEndThisCustomAction, &EndThisCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.RemoveBlockingEndPoints
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_GapJump::RemoveBlockingEndPoints ( )
{
	static UFunction* pFnRemoveBlockingEndPoints = NULL;

	if ( ! pFnRemoveBlockingEndPoints )
		pFnRemoveBlockingEndPoints = (UFunction*) UObject::GObjObjects()->Data[ 127758 ];

	USFXCustomAction_GapJump_execRemoveBlockingEndPoints_Parms RemoveBlockingEndPoints_Parms;

	this->ProcessEvent ( pFnRemoveBlockingEndPoints, &RemoveBlockingEndPoints_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.BlockMoveEndPoints
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_GapJump::BlockMoveEndPoints ( )
{
	static UFunction* pFnBlockMoveEndPoints = NULL;

	if ( ! pFnBlockMoveEndPoints )
		pFnBlockMoveEndPoints = (UFunction*) UObject::GObjObjects()->Data[ 127754 ];

	USFXCustomAction_GapJump_execBlockMoveEndPoints_Parms BlockMoveEndPoints_Parms;

	this->ProcessEvent ( pFnBlockMoveEndPoints, &BlockMoveEndPoints_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_GapJump::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 127750 ];

	USFXCustomAction_GapJump_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_GapJump::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127749 ];

	USFXCustomAction_GapJump_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.StartAnimation
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_GapJump::StartAnimation ( )
{
	static UFunction* pFnStartAnimation = NULL;

	if ( ! pFnStartAnimation )
		pFnStartAnimation = (UFunction*) UObject::GObjObjects()->Data[ 127741 ];

	USFXCustomAction_GapJump_execStartAnimation_Parms StartAnimation_Parms;

	this->ProcessEvent ( pFnStartAnimation, &StartAnimation_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.ReachedPrecisePosition
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_GapJump::ReachedPrecisePosition ( )
{
	static UFunction* pFnReachedPrecisePosition = NULL;

	if ( ! pFnReachedPrecisePosition )
		pFnReachedPrecisePosition = (UFunction*) UObject::GObjObjects()->Data[ 127740 ];

	USFXCustomAction_GapJump_execReachedPrecisePosition_Parms ReachedPrecisePosition_Parms;

	this->ProcessEvent ( pFnReachedPrecisePosition, &ReachedPrecisePosition_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.AlignmentTimeout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_GapJump::AlignmentTimeout ( )
{
	static UFunction* pFnAlignmentTimeout = NULL;

	if ( ! pFnAlignmentTimeout )
		pFnAlignmentTimeout = (UFunction*) UObject::GObjObjects()->Data[ 127739 ];

	USFXCustomAction_GapJump_execAlignmentTimeout_Parms AlignmentTimeout_Parms;

	this->ProcessEvent ( pFnAlignmentTimeout, &AlignmentTimeout_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_GapJump::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127735 ];

	USFXCustomAction_GapJump_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_GapJump::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 127731 ];

	USFXCustomAction_GapJump_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.NotifyBump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_StandingGapJump::NotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 127761 ];

	USFXCustomAction_StandingGapJump_execNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_GapJump.EndThisCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StandingGapJump::EndThisCustomAction ( )
{
	static UFunction* pFnEndThisCustomAction = NULL;

	if ( ! pFnEndThisCustomAction )
		pFnEndThisCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127760 ];

	USFXCustomAction_StandingGapJump_execEndThisCustomAction_Parms EndThisCustomAction_Parms;

	this->ProcessEvent ( pFnEndThisCustomAction, &EndThisCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.RemoveBlockingEndPoints
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StandingGapJump::RemoveBlockingEndPoints ( )
{
	static UFunction* pFnRemoveBlockingEndPoints = NULL;

	if ( ! pFnRemoveBlockingEndPoints )
		pFnRemoveBlockingEndPoints = (UFunction*) UObject::GObjObjects()->Data[ 127758 ];

	USFXCustomAction_StandingGapJump_execRemoveBlockingEndPoints_Parms RemoveBlockingEndPoints_Parms;

	this->ProcessEvent ( pFnRemoveBlockingEndPoints, &RemoveBlockingEndPoints_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.BlockMoveEndPoints
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StandingGapJump::BlockMoveEndPoints ( )
{
	static UFunction* pFnBlockMoveEndPoints = NULL;

	if ( ! pFnBlockMoveEndPoints )
		pFnBlockMoveEndPoints = (UFunction*) UObject::GObjObjects()->Data[ 127754 ];

	USFXCustomAction_StandingGapJump_execBlockMoveEndPoints_Parms BlockMoveEndPoints_Parms;

	this->ProcessEvent ( pFnBlockMoveEndPoints, &BlockMoveEndPoints_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_StandingGapJump::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 127750 ];

	USFXCustomAction_StandingGapJump_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StandingGapJump::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127749 ];

	USFXCustomAction_StandingGapJump_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.StartAnimation
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StandingGapJump::StartAnimation ( )
{
	static UFunction* pFnStartAnimation = NULL;

	if ( ! pFnStartAnimation )
		pFnStartAnimation = (UFunction*) UObject::GObjObjects()->Data[ 127741 ];

	USFXCustomAction_StandingGapJump_execStartAnimation_Parms StartAnimation_Parms;

	this->ProcessEvent ( pFnStartAnimation, &StartAnimation_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.ReachedPrecisePosition
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StandingGapJump::ReachedPrecisePosition ( )
{
	static UFunction* pFnReachedPrecisePosition = NULL;

	if ( ! pFnReachedPrecisePosition )
		pFnReachedPrecisePosition = (UFunction*) UObject::GObjObjects()->Data[ 127740 ];

	USFXCustomAction_StandingGapJump_execReachedPrecisePosition_Parms ReachedPrecisePosition_Parms;

	this->ProcessEvent ( pFnReachedPrecisePosition, &ReachedPrecisePosition_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.AlignmentTimeout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StandingGapJump::AlignmentTimeout ( )
{
	static UFunction* pFnAlignmentTimeout = NULL;

	if ( ! pFnAlignmentTimeout )
		pFnAlignmentTimeout = (UFunction*) UObject::GObjObjects()->Data[ 127739 ];

	USFXCustomAction_StandingGapJump_execAlignmentTimeout_Parms AlignmentTimeout_Parms;

	this->ProcessEvent ( pFnAlignmentTimeout, &AlignmentTimeout_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StandingGapJump::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127735 ];

	USFXCustomAction_StandingGapJump_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_GapJump.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_StandingGapJump::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 127731 ];

	USFXCustomAction_StandingGapJump_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_ReachSpecMove.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_JumpDown::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66566 ];

	USFXCustomAction_JumpDown_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_ReachSpecMove.PreAlignPawnLocation
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_JumpDown::PreAlignPawnLocation ( )
{
	static UFunction* pFnPreAlignPawnLocation = NULL;

	if ( ! pFnPreAlignPawnLocation )
		pFnPreAlignPawnLocation = (UFunction*) UObject::GObjObjects()->Data[ 66564 ];

	USFXCustomAction_JumpDown_execPreAlignPawnLocation_Parms PreAlignPawnLocation_Parms;

	this->ProcessEvent ( pFnPreAlignPawnLocation, &PreAlignPawnLocation_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_ReachSpecMove.ClientDoCustomAction
// [0x00024002] 
// Parameters infos:
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_JumpDown::ClientDoCustomAction ( unsigned long bForced )
{
	static UFunction* pFnClientDoCustomAction = NULL;

	if ( ! pFnClientDoCustomAction )
		pFnClientDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66562 ];

	USFXCustomAction_JumpDown_execClientDoCustomAction_Parms ClientDoCustomAction_Parms;
	ClientDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnClientDoCustomAction, &ClientDoCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_ReachSpecMove.Replicate
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_JumpDown::Replicate ( )
{
	static UFunction* pFnReplicate = NULL;

	if ( ! pFnReplicate )
		pFnReplicate = (UFunction*) UObject::GObjObjects()->Data[ 66561 ];

	USFXCustomAction_JumpDown_execReplicate_Parms Replicate_Parms;

	this->ProcessEvent ( pFnReplicate, &Replicate_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_ReachSpecMove.RemoveBlockingEndPoints
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_JumpDown::RemoveBlockingEndPoints ( )
{
	static UFunction* pFnRemoveBlockingEndPoints = NULL;

	if ( ! pFnRemoveBlockingEndPoints )
		pFnRemoveBlockingEndPoints = (UFunction*) UObject::GObjObjects()->Data[ 66558 ];

	USFXCustomAction_JumpDown_execRemoveBlockingEndPoints_Parms RemoveBlockingEndPoints_Parms;

	this->ProcessEvent ( pFnRemoveBlockingEndPoints, &RemoveBlockingEndPoints_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_ReachSpecMove.BlockMoveEndPoints
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_JumpDown::BlockMoveEndPoints ( )
{
	static UFunction* pFnBlockMoveEndPoints = NULL;

	if ( ! pFnBlockMoveEndPoints )
		pFnBlockMoveEndPoints = (UFunction*) UObject::GObjObjects()->Data[ 66552 ];

	USFXCustomAction_JumpDown_execBlockMoveEndPoints_Parms BlockMoveEndPoints_Parms;

	this->ProcessEvent ( pFnBlockMoveEndPoints, &BlockMoveEndPoints_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_ReachSpecMove.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_JumpDown::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66550 ];

	USFXCustomAction_JumpDown_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_ReachSpecMove.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool USFXCustomAction_JumpDown::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66546 ];

	USFXCustomAction_JumpDown_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleOverCover.GetEndAnim
// [0x00420002] 
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerMantleOverCover::GetEndAnim ( struct FBodyStance* Stance )
{
	static UFunction* pFnGetEndAnim = NULL;

	if ( ! pFnGetEndAnim )
		pFnGetEndAnim = (UFunction*) UObject::GObjObjects()->Data[ 128083 ];

	USFXCustomAction_PlayerMantleOverCover_execGetEndAnim_Parms GetEndAnim_Parms;

	this->ProcessEvent ( pFnGetEndAnim, &GetEndAnim_Parms, NULL );

	if ( Stance )
		memcpy ( Stance, &GetEndAnim_Parms.Stance, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleOverCover.GetLoopAnim
// [0x00420002] 
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerMantleOverCover::GetLoopAnim ( struct FBodyStance* Stance )
{
	static UFunction* pFnGetLoopAnim = NULL;

	if ( ! pFnGetLoopAnim )
		pFnGetLoopAnim = (UFunction*) UObject::GObjObjects()->Data[ 128081 ];

	USFXCustomAction_PlayerMantleOverCover_execGetLoopAnim_Parms GetLoopAnim_Parms;

	this->ProcessEvent ( pFnGetLoopAnim, &GetLoopAnim_Parms, NULL );

	if ( Stance )
		memcpy ( Stance, &GetLoopAnim_Parms.Stance, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleOverCover.GetStartAnim
// [0x00420002] 
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerMantleOverCover::GetStartAnim ( struct FBodyStance* Stance )
{
	static UFunction* pFnGetStartAnim = NULL;

	if ( ! pFnGetStartAnim )
		pFnGetStartAnim = (UFunction*) UObject::GObjObjects()->Data[ 128079 ];

	USFXCustomAction_PlayerMantleOverCover_execGetStartAnim_Parms GetStartAnim_Parms;

	this->ProcessEvent ( pFnGetStartAnim, &GetStartAnim_Parms, NULL );

	if ( Stance )
		memcpy ( Stance, &GetStartAnim_Parms.Stance, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleOverCover.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerMantleOverCover::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 128067 ];

	USFXCustomAction_PlayerMantleOverCover_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleOverCover.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerMantleOverCover::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 128063 ];

	USFXCustomAction_PlayerMantleOverCover_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleOverCover.TickCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USFXCustomAction_PlayerMantleOverCover::eventTickCustomAction ( float DeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128060 ];

	USFXCustomAction_PlayerMantleOverCover_eventTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleOverCover.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerMantleOverCover::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128059 ];

	USFXCustomAction_PlayerMantleOverCover_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleOverCover.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerMantleOverCover::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128055 ];

	USFXCustomAction_PlayerMantleOverCover_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleUp.ClientDoCustomAction
// [0x00024002] 
// Parameters infos:
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_PlayerMantleUp::ClientDoCustomAction ( unsigned long bForced )
{
	static UFunction* pFnClientDoCustomAction = NULL;

	if ( ! pFnClientDoCustomAction )
		pFnClientDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128162 ];

	USFXCustomAction_PlayerMantleUp_execClientDoCustomAction_Parms ClientDoCustomAction_Parms;
	ClientDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnClientDoCustomAction, &ClientDoCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleUp.ServerStartCustomAction
// [0x00024002] 
// Parameters infos:
// int                            NewAction                      ( CPF_Parm )
// class ABioPawn*                Sync                           ( CPF_OptionalParm | CPF_Parm )
// int                            NewPowerAction                 ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_PlayerMantleUp::ServerStartCustomAction ( int NewAction, class ABioPawn* Sync, int NewPowerAction )
{
	static UFunction* pFnServerStartCustomAction = NULL;

	if ( ! pFnServerStartCustomAction )
		pFnServerStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128158 ];

	USFXCustomAction_PlayerMantleUp_execServerStartCustomAction_Parms ServerStartCustomAction_Parms;
	ServerStartCustomAction_Parms.NewAction = NewAction;
	ServerStartCustomAction_Parms.Sync = Sync;
	ServerStartCustomAction_Parms.NewPowerAction = NewPowerAction;

	this->ProcessEvent ( pFnServerStartCustomAction, &ServerStartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleUp.Replicate
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerMantleUp::Replicate ( )
{
	static UFunction* pFnReplicate = NULL;

	if ( ! pFnReplicate )
		pFnReplicate = (UFunction*) UObject::GObjObjects()->Data[ 128157 ];

	USFXCustomAction_PlayerMantleUp_execReplicate_Parms Replicate_Parms;

	this->ProcessEvent ( pFnReplicate, &Replicate_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleUp.GetBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_PlayerMantleUp::GetBodyStanceAnim ( )
{
	static UFunction* pFnGetBodyStanceAnim = NULL;

	if ( ! pFnGetBodyStanceAnim )
		pFnGetBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 128155 ];

	USFXCustomAction_PlayerMantleUp_execGetBodyStanceAnim_Parms GetBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetBodyStanceAnim, &GetBodyStanceAnim_Parms, NULL );

	return GetBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleUp.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerMantleUp::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128154 ];

	USFXCustomAction_PlayerMantleUp_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleUp.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerMantleUp::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128152 ];

	USFXCustomAction_PlayerMantleUp_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleUp.InternalCanDoCustomAction
// [0x00880002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool USFXCustomAction_PlayerMantleUp::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128146 ];

	USFXCustomAction_PlayerMantleUp_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_PlayerMantleUp.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerMantleUp::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 128141 ];

	USFXCustomAction_PlayerMantleUp_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.ClientDoCustomAction
// [0x00024002] 
// Parameters infos:
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )

void Usfxcustomaction_simplemovebase::ClientDoCustomAction ( unsigned long bForced )
{
	static UFunction* pFnClientDoCustomAction = NULL;

	if ( ! pFnClientDoCustomAction )
		pFnClientDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128138 ];

	Usfxcustomaction_simplemovebase_execClientDoCustomAction_Parms ClientDoCustomAction_Parms;
	ClientDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnClientDoCustomAction, &ClientDoCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.Replicate
// [0x00020002] 
// Parameters infos:

void Usfxcustomaction_simplemovebase::Replicate ( )
{
	static UFunction* pFnReplicate = NULL;

	if ( ! pFnReplicate )
		pFnReplicate = (UFunction*) UObject::GObjObjects()->Data[ 128137 ];

	Usfxcustomaction_simplemovebase_execReplicate_Parms Replicate_Parms;

	this->ProcessEvent ( pFnReplicate, &Replicate_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.CanBeInterrupted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxcustomaction_simplemovebase::CanBeInterrupted ( )
{
	static UFunction* pFnCanBeInterrupted = NULL;

	if ( ! pFnCanBeInterrupted )
		pFnCanBeInterrupted = (UFunction*) UObject::GObjObjects()->Data[ 128135 ];

	Usfxcustomaction_simplemovebase_execCanBeInterrupted_Parms CanBeInterrupted_Parms;

	this->ProcessEvent ( pFnCanBeInterrupted, &CanBeInterrupted_Parms, NULL );

	return CanBeInterrupted_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.DestTimeout
// [0x00020002] 
// Parameters infos:

void Usfxcustomaction_simplemovebase::DestTimeout ( )
{
	static UFunction* pFnDestTimeout = NULL;

	if ( ! pFnDestTimeout )
		pFnDestTimeout = (UFunction*) UObject::GObjObjects()->Data[ 128134 ];

	Usfxcustomaction_simplemovebase_execDestTimeout_Parms DestTimeout_Parms;

	this->ProcessEvent ( pFnDestTimeout, &DestTimeout_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void Usfxcustomaction_simplemovebase::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 128130 ];

	Usfxcustomaction_simplemovebase_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.StopCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxcustomaction_simplemovebase::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128128 ];

	Usfxcustomaction_simplemovebase_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.PlayStartAnimation
// [0x00020002] 
// Parameters infos:

void Usfxcustomaction_simplemovebase::PlayStartAnimation ( )
{
	static UFunction* pFnPlayStartAnimation = NULL;

	if ( ! pFnPlayStartAnimation )
		pFnPlayStartAnimation = (UFunction*) UObject::GObjObjects()->Data[ 128111 ];

	Usfxcustomaction_simplemovebase_execPlayStartAnimation_Parms PlayStartAnimation_Parms;

	this->ProcessEvent ( pFnPlayStartAnimation, &PlayStartAnimation_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.GetBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance Usfxcustomaction_simplemovebase::GetBodyStanceAnim ( )
{
	static UFunction* pFnGetBodyStanceAnim = NULL;

	if ( ! pFnGetBodyStanceAnim )
		pFnGetBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 128109 ];

	Usfxcustomaction_simplemovebase_execGetBodyStanceAnim_Parms GetBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetBodyStanceAnim, &GetBodyStanceAnim_Parms, NULL );

	return GetBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxcustomaction_simplemovebase::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128104 ];

	Usfxcustomaction_simplemovebase_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool Usfxcustomaction_simplemovebase::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128100 ];

	Usfxcustomaction_simplemovebase_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.RemoveBlockingEndPoints
// [0x00020002] 
// Parameters infos:

void Usfxcustomaction_simplemovebase::RemoveBlockingEndPoints ( )
{
	static UFunction* pFnRemoveBlockingEndPoints = NULL;

	if ( ! pFnRemoveBlockingEndPoints )
		pFnRemoveBlockingEndPoints = (UFunction*) UObject::GObjObjects()->Data[ 128097 ];

	Usfxcustomaction_simplemovebase_execRemoveBlockingEndPoints_Parms RemoveBlockingEndPoints_Parms;

	this->ProcessEvent ( pFnRemoveBlockingEndPoints, &RemoveBlockingEndPoints_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.BlockMoveEndPoints
// [0x00020002] 
// Parameters infos:

void Usfxcustomaction_simplemovebase::BlockMoveEndPoints ( )
{
	static UFunction* pFnBlockMoveEndPoints = NULL;

	if ( ! pFnBlockMoveEndPoints )
		pFnBlockMoveEndPoints = (UFunction*) UObject::GObjObjects()->Data[ 128091 ];

	Usfxcustomaction_simplemovebase_execBlockMoveEndPoints_Parms BlockMoveEndPoints_Parms;

	this->ProcessEvent ( pFnBlockMoveEndPoints, &BlockMoveEndPoints_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.ReachedPrecisePosition
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void Usfxcustomaction_simplemovebase::eventReachedPrecisePosition ( )
{
	static UFunction* pFnReachedPrecisePosition = NULL;

	if ( ! pFnReachedPrecisePosition )
		pFnReachedPrecisePosition = (UFunction*) UObject::GObjObjects()->Data[ 128090 ];

	Usfxcustomaction_simplemovebase_eventReachedPrecisePosition_Parms ReachedPrecisePosition_Parms;

	this->ProcessEvent ( pFnReachedPrecisePosition, &ReachedPrecisePosition_Parms, NULL );
};

// Function sfxgamecontent.sfxcustomaction_simplemovebase.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void Usfxcustomaction_simplemovebase::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 128086 ];

	Usfxcustomaction_simplemovebase_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_SingleAnim.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerCoverSlipLeft::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66988 ];

	USFXCustomAction_PlayerCoverSlipLeft_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerCoverSlipLeft::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66986 ];

	USFXCustomAction_PlayerCoverSlipLeft_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerCoverSlipLeft::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66983 ];

	USFXCustomAction_PlayerCoverSlipLeft_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerCoverSlipLeft::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66969 ];

	USFXCustomAction_PlayerCoverSlipLeft_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.GetBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_PlayerCoverSlipLeft::GetBodyStanceAnim ( )
{
	static UFunction* pFnGetBodyStanceAnim = NULL;

	if ( ! pFnGetBodyStanceAnim )
		pFnGetBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 66967 ];

	USFXCustomAction_PlayerCoverSlipLeft_execGetBodyStanceAnim_Parms GetBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetBodyStanceAnim, &GetBodyStanceAnim_Parms, NULL );

	return GetBodyStanceAnim_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_SingleAnim.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerCoverSlipLeft::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66963 ];

	USFXCustomAction_PlayerCoverSlipLeft_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_SingleAnim.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerCoverSlipLeftStanding::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66988 ];

	USFXCustomAction_PlayerCoverSlipLeftStanding_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerCoverSlipLeftStanding::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66986 ];

	USFXCustomAction_PlayerCoverSlipLeftStanding_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerCoverSlipLeftStanding::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66983 ];

	USFXCustomAction_PlayerCoverSlipLeftStanding_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerCoverSlipLeftStanding::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66969 ];

	USFXCustomAction_PlayerCoverSlipLeftStanding_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.GetBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_PlayerCoverSlipLeftStanding::GetBodyStanceAnim ( )
{
	static UFunction* pFnGetBodyStanceAnim = NULL;

	if ( ! pFnGetBodyStanceAnim )
		pFnGetBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 66967 ];

	USFXCustomAction_PlayerCoverSlipLeftStanding_execGetBodyStanceAnim_Parms GetBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetBodyStanceAnim, &GetBodyStanceAnim_Parms, NULL );

	return GetBodyStanceAnim_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_SingleAnim.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerCoverSlipLeftStanding::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66963 ];

	USFXCustomAction_PlayerCoverSlipLeftStanding_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_SingleAnim.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerCoverSlipRight::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66988 ];

	USFXCustomAction_PlayerCoverSlipRight_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerCoverSlipRight::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66986 ];

	USFXCustomAction_PlayerCoverSlipRight_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerCoverSlipRight::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66983 ];

	USFXCustomAction_PlayerCoverSlipRight_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerCoverSlipRight::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66969 ];

	USFXCustomAction_PlayerCoverSlipRight_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.GetBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_PlayerCoverSlipRight::GetBodyStanceAnim ( )
{
	static UFunction* pFnGetBodyStanceAnim = NULL;

	if ( ! pFnGetBodyStanceAnim )
		pFnGetBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 66967 ];

	USFXCustomAction_PlayerCoverSlipRight_execGetBodyStanceAnim_Parms GetBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetBodyStanceAnim, &GetBodyStanceAnim_Parms, NULL );

	return GetBodyStanceAnim_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_SingleAnim.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerCoverSlipRight::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66963 ];

	USFXCustomAction_PlayerCoverSlipRight_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_SingleAnim.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerCoverSlipRightStanding::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66988 ];

	USFXCustomAction_PlayerCoverSlipRightStanding_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerCoverSlipRightStanding::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66986 ];

	USFXCustomAction_PlayerCoverSlipRightStanding_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerCoverSlipRightStanding::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66983 ];

	USFXCustomAction_PlayerCoverSlipRightStanding_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerCoverSlipRightStanding::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66969 ];

	USFXCustomAction_PlayerCoverSlipRightStanding_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_SingleAnim.GetBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_PlayerCoverSlipRightStanding::GetBodyStanceAnim ( )
{
	static UFunction* pFnGetBodyStanceAnim = NULL;

	if ( ! pFnGetBodyStanceAnim )
		pFnGetBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 66967 ];

	USFXCustomAction_PlayerCoverSlipRightStanding_execGetBodyStanceAnim_Parms GetBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetBodyStanceAnim, &GetBodyStanceAnim_Parms, NULL );

	return GetBodyStanceAnim_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_SingleAnim.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerCoverSlipRightStanding::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66963 ];

	USFXCustomAction_PlayerCoverSlipRightStanding_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_PlayerLadderClimbUp.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerLadderClimbUp::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128053 ];

	USFXCustomAction_PlayerLadderClimbUp_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerLadderClimbUp.PreAlignPawnLocation
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerLadderClimbUp::PreAlignPawnLocation ( )
{
	static UFunction* pFnPreAlignPawnLocation = NULL;

	if ( ! pFnPreAlignPawnLocation )
		pFnPreAlignPawnLocation = (UFunction*) UObject::GObjObjects()->Data[ 128049 ];

	USFXCustomAction_PlayerLadderClimbUp_execPreAlignPawnLocation_Parms PreAlignPawnLocation_Parms;

	this->ProcessEvent ( pFnPreAlignPawnLocation, &PreAlignPawnLocation_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerLadderClimbUp.SetMoveStage
// [0x00020002] 
// Parameters infos:
// unsigned char                  NextStage                      ( CPF_Parm )

void USFXCustomAction_PlayerLadderClimbUp::SetMoveStage ( unsigned char NextStage )
{
	static UFunction* pFnSetMoveStage = NULL;

	if ( ! pFnSetMoveStage )
		pFnSetMoveStage = (UFunction*) UObject::GObjObjects()->Data[ 128043 ];

	USFXCustomAction_PlayerLadderClimbUp_execSetMoveStage_Parms SetMoveStage_Parms;
	SetMoveStage_Parms.NextStage = NextStage;

	this->ProcessEvent ( pFnSetMoveStage, &SetMoveStage_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerLadderClimbUp.TickCustomAction
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USFXCustomAction_PlayerLadderClimbUp::TickCustomAction ( float DeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128039 ];

	USFXCustomAction_PlayerLadderClimbUp_execTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerLadderClimbUp.SyncRotation
// [0x00020002] 
// Parameters infos:
// float                          Alpha                          ( CPF_Parm )

void USFXCustomAction_PlayerLadderClimbUp::SyncRotation ( float Alpha )
{
	static UFunction* pFnSyncRotation = NULL;

	if ( ! pFnSyncRotation )
		pFnSyncRotation = (UFunction*) UObject::GObjObjects()->Data[ 128033 ];

	USFXCustomAction_PlayerLadderClimbUp_execSyncRotation_Parms SyncRotation_Parms;
	SyncRotation_Parms.Alpha = Alpha;

	this->ProcessEvent ( pFnSyncRotation, &SyncRotation_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerLadderClimbUp.SyncJumpEntrance
// [0x00020002] 
// Parameters infos:
// float                          Alpha                          ( CPF_Parm )

void USFXCustomAction_PlayerLadderClimbUp::SyncJumpEntrance ( float Alpha )
{
	static UFunction* pFnSyncJumpEntrance = NULL;

	if ( ! pFnSyncJumpEntrance )
		pFnSyncJumpEntrance = (UFunction*) UObject::GObjObjects()->Data[ 128030 ];

	USFXCustomAction_PlayerLadderClimbUp_execSyncJumpEntrance_Parms SyncJumpEntrance_Parms;
	SyncJumpEntrance_Parms.Alpha = Alpha;

	this->ProcessEvent ( pFnSyncJumpEntrance, &SyncJumpEntrance_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerLadderClimbUp.TickAlignment
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USFXCustomAction_PlayerLadderClimbUp::TickAlignment ( float DeltaTime )
{
	static UFunction* pFnTickAlignment = NULL;

	if ( ! pFnTickAlignment )
		pFnTickAlignment = (UFunction*) UObject::GObjObjects()->Data[ 128025 ];

	USFXCustomAction_PlayerLadderClimbUp_execTickAlignment_Parms TickAlignment_Parms;
	TickAlignment_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickAlignment, &TickAlignment_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerLadderClimbUp.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerLadderClimbUp::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128020 ];

	USFXCustomAction_PlayerLadderClimbUp_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerLadderClimbUp.TickInput
// [0x00020002] 
// Parameters infos:
// class UBioPlayerInput*         Input                          ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

void USFXCustomAction_PlayerLadderClimbUp::TickInput ( class UBioPlayerInput* Input, float DeltaTime )
{
	static UFunction* pFnTickInput = NULL;

	if ( ! pFnTickInput )
		pFnTickInput = (UFunction*) UObject::GObjObjects()->Data[ 128017 ];

	USFXCustomAction_PlayerLadderClimbUp_execTickInput_Parms TickInput_Parms;
	TickInput_Parms.Input = Input;
	TickInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickInput, &TickInput_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerLadderClimbUp.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerLadderClimbUp::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 128012 ];

	USFXCustomAction_PlayerLadderClimbUp_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_LadderClimbDownBase.SetMoveStage
// [0x00020002] 
// Parameters infos:
// unsigned char                  NextStage                      ( CPF_Parm )

void USFXCustomAction_PlayerLadderClimbDown::SetMoveStage ( unsigned char NextStage )
{
	static UFunction* pFnSetMoveStage = NULL;

	if ( ! pFnSetMoveStage )
		pFnSetMoveStage = (UFunction*) UObject::GObjObjects()->Data[ 67127 ];

	USFXCustomAction_PlayerLadderClimbDown_execSetMoveStage_Parms SetMoveStage_Parms;
	SetMoveStage_Parms.NextStage = NextStage;

	this->ProcessEvent ( pFnSetMoveStage, &SetMoveStage_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_LadderClimbDownBase.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerLadderClimbDown::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67126 ];

	USFXCustomAction_PlayerLadderClimbDown_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_LadderClimbDownBase.PreAlignPawnLocation
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerLadderClimbDown::PreAlignPawnLocation ( )
{
	static UFunction* pFnPreAlignPawnLocation = NULL;

	if ( ! pFnPreAlignPawnLocation )
		pFnPreAlignPawnLocation = (UFunction*) UObject::GObjObjects()->Data[ 67125 ];

	USFXCustomAction_PlayerLadderClimbDown_execPreAlignPawnLocation_Parms PreAlignPawnLocation_Parms;

	this->ProcessEvent ( pFnPreAlignPawnLocation, &PreAlignPawnLocation_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_LadderClimbDownBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerLadderClimbDown::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67121 ];

	USFXCustomAction_PlayerLadderClimbDown_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeLeft.RollOverride
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerEvadeLeft::RollOverride ( )
{
	static UFunction* pFnRollOverride = NULL;

	if ( ! pFnRollOverride )
		pFnRollOverride = (UFunction*) UObject::GObjObjects()->Data[ 127992 ];

	USFXCustomAction_PlayerEvadeLeft_execRollOverride_Parms RollOverride_Parms;

	this->ProcessEvent ( pFnRollOverride, &RollOverride_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeLeft.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerEvadeLeft::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127989 ];

	USFXCustomAction_PlayerEvadeLeft_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeLeft.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool USFXCustomAction_PlayerEvadeLeft::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127985 ];

	USFXCustomAction_PlayerEvadeLeft_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeRight.RollOverride
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerEvadeRight::RollOverride ( )
{
	static UFunction* pFnRollOverride = NULL;

	if ( ! pFnRollOverride )
		pFnRollOverride = (UFunction*) UObject::GObjObjects()->Data[ 128002 ];

	USFXCustomAction_PlayerEvadeRight_execRollOverride_Parms RollOverride_Parms;

	this->ProcessEvent ( pFnRollOverride, &RollOverride_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeRight.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerEvadeRight::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127999 ];

	USFXCustomAction_PlayerEvadeRight_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeRight.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool USFXCustomAction_PlayerEvadeRight::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127995 ];

	USFXCustomAction_PlayerEvadeRight_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeForward.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_PlayerEvadeForward::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 127972 ];

	USFXCustomAction_PlayerEvadeForward_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeForward.RollOverride
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerEvadeForward::RollOverride ( )
{
	static UFunction* pFnRollOverride = NULL;

	if ( ! pFnRollOverride )
		pFnRollOverride = (UFunction*) UObject::GObjObjects()->Data[ 127971 ];

	USFXCustomAction_PlayerEvadeForward_execRollOverride_Parms RollOverride_Parms;

	this->ProcessEvent ( pFnRollOverride, &RollOverride_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeForward.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerEvadeForward::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127970 ];

	USFXCustomAction_PlayerEvadeForward_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeForward.TurnOnHitWall
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerEvadeForward::TurnOnHitWall ( )
{
	static UFunction* pFnTurnOnHitWall = NULL;

	if ( ! pFnTurnOnHitWall )
		pFnTurnOnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 127969 ];

	USFXCustomAction_PlayerEvadeForward_execTurnOnHitWall_Parms TurnOnHitWall_Parms;

	this->ProcessEvent ( pFnTurnOnHitWall, &TurnOnHitWall_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeForward.NotifyHitWall
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )

bool USFXCustomAction_PlayerEvadeForward::NotifyHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = (UFunction*) UObject::GObjObjects()->Data[ 127964 ];

	USFXCustomAction_PlayerEvadeForward_execNotifyHitWall_Parms NotifyHitWall_Parms;
	memcpy ( &NotifyHitWall_Parms.HitNormal, &HitNormal, 0xC );
	NotifyHitWall_Parms.Wall = Wall;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );

	return NotifyHitWall_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeForward.EndThisCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerEvadeForward::EndThisCustomAction ( )
{
	static UFunction* pFnEndThisCustomAction = NULL;

	if ( ! pFnEndThisCustomAction )
		pFnEndThisCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127963 ];

	USFXCustomAction_PlayerEvadeForward_execEndThisCustomAction_Parms EndThisCustomAction_Parms;

	this->ProcessEvent ( pFnEndThisCustomAction, &EndThisCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeForward.SyncRotation
// [0x00020002] 
// Parameters infos:
// float                          Alpha                          ( CPF_Parm )
// struct FVector                 ToEnd2D                        ( CPF_Parm )

void USFXCustomAction_PlayerEvadeForward::SyncRotation ( float Alpha, struct FVector ToEnd2D )
{
	static UFunction* pFnSyncRotation = NULL;

	if ( ! pFnSyncRotation )
		pFnSyncRotation = (UFunction*) UObject::GObjObjects()->Data[ 127959 ];

	USFXCustomAction_PlayerEvadeForward_execSyncRotation_Parms SyncRotation_Parms;
	SyncRotation_Parms.Alpha = Alpha;
	memcpy ( &SyncRotation_Parms.ToEnd2D, &ToEnd2D, 0xC );

	this->ProcessEvent ( pFnSyncRotation, &SyncRotation_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeForward.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerEvadeForward::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127955 ];

	USFXCustomAction_PlayerEvadeForward_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeForward.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool USFXCustomAction_PlayerEvadeForward::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127951 ];

	USFXCustomAction_PlayerEvadeForward_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeBackwards.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_PlayerEvadeBackwards::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 127939 ];

	USFXCustomAction_PlayerEvadeBackwards_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeBackwards.RollOverride
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerEvadeBackwards::RollOverride ( )
{
	static UFunction* pFnRollOverride = NULL;

	if ( ! pFnRollOverride )
		pFnRollOverride = (UFunction*) UObject::GObjObjects()->Data[ 127938 ];

	USFXCustomAction_PlayerEvadeBackwards_execRollOverride_Parms RollOverride_Parms;

	this->ProcessEvent ( pFnRollOverride, &RollOverride_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeBackwards.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerEvadeBackwards::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127937 ];

	USFXCustomAction_PlayerEvadeBackwards_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeBackwards.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerEvadeBackwards::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127934 ];

	USFXCustomAction_PlayerEvadeBackwards_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_PlayerEvadeBackwards.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool USFXCustomAction_PlayerEvadeBackwards::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127930 ];

	USFXCustomAction_PlayerEvadeBackwards_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_MantleMelee.EndThisCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MantleMelee::EndThisCustomAction ( )
{
	static UFunction* pFnEndThisCustomAction = NULL;

	if ( ! pFnEndThisCustomAction )
		pFnEndThisCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127840 ];

	USFXCustomAction_MantleMelee_execEndThisCustomAction_Parms EndThisCustomAction_Parms;

	this->ProcessEvent ( pFnEndThisCustomAction, &EndThisCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_MantleMelee.Breakout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MantleMelee::Breakout ( )
{
	static UFunction* pFnBreakout = NULL;

	if ( ! pFnBreakout )
		pFnBreakout = (UFunction*) UObject::GObjObjects()->Data[ 127838 ];

	USFXCustomAction_MantleMelee_execBreakout_Parms Breakout_Parms;

	this->ProcessEvent ( pFnBreakout, &Breakout_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_MantleMelee.NotifyBump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_MantleMelee::NotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 127834 ];

	USFXCustomAction_MantleMelee_execNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_MantleMelee.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_MantleMelee::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 127825 ];

	USFXCustomAction_MantleMelee_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_MantleMelee.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MantleMelee::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127824 ];

	USFXCustomAction_MantleMelee_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_MantleMelee.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MantleMelee::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127823 ];

	USFXCustomAction_MantleMelee_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_SyncCoverGrab::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127647 ];

	USFXCustomAction_SyncCoverGrab_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.NonSyncedAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_SyncCoverGrab::NonSyncedAction ( )
{
	static UFunction* pFnNonSyncedAction = NULL;

	if ( ! pFnNonSyncedAction )
		pFnNonSyncedAction = (UFunction*) UObject::GObjObjects()->Data[ 127646 ];

	USFXCustomAction_SyncCoverGrab_execNonSyncedAction_Parms NonSyncedAction_Parms;

	this->ProcessEvent ( pFnNonSyncedAction, &NonSyncedAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.SyncAttack
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_SyncCoverGrab::SyncAttack ( )
{
	static UFunction* pFnSyncAttack = NULL;

	if ( ! pFnSyncAttack )
		pFnSyncAttack = (UFunction*) UObject::GObjObjects()->Data[ 127645 ];

	USFXCustomAction_SyncCoverGrab_execSyncAttack_Parms SyncAttack_Parms;

	this->ProcessEvent ( pFnSyncAttack, &SyncAttack_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.GetVictimAnim
// [0x00420002] 
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_SyncCoverGrab::GetVictimAnim ( struct FBodyStance* Stance )
{
	static UFunction* pFnGetVictimAnim = NULL;

	if ( ! pFnGetVictimAnim )
		pFnGetVictimAnim = (UFunction*) UObject::GObjObjects()->Data[ 127642 ];

	USFXCustomAction_SyncCoverGrab_execGetVictimAnim_Parms GetVictimAnim_Parms;

	this->ProcessEvent ( pFnGetVictimAnim, &GetVictimAnim_Parms, NULL );

	if ( Stance )
		memcpy ( Stance, &GetVictimAnim_Parms.Stance, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.GetAttackerAnim
// [0x00420002] 
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_SyncCoverGrab::GetAttackerAnim ( struct FBodyStance* Stance )
{
	static UFunction* pFnGetAttackerAnim = NULL;

	if ( ! pFnGetAttackerAnim )
		pFnGetAttackerAnim = (UFunction*) UObject::GObjObjects()->Data[ 127639 ];

	USFXCustomAction_SyncCoverGrab_execGetAttackerAnim_Parms GetAttackerAnim_Parms;

	this->ProcessEvent ( pFnGetAttackerAnim, &GetAttackerAnim_Parms, NULL );

	if ( Stance )
		memcpy ( Stance, &GetAttackerAnim_Parms.Stance, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.GetVictimPawn
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ABioPawn* USFXCustomAction_SyncCoverGrab::GetVictimPawn ( )
{
	static UFunction* pFnGetVictimPawn = NULL;

	if ( ! pFnGetVictimPawn )
		pFnGetVictimPawn = (UFunction*) UObject::GObjObjects()->Data[ 127631 ];

	USFXCustomAction_SyncCoverGrab_execGetVictimPawn_Parms GetVictimPawn_Parms;

	this->ProcessEvent ( pFnGetVictimPawn, &GetVictimPawn_Parms, NULL );

	return GetVictimPawn_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_SyncCoverGrab::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127627 ];

	USFXCustomAction_SyncCoverGrab_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.ShouldPlayMirrorAnim
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXCustomAction_SyncCoverGrab::ShouldPlayMirrorAnim ( )
{
	static UFunction* pFnShouldPlayMirrorAnim = NULL;

	if ( ! pFnShouldPlayMirrorAnim )
		pFnShouldPlayMirrorAnim = (UFunction*) UObject::GObjObjects()->Data[ 127620 ];

	USFXCustomAction_SyncCoverGrab_execShouldPlayMirrorAnim_Parms ShouldPlayMirrorAnim_Parms;

	this->ProcessEvent ( pFnShouldPlayMirrorAnim, &ShouldPlayMirrorAnim_Parms, NULL );

	return ShouldPlayMirrorAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.VerifyVictimDestIsClear
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                VictimPawn                     ( CPF_Parm )
// struct FVector                 DestinationPos                 ( CPF_Parm )

bool USFXCustomAction_SyncCoverGrab::VerifyVictimDestIsClear ( class ABioPawn* VictimPawn, struct FVector DestinationPos )
{
	static UFunction* pFnVerifyVictimDestIsClear = NULL;

	if ( ! pFnVerifyVictimDestIsClear )
		pFnVerifyVictimDestIsClear = (UFunction*) UObject::GObjObjects()->Data[ 127609 ];

	USFXCustomAction_SyncCoverGrab_execVerifyVictimDestIsClear_Parms VerifyVictimDestIsClear_Parms;
	VerifyVictimDestIsClear_Parms.VictimPawn = VictimPawn;
	memcpy ( &VerifyVictimDestIsClear_Parms.DestinationPos, &DestinationPos, 0xC );

	this->ProcessEvent ( pFnVerifyVictimDestIsClear, &VerifyVictimDestIsClear_Parms, NULL );

	return VerifyVictimDestIsClear_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool USFXCustomAction_SyncCoverGrab::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127603 ];

	USFXCustomAction_SyncCoverGrab_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.StartMeleeAttack
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_SyncCoverGrab::StartMeleeAttack ( )
{
	static UFunction* pFnStartMeleeAttack = NULL;

	if ( ! pFnStartMeleeAttack )
		pFnStartMeleeAttack = (UFunction*) UObject::GObjObjects()->Data[ 127599 ];

	USFXCustomAction_SyncCoverGrab_execStartMeleeAttack_Parms StartMeleeAttack_Parms;

	this->ProcessEvent ( pFnStartMeleeAttack, &StartMeleeAttack_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverMelee.MeleeImpact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_SyncCoverMelee::MeleeImpact ( )
{
	static UFunction* pFnMeleeImpact = NULL;

	if ( ! pFnMeleeImpact )
		pFnMeleeImpact = (UFunction*) UObject::GObjObjects()->Data[ 128348 ];

	USFXCustomAction_SyncCoverMelee_execMeleeImpact_Parms MeleeImpact_Parms;

	this->ProcessEvent ( pFnMeleeImpact, &MeleeImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverMelee.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_SyncCoverMelee::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128347 ];

	USFXCustomAction_SyncCoverMelee_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverMelee.EndThisCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_SyncCoverMelee::EndThisCustomAction ( )
{
	static UFunction* pFnEndThisCustomAction = NULL;

	if ( ! pFnEndThisCustomAction )
		pFnEndThisCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128345 ];

	USFXCustomAction_SyncCoverMelee_execEndThisCustomAction_Parms EndThisCustomAction_Parms;

	this->ProcessEvent ( pFnEndThisCustomAction, &EndThisCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverMelee.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_SyncCoverMelee::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128343 ];

	USFXCustomAction_SyncCoverMelee_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverMelee.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_SyncCoverMelee::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 128339 ];

	USFXCustomAction_SyncCoverMelee_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.Breakout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdCoverMeleeLeft::Breakout ( )
{
	static UFunction* pFnBreakout = NULL;

	if ( ! pFnBreakout )
		pFnBreakout = (UFunction*) UObject::GObjObjects()->Data[ 67479 ];

	USFXCustomAction_StdCoverMeleeLeft_execBreakout_Parms Breakout_Parms;

	this->ProcessEvent ( pFnBreakout, &Breakout_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StopBlur
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdCoverMeleeLeft::StopBlur ( )
{
	static UFunction* pFnStopBlur = NULL;

	if ( ! pFnStopBlur )
		pFnStopBlur = (UFunction*) UObject::GObjObjects()->Data[ 67478 ];

	USFXCustomAction_StdCoverMeleeLeft_execStopBlur_Parms StopBlur_Parms;

	this->ProcessEvent ( pFnStopBlur, &StopBlur_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_StdCoverMeleeLeft::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 67460 ];

	USFXCustomAction_StdCoverMeleeLeft_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_StdCoverMeleeLeft::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 67454 ];

	USFXCustomAction_StdCoverMeleeLeft_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnTimelineImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void USFXCustomAction_StdCoverMeleeLeft::OnTimelineImpact ( class AActor* Target )
{
	static UFunction* pFnOnTimelineImpact = NULL;

	if ( ! pFnOnTimelineImpact )
		pFnOnTimelineImpact = (UFunction*) UObject::GObjObjects()->Data[ 67452 ];

	USFXCustomAction_StdCoverMeleeLeft_execOnTimelineImpact_Parms OnTimelineImpact_Parms;
	OnTimelineImpact_Parms.Target = Target;

	this->ProcessEvent ( pFnOnTimelineImpact, &OnTimelineImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_StdCoverMeleeLeft::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 67444 ];

	USFXCustomAction_StdCoverMeleeLeft_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.MeleeImpact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdCoverMeleeLeft::MeleeImpact ( )
{
	static UFunction* pFnMeleeImpact = NULL;

	if ( ! pFnMeleeImpact )
		pFnMeleeImpact = (UFunction*) UObject::GObjObjects()->Data[ 67439 ];

	USFXCustomAction_StdCoverMeleeLeft_execMeleeImpact_Parms MeleeImpact_Parms;

	this->ProcessEvent ( pFnMeleeImpact, &MeleeImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.GetMeleeImpactParameters
// [0x00420002] 
// Parameters infos:
// struct FAreaEffectParameters   ImpactParams                   ( CPF_Parm | CPF_OutParm )

void USFXCustomAction_StdCoverMeleeLeft::GetMeleeImpactParameters ( struct FAreaEffectParameters* ImpactParams )
{
	static UFunction* pFnGetMeleeImpactParameters = NULL;

	if ( ! pFnGetMeleeImpactParameters )
		pFnGetMeleeImpactParameters = (UFunction*) UObject::GObjObjects()->Data[ 67435 ];

	USFXCustomAction_StdCoverMeleeLeft_execGetMeleeImpactParameters_Parms GetMeleeImpactParameters_Parms;

	this->ProcessEvent ( pFnGetMeleeImpactParameters, &GetMeleeImpactParameters_Parms, NULL );

	if ( ImpactParams )
		memcpy ( ImpactParams, &GetMeleeImpactParameters_Parms.ImpactParams, 0x20 );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.NonSyncedAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdCoverMeleeLeft::NonSyncedAction ( )
{
	static UFunction* pFnNonSyncedAction = NULL;

	if ( ! pFnNonSyncedAction )
		pFnNonSyncedAction = (UFunction*) UObject::GObjObjects()->Data[ 67433 ];

	USFXCustomAction_StdCoverMeleeLeft_execNonSyncedAction_Parms NonSyncedAction_Parms;

	this->ProcessEvent ( pFnNonSyncedAction, &NonSyncedAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartInteraction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdCoverMeleeLeft::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = (UFunction*) UObject::GObjObjects()->Data[ 67431 ];

	USFXCustomAction_StdCoverMeleeLeft_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdCoverMeleeLeft::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67427 ];

	USFXCustomAction_StdCoverMeleeLeft_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.Breakout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_CoverMeleeLeft::Breakout ( )
{
	static UFunction* pFnBreakout = NULL;

	if ( ! pFnBreakout )
		pFnBreakout = (UFunction*) UObject::GObjObjects()->Data[ 67479 ];

	USFXCustomAction_CoverMeleeLeft_execBreakout_Parms Breakout_Parms;

	this->ProcessEvent ( pFnBreakout, &Breakout_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StopBlur
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_CoverMeleeLeft::StopBlur ( )
{
	static UFunction* pFnStopBlur = NULL;

	if ( ! pFnStopBlur )
		pFnStopBlur = (UFunction*) UObject::GObjObjects()->Data[ 67478 ];

	USFXCustomAction_CoverMeleeLeft_execStopBlur_Parms StopBlur_Parms;

	this->ProcessEvent ( pFnStopBlur, &StopBlur_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_CoverMeleeLeft::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 67460 ];

	USFXCustomAction_CoverMeleeLeft_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_CoverMeleeLeft::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 67454 ];

	USFXCustomAction_CoverMeleeLeft_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnTimelineImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void USFXCustomAction_CoverMeleeLeft::OnTimelineImpact ( class AActor* Target )
{
	static UFunction* pFnOnTimelineImpact = NULL;

	if ( ! pFnOnTimelineImpact )
		pFnOnTimelineImpact = (UFunction*) UObject::GObjObjects()->Data[ 67452 ];

	USFXCustomAction_CoverMeleeLeft_execOnTimelineImpact_Parms OnTimelineImpact_Parms;
	OnTimelineImpact_Parms.Target = Target;

	this->ProcessEvent ( pFnOnTimelineImpact, &OnTimelineImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_CoverMeleeLeft::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 67444 ];

	USFXCustomAction_CoverMeleeLeft_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.MeleeImpact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_CoverMeleeLeft::MeleeImpact ( )
{
	static UFunction* pFnMeleeImpact = NULL;

	if ( ! pFnMeleeImpact )
		pFnMeleeImpact = (UFunction*) UObject::GObjObjects()->Data[ 67439 ];

	USFXCustomAction_CoverMeleeLeft_execMeleeImpact_Parms MeleeImpact_Parms;

	this->ProcessEvent ( pFnMeleeImpact, &MeleeImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.GetMeleeImpactParameters
// [0x00420002] 
// Parameters infos:
// struct FAreaEffectParameters   ImpactParams                   ( CPF_Parm | CPF_OutParm )

void USFXCustomAction_CoverMeleeLeft::GetMeleeImpactParameters ( struct FAreaEffectParameters* ImpactParams )
{
	static UFunction* pFnGetMeleeImpactParameters = NULL;

	if ( ! pFnGetMeleeImpactParameters )
		pFnGetMeleeImpactParameters = (UFunction*) UObject::GObjObjects()->Data[ 67435 ];

	USFXCustomAction_CoverMeleeLeft_execGetMeleeImpactParameters_Parms GetMeleeImpactParameters_Parms;

	this->ProcessEvent ( pFnGetMeleeImpactParameters, &GetMeleeImpactParameters_Parms, NULL );

	if ( ImpactParams )
		memcpy ( ImpactParams, &GetMeleeImpactParameters_Parms.ImpactParams, 0x20 );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.NonSyncedAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_CoverMeleeLeft::NonSyncedAction ( )
{
	static UFunction* pFnNonSyncedAction = NULL;

	if ( ! pFnNonSyncedAction )
		pFnNonSyncedAction = (UFunction*) UObject::GObjObjects()->Data[ 67433 ];

	USFXCustomAction_CoverMeleeLeft_execNonSyncedAction_Parms NonSyncedAction_Parms;

	this->ProcessEvent ( pFnNonSyncedAction, &NonSyncedAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartInteraction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_CoverMeleeLeft::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = (UFunction*) UObject::GObjObjects()->Data[ 67431 ];

	USFXCustomAction_CoverMeleeLeft_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_CoverMeleeLeft::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67427 ];

	USFXCustomAction_CoverMeleeLeft_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.Breakout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_CoverMeleeRight::Breakout ( )
{
	static UFunction* pFnBreakout = NULL;

	if ( ! pFnBreakout )
		pFnBreakout = (UFunction*) UObject::GObjObjects()->Data[ 67479 ];

	USFXCustomAction_CoverMeleeRight_execBreakout_Parms Breakout_Parms;

	this->ProcessEvent ( pFnBreakout, &Breakout_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StopBlur
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_CoverMeleeRight::StopBlur ( )
{
	static UFunction* pFnStopBlur = NULL;

	if ( ! pFnStopBlur )
		pFnStopBlur = (UFunction*) UObject::GObjObjects()->Data[ 67478 ];

	USFXCustomAction_CoverMeleeRight_execStopBlur_Parms StopBlur_Parms;

	this->ProcessEvent ( pFnStopBlur, &StopBlur_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_CoverMeleeRight::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 67460 ];

	USFXCustomAction_CoverMeleeRight_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_CoverMeleeRight::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 67454 ];

	USFXCustomAction_CoverMeleeRight_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnTimelineImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void USFXCustomAction_CoverMeleeRight::OnTimelineImpact ( class AActor* Target )
{
	static UFunction* pFnOnTimelineImpact = NULL;

	if ( ! pFnOnTimelineImpact )
		pFnOnTimelineImpact = (UFunction*) UObject::GObjObjects()->Data[ 67452 ];

	USFXCustomAction_CoverMeleeRight_execOnTimelineImpact_Parms OnTimelineImpact_Parms;
	OnTimelineImpact_Parms.Target = Target;

	this->ProcessEvent ( pFnOnTimelineImpact, &OnTimelineImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_CoverMeleeRight::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 67444 ];

	USFXCustomAction_CoverMeleeRight_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.MeleeImpact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_CoverMeleeRight::MeleeImpact ( )
{
	static UFunction* pFnMeleeImpact = NULL;

	if ( ! pFnMeleeImpact )
		pFnMeleeImpact = (UFunction*) UObject::GObjObjects()->Data[ 67439 ];

	USFXCustomAction_CoverMeleeRight_execMeleeImpact_Parms MeleeImpact_Parms;

	this->ProcessEvent ( pFnMeleeImpact, &MeleeImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.GetMeleeImpactParameters
// [0x00420002] 
// Parameters infos:
// struct FAreaEffectParameters   ImpactParams                   ( CPF_Parm | CPF_OutParm )

void USFXCustomAction_CoverMeleeRight::GetMeleeImpactParameters ( struct FAreaEffectParameters* ImpactParams )
{
	static UFunction* pFnGetMeleeImpactParameters = NULL;

	if ( ! pFnGetMeleeImpactParameters )
		pFnGetMeleeImpactParameters = (UFunction*) UObject::GObjObjects()->Data[ 67435 ];

	USFXCustomAction_CoverMeleeRight_execGetMeleeImpactParameters_Parms GetMeleeImpactParameters_Parms;

	this->ProcessEvent ( pFnGetMeleeImpactParameters, &GetMeleeImpactParameters_Parms, NULL );

	if ( ImpactParams )
		memcpy ( ImpactParams, &GetMeleeImpactParameters_Parms.ImpactParams, 0x20 );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.NonSyncedAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_CoverMeleeRight::NonSyncedAction ( )
{
	static UFunction* pFnNonSyncedAction = NULL;

	if ( ! pFnNonSyncedAction )
		pFnNonSyncedAction = (UFunction*) UObject::GObjObjects()->Data[ 67433 ];

	USFXCustomAction_CoverMeleeRight_execNonSyncedAction_Parms NonSyncedAction_Parms;

	this->ProcessEvent ( pFnNonSyncedAction, &NonSyncedAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartInteraction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_CoverMeleeRight::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = (UFunction*) UObject::GObjObjects()->Data[ 67431 ];

	USFXCustomAction_CoverMeleeRight_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_CoverMeleeRight::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67427 ];

	USFXCustomAction_CoverMeleeRight_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.Breakout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdCoverMeleeRight::Breakout ( )
{
	static UFunction* pFnBreakout = NULL;

	if ( ! pFnBreakout )
		pFnBreakout = (UFunction*) UObject::GObjObjects()->Data[ 67479 ];

	USFXCustomAction_StdCoverMeleeRight_execBreakout_Parms Breakout_Parms;

	this->ProcessEvent ( pFnBreakout, &Breakout_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StopBlur
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdCoverMeleeRight::StopBlur ( )
{
	static UFunction* pFnStopBlur = NULL;

	if ( ! pFnStopBlur )
		pFnStopBlur = (UFunction*) UObject::GObjObjects()->Data[ 67478 ];

	USFXCustomAction_StdCoverMeleeRight_execStopBlur_Parms StopBlur_Parms;

	this->ProcessEvent ( pFnStopBlur, &StopBlur_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_StdCoverMeleeRight::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 67460 ];

	USFXCustomAction_StdCoverMeleeRight_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_StdCoverMeleeRight::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 67454 ];

	USFXCustomAction_StdCoverMeleeRight_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnTimelineImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void USFXCustomAction_StdCoverMeleeRight::OnTimelineImpact ( class AActor* Target )
{
	static UFunction* pFnOnTimelineImpact = NULL;

	if ( ! pFnOnTimelineImpact )
		pFnOnTimelineImpact = (UFunction*) UObject::GObjObjects()->Data[ 67452 ];

	USFXCustomAction_StdCoverMeleeRight_execOnTimelineImpact_Parms OnTimelineImpact_Parms;
	OnTimelineImpact_Parms.Target = Target;

	this->ProcessEvent ( pFnOnTimelineImpact, &OnTimelineImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_StdCoverMeleeRight::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 67444 ];

	USFXCustomAction_StdCoverMeleeRight_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.MeleeImpact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdCoverMeleeRight::MeleeImpact ( )
{
	static UFunction* pFnMeleeImpact = NULL;

	if ( ! pFnMeleeImpact )
		pFnMeleeImpact = (UFunction*) UObject::GObjObjects()->Data[ 67439 ];

	USFXCustomAction_StdCoverMeleeRight_execMeleeImpact_Parms MeleeImpact_Parms;

	this->ProcessEvent ( pFnMeleeImpact, &MeleeImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.GetMeleeImpactParameters
// [0x00420002] 
// Parameters infos:
// struct FAreaEffectParameters   ImpactParams                   ( CPF_Parm | CPF_OutParm )

void USFXCustomAction_StdCoverMeleeRight::GetMeleeImpactParameters ( struct FAreaEffectParameters* ImpactParams )
{
	static UFunction* pFnGetMeleeImpactParameters = NULL;

	if ( ! pFnGetMeleeImpactParameters )
		pFnGetMeleeImpactParameters = (UFunction*) UObject::GObjObjects()->Data[ 67435 ];

	USFXCustomAction_StdCoverMeleeRight_execGetMeleeImpactParameters_Parms GetMeleeImpactParameters_Parms;

	this->ProcessEvent ( pFnGetMeleeImpactParameters, &GetMeleeImpactParameters_Parms, NULL );

	if ( ImpactParams )
		memcpy ( ImpactParams, &GetMeleeImpactParameters_Parms.ImpactParams, 0x20 );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.NonSyncedAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdCoverMeleeRight::NonSyncedAction ( )
{
	static UFunction* pFnNonSyncedAction = NULL;

	if ( ! pFnNonSyncedAction )
		pFnNonSyncedAction = (UFunction*) UObject::GObjObjects()->Data[ 67433 ];

	USFXCustomAction_StdCoverMeleeRight_execNonSyncedAction_Parms NonSyncedAction_Parms;

	this->ProcessEvent ( pFnNonSyncedAction, &NonSyncedAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartInteraction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdCoverMeleeRight::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = (UFunction*) UObject::GObjObjects()->Data[ 67431 ];

	USFXCustomAction_StdCoverMeleeRight_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_StdCoverMeleeRight::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67427 ];

	USFXCustomAction_StdCoverMeleeRight_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.Breakout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyStdCoverMeleeLeft::Breakout ( )
{
	static UFunction* pFnBreakout = NULL;

	if ( ! pFnBreakout )
		pFnBreakout = (UFunction*) UObject::GObjObjects()->Data[ 67479 ];

	USFXCustomAction_HvyStdCoverMeleeLeft_execBreakout_Parms Breakout_Parms;

	this->ProcessEvent ( pFnBreakout, &Breakout_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StopBlur
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyStdCoverMeleeLeft::StopBlur ( )
{
	static UFunction* pFnStopBlur = NULL;

	if ( ! pFnStopBlur )
		pFnStopBlur = (UFunction*) UObject::GObjObjects()->Data[ 67478 ];

	USFXCustomAction_HvyStdCoverMeleeLeft_execStopBlur_Parms StopBlur_Parms;

	this->ProcessEvent ( pFnStopBlur, &StopBlur_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_HvyStdCoverMeleeLeft::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 67460 ];

	USFXCustomAction_HvyStdCoverMeleeLeft_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_HvyStdCoverMeleeLeft::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 67454 ];

	USFXCustomAction_HvyStdCoverMeleeLeft_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnTimelineImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void USFXCustomAction_HvyStdCoverMeleeLeft::OnTimelineImpact ( class AActor* Target )
{
	static UFunction* pFnOnTimelineImpact = NULL;

	if ( ! pFnOnTimelineImpact )
		pFnOnTimelineImpact = (UFunction*) UObject::GObjObjects()->Data[ 67452 ];

	USFXCustomAction_HvyStdCoverMeleeLeft_execOnTimelineImpact_Parms OnTimelineImpact_Parms;
	OnTimelineImpact_Parms.Target = Target;

	this->ProcessEvent ( pFnOnTimelineImpact, &OnTimelineImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_HvyStdCoverMeleeLeft::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 67444 ];

	USFXCustomAction_HvyStdCoverMeleeLeft_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.MeleeImpact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyStdCoverMeleeLeft::MeleeImpact ( )
{
	static UFunction* pFnMeleeImpact = NULL;

	if ( ! pFnMeleeImpact )
		pFnMeleeImpact = (UFunction*) UObject::GObjObjects()->Data[ 67439 ];

	USFXCustomAction_HvyStdCoverMeleeLeft_execMeleeImpact_Parms MeleeImpact_Parms;

	this->ProcessEvent ( pFnMeleeImpact, &MeleeImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.GetMeleeImpactParameters
// [0x00420002] 
// Parameters infos:
// struct FAreaEffectParameters   ImpactParams                   ( CPF_Parm | CPF_OutParm )

void USFXCustomAction_HvyStdCoverMeleeLeft::GetMeleeImpactParameters ( struct FAreaEffectParameters* ImpactParams )
{
	static UFunction* pFnGetMeleeImpactParameters = NULL;

	if ( ! pFnGetMeleeImpactParameters )
		pFnGetMeleeImpactParameters = (UFunction*) UObject::GObjObjects()->Data[ 67435 ];

	USFXCustomAction_HvyStdCoverMeleeLeft_execGetMeleeImpactParameters_Parms GetMeleeImpactParameters_Parms;

	this->ProcessEvent ( pFnGetMeleeImpactParameters, &GetMeleeImpactParameters_Parms, NULL );

	if ( ImpactParams )
		memcpy ( ImpactParams, &GetMeleeImpactParameters_Parms.ImpactParams, 0x20 );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.NonSyncedAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyStdCoverMeleeLeft::NonSyncedAction ( )
{
	static UFunction* pFnNonSyncedAction = NULL;

	if ( ! pFnNonSyncedAction )
		pFnNonSyncedAction = (UFunction*) UObject::GObjObjects()->Data[ 67433 ];

	USFXCustomAction_HvyStdCoverMeleeLeft_execNonSyncedAction_Parms NonSyncedAction_Parms;

	this->ProcessEvent ( pFnNonSyncedAction, &NonSyncedAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartInteraction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyStdCoverMeleeLeft::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = (UFunction*) UObject::GObjObjects()->Data[ 67431 ];

	USFXCustomAction_HvyStdCoverMeleeLeft_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyStdCoverMeleeLeft::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67427 ];

	USFXCustomAction_HvyStdCoverMeleeLeft_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.Breakout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyCoverMeleeLeft::Breakout ( )
{
	static UFunction* pFnBreakout = NULL;

	if ( ! pFnBreakout )
		pFnBreakout = (UFunction*) UObject::GObjObjects()->Data[ 67479 ];

	USFXCustomAction_HvyCoverMeleeLeft_execBreakout_Parms Breakout_Parms;

	this->ProcessEvent ( pFnBreakout, &Breakout_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StopBlur
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyCoverMeleeLeft::StopBlur ( )
{
	static UFunction* pFnStopBlur = NULL;

	if ( ! pFnStopBlur )
		pFnStopBlur = (UFunction*) UObject::GObjObjects()->Data[ 67478 ];

	USFXCustomAction_HvyCoverMeleeLeft_execStopBlur_Parms StopBlur_Parms;

	this->ProcessEvent ( pFnStopBlur, &StopBlur_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_HvyCoverMeleeLeft::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 67460 ];

	USFXCustomAction_HvyCoverMeleeLeft_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_HvyCoverMeleeLeft::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 67454 ];

	USFXCustomAction_HvyCoverMeleeLeft_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnTimelineImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void USFXCustomAction_HvyCoverMeleeLeft::OnTimelineImpact ( class AActor* Target )
{
	static UFunction* pFnOnTimelineImpact = NULL;

	if ( ! pFnOnTimelineImpact )
		pFnOnTimelineImpact = (UFunction*) UObject::GObjObjects()->Data[ 67452 ];

	USFXCustomAction_HvyCoverMeleeLeft_execOnTimelineImpact_Parms OnTimelineImpact_Parms;
	OnTimelineImpact_Parms.Target = Target;

	this->ProcessEvent ( pFnOnTimelineImpact, &OnTimelineImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_HvyCoverMeleeLeft::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 67444 ];

	USFXCustomAction_HvyCoverMeleeLeft_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.MeleeImpact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyCoverMeleeLeft::MeleeImpact ( )
{
	static UFunction* pFnMeleeImpact = NULL;

	if ( ! pFnMeleeImpact )
		pFnMeleeImpact = (UFunction*) UObject::GObjObjects()->Data[ 67439 ];

	USFXCustomAction_HvyCoverMeleeLeft_execMeleeImpact_Parms MeleeImpact_Parms;

	this->ProcessEvent ( pFnMeleeImpact, &MeleeImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.GetMeleeImpactParameters
// [0x00420002] 
// Parameters infos:
// struct FAreaEffectParameters   ImpactParams                   ( CPF_Parm | CPF_OutParm )

void USFXCustomAction_HvyCoverMeleeLeft::GetMeleeImpactParameters ( struct FAreaEffectParameters* ImpactParams )
{
	static UFunction* pFnGetMeleeImpactParameters = NULL;

	if ( ! pFnGetMeleeImpactParameters )
		pFnGetMeleeImpactParameters = (UFunction*) UObject::GObjObjects()->Data[ 67435 ];

	USFXCustomAction_HvyCoverMeleeLeft_execGetMeleeImpactParameters_Parms GetMeleeImpactParameters_Parms;

	this->ProcessEvent ( pFnGetMeleeImpactParameters, &GetMeleeImpactParameters_Parms, NULL );

	if ( ImpactParams )
		memcpy ( ImpactParams, &GetMeleeImpactParameters_Parms.ImpactParams, 0x20 );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.NonSyncedAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyCoverMeleeLeft::NonSyncedAction ( )
{
	static UFunction* pFnNonSyncedAction = NULL;

	if ( ! pFnNonSyncedAction )
		pFnNonSyncedAction = (UFunction*) UObject::GObjObjects()->Data[ 67433 ];

	USFXCustomAction_HvyCoverMeleeLeft_execNonSyncedAction_Parms NonSyncedAction_Parms;

	this->ProcessEvent ( pFnNonSyncedAction, &NonSyncedAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartInteraction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyCoverMeleeLeft::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = (UFunction*) UObject::GObjObjects()->Data[ 67431 ];

	USFXCustomAction_HvyCoverMeleeLeft_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyCoverMeleeLeft::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67427 ];

	USFXCustomAction_HvyCoverMeleeLeft_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.Breakout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyCoverMeleeRight::Breakout ( )
{
	static UFunction* pFnBreakout = NULL;

	if ( ! pFnBreakout )
		pFnBreakout = (UFunction*) UObject::GObjObjects()->Data[ 67479 ];

	USFXCustomAction_HvyCoverMeleeRight_execBreakout_Parms Breakout_Parms;

	this->ProcessEvent ( pFnBreakout, &Breakout_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StopBlur
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyCoverMeleeRight::StopBlur ( )
{
	static UFunction* pFnStopBlur = NULL;

	if ( ! pFnStopBlur )
		pFnStopBlur = (UFunction*) UObject::GObjObjects()->Data[ 67478 ];

	USFXCustomAction_HvyCoverMeleeRight_execStopBlur_Parms StopBlur_Parms;

	this->ProcessEvent ( pFnStopBlur, &StopBlur_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_HvyCoverMeleeRight::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 67460 ];

	USFXCustomAction_HvyCoverMeleeRight_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_HvyCoverMeleeRight::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 67454 ];

	USFXCustomAction_HvyCoverMeleeRight_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnTimelineImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void USFXCustomAction_HvyCoverMeleeRight::OnTimelineImpact ( class AActor* Target )
{
	static UFunction* pFnOnTimelineImpact = NULL;

	if ( ! pFnOnTimelineImpact )
		pFnOnTimelineImpact = (UFunction*) UObject::GObjObjects()->Data[ 67452 ];

	USFXCustomAction_HvyCoverMeleeRight_execOnTimelineImpact_Parms OnTimelineImpact_Parms;
	OnTimelineImpact_Parms.Target = Target;

	this->ProcessEvent ( pFnOnTimelineImpact, &OnTimelineImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_HvyCoverMeleeRight::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 67444 ];

	USFXCustomAction_HvyCoverMeleeRight_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.MeleeImpact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyCoverMeleeRight::MeleeImpact ( )
{
	static UFunction* pFnMeleeImpact = NULL;

	if ( ! pFnMeleeImpact )
		pFnMeleeImpact = (UFunction*) UObject::GObjObjects()->Data[ 67439 ];

	USFXCustomAction_HvyCoverMeleeRight_execMeleeImpact_Parms MeleeImpact_Parms;

	this->ProcessEvent ( pFnMeleeImpact, &MeleeImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.GetMeleeImpactParameters
// [0x00420002] 
// Parameters infos:
// struct FAreaEffectParameters   ImpactParams                   ( CPF_Parm | CPF_OutParm )

void USFXCustomAction_HvyCoverMeleeRight::GetMeleeImpactParameters ( struct FAreaEffectParameters* ImpactParams )
{
	static UFunction* pFnGetMeleeImpactParameters = NULL;

	if ( ! pFnGetMeleeImpactParameters )
		pFnGetMeleeImpactParameters = (UFunction*) UObject::GObjObjects()->Data[ 67435 ];

	USFXCustomAction_HvyCoverMeleeRight_execGetMeleeImpactParameters_Parms GetMeleeImpactParameters_Parms;

	this->ProcessEvent ( pFnGetMeleeImpactParameters, &GetMeleeImpactParameters_Parms, NULL );

	if ( ImpactParams )
		memcpy ( ImpactParams, &GetMeleeImpactParameters_Parms.ImpactParams, 0x20 );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.NonSyncedAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyCoverMeleeRight::NonSyncedAction ( )
{
	static UFunction* pFnNonSyncedAction = NULL;

	if ( ! pFnNonSyncedAction )
		pFnNonSyncedAction = (UFunction*) UObject::GObjObjects()->Data[ 67433 ];

	USFXCustomAction_HvyCoverMeleeRight_execNonSyncedAction_Parms NonSyncedAction_Parms;

	this->ProcessEvent ( pFnNonSyncedAction, &NonSyncedAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartInteraction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyCoverMeleeRight::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = (UFunction*) UObject::GObjObjects()->Data[ 67431 ];

	USFXCustomAction_HvyCoverMeleeRight_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyCoverMeleeRight::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67427 ];

	USFXCustomAction_HvyCoverMeleeRight_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.Breakout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyStdCoverMeleeRight::Breakout ( )
{
	static UFunction* pFnBreakout = NULL;

	if ( ! pFnBreakout )
		pFnBreakout = (UFunction*) UObject::GObjObjects()->Data[ 67479 ];

	USFXCustomAction_HvyStdCoverMeleeRight_execBreakout_Parms Breakout_Parms;

	this->ProcessEvent ( pFnBreakout, &Breakout_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StopBlur
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyStdCoverMeleeRight::StopBlur ( )
{
	static UFunction* pFnStopBlur = NULL;

	if ( ! pFnStopBlur )
		pFnStopBlur = (UFunction*) UObject::GObjObjects()->Data[ 67478 ];

	USFXCustomAction_HvyStdCoverMeleeRight_execStopBlur_Parms StopBlur_Parms;

	this->ProcessEvent ( pFnStopBlur, &StopBlur_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_HvyStdCoverMeleeRight::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 67460 ];

	USFXCustomAction_HvyStdCoverMeleeRight_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_HvyStdCoverMeleeRight::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 67454 ];

	USFXCustomAction_HvyStdCoverMeleeRight_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnTimelineImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void USFXCustomAction_HvyStdCoverMeleeRight::OnTimelineImpact ( class AActor* Target )
{
	static UFunction* pFnOnTimelineImpact = NULL;

	if ( ! pFnOnTimelineImpact )
		pFnOnTimelineImpact = (UFunction*) UObject::GObjObjects()->Data[ 67452 ];

	USFXCustomAction_HvyStdCoverMeleeRight_execOnTimelineImpact_Parms OnTimelineImpact_Parms;
	OnTimelineImpact_Parms.Target = Target;

	this->ProcessEvent ( pFnOnTimelineImpact, &OnTimelineImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_HvyStdCoverMeleeRight::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 67444 ];

	USFXCustomAction_HvyStdCoverMeleeRight_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.MeleeImpact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyStdCoverMeleeRight::MeleeImpact ( )
{
	static UFunction* pFnMeleeImpact = NULL;

	if ( ! pFnMeleeImpact )
		pFnMeleeImpact = (UFunction*) UObject::GObjObjects()->Data[ 67439 ];

	USFXCustomAction_HvyStdCoverMeleeRight_execMeleeImpact_Parms MeleeImpact_Parms;

	this->ProcessEvent ( pFnMeleeImpact, &MeleeImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.GetMeleeImpactParameters
// [0x00420002] 
// Parameters infos:
// struct FAreaEffectParameters   ImpactParams                   ( CPF_Parm | CPF_OutParm )

void USFXCustomAction_HvyStdCoverMeleeRight::GetMeleeImpactParameters ( struct FAreaEffectParameters* ImpactParams )
{
	static UFunction* pFnGetMeleeImpactParameters = NULL;

	if ( ! pFnGetMeleeImpactParameters )
		pFnGetMeleeImpactParameters = (UFunction*) UObject::GObjObjects()->Data[ 67435 ];

	USFXCustomAction_HvyStdCoverMeleeRight_execGetMeleeImpactParameters_Parms GetMeleeImpactParameters_Parms;

	this->ProcessEvent ( pFnGetMeleeImpactParameters, &GetMeleeImpactParameters_Parms, NULL );

	if ( ImpactParams )
		memcpy ( ImpactParams, &GetMeleeImpactParameters_Parms.ImpactParams, 0x20 );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.NonSyncedAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyStdCoverMeleeRight::NonSyncedAction ( )
{
	static UFunction* pFnNonSyncedAction = NULL;

	if ( ! pFnNonSyncedAction )
		pFnNonSyncedAction = (UFunction*) UObject::GObjObjects()->Data[ 67433 ];

	USFXCustomAction_HvyStdCoverMeleeRight_execNonSyncedAction_Parms NonSyncedAction_Parms;

	this->ProcessEvent ( pFnNonSyncedAction, &NonSyncedAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartInteraction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyStdCoverMeleeRight::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = (UFunction*) UObject::GObjObjects()->Data[ 67431 ];

	USFXCustomAction_HvyStdCoverMeleeRight_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HvyStdCoverMeleeRight::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67427 ];

	USFXCustomAction_HvyStdCoverMeleeRight_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.StopMove
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeOne::StopMove ( )
{
	static UFunction* pFnStopMove = NULL;

	if ( ! pFnStopMove )
		pFnStopMove = (UFunction*) UObject::GObjObjects()->Data[ 128235 ];

	USFXCustomAction_RifleMeleeOne_execStopMove_Parms StopMove_Parms;

	this->ProcessEvent ( pFnStopMove, &StopMove_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_RifleMeleeOne::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 128222 ];

	USFXCustomAction_RifleMeleeOne_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.ReplicateImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_RifleMeleeOne::ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnReplicateImpact = NULL;

	if ( ! pFnReplicateImpact )
		pFnReplicateImpact = (UFunction*) UObject::GObjObjects()->Data[ 128215 ];

	USFXCustomAction_RifleMeleeOne_execReplicateImpact_Parms ReplicateImpact_Parms;
	ReplicateImpact_Parms.Target = Target;
	ReplicateImpact_Parms.ImpactCount = ImpactCount;
	ReplicateImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ReplicateImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicateImpact_Parms.HitNormal, &HitNormal, 0xC );
	ReplicateImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnReplicateImpact, &ReplicateImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeOne::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128214 ];

	USFXCustomAction_RifleMeleeOne_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.EndAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeOne::EndAction ( )
{
	static UFunction* pFnEndAction = NULL;

	if ( ! pFnEndAction )
		pFnEndAction = (UFunction*) UObject::GObjObjects()->Data[ 128213 ];

	USFXCustomAction_RifleMeleeOne_execEndAction_Parms EndAction_Parms;

	this->ProcessEvent ( pFnEndAction, &EndAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.HeavyMelee
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeOne::HeavyMelee ( )
{
	static UFunction* pFnHeavyMelee = NULL;

	if ( ! pFnHeavyMelee )
		pFnHeavyMelee = (UFunction*) UObject::GObjObjects()->Data[ 128211 ];

	USFXCustomAction_RifleMeleeOne_execHeavyMelee_Parms HeavyMelee_Parms;

	this->ProcessEvent ( pFnHeavyMelee, &HeavyMelee_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.NoHeavyMelee
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeOne::NoHeavyMelee ( )
{
	static UFunction* pFnNoHeavyMelee = NULL;

	if ( ! pFnNoHeavyMelee )
		pFnNoHeavyMelee = (UFunction*) UObject::GObjObjects()->Data[ 128210 ];

	USFXCustomAction_RifleMeleeOne_execNoHeavyMelee_Parms NoHeavyMelee_Parms;

	this->ProcessEvent ( pFnNoHeavyMelee, &NoHeavyMelee_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.DoRifleMeleeTwo
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeOne::DoRifleMeleeTwo ( )
{
	static UFunction* pFnDoRifleMeleeTwo = NULL;

	if ( ! pFnDoRifleMeleeTwo )
		pFnDoRifleMeleeTwo = (UFunction*) UObject::GObjObjects()->Data[ 128208 ];

	USFXCustomAction_RifleMeleeOne_execDoRifleMeleeTwo_Parms DoRifleMeleeTwo_Parms;

	this->ProcessEvent ( pFnDoRifleMeleeTwo, &DoRifleMeleeTwo_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.RifleMeleeSecondary
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeOne::RifleMeleeSecondary ( )
{
	static UFunction* pFnRifleMeleeSecondary = NULL;

	if ( ! pFnRifleMeleeSecondary )
		pFnRifleMeleeSecondary = (UFunction*) UObject::GObjObjects()->Data[ 128207 ];

	USFXCustomAction_RifleMeleeOne_execRifleMeleeSecondary_Parms RifleMeleeSecondary_Parms;

	this->ProcessEvent ( pFnRifleMeleeSecondary, &RifleMeleeSecondary_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeOne::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128206 ];

	USFXCustomAction_RifleMeleeOne_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.StopMove
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeTwo::StopMove ( )
{
	static UFunction* pFnStopMove = NULL;

	if ( ! pFnStopMove )
		pFnStopMove = (UFunction*) UObject::GObjObjects()->Data[ 128235 ];

	USFXCustomAction_RifleMeleeTwo_execStopMove_Parms StopMove_Parms;

	this->ProcessEvent ( pFnStopMove, &StopMove_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_RifleMeleeTwo::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 128222 ];

	USFXCustomAction_RifleMeleeTwo_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.ReplicateImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_RifleMeleeTwo::ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnReplicateImpact = NULL;

	if ( ! pFnReplicateImpact )
		pFnReplicateImpact = (UFunction*) UObject::GObjObjects()->Data[ 128215 ];

	USFXCustomAction_RifleMeleeTwo_execReplicateImpact_Parms ReplicateImpact_Parms;
	ReplicateImpact_Parms.Target = Target;
	ReplicateImpact_Parms.ImpactCount = ImpactCount;
	ReplicateImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ReplicateImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicateImpact_Parms.HitNormal, &HitNormal, 0xC );
	ReplicateImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnReplicateImpact, &ReplicateImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeTwo::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128214 ];

	USFXCustomAction_RifleMeleeTwo_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.EndAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeTwo::EndAction ( )
{
	static UFunction* pFnEndAction = NULL;

	if ( ! pFnEndAction )
		pFnEndAction = (UFunction*) UObject::GObjObjects()->Data[ 128213 ];

	USFXCustomAction_RifleMeleeTwo_execEndAction_Parms EndAction_Parms;

	this->ProcessEvent ( pFnEndAction, &EndAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.HeavyMelee
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeTwo::HeavyMelee ( )
{
	static UFunction* pFnHeavyMelee = NULL;

	if ( ! pFnHeavyMelee )
		pFnHeavyMelee = (UFunction*) UObject::GObjObjects()->Data[ 128211 ];

	USFXCustomAction_RifleMeleeTwo_execHeavyMelee_Parms HeavyMelee_Parms;

	this->ProcessEvent ( pFnHeavyMelee, &HeavyMelee_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.NoHeavyMelee
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeTwo::NoHeavyMelee ( )
{
	static UFunction* pFnNoHeavyMelee = NULL;

	if ( ! pFnNoHeavyMelee )
		pFnNoHeavyMelee = (UFunction*) UObject::GObjObjects()->Data[ 128210 ];

	USFXCustomAction_RifleMeleeTwo_execNoHeavyMelee_Parms NoHeavyMelee_Parms;

	this->ProcessEvent ( pFnNoHeavyMelee, &NoHeavyMelee_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.DoRifleMeleeTwo
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeTwo::DoRifleMeleeTwo ( )
{
	static UFunction* pFnDoRifleMeleeTwo = NULL;

	if ( ! pFnDoRifleMeleeTwo )
		pFnDoRifleMeleeTwo = (UFunction*) UObject::GObjObjects()->Data[ 128208 ];

	USFXCustomAction_RifleMeleeTwo_execDoRifleMeleeTwo_Parms DoRifleMeleeTwo_Parms;

	this->ProcessEvent ( pFnDoRifleMeleeTwo, &DoRifleMeleeTwo_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.RifleMeleeSecondary
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeTwo::RifleMeleeSecondary ( )
{
	static UFunction* pFnRifleMeleeSecondary = NULL;

	if ( ! pFnRifleMeleeSecondary )
		pFnRifleMeleeSecondary = (UFunction*) UObject::GObjObjects()->Data[ 128207 ];

	USFXCustomAction_RifleMeleeTwo_execRifleMeleeSecondary_Parms RifleMeleeSecondary_Parms;

	this->ProcessEvent ( pFnRifleMeleeSecondary, &RifleMeleeSecondary_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeTwo::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128206 ];

	USFXCustomAction_RifleMeleeTwo_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.StopMove
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeThree::StopMove ( )
{
	static UFunction* pFnStopMove = NULL;

	if ( ! pFnStopMove )
		pFnStopMove = (UFunction*) UObject::GObjObjects()->Data[ 128235 ];

	USFXCustomAction_RifleMeleeThree_execStopMove_Parms StopMove_Parms;

	this->ProcessEvent ( pFnStopMove, &StopMove_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_RifleMeleeThree::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 128222 ];

	USFXCustomAction_RifleMeleeThree_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.ReplicateImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_RifleMeleeThree::ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnReplicateImpact = NULL;

	if ( ! pFnReplicateImpact )
		pFnReplicateImpact = (UFunction*) UObject::GObjObjects()->Data[ 128215 ];

	USFXCustomAction_RifleMeleeThree_execReplicateImpact_Parms ReplicateImpact_Parms;
	ReplicateImpact_Parms.Target = Target;
	ReplicateImpact_Parms.ImpactCount = ImpactCount;
	ReplicateImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ReplicateImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicateImpact_Parms.HitNormal, &HitNormal, 0xC );
	ReplicateImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnReplicateImpact, &ReplicateImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeThree::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128214 ];

	USFXCustomAction_RifleMeleeThree_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.EndAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeThree::EndAction ( )
{
	static UFunction* pFnEndAction = NULL;

	if ( ! pFnEndAction )
		pFnEndAction = (UFunction*) UObject::GObjObjects()->Data[ 128213 ];

	USFXCustomAction_RifleMeleeThree_execEndAction_Parms EndAction_Parms;

	this->ProcessEvent ( pFnEndAction, &EndAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.HeavyMelee
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeThree::HeavyMelee ( )
{
	static UFunction* pFnHeavyMelee = NULL;

	if ( ! pFnHeavyMelee )
		pFnHeavyMelee = (UFunction*) UObject::GObjObjects()->Data[ 128211 ];

	USFXCustomAction_RifleMeleeThree_execHeavyMelee_Parms HeavyMelee_Parms;

	this->ProcessEvent ( pFnHeavyMelee, &HeavyMelee_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.NoHeavyMelee
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeThree::NoHeavyMelee ( )
{
	static UFunction* pFnNoHeavyMelee = NULL;

	if ( ! pFnNoHeavyMelee )
		pFnNoHeavyMelee = (UFunction*) UObject::GObjObjects()->Data[ 128210 ];

	USFXCustomAction_RifleMeleeThree_execNoHeavyMelee_Parms NoHeavyMelee_Parms;

	this->ProcessEvent ( pFnNoHeavyMelee, &NoHeavyMelee_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.DoRifleMeleeTwo
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeThree::DoRifleMeleeTwo ( )
{
	static UFunction* pFnDoRifleMeleeTwo = NULL;

	if ( ! pFnDoRifleMeleeTwo )
		pFnDoRifleMeleeTwo = (UFunction*) UObject::GObjObjects()->Data[ 128208 ];

	USFXCustomAction_RifleMeleeThree_execDoRifleMeleeTwo_Parms DoRifleMeleeTwo_Parms;

	this->ProcessEvent ( pFnDoRifleMeleeTwo, &DoRifleMeleeTwo_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.RifleMeleeSecondary
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeThree::RifleMeleeSecondary ( )
{
	static UFunction* pFnRifleMeleeSecondary = NULL;

	if ( ! pFnRifleMeleeSecondary )
		pFnRifleMeleeSecondary = (UFunction*) UObject::GObjObjects()->Data[ 128207 ];

	USFXCustomAction_RifleMeleeThree_execRifleMeleeSecondary_Parms RifleMeleeSecondary_Parms;

	this->ProcessEvent ( pFnRifleMeleeSecondary, &RifleMeleeSecondary_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_RifleMeleeOne.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_RifleMeleeThree::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128206 ];

	USFXCustomAction_RifleMeleeThree_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.Breakout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeOne::Breakout ( )
{
	static UFunction* pFnBreakout = NULL;

	if ( ! pFnBreakout )
		pFnBreakout = (UFunction*) UObject::GObjObjects()->Data[ 67479 ];

	USFXCustomAction_PistolMeleeOne_execBreakout_Parms Breakout_Parms;

	this->ProcessEvent ( pFnBreakout, &Breakout_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StopBlur
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeOne::StopBlur ( )
{
	static UFunction* pFnStopBlur = NULL;

	if ( ! pFnStopBlur )
		pFnStopBlur = (UFunction*) UObject::GObjObjects()->Data[ 67478 ];

	USFXCustomAction_PistolMeleeOne_execStopBlur_Parms StopBlur_Parms;

	this->ProcessEvent ( pFnStopBlur, &StopBlur_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_PistolMeleeOne::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 67460 ];

	USFXCustomAction_PistolMeleeOne_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_PistolMeleeOne::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 67454 ];

	USFXCustomAction_PistolMeleeOne_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnTimelineImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void USFXCustomAction_PistolMeleeOne::OnTimelineImpact ( class AActor* Target )
{
	static UFunction* pFnOnTimelineImpact = NULL;

	if ( ! pFnOnTimelineImpact )
		pFnOnTimelineImpact = (UFunction*) UObject::GObjObjects()->Data[ 67452 ];

	USFXCustomAction_PistolMeleeOne_execOnTimelineImpact_Parms OnTimelineImpact_Parms;
	OnTimelineImpact_Parms.Target = Target;

	this->ProcessEvent ( pFnOnTimelineImpact, &OnTimelineImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_PistolMeleeOne::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 67444 ];

	USFXCustomAction_PistolMeleeOne_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.MeleeImpact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeOne::MeleeImpact ( )
{
	static UFunction* pFnMeleeImpact = NULL;

	if ( ! pFnMeleeImpact )
		pFnMeleeImpact = (UFunction*) UObject::GObjObjects()->Data[ 67439 ];

	USFXCustomAction_PistolMeleeOne_execMeleeImpact_Parms MeleeImpact_Parms;

	this->ProcessEvent ( pFnMeleeImpact, &MeleeImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.GetMeleeImpactParameters
// [0x00420002] 
// Parameters infos:
// struct FAreaEffectParameters   ImpactParams                   ( CPF_Parm | CPF_OutParm )

void USFXCustomAction_PistolMeleeOne::GetMeleeImpactParameters ( struct FAreaEffectParameters* ImpactParams )
{
	static UFunction* pFnGetMeleeImpactParameters = NULL;

	if ( ! pFnGetMeleeImpactParameters )
		pFnGetMeleeImpactParameters = (UFunction*) UObject::GObjObjects()->Data[ 67435 ];

	USFXCustomAction_PistolMeleeOne_execGetMeleeImpactParameters_Parms GetMeleeImpactParameters_Parms;

	this->ProcessEvent ( pFnGetMeleeImpactParameters, &GetMeleeImpactParameters_Parms, NULL );

	if ( ImpactParams )
		memcpy ( ImpactParams, &GetMeleeImpactParameters_Parms.ImpactParams, 0x20 );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.NonSyncedAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeOne::NonSyncedAction ( )
{
	static UFunction* pFnNonSyncedAction = NULL;

	if ( ! pFnNonSyncedAction )
		pFnNonSyncedAction = (UFunction*) UObject::GObjObjects()->Data[ 67433 ];

	USFXCustomAction_PistolMeleeOne_execNonSyncedAction_Parms NonSyncedAction_Parms;

	this->ProcessEvent ( pFnNonSyncedAction, &NonSyncedAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartInteraction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeOne::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = (UFunction*) UObject::GObjObjects()->Data[ 67431 ];

	USFXCustomAction_PistolMeleeOne_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeOne::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67427 ];

	USFXCustomAction_PistolMeleeOne_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.Breakout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeTwo::Breakout ( )
{
	static UFunction* pFnBreakout = NULL;

	if ( ! pFnBreakout )
		pFnBreakout = (UFunction*) UObject::GObjObjects()->Data[ 67479 ];

	USFXCustomAction_PistolMeleeTwo_execBreakout_Parms Breakout_Parms;

	this->ProcessEvent ( pFnBreakout, &Breakout_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StopBlur
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeTwo::StopBlur ( )
{
	static UFunction* pFnStopBlur = NULL;

	if ( ! pFnStopBlur )
		pFnStopBlur = (UFunction*) UObject::GObjObjects()->Data[ 67478 ];

	USFXCustomAction_PistolMeleeTwo_execStopBlur_Parms StopBlur_Parms;

	this->ProcessEvent ( pFnStopBlur, &StopBlur_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_PistolMeleeTwo::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 67460 ];

	USFXCustomAction_PistolMeleeTwo_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_PistolMeleeTwo::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 67454 ];

	USFXCustomAction_PistolMeleeTwo_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnTimelineImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void USFXCustomAction_PistolMeleeTwo::OnTimelineImpact ( class AActor* Target )
{
	static UFunction* pFnOnTimelineImpact = NULL;

	if ( ! pFnOnTimelineImpact )
		pFnOnTimelineImpact = (UFunction*) UObject::GObjObjects()->Data[ 67452 ];

	USFXCustomAction_PistolMeleeTwo_execOnTimelineImpact_Parms OnTimelineImpact_Parms;
	OnTimelineImpact_Parms.Target = Target;

	this->ProcessEvent ( pFnOnTimelineImpact, &OnTimelineImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_PistolMeleeTwo::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 67444 ];

	USFXCustomAction_PistolMeleeTwo_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.MeleeImpact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeTwo::MeleeImpact ( )
{
	static UFunction* pFnMeleeImpact = NULL;

	if ( ! pFnMeleeImpact )
		pFnMeleeImpact = (UFunction*) UObject::GObjObjects()->Data[ 67439 ];

	USFXCustomAction_PistolMeleeTwo_execMeleeImpact_Parms MeleeImpact_Parms;

	this->ProcessEvent ( pFnMeleeImpact, &MeleeImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.GetMeleeImpactParameters
// [0x00420002] 
// Parameters infos:
// struct FAreaEffectParameters   ImpactParams                   ( CPF_Parm | CPF_OutParm )

void USFXCustomAction_PistolMeleeTwo::GetMeleeImpactParameters ( struct FAreaEffectParameters* ImpactParams )
{
	static UFunction* pFnGetMeleeImpactParameters = NULL;

	if ( ! pFnGetMeleeImpactParameters )
		pFnGetMeleeImpactParameters = (UFunction*) UObject::GObjObjects()->Data[ 67435 ];

	USFXCustomAction_PistolMeleeTwo_execGetMeleeImpactParameters_Parms GetMeleeImpactParameters_Parms;

	this->ProcessEvent ( pFnGetMeleeImpactParameters, &GetMeleeImpactParameters_Parms, NULL );

	if ( ImpactParams )
		memcpy ( ImpactParams, &GetMeleeImpactParameters_Parms.ImpactParams, 0x20 );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.NonSyncedAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeTwo::NonSyncedAction ( )
{
	static UFunction* pFnNonSyncedAction = NULL;

	if ( ! pFnNonSyncedAction )
		pFnNonSyncedAction = (UFunction*) UObject::GObjObjects()->Data[ 67433 ];

	USFXCustomAction_PistolMeleeTwo_execNonSyncedAction_Parms NonSyncedAction_Parms;

	this->ProcessEvent ( pFnNonSyncedAction, &NonSyncedAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartInteraction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeTwo::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = (UFunction*) UObject::GObjObjects()->Data[ 67431 ];

	USFXCustomAction_PistolMeleeTwo_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeTwo::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67427 ];

	USFXCustomAction_PistolMeleeTwo_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.Breakout
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeThree::Breakout ( )
{
	static UFunction* pFnBreakout = NULL;

	if ( ! pFnBreakout )
		pFnBreakout = (UFunction*) UObject::GObjObjects()->Data[ 67479 ];

	USFXCustomAction_PistolMeleeThree_execBreakout_Parms Breakout_Parms;

	this->ProcessEvent ( pFnBreakout, &Breakout_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StopBlur
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeThree::StopBlur ( )
{
	static UFunction* pFnStopBlur = NULL;

	if ( ! pFnStopBlur )
		pFnStopBlur = (UFunction*) UObject::GObjObjects()->Data[ 67478 ];

	USFXCustomAction_PistolMeleeThree_execStopBlur_Parms StopBlur_Parms;

	this->ProcessEvent ( pFnStopBlur, &StopBlur_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_PistolMeleeThree::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 67460 ];

	USFXCustomAction_PistolMeleeThree_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_PistolMeleeThree::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 67454 ];

	USFXCustomAction_PistolMeleeThree_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.OnTimelineImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void USFXCustomAction_PistolMeleeThree::OnTimelineImpact ( class AActor* Target )
{
	static UFunction* pFnOnTimelineImpact = NULL;

	if ( ! pFnOnTimelineImpact )
		pFnOnTimelineImpact = (UFunction*) UObject::GObjObjects()->Data[ 67452 ];

	USFXCustomAction_PistolMeleeThree_execOnTimelineImpact_Parms OnTimelineImpact_Parms;
	OnTimelineImpact_Parms.Target = Target;

	this->ProcessEvent ( pFnOnTimelineImpact, &OnTimelineImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_PistolMeleeThree::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 67444 ];

	USFXCustomAction_PistolMeleeThree_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.MeleeImpact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeThree::MeleeImpact ( )
{
	static UFunction* pFnMeleeImpact = NULL;

	if ( ! pFnMeleeImpact )
		pFnMeleeImpact = (UFunction*) UObject::GObjObjects()->Data[ 67439 ];

	USFXCustomAction_PistolMeleeThree_execMeleeImpact_Parms MeleeImpact_Parms;

	this->ProcessEvent ( pFnMeleeImpact, &MeleeImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.GetMeleeImpactParameters
// [0x00420002] 
// Parameters infos:
// struct FAreaEffectParameters   ImpactParams                   ( CPF_Parm | CPF_OutParm )

void USFXCustomAction_PistolMeleeThree::GetMeleeImpactParameters ( struct FAreaEffectParameters* ImpactParams )
{
	static UFunction* pFnGetMeleeImpactParameters = NULL;

	if ( ! pFnGetMeleeImpactParameters )
		pFnGetMeleeImpactParameters = (UFunction*) UObject::GObjObjects()->Data[ 67435 ];

	USFXCustomAction_PistolMeleeThree_execGetMeleeImpactParameters_Parms GetMeleeImpactParameters_Parms;

	this->ProcessEvent ( pFnGetMeleeImpactParameters, &GetMeleeImpactParameters_Parms, NULL );

	if ( ImpactParams )
		memcpy ( ImpactParams, &GetMeleeImpactParameters_Parms.ImpactParams, 0x20 );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.NonSyncedAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeThree::NonSyncedAction ( )
{
	static UFunction* pFnNonSyncedAction = NULL;

	if ( ! pFnNonSyncedAction )
		pFnNonSyncedAction = (UFunction*) UObject::GObjObjects()->Data[ 67433 ];

	USFXCustomAction_PistolMeleeThree_execNonSyncedAction_Parms NonSyncedAction_Parms;

	this->ProcessEvent ( pFnNonSyncedAction, &NonSyncedAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartInteraction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeThree::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = (UFunction*) UObject::GObjObjects()->Data[ 67431 ];

	USFXCustomAction_PistolMeleeThree_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerMeleeBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PistolMeleeThree::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67427 ];

	USFXCustomAction_PistolMeleeThree_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpact::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_PlayerStandardImpact_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpact::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_PlayerStandardImpact_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpact::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_PlayerStandardImpact_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpact::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_PlayerStandardImpact_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpact::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_PlayerStandardImpact_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpact::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_PlayerStandardImpact_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpact::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_PlayerStandardImpact_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpact::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_PlayerStandardImpact_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerStandardImpact::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_PlayerStandardImpact_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpactForward::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_PlayerStandardImpactForward_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpactForward::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_PlayerStandardImpactForward_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpactForward::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_PlayerStandardImpactForward_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpactForward::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_PlayerStandardImpactForward_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpactForward::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_PlayerStandardImpactForward_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpactForward::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_PlayerStandardImpactForward_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpactForward::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_PlayerStandardImpactForward_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpactForward::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_PlayerStandardImpactForward_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerStandardImpactForward::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_PlayerStandardImpactForward_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpactLeft::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_PlayerStandardImpactLeft_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpactLeft::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_PlayerStandardImpactLeft_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpactLeft::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_PlayerStandardImpactLeft_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpactLeft::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_PlayerStandardImpactLeft_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpactLeft::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_PlayerStandardImpactLeft_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpactLeft::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_PlayerStandardImpactLeft_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpactLeft::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_PlayerStandardImpactLeft_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpactLeft::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_PlayerStandardImpactLeft_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerStandardImpactLeft::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_PlayerStandardImpactLeft_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpactRight::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_PlayerStandardImpactRight_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpactRight::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_PlayerStandardImpactRight_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpactRight::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_PlayerStandardImpactRight_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpactRight::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_PlayerStandardImpactRight_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpactRight::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_PlayerStandardImpactRight_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpactRight::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_PlayerStandardImpactRight_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStandardImpactRight::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_PlayerStandardImpactRight_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerStandardImpactRight::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_PlayerStandardImpactRight_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerStandardImpactRight::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_PlayerStandardImpactRight_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerMeleed::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_PlayerMeleed_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_PlayerMeleed::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_PlayerMeleed_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerMeleed::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_PlayerMeleed_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerMeleed::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_PlayerMeleed_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerMeleed::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_PlayerMeleed_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerMeleed::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_PlayerMeleed_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerMeleed::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_PlayerMeleed_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerMeleed::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_PlayerMeleed_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerMeleed::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_PlayerMeleed_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_KnockbackImpactForward::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_KnockbackImpactForward_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_KnockbackImpactForward::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_KnockbackImpactForward_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpactForward::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_KnockbackImpactForward_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_KnockbackImpactForward::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_KnockbackImpactForward_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpactForward::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_KnockbackImpactForward_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpactForward::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_KnockbackImpactForward_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpactForward::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_KnockbackImpactForward_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_KnockbackImpactForward::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_KnockbackImpactForward_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_KnockbackImpactForward::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_KnockbackImpactForward_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_MeleedLeft::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_MeleedLeft_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_MeleedLeft::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_MeleedLeft_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MeleedLeft::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_MeleedLeft_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_MeleedLeft::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_MeleedLeft_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MeleedLeft::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_MeleedLeft_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MeleedLeft::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_MeleedLeft_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MeleedLeft::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_MeleedLeft_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_MeleedLeft::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_MeleedLeft_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_MeleedLeft::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_MeleedLeft_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_MeleedRight::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_MeleedRight_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_MeleedRight::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_MeleedRight_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MeleedRight::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_MeleedRight_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_MeleedRight::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_MeleedRight_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MeleedRight::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_MeleedRight_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MeleedRight::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_MeleedRight_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MeleedRight::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_MeleedRight_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_MeleedRight::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_MeleedRight_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_MeleedRight::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_MeleedRight_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_KnockbackImpact::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_KnockbackImpact_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_KnockbackImpact::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_KnockbackImpact_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpact::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_KnockbackImpact_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_KnockbackImpact::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_KnockbackImpact_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpact::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_KnockbackImpact_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpact::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_KnockbackImpact_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpact::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_KnockbackImpact_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_KnockbackImpact::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_KnockbackImpact_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_KnockbackImpact::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_KnockbackImpact_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_KnockbackImpactLeft::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_KnockbackImpactLeft_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_KnockbackImpactLeft::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_KnockbackImpactLeft_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpactLeft::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_KnockbackImpactLeft_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_KnockbackImpactLeft::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_KnockbackImpactLeft_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpactLeft::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_KnockbackImpactLeft_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpactLeft::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_KnockbackImpactLeft_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpactLeft::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_KnockbackImpactLeft_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_KnockbackImpactLeft::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_KnockbackImpactLeft_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_KnockbackImpactLeft::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_KnockbackImpactLeft_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_KnockbackImpactRight::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_KnockbackImpactRight_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_KnockbackImpactRight::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_KnockbackImpactRight_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpactRight::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_KnockbackImpactRight_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_KnockbackImpactRight::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_KnockbackImpactRight_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpactRight::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_KnockbackImpactRight_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpactRight::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_KnockbackImpactRight_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_KnockbackImpactRight::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_KnockbackImpactRight_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_KnockbackImpactRight::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_KnockbackImpactRight_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_KnockbackImpactRight::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_KnockbackImpactRight_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_MeleedForward::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_MeleedForward_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_MeleedForward::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_MeleedForward_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MeleedForward::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_MeleedForward_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_MeleedForward::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_MeleedForward_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MeleedForward::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_MeleedForward_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MeleedForward::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_MeleedForward_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MeleedForward::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_MeleedForward_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_MeleedForward::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_MeleedForward_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_MeleedForward::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_MeleedForward_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.PlayImpactSound
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchLight::PlayImpactSound ( )
{
	static UFunction* pFnPlayImpactSound = NULL;

	if ( ! pFnPlayImpactSound )
		pFnPlayImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 127716 ];

	USFXCustomAction_FlinchLight_execPlayImpactSound_Parms PlayImpactSound_Parms;

	this->ProcessEvent ( pFnPlayImpactSound, &PlayImpactSound_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.PlayWhizSound
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchLight::PlayWhizSound ( )
{
	static UFunction* pFnPlayWhizSound = NULL;

	if ( ! pFnPlayWhizSound )
		pFnPlayWhizSound = (UFunction*) UObject::GObjObjects()->Data[ 127713 ];

	USFXCustomAction_FlinchLight_execPlayWhizSound_Parms PlayWhizSound_Parms;

	this->ProcessEvent ( pFnPlayWhizSound, &PlayWhizSound_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.FlinchActionOverride
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchLight::FlinchActionOverride ( )
{
	static UFunction* pFnFlinchActionOverride = NULL;

	if ( ! pFnFlinchActionOverride )
		pFnFlinchActionOverride = (UFunction*) UObject::GObjObjects()->Data[ 127712 ];

	USFXCustomAction_FlinchLight_execFlinchActionOverride_Parms FlinchActionOverride_Parms;

	this->ProcessEvent ( pFnFlinchActionOverride, &FlinchActionOverride_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchLight::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127711 ];

	USFXCustomAction_FlinchLight_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchLight::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127709 ];

	USFXCustomAction_FlinchLight_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.GetBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_FlinchLight::GetBodyStanceAnim ( )
{
	static UFunction* pFnGetBodyStanceAnim = NULL;

	if ( ! pFnGetBodyStanceAnim )
		pFnGetBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 127704 ];

	USFXCustomAction_FlinchLight_execGetBodyStanceAnim_Parms GetBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetBodyStanceAnim, &GetBodyStanceAnim_Parms, NULL );

	return GetBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool USFXCustomAction_FlinchLight::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127700 ];

	USFXCustomAction_FlinchLight_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_FlinchLight::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 127687 ];

	USFXCustomAction_FlinchLight_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.PlayImpactSound
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchBase::PlayImpactSound ( )
{
	static UFunction* pFnPlayImpactSound = NULL;

	if ( ! pFnPlayImpactSound )
		pFnPlayImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 127716 ];

	USFXCustomAction_FlinchBase_execPlayImpactSound_Parms PlayImpactSound_Parms;

	this->ProcessEvent ( pFnPlayImpactSound, &PlayImpactSound_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.PlayWhizSound
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchBase::PlayWhizSound ( )
{
	static UFunction* pFnPlayWhizSound = NULL;

	if ( ! pFnPlayWhizSound )
		pFnPlayWhizSound = (UFunction*) UObject::GObjObjects()->Data[ 127713 ];

	USFXCustomAction_FlinchBase_execPlayWhizSound_Parms PlayWhizSound_Parms;

	this->ProcessEvent ( pFnPlayWhizSound, &PlayWhizSound_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.FlinchActionOverride
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchBase::FlinchActionOverride ( )
{
	static UFunction* pFnFlinchActionOverride = NULL;

	if ( ! pFnFlinchActionOverride )
		pFnFlinchActionOverride = (UFunction*) UObject::GObjObjects()->Data[ 127712 ];

	USFXCustomAction_FlinchBase_execFlinchActionOverride_Parms FlinchActionOverride_Parms;

	this->ProcessEvent ( pFnFlinchActionOverride, &FlinchActionOverride_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchBase::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127711 ];

	USFXCustomAction_FlinchBase_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchBase::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127709 ];

	USFXCustomAction_FlinchBase_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.GetBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_FlinchBase::GetBodyStanceAnim ( )
{
	static UFunction* pFnGetBodyStanceAnim = NULL;

	if ( ! pFnGetBodyStanceAnim )
		pFnGetBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 127704 ];

	USFXCustomAction_FlinchBase_execGetBodyStanceAnim_Parms GetBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetBodyStanceAnim, &GetBodyStanceAnim_Parms, NULL );

	return GetBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool USFXCustomAction_FlinchBase::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127700 ];

	USFXCustomAction_FlinchBase_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_FlinchBase::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 127687 ];

	USFXCustomAction_FlinchBase_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.PlayImpactSound
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchHeavy::PlayImpactSound ( )
{
	static UFunction* pFnPlayImpactSound = NULL;

	if ( ! pFnPlayImpactSound )
		pFnPlayImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 127716 ];

	USFXCustomAction_FlinchHeavy_execPlayImpactSound_Parms PlayImpactSound_Parms;

	this->ProcessEvent ( pFnPlayImpactSound, &PlayImpactSound_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.PlayWhizSound
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchHeavy::PlayWhizSound ( )
{
	static UFunction* pFnPlayWhizSound = NULL;

	if ( ! pFnPlayWhizSound )
		pFnPlayWhizSound = (UFunction*) UObject::GObjObjects()->Data[ 127713 ];

	USFXCustomAction_FlinchHeavy_execPlayWhizSound_Parms PlayWhizSound_Parms;

	this->ProcessEvent ( pFnPlayWhizSound, &PlayWhizSound_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.FlinchActionOverride
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchHeavy::FlinchActionOverride ( )
{
	static UFunction* pFnFlinchActionOverride = NULL;

	if ( ! pFnFlinchActionOverride )
		pFnFlinchActionOverride = (UFunction*) UObject::GObjObjects()->Data[ 127712 ];

	USFXCustomAction_FlinchHeavy_execFlinchActionOverride_Parms FlinchActionOverride_Parms;

	this->ProcessEvent ( pFnFlinchActionOverride, &FlinchActionOverride_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchHeavy::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127711 ];

	USFXCustomAction_FlinchHeavy_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_FlinchHeavy::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127709 ];

	USFXCustomAction_FlinchHeavy_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.GetBodyStanceAnim
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FBodyStance USFXCustomAction_FlinchHeavy::GetBodyStanceAnim ( )
{
	static UFunction* pFnGetBodyStanceAnim = NULL;

	if ( ! pFnGetBodyStanceAnim )
		pFnGetBodyStanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 127704 ];

	USFXCustomAction_FlinchHeavy_execGetBodyStanceAnim_Parms GetBodyStanceAnim_Parms;

	this->ProcessEvent ( pFnGetBodyStanceAnim, &GetBodyStanceAnim_Parms, NULL );

	return GetBodyStanceAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool USFXCustomAction_FlinchHeavy::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127700 ];

	USFXCustomAction_FlinchHeavy_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_FlinchBase.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_FlinchHeavy::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 127687 ];

	USFXCustomAction_FlinchHeavy_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerOnFire::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_PlayerOnFire_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_PlayerOnFire::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_PlayerOnFire_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerOnFire::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_PlayerOnFire_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerOnFire::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_PlayerOnFire_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerOnFire::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_PlayerOnFire_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerOnFire::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_PlayerOnFire_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerOnFire::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_PlayerOnFire_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerOnFire::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_PlayerOnFire_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerOnFire::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_PlayerOnFire_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_PlayerHeavyMeleeBase.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_AdeptPunch::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67420 ];

	USFXCustomAction_AdeptPunch_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerHeavyMeleeBase.OnActorImpacted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXCustomAction_AdeptPunch::OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnActorImpacted = NULL;

	if ( ! pFnOnActorImpacted )
		pFnOnActorImpacted = (UFunction*) UObject::GObjObjects()->Data[ 67412 ];

	USFXCustomAction_AdeptPunch_execOnActorImpacted_Parms OnActorImpacted_Parms;
	OnActorImpacted_Parms.Resistance = Resistance;
	OnActorImpacted_Parms.oImpacted = oImpacted;
	OnActorImpacted_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnActorImpacted_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnActorImpacted_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnActorImpacted, &OnActorImpacted_Parms, NULL );

	return OnActorImpacted_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_PlayerHeavyMeleeBase.OnTimelineImpact
// [0x00020000] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void USFXCustomAction_AdeptPunch::OnTimelineImpact ( class AActor* Target )
{
	static UFunction* pFnOnTimelineImpact = NULL;

	if ( ! pFnOnTimelineImpact )
		pFnOnTimelineImpact = (UFunction*) UObject::GObjObjects()->Data[ 67410 ];

	USFXCustomAction_AdeptPunch_execOnTimelineImpact_Parms OnTimelineImpact_Parms;
	OnTimelineImpact_Parms.Target = Target;

	this->ProcessEvent ( pFnOnTimelineImpact, &OnTimelineImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerHeavyMeleeBase.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_AdeptPunch::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 67402 ];

	USFXCustomAction_AdeptPunch_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerHeavyMeleeBase.ReplicateImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_AdeptPunch::ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnReplicateImpact = NULL;

	if ( ! pFnReplicateImpact )
		pFnReplicateImpact = (UFunction*) UObject::GObjObjects()->Data[ 67395 ];

	USFXCustomAction_AdeptPunch_execReplicateImpact_Parms ReplicateImpact_Parms;
	ReplicateImpact_Parms.Target = Target;
	ReplicateImpact_Parms.ImpactCount = ImpactCount;
	ReplicateImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ReplicateImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicateImpact_Parms.HitNormal, &HitNormal, 0xC );
	ReplicateImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnReplicateImpact, &ReplicateImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerHeavyMeleeBase.MeleeImpact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_AdeptPunch::MeleeImpact ( )
{
	static UFunction* pFnMeleeImpact = NULL;

	if ( ! pFnMeleeImpact )
		pFnMeleeImpact = (UFunction*) UObject::GObjObjects()->Data[ 67389 ];

	USFXCustomAction_AdeptPunch_execMeleeImpact_Parms MeleeImpact_Parms;

	this->ProcessEvent ( pFnMeleeImpact, &MeleeImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PlayerHeavyMeleeBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_AdeptPunch::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 67372 ];

	USFXCustomAction_AdeptPunch_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function Engine.SequenceEvent.Toggled
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXSeqEvt_PerformedMeleeOverCover::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = (UFunction*) UObject::GObjObjects()->Data[ 26860 ];

	USFXSeqEvt_PerformedMeleeOverCover_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SequenceEvent.Reset
// [0x00020002] 
// Parameters infos:

void USFXSeqEvt_PerformedMeleeOverCover::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 26857 ];

	USFXSeqEvt_PerformedMeleeOverCover_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SequenceEvent.PassesWhoTriggers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  inInstigator                   ( CPF_Parm )

bool USFXSeqEvt_PerformedMeleeOverCover::PassesWhoTriggers ( class AActor* inInstigator )
{
	static UFunction* pFnPassesWhoTriggers = NULL;

	if ( ! pFnPassesWhoTriggers )
		pFnPassesWhoTriggers = (UFunction*) UObject::GObjObjects()->Data[ 26854 ];

	USFXSeqEvt_PerformedMeleeOverCover_execPassesWhoTriggers_Parms PassesWhoTriggers_Parms;
	PassesWhoTriggers_Parms.inInstigator = inInstigator;

	pFnPassesWhoTriggers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPassesWhoTriggers, &PassesWhoTriggers_Parms, NULL );

	pFnPassesWhoTriggers->FunctionFlags |= 0x400;

	return PassesWhoTriggers_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.CheckActivate
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  inOriginator                   ( CPF_Parm )
// class AActor*                  inInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPushTop                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSFXForceThisFrame             ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  ActivateIndices                ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXSeqEvt_PerformedMeleeOverCover::CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices )
{
	static UFunction* pFnCheckActivate = NULL;

	if ( ! pFnCheckActivate )
		pFnCheckActivate = (UFunction*) UObject::GObjObjects()->Data[ 4465 ];

	USFXSeqEvt_PerformedMeleeOverCover_execCheckActivate_Parms CheckActivate_Parms;
	CheckActivate_Parms.inOriginator = inOriginator;
	CheckActivate_Parms.inInstigator = inInstigator;
	CheckActivate_Parms.bTest = bTest;
	CheckActivate_Parms.bPushTop = bPushTop;
	CheckActivate_Parms.bSFXForceThisFrame = bSFXForceThisFrame;

	pFnCheckActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckActivate, &CheckActivate_Parms, NULL );

	pFnCheckActivate->FunctionFlags |= 0x400;

	if ( ActivateIndices )
		memcpy ( ActivateIndices, &CheckActivate_Parms.ActivateIndices, 0xC );

	return CheckActivate_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.RegisterEvent
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXSeqEvt_PerformedMeleeOverCover::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = (UFunction*) UObject::GObjObjects()->Data[ 26846 ];

	USFXSeqEvt_PerformedMeleeOverCover_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_AdeptSyncCoverGrab::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127647 ];

	USFXCustomAction_AdeptSyncCoverGrab_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.NonSyncedAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_AdeptSyncCoverGrab::NonSyncedAction ( )
{
	static UFunction* pFnNonSyncedAction = NULL;

	if ( ! pFnNonSyncedAction )
		pFnNonSyncedAction = (UFunction*) UObject::GObjObjects()->Data[ 127646 ];

	USFXCustomAction_AdeptSyncCoverGrab_execNonSyncedAction_Parms NonSyncedAction_Parms;

	this->ProcessEvent ( pFnNonSyncedAction, &NonSyncedAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.SyncAttack
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_AdeptSyncCoverGrab::SyncAttack ( )
{
	static UFunction* pFnSyncAttack = NULL;

	if ( ! pFnSyncAttack )
		pFnSyncAttack = (UFunction*) UObject::GObjObjects()->Data[ 127645 ];

	USFXCustomAction_AdeptSyncCoverGrab_execSyncAttack_Parms SyncAttack_Parms;

	this->ProcessEvent ( pFnSyncAttack, &SyncAttack_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.GetVictimAnim
// [0x00420002] 
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_AdeptSyncCoverGrab::GetVictimAnim ( struct FBodyStance* Stance )
{
	static UFunction* pFnGetVictimAnim = NULL;

	if ( ! pFnGetVictimAnim )
		pFnGetVictimAnim = (UFunction*) UObject::GObjObjects()->Data[ 127642 ];

	USFXCustomAction_AdeptSyncCoverGrab_execGetVictimAnim_Parms GetVictimAnim_Parms;

	this->ProcessEvent ( pFnGetVictimAnim, &GetVictimAnim_Parms, NULL );

	if ( Stance )
		memcpy ( Stance, &GetVictimAnim_Parms.Stance, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.GetAttackerAnim
// [0x00420002] 
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_AdeptSyncCoverGrab::GetAttackerAnim ( struct FBodyStance* Stance )
{
	static UFunction* pFnGetAttackerAnim = NULL;

	if ( ! pFnGetAttackerAnim )
		pFnGetAttackerAnim = (UFunction*) UObject::GObjObjects()->Data[ 127639 ];

	USFXCustomAction_AdeptSyncCoverGrab_execGetAttackerAnim_Parms GetAttackerAnim_Parms;

	this->ProcessEvent ( pFnGetAttackerAnim, &GetAttackerAnim_Parms, NULL );

	if ( Stance )
		memcpy ( Stance, &GetAttackerAnim_Parms.Stance, 0xC );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.GetVictimPawn
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ABioPawn* USFXCustomAction_AdeptSyncCoverGrab::GetVictimPawn ( )
{
	static UFunction* pFnGetVictimPawn = NULL;

	if ( ! pFnGetVictimPawn )
		pFnGetVictimPawn = (UFunction*) UObject::GObjObjects()->Data[ 127631 ];

	USFXCustomAction_AdeptSyncCoverGrab_execGetVictimPawn_Parms GetVictimPawn_Parms;

	this->ProcessEvent ( pFnGetVictimPawn, &GetVictimPawn_Parms, NULL );

	return GetVictimPawn_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_AdeptSyncCoverGrab::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127627 ];

	USFXCustomAction_AdeptSyncCoverGrab_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.ShouldPlayMirrorAnim
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXCustomAction_AdeptSyncCoverGrab::ShouldPlayMirrorAnim ( )
{
	static UFunction* pFnShouldPlayMirrorAnim = NULL;

	if ( ! pFnShouldPlayMirrorAnim )
		pFnShouldPlayMirrorAnim = (UFunction*) UObject::GObjObjects()->Data[ 127620 ];

	USFXCustomAction_AdeptSyncCoverGrab_execShouldPlayMirrorAnim_Parms ShouldPlayMirrorAnim_Parms;

	this->ProcessEvent ( pFnShouldPlayMirrorAnim, &ShouldPlayMirrorAnim_Parms, NULL );

	return ShouldPlayMirrorAnim_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.VerifyVictimDestIsClear
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                VictimPawn                     ( CPF_Parm )
// struct FVector                 DestinationPos                 ( CPF_Parm )

bool USFXCustomAction_AdeptSyncCoverGrab::VerifyVictimDestIsClear ( class ABioPawn* VictimPawn, struct FVector DestinationPos )
{
	static UFunction* pFnVerifyVictimDestIsClear = NULL;

	if ( ! pFnVerifyVictimDestIsClear )
		pFnVerifyVictimDestIsClear = (UFunction*) UObject::GObjObjects()->Data[ 127609 ];

	USFXCustomAction_AdeptSyncCoverGrab_execVerifyVictimDestIsClear_Parms VerifyVictimDestIsClear_Parms;
	VerifyVictimDestIsClear_Parms.VictimPawn = VictimPawn;
	memcpy ( &VerifyVictimDestIsClear_Parms.DestinationPos, &DestinationPos, 0xC );

	this->ProcessEvent ( pFnVerifyVictimDestIsClear, &VerifyVictimDestIsClear_Parms, NULL );

	return VerifyVictimDestIsClear_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool USFXCustomAction_AdeptSyncCoverGrab::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 127603 ];

	USFXCustomAction_AdeptSyncCoverGrab_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXCustomAction_SyncCoverGrab.StartMeleeAttack
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_AdeptSyncCoverGrab::StartMeleeAttack ( )
{
	static UFunction* pFnStartMeleeAttack = NULL;

	if ( ! pFnStartMeleeAttack )
		pFnStartMeleeAttack = (UFunction*) UObject::GObjObjects()->Data[ 127599 ];

	USFXCustomAction_AdeptSyncCoverGrab_execStartMeleeAttack_Parms StartMeleeAttack_Parms;

	this->ProcessEvent ( pFnStartMeleeAttack, &StartMeleeAttack_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_Meleed::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_Meleed_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_Meleed::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_Meleed_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Meleed::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_Meleed_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_Meleed::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_Meleed_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Meleed::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_Meleed_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Meleed::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_Meleed_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Meleed::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_Meleed_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_Meleed::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_Meleed_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_Meleed::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_Meleed_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXGameEffect.CheckOwnerInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Attacker                       ( CPF_Parm )

class AController* USFXGameEffect_DisableAI::CheckOwnerInstigator ( class AController* Attacker )
{
	static UFunction* pFnCheckOwnerInstigator = NULL;

	if ( ! pFnCheckOwnerInstigator )
		pFnCheckOwnerInstigator = (UFunction*) UObject::GObjObjects()->Data[ 52269 ];

	USFXGameEffect_DisableAI_execCheckOwnerInstigator_Parms CheckOwnerInstigator_Parms;
	CheckOwnerInstigator_Parms.Attacker = Attacker;

	this->ProcessEvent ( pFnCheckOwnerInstigator, &CheckOwnerInstigator_Parms, NULL );

	return CheckOwnerInstigator_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.SpawnWeaponImpactVFX
// [0x00026002] 
// Parameters infos:
// class AActor*                  inInstigator                   ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )
// unsigned long                  UseImpactNormal                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  UseGodBone                     ( CPF_OptionalParm | CPF_Parm )
// float                          DrawScale                      ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_DisableAI::SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale )
{
	static UFunction* pFnSpawnWeaponImpactVFX = NULL;

	if ( ! pFnSpawnWeaponImpactVFX )
		pFnSpawnWeaponImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 52254 ];

	USFXGameEffect_DisableAI_execSpawnWeaponImpactVFX_Parms SpawnWeaponImpactVFX_Parms;
	SpawnWeaponImpactVFX_Parms.inInstigator = inInstigator;
	memcpy ( &SpawnWeaponImpactVFX_Parms.Impact, &Impact, 0x54 );
	SpawnWeaponImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;
	SpawnWeaponImpactVFX_Parms.UseImpactNormal = UseImpactNormal;
	SpawnWeaponImpactVFX_Parms.UseGodBone = UseGodBone;
	SpawnWeaponImpactVFX_Parms.DrawScale = DrawScale;

	this->ProcessEvent ( pFnSpawnWeaponImpactVFX, &SpawnWeaponImpactVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_DisableAI::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 52251 ];

	USFXGameEffect_DisableAI_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.LoadGameEffectClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GEClassName                    ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXGameEffect_DisableAI::LoadGameEffectClass ( struct FString GEClassName )
{
	static UFunction* pFnLoadGameEffectClass = NULL;

	if ( ! pFnLoadGameEffectClass )
		pFnLoadGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 52248 ];

	USFXGameEffect_DisableAI_execLoadGameEffectClass_Parms LoadGameEffectClass_Parms;
	memcpy ( &LoadGameEffectClass_Parms.GEClassName, &GEClassName, 0xC );

	this->ProcessEvent ( pFnLoadGameEffectClass, &LoadGameEffectClass_Parms, NULL );

	return LoadGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.OnUnpaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_DisableAI::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 52247 ];

	USFXGameEffect_DisableAI_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnPaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_DisableAI::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 52246 ];

	USFXGameEffect_DisableAI_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnCombatEnd
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_DisableAI::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	USFXGameEffect_DisableAI_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnRemoved
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXGameEffect_DisableAI::eventOnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 52244 ];

	USFXGameEffect_DisableAI_eventOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnUpdate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_DisableAI::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 52242 ];

	USFXGameEffect_DisableAI_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_DisableAI::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	USFXGameEffect_DisableAI_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.ComputeCustomEffectValue
// [0x00420000] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_DisableAI::ComputeCustomEffectValue ( float* Value )
{
	static UFunction* pFnComputeCustomEffectValue = NULL;

	if ( ! pFnComputeCustomEffectValue )
		pFnComputeCustomEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 52239 ];

	USFXGameEffect_DisableAI_execComputeCustomEffectValue_Parms ComputeCustomEffectValue_Parms;

	this->ProcessEvent ( pFnComputeCustomEffectValue, &ComputeCustomEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeCustomEffectValue_Parms.Value;
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerKnockbackImpact::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_PlayerKnockbackImpact_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_PlayerKnockbackImpact::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_PlayerKnockbackImpact_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerKnockbackImpact::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_PlayerKnockbackImpact_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerKnockbackImpact::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_PlayerKnockbackImpact_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerKnockbackImpact::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_PlayerKnockbackImpact_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerKnockbackImpact::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_PlayerKnockbackImpact_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerKnockbackImpact::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_PlayerKnockbackImpact_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerKnockbackImpact::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_PlayerKnockbackImpact_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerKnockbackImpact::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_PlayerKnockbackImpact_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerStaggerImpact::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 66858 ];

	USFXCustomAction_PlayerStaggerImpact_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.BoneName, &BoneName, 0x8 );
	ActivateImpactEmitter_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXCustomAction_PlayerStaggerImpact::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 66854 ];

	USFXCustomAction_PlayerStaggerImpact_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStaggerImpact::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 66853 ];

	USFXCustomAction_PlayerStaggerImpact_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PlayerStaggerImpact::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 66848 ];

	USFXCustomAction_PlayerStaggerImpact_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStaggerImpact::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66847 ];

	USFXCustomAction_PlayerStaggerImpact_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStaggerImpact::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 66845 ];

	USFXCustomAction_PlayerStaggerImpact_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PlayerStaggerImpact::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 66836 ];

	USFXCustomAction_PlayerStaggerImpact_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            BoneIndex                      ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void USFXCustomAction_PlayerStaggerImpact::Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 66828 ];

	USFXCustomAction_PlayerStaggerImpact_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	Init_Parms.BoneIndex = BoneIndex;
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.GetUsedAnimNames
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         UsedAnims                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCustomAction_PlayerStaggerImpact::eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims )
{
	static UFunction* pFnGetUsedAnimNames = NULL;

	if ( ! pFnGetUsedAnimNames )
		pFnGetUsedAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 66823 ];

	USFXCustomAction_PlayerStaggerImpact_eventGetUsedAnimNames_Parms GetUsedAnimNames_Parms;

	this->ProcessEvent ( pFnGetUsedAnimNames, &GetUsedAnimNames_Parms, NULL );

	if ( UsedAnims )
		memcpy ( UsedAnims, &GetUsedAnimNames_Parms.UsedAnims, 0xC );
};

// Function SFXGame.SFXDamageType.CalculateDamageMultiplier
// [0x00422002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

float USFXDamageType_HeavyPistol::CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnCalculateDamageMultiplier = NULL;

	if ( ! pFnCalculateDamageMultiplier )
		pFnCalculateDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 44579 ];

	USFXDamageType_HeavyPistol_execCalculateDamageMultiplier_Parms CalculateDamageMultiplier_Parms;

	this->ProcessEvent ( pFnCalculateDamageMultiplier, &CalculateDamageMultiplier_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &CalculateDamageMultiplier_Parms.DamageCalc, 0x60 );

	return CalculateDamageMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.ResetDamageCalc
// [0x00422002] 
// Parameters infos:
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

void USFXDamageType_HeavyPistol::ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnResetDamageCalc = NULL;

	if ( ! pFnResetDamageCalc )
		pFnResetDamageCalc = (UFunction*) UObject::GObjObjects()->Data[ 44554 ];

	USFXDamageType_HeavyPistol_execResetDamageCalc_Parms ResetDamageCalc_Parms;

	this->ProcessEvent ( pFnResetDamageCalc, &ResetDamageCalc_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &ResetDamageCalc_Parms.DamageCalc, 0x60 );
};

// Function SFXGame.SFXDamageType.CanPlayDeathEffect
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

bool USFXDamageType_HeavyPistol::CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 44550 ];

	USFXDamageType_HeavyPistol_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;
	CanPlayDeathEffect_Parms.Target = Target;
	CanPlayDeathEffect_Parms.Killer = Killer;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.CheckOwnerInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Attacker                       ( CPF_Parm )

class AController* USFXGameEffect_AntiGravity::CheckOwnerInstigator ( class AController* Attacker )
{
	static UFunction* pFnCheckOwnerInstigator = NULL;

	if ( ! pFnCheckOwnerInstigator )
		pFnCheckOwnerInstigator = (UFunction*) UObject::GObjObjects()->Data[ 52269 ];

	USFXGameEffect_AntiGravity_execCheckOwnerInstigator_Parms CheckOwnerInstigator_Parms;
	CheckOwnerInstigator_Parms.Attacker = Attacker;

	this->ProcessEvent ( pFnCheckOwnerInstigator, &CheckOwnerInstigator_Parms, NULL );

	return CheckOwnerInstigator_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.SpawnWeaponImpactVFX
// [0x00026002] 
// Parameters infos:
// class AActor*                  inInstigator                   ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )
// unsigned long                  UseImpactNormal                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  UseGodBone                     ( CPF_OptionalParm | CPF_Parm )
// float                          DrawScale                      ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_AntiGravity::SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale )
{
	static UFunction* pFnSpawnWeaponImpactVFX = NULL;

	if ( ! pFnSpawnWeaponImpactVFX )
		pFnSpawnWeaponImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 52254 ];

	USFXGameEffect_AntiGravity_execSpawnWeaponImpactVFX_Parms SpawnWeaponImpactVFX_Parms;
	SpawnWeaponImpactVFX_Parms.inInstigator = inInstigator;
	memcpy ( &SpawnWeaponImpactVFX_Parms.Impact, &Impact, 0x54 );
	SpawnWeaponImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;
	SpawnWeaponImpactVFX_Parms.UseImpactNormal = UseImpactNormal;
	SpawnWeaponImpactVFX_Parms.UseGodBone = UseGodBone;
	SpawnWeaponImpactVFX_Parms.DrawScale = DrawScale;

	this->ProcessEvent ( pFnSpawnWeaponImpactVFX, &SpawnWeaponImpactVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_AntiGravity::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 52251 ];

	USFXGameEffect_AntiGravity_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.LoadGameEffectClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GEClassName                    ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXGameEffect_AntiGravity::LoadGameEffectClass ( struct FString GEClassName )
{
	static UFunction* pFnLoadGameEffectClass = NULL;

	if ( ! pFnLoadGameEffectClass )
		pFnLoadGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 52248 ];

	USFXGameEffect_AntiGravity_execLoadGameEffectClass_Parms LoadGameEffectClass_Parms;
	memcpy ( &LoadGameEffectClass_Parms.GEClassName, &GEClassName, 0xC );

	this->ProcessEvent ( pFnLoadGameEffectClass, &LoadGameEffectClass_Parms, NULL );

	return LoadGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.OnUnpaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_AntiGravity::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 52247 ];

	USFXGameEffect_AntiGravity_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnPaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_AntiGravity::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 52246 ];

	USFXGameEffect_AntiGravity_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnCombatEnd
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_AntiGravity::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	USFXGameEffect_AntiGravity_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnRemoved
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXGameEffect_AntiGravity::eventOnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 52244 ];

	USFXGameEffect_AntiGravity_eventOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnUpdate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_AntiGravity::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 52242 ];

	USFXGameEffect_AntiGravity_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_AntiGravity::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	USFXGameEffect_AntiGravity_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.ComputeCustomEffectValue
// [0x00420000] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_AntiGravity::ComputeCustomEffectValue ( float* Value )
{
	static UFunction* pFnComputeCustomEffectValue = NULL;

	if ( ! pFnComputeCustomEffectValue )
		pFnComputeCustomEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 52239 ];

	USFXGameEffect_AntiGravity_execComputeCustomEffectValue_Parms ComputeCustomEffectValue_Parms;

	this->ProcessEvent ( pFnComputeCustomEffectValue, &ComputeCustomEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeCustomEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect.CheckOwnerInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Attacker                       ( CPF_Parm )

class AController* USFXGameEffect_BioticPowerDamageTakenBonus::CheckOwnerInstigator ( class AController* Attacker )
{
	static UFunction* pFnCheckOwnerInstigator = NULL;

	if ( ! pFnCheckOwnerInstigator )
		pFnCheckOwnerInstigator = (UFunction*) UObject::GObjObjects()->Data[ 52269 ];

	USFXGameEffect_BioticPowerDamageTakenBonus_execCheckOwnerInstigator_Parms CheckOwnerInstigator_Parms;
	CheckOwnerInstigator_Parms.Attacker = Attacker;

	this->ProcessEvent ( pFnCheckOwnerInstigator, &CheckOwnerInstigator_Parms, NULL );

	return CheckOwnerInstigator_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.SpawnWeaponImpactVFX
// [0x00026002] 
// Parameters infos:
// class AActor*                  inInstigator                   ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )
// unsigned long                  UseImpactNormal                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  UseGodBone                     ( CPF_OptionalParm | CPF_Parm )
// float                          DrawScale                      ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_BioticPowerDamageTakenBonus::SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale )
{
	static UFunction* pFnSpawnWeaponImpactVFX = NULL;

	if ( ! pFnSpawnWeaponImpactVFX )
		pFnSpawnWeaponImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 52254 ];

	USFXGameEffect_BioticPowerDamageTakenBonus_execSpawnWeaponImpactVFX_Parms SpawnWeaponImpactVFX_Parms;
	SpawnWeaponImpactVFX_Parms.inInstigator = inInstigator;
	memcpy ( &SpawnWeaponImpactVFX_Parms.Impact, &Impact, 0x54 );
	SpawnWeaponImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;
	SpawnWeaponImpactVFX_Parms.UseImpactNormal = UseImpactNormal;
	SpawnWeaponImpactVFX_Parms.UseGodBone = UseGodBone;
	SpawnWeaponImpactVFX_Parms.DrawScale = DrawScale;

	this->ProcessEvent ( pFnSpawnWeaponImpactVFX, &SpawnWeaponImpactVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_BioticPowerDamageTakenBonus::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 52251 ];

	USFXGameEffect_BioticPowerDamageTakenBonus_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.LoadGameEffectClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GEClassName                    ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXGameEffect_BioticPowerDamageTakenBonus::LoadGameEffectClass ( struct FString GEClassName )
{
	static UFunction* pFnLoadGameEffectClass = NULL;

	if ( ! pFnLoadGameEffectClass )
		pFnLoadGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 52248 ];

	USFXGameEffect_BioticPowerDamageTakenBonus_execLoadGameEffectClass_Parms LoadGameEffectClass_Parms;
	memcpy ( &LoadGameEffectClass_Parms.GEClassName, &GEClassName, 0xC );

	this->ProcessEvent ( pFnLoadGameEffectClass, &LoadGameEffectClass_Parms, NULL );

	return LoadGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.OnUnpaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_BioticPowerDamageTakenBonus::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 52247 ];

	USFXGameEffect_BioticPowerDamageTakenBonus_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnPaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_BioticPowerDamageTakenBonus::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 52246 ];

	USFXGameEffect_BioticPowerDamageTakenBonus_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnCombatEnd
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_BioticPowerDamageTakenBonus::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	USFXGameEffect_BioticPowerDamageTakenBonus_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnRemoved
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXGameEffect_BioticPowerDamageTakenBonus::eventOnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 52244 ];

	USFXGameEffect_BioticPowerDamageTakenBonus_eventOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnUpdate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_BioticPowerDamageTakenBonus::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 52242 ];

	USFXGameEffect_BioticPowerDamageTakenBonus_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_BioticPowerDamageTakenBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	USFXGameEffect_BioticPowerDamageTakenBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.ComputeCustomEffectValue
// [0x00420000] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_BioticPowerDamageTakenBonus::ComputeCustomEffectValue ( float* Value )
{
	static UFunction* pFnComputeCustomEffectValue = NULL;

	if ( ! pFnComputeCustomEffectValue )
		pFnComputeCustomEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 52239 ];

	USFXGameEffect_BioticPowerDamageTakenBonus_execComputeCustomEffectValue_Parms ComputeCustomEffectValue_Parms;

	this->ProcessEvent ( pFnComputeCustomEffectValue, &ComputeCustomEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeCustomEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect.CheckOwnerInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Attacker                       ( CPF_Parm )

class AController* USFXGameEffect_PartBasedDamageBonus::CheckOwnerInstigator ( class AController* Attacker )
{
	static UFunction* pFnCheckOwnerInstigator = NULL;

	if ( ! pFnCheckOwnerInstigator )
		pFnCheckOwnerInstigator = (UFunction*) UObject::GObjObjects()->Data[ 52269 ];

	USFXGameEffect_PartBasedDamageBonus_execCheckOwnerInstigator_Parms CheckOwnerInstigator_Parms;
	CheckOwnerInstigator_Parms.Attacker = Attacker;

	this->ProcessEvent ( pFnCheckOwnerInstigator, &CheckOwnerInstigator_Parms, NULL );

	return CheckOwnerInstigator_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.SpawnWeaponImpactVFX
// [0x00026002] 
// Parameters infos:
// class AActor*                  inInstigator                   ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )
// unsigned long                  UseImpactNormal                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  UseGodBone                     ( CPF_OptionalParm | CPF_Parm )
// float                          DrawScale                      ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_PartBasedDamageBonus::SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale )
{
	static UFunction* pFnSpawnWeaponImpactVFX = NULL;

	if ( ! pFnSpawnWeaponImpactVFX )
		pFnSpawnWeaponImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 52254 ];

	USFXGameEffect_PartBasedDamageBonus_execSpawnWeaponImpactVFX_Parms SpawnWeaponImpactVFX_Parms;
	SpawnWeaponImpactVFX_Parms.inInstigator = inInstigator;
	memcpy ( &SpawnWeaponImpactVFX_Parms.Impact, &Impact, 0x54 );
	SpawnWeaponImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;
	SpawnWeaponImpactVFX_Parms.UseImpactNormal = UseImpactNormal;
	SpawnWeaponImpactVFX_Parms.UseGodBone = UseGodBone;
	SpawnWeaponImpactVFX_Parms.DrawScale = DrawScale;

	this->ProcessEvent ( pFnSpawnWeaponImpactVFX, &SpawnWeaponImpactVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_PartBasedDamageBonus::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 52251 ];

	USFXGameEffect_PartBasedDamageBonus_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.LoadGameEffectClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GEClassName                    ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXGameEffect_PartBasedDamageBonus::LoadGameEffectClass ( struct FString GEClassName )
{
	static UFunction* pFnLoadGameEffectClass = NULL;

	if ( ! pFnLoadGameEffectClass )
		pFnLoadGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 52248 ];

	USFXGameEffect_PartBasedDamageBonus_execLoadGameEffectClass_Parms LoadGameEffectClass_Parms;
	memcpy ( &LoadGameEffectClass_Parms.GEClassName, &GEClassName, 0xC );

	this->ProcessEvent ( pFnLoadGameEffectClass, &LoadGameEffectClass_Parms, NULL );

	return LoadGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.OnUnpaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_PartBasedDamageBonus::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 52247 ];

	USFXGameEffect_PartBasedDamageBonus_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnPaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_PartBasedDamageBonus::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 52246 ];

	USFXGameEffect_PartBasedDamageBonus_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnCombatEnd
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_PartBasedDamageBonus::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	USFXGameEffect_PartBasedDamageBonus_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnRemoved
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXGameEffect_PartBasedDamageBonus::eventOnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 52244 ];

	USFXGameEffect_PartBasedDamageBonus_eventOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnUpdate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_PartBasedDamageBonus::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 52242 ];

	USFXGameEffect_PartBasedDamageBonus_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_PartBasedDamageBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	USFXGameEffect_PartBasedDamageBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.ComputeCustomEffectValue
// [0x00420000] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PartBasedDamageBonus::ComputeCustomEffectValue ( float* Value )
{
	static UFunction* pFnComputeCustomEffectValue = NULL;

	if ( ! pFnComputeCustomEffectValue )
		pFnComputeCustomEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 52239 ];

	USFXGameEffect_PartBasedDamageBonus_execComputeCustomEffectValue_Parms ComputeCustomEffectValue_Parms;

	this->ProcessEvent ( pFnComputeCustomEffectValue, &ComputeCustomEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeCustomEffectValue_Parms.Value;
};

// Function SFXGame.sfxgameeffect_powercombo.ClientDoPowerComboImpact
// [0x00020002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_Parm )
// float                          DetonationPowerRank            ( CPF_Parm )
// int                            MiscFlags                      ( CPF_Parm )

void Usfxgameeffect_powercombo_biotic::ClientDoPowerComboImpact ( class AActor* oActor, int CustomActionReactionType, float DetonationPowerRank, int MiscFlags )
{
	static UFunction* pFnClientDoPowerComboImpact = NULL;

	if ( ! pFnClientDoPowerComboImpact )
		pFnClientDoPowerComboImpact = (UFunction*) UObject::GObjObjects()->Data[ 69119 ];

	Usfxgameeffect_powercombo_biotic_execClientDoPowerComboImpact_Parms ClientDoPowerComboImpact_Parms;
	ClientDoPowerComboImpact_Parms.oActor = oActor;
	ClientDoPowerComboImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerComboImpact_Parms.DetonationPowerRank = DetonationPowerRank;
	ClientDoPowerComboImpact_Parms.MiscFlags = MiscFlags;

	this->ProcessEvent ( pFnClientDoPowerComboImpact, &ClientDoPowerComboImpact_Parms, NULL );
};

// Function SFXGame.sfxgameeffect_powercombo.OnImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxgameeffect_powercombo_biotic::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 69108 ];

	Usfxgameeffect_powercombo_biotic_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function SFXGame.sfxgameeffect_powercombo.GetForce
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fRatio                         ( CPF_Parm )

float Usfxgameeffect_powercombo_biotic::GetForce ( float fRatio )
{
	static UFunction* pFnGetForce = NULL;

	if ( ! pFnGetForce )
		pFnGetForce = (UFunction*) UObject::GObjObjects()->Data[ 69104 ];

	Usfxgameeffect_powercombo_biotic_execGetForce_Parms GetForce_Parms;
	GetForce_Parms.fRatio = fRatio;

	this->ProcessEvent ( pFnGetForce, &GetForce_Parms, NULL );

	return GetForce_Parms.ReturnValue;
};

// Function SFXGame.sfxgameeffect_powercombo.GetDamage
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fRatio                         ( CPF_Parm )

float Usfxgameeffect_powercombo_biotic::GetDamage ( float fRatio )
{
	static UFunction* pFnGetDamage = NULL;

	if ( ! pFnGetDamage )
		pFnGetDamage = (UFunction*) UObject::GObjObjects()->Data[ 69100 ];

	Usfxgameeffect_powercombo_biotic_execGetDamage_Parms GetDamage_Parms;
	GetDamage_Parms.fRatio = fRatio;

	this->ProcessEvent ( pFnGetDamage, &GetDamage_Parms, NULL );

	return GetDamage_Parms.ReturnValue;
};

// Function SFXGame.sfxgameeffect_powercombo.OnPowerComboDetonated
// [0x00020002] 
// Parameters infos:
// class Usfxpowercustomaction*   DetonationPower                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void Usfxgameeffect_powercombo_biotic::OnPowerComboDetonated ( class Usfxpowercustomaction* DetonationPower, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnPowerComboDetonated = NULL;

	if ( ! pFnOnPowerComboDetonated )
		pFnOnPowerComboDetonated = (UFunction*) UObject::GObjObjects()->Data[ 69077 ];

	Usfxgameeffect_powercombo_biotic_execOnPowerComboDetonated_Parms OnPowerComboDetonated_Parms;
	OnPowerComboDetonated_Parms.DetonationPower = DetonationPower;
	memcpy ( &OnPowerComboDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerComboDetonated_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnPowerComboDetonated, &OnPowerComboDetonated_Parms, NULL );
};

// Function SFXGame.sfxgameeffect_powercombo.CalculatePowerRatio
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DetonationPowerRank            ( CPF_Parm )

float Usfxgameeffect_powercombo_biotic::CalculatePowerRatio ( float DetonationPowerRank )
{
	static UFunction* pFnCalculatePowerRatio = NULL;

	if ( ! pFnCalculatePowerRatio )
		pFnCalculatePowerRatio = (UFunction*) UObject::GObjObjects()->Data[ 69073 ];

	Usfxgameeffect_powercombo_biotic_execCalculatePowerRatio_Parms CalculatePowerRatio_Parms;
	CalculatePowerRatio_Parms.DetonationPowerRank = DetonationPowerRank;

	this->ProcessEvent ( pFnCalculatePowerRatio, &CalculatePowerRatio_Parms, NULL );

	return CalculatePowerRatio_Parms.ReturnValue;
};

// Function SFXGame.sfxgameeffect_powercombo.OnRemoved
// [0x00020002] 
// Parameters infos:

void Usfxgameeffect_powercombo_biotic::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 69072 ];

	Usfxgameeffect_powercombo_biotic_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.sfxgameeffect_powercombo.OnApplied
// [0x00820002] 
// Parameters infos:

void Usfxgameeffect_powercombo_biotic::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 69068 ];

	Usfxgameeffect_powercombo_biotic_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.CheckOwnerInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Attacker                       ( CPF_Parm )

class AController* USFXGameEffect_Ragdoll::CheckOwnerInstigator ( class AController* Attacker )
{
	static UFunction* pFnCheckOwnerInstigator = NULL;

	if ( ! pFnCheckOwnerInstigator )
		pFnCheckOwnerInstigator = (UFunction*) UObject::GObjObjects()->Data[ 52269 ];

	USFXGameEffect_Ragdoll_execCheckOwnerInstigator_Parms CheckOwnerInstigator_Parms;
	CheckOwnerInstigator_Parms.Attacker = Attacker;

	this->ProcessEvent ( pFnCheckOwnerInstigator, &CheckOwnerInstigator_Parms, NULL );

	return CheckOwnerInstigator_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.SpawnWeaponImpactVFX
// [0x00026002] 
// Parameters infos:
// class AActor*                  inInstigator                   ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )
// unsigned long                  UseImpactNormal                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  UseGodBone                     ( CPF_OptionalParm | CPF_Parm )
// float                          DrawScale                      ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_Ragdoll::SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale )
{
	static UFunction* pFnSpawnWeaponImpactVFX = NULL;

	if ( ! pFnSpawnWeaponImpactVFX )
		pFnSpawnWeaponImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 52254 ];

	USFXGameEffect_Ragdoll_execSpawnWeaponImpactVFX_Parms SpawnWeaponImpactVFX_Parms;
	SpawnWeaponImpactVFX_Parms.inInstigator = inInstigator;
	memcpy ( &SpawnWeaponImpactVFX_Parms.Impact, &Impact, 0x54 );
	SpawnWeaponImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;
	SpawnWeaponImpactVFX_Parms.UseImpactNormal = UseImpactNormal;
	SpawnWeaponImpactVFX_Parms.UseGodBone = UseGodBone;
	SpawnWeaponImpactVFX_Parms.DrawScale = DrawScale;

	this->ProcessEvent ( pFnSpawnWeaponImpactVFX, &SpawnWeaponImpactVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_Ragdoll::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 52251 ];

	USFXGameEffect_Ragdoll_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.LoadGameEffectClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GEClassName                    ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXGameEffect_Ragdoll::LoadGameEffectClass ( struct FString GEClassName )
{
	static UFunction* pFnLoadGameEffectClass = NULL;

	if ( ! pFnLoadGameEffectClass )
		pFnLoadGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 52248 ];

	USFXGameEffect_Ragdoll_execLoadGameEffectClass_Parms LoadGameEffectClass_Parms;
	memcpy ( &LoadGameEffectClass_Parms.GEClassName, &GEClassName, 0xC );

	this->ProcessEvent ( pFnLoadGameEffectClass, &LoadGameEffectClass_Parms, NULL );

	return LoadGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.OnUnpaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_Ragdoll::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 52247 ];

	USFXGameEffect_Ragdoll_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnPaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_Ragdoll::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 52246 ];

	USFXGameEffect_Ragdoll_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnCombatEnd
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_Ragdoll::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	USFXGameEffect_Ragdoll_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnRemoved
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXGameEffect_Ragdoll::eventOnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 52244 ];

	USFXGameEffect_Ragdoll_eventOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnUpdate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_Ragdoll::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 52242 ];

	USFXGameEffect_Ragdoll_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_Ragdoll::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	USFXGameEffect_Ragdoll_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.ComputeCustomEffectValue
// [0x00420000] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_Ragdoll::ComputeCustomEffectValue ( float* Value )
{
	static UFunction* pFnComputeCustomEffectValue = NULL;

	if ( ! pFnComputeCustomEffectValue )
		pFnComputeCustomEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 52239 ];

	USFXGameEffect_Ragdoll_execComputeCustomEffectValue_Parms ComputeCustomEffectValue_Parms;

	this->ProcessEvent ( pFnComputeCustomEffectValue, &ComputeCustomEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeCustomEffectValue_Parms.Value;
};

// Function sfxgamecontent.SFXGameEffect_ShockwaveLift.HasOtherGravityEffects
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameEffect_ShockwaveLift::HasOtherGravityEffects ( )
{
	static UFunction* pFnHasOtherGravityEffects = NULL;

	if ( ! pFnHasOtherGravityEffects )
		pFnHasOtherGravityEffects = (UFunction*) UObject::GObjObjects()->Data[ 128454 ];

	USFXGameEffect_ShockwaveLift_execHasOtherGravityEffects_Parms HasOtherGravityEffects_Parms;

	this->ProcessEvent ( pFnHasOtherGravityEffects, &HasOtherGravityEffects_Parms, NULL );

	return HasOtherGravityEffects_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGameEffect_ShockwaveLift.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_ShockwaveLift::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 128453 ];

	USFXGameEffect_ShockwaveLift_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_ShockwaveLift.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_ShockwaveLift::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 128449 ];

	USFXGameEffect_ShockwaveLift_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_ShockwaveLift.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_ShockwaveLift::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 128447 ];

	USFXGameEffect_ShockwaveLift_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Singularity.OutOfRangeCheck
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Distance                       ( CPF_Parm )

bool USFXGameEffect_Singularity::OutOfRangeCheck ( float Distance )
{
	static UFunction* pFnOutOfRangeCheck = NULL;

	if ( ! pFnOutOfRangeCheck )
		pFnOutOfRangeCheck = (UFunction*) UObject::GObjObjects()->Data[ 128487 ];

	USFXGameEffect_Singularity_execOutOfRangeCheck_Parms OutOfRangeCheck_Parms;
	OutOfRangeCheck_Parms.Distance = Distance;

	this->ProcessEvent ( pFnOutOfRangeCheck, &OutOfRangeCheck_Parms, NULL );

	return OutOfRangeCheck_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGameEffect_Singularity.IsStillInSingularity
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameEffect_Singularity::IsStillInSingularity ( )
{
	static UFunction* pFnIsStillInSingularity = NULL;

	if ( ! pFnIsStillInSingularity )
		pFnIsStillInSingularity = (UFunction*) UObject::GObjObjects()->Data[ 128483 ];

	USFXGameEffect_Singularity_execIsStillInSingularity_Parms IsStillInSingularity_Parms;

	this->ProcessEvent ( pFnIsStillInSingularity, &IsStillInSingularity_Parms, NULL );

	return IsStillInSingularity_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGameEffect_Singularity.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Singularity::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 128480 ];

	USFXGameEffect_Singularity_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Singularity.AddForceToActor
// [0x00020002] 
// Parameters infos:
// struct FVector                 vForce                         ( CPF_Parm )

void USFXGameEffect_Singularity::AddForceToActor ( struct FVector vForce )
{
	static UFunction* pFnAddForceToActor = NULL;

	if ( ! pFnAddForceToActor )
		pFnAddForceToActor = (UFunction*) UObject::GObjObjects()->Data[ 128477 ];

	USFXGameEffect_Singularity_execAddForceToActor_Parms AddForceToActor_Parms;
	memcpy ( &AddForceToActor_Parms.vForce, &vForce, 0xC );

	this->ProcessEvent ( pFnAddForceToActor, &AddForceToActor_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Singularity.InitialMovement
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Singularity::InitialMovement ( )
{
	static UFunction* pFnInitialMovement = NULL;

	if ( ! pFnInitialMovement )
		pFnInitialMovement = (UFunction*) UObject::GObjObjects()->Data[ 128475 ];

	USFXGameEffect_Singularity_execInitialMovement_Parms InitialMovement_Parms;

	this->ProcessEvent ( pFnInitialMovement, &InitialMovement_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Singularity.UpdateActor
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Singularity::UpdateActor ( )
{
	static UFunction* pFnUpdateActor = NULL;

	if ( ! pFnUpdateActor )
		pFnUpdateActor = (UFunction*) UObject::GObjObjects()->Data[ 128466 ];

	USFXGameEffect_Singularity_execUpdateActor_Parms UpdateActor_Parms;

	this->ProcessEvent ( pFnUpdateActor, &UpdateActor_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Singularity.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Singularity::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 128460 ];

	USFXGameEffect_Singularity_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.CombatEnded
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_singularity::CombatEnded ( )
{
	static UFunction* pFnCombatEnded = NULL;

	if ( ! pFnCombatEnded )
		pFnCombatEnded = (UFunction*) UObject::GObjObjects()->Data[ 128788 ];

	Usfxpowercustomaction_singularity_execCombatEnded_Parms CombatEnded_Parms;

	this->ProcessEvent ( pFnCombatEnded, &CombatEnded_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_singularity::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 128787 ];

	Usfxpowercustomaction_singularity_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnOwnerDestroyed
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_singularity::OnOwnerDestroyed ( )
{
	static UFunction* pFnOnOwnerDestroyed = NULL;

	if ( ! pFnOnOwnerDestroyed )
		pFnOnOwnerDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 128786 ];

	Usfxpowercustomaction_singularity_execOnOwnerDestroyed_Parms OnOwnerDestroyed_Parms;

	this->ProcessEvent ( pFnOnOwnerDestroyed, &OnOwnerDestroyed_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.DoJoinInProgress
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_singularity::DoJoinInProgress ( )
{
	static UFunction* pFnDoJoinInProgress = NULL;

	if ( ! pFnDoJoinInProgress )
		pFnDoJoinInProgress = (UFunction*) UObject::GObjObjects()->Data[ 128785 ];

	Usfxpowercustomaction_singularity_execDoJoinInProgress_Parms DoJoinInProgress_Parms;

	this->ProcessEvent ( pFnDoJoinInProgress, &DoJoinInProgress_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ClientDoPowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_singularity::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 128778 ];

	Usfxpowercustomaction_singularity_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_singularity::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 128774 ];

	Usfxpowercustomaction_singularity_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_singularity::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 128772 ];

	Usfxpowercustomaction_singularity_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void Usfxpowercustomaction_singularity::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 128765 ];

	Usfxpowercustomaction_singularity_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ShouldUsePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxpowercustomaction_singularity::ShouldUsePower ( class AActor* Target, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 128759 ];

	Usfxpowercustomaction_singularity_execShouldUsePower_Parms ShouldUsePower_Parms;
	ShouldUsePower_Parms.Target = Target;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePower_Parms.sOptionalInfo, 0xC );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnPowerRankIncreased
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_singularity::OnPowerRankIncreased ( )
{
	static UFunction* pFnOnPowerRankIncreased = NULL;

	if ( ! pFnOnPowerRankIncreased )
		pFnOnPowerRankIncreased = (UFunction*) UObject::GObjObjects()->Data[ 128758 ];

	Usfxpowercustomaction_singularity_execOnPowerRankIncreased_Parms OnPowerRankIncreased_Parms;

	this->ProcessEvent ( pFnOnPowerRankIncreased, &OnPowerRankIncreased_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnRagdollPhysicsImpact
// [0x00020002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )
// class AActor*                  oImpactActor                   ( CPF_Parm )
// struct FVector                 vImpactDir                     ( CPF_Parm )

void Usfxpowercustomaction_singularity::OnRagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir )
{
	static UFunction* pFnOnRagdollPhysicsImpact = NULL;

	if ( ! pFnOnRagdollPhysicsImpact )
		pFnOnRagdollPhysicsImpact = (UFunction*) UObject::GObjObjects()->Data[ 128754 ];

	Usfxpowercustomaction_singularity_execOnRagdollPhysicsImpact_Parms OnRagdollPhysicsImpact_Parms;
	OnRagdollPhysicsImpact_Parms.oPawn = oPawn;
	OnRagdollPhysicsImpact_Parms.oImpactActor = oImpactActor;
	memcpy ( &OnRagdollPhysicsImpact_Parms.vImpactDir, &vImpactDir, 0xC );

	this->ProcessEvent ( pFnOnRagdollPhysicsImpact, &OnRagdollPhysicsImpact_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.SpawnSingularityVFX
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxpowercustomaction_singularity::SpawnSingularityVFX ( )
{
	static UFunction* pFnSpawnSingularityVFX = NULL;

	if ( ! pFnSpawnSingularityVFX )
		pFnSpawnSingularityVFX = (UFunction*) UObject::GObjObjects()->Data[ 128749 ];

	Usfxpowercustomaction_singularity_execSpawnSingularityVFX_Parms SpawnSingularityVFX_Parms;

	this->ProcessEvent ( pFnSpawnSingularityVFX, &SpawnSingularityVFX_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.SpawnSingularity
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_singularity::SpawnSingularity ( )
{
	static UFunction* pFnSpawnSingularity = NULL;

	if ( ! pFnSpawnSingularity )
		pFnSpawnSingularity = (UFunction*) UObject::GObjObjects()->Data[ 128746 ];

	Usfxpowercustomaction_singularity_execSpawnSingularity_Parms SpawnSingularity_Parms;

	this->ProcessEvent ( pFnSpawnSingularity, &SpawnSingularity_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnExplosionImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxpowercustomaction_singularity::OnExplosionImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnExplosionImpact = NULL;

	if ( ! pFnOnExplosionImpact )
		pFnOnExplosionImpact = (UFunction*) UObject::GObjObjects()->Data[ 128747 ];

	Usfxpowercustomaction_singularity_execOnExplosionImpact_Parms OnExplosionImpact_Parms;
	OnExplosionImpact_Parms.Resistance = Resistance;
	OnExplosionImpact_Parms.oImpacted = oImpacted;
	OnExplosionImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnExplosionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnExplosionImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnExplosionImpact, &OnExplosionImpact_Parms, NULL );

	return OnExplosionImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.SingularityExplosion
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_singularity::SingularityExplosion ( )
{
	static UFunction* pFnSingularityExplosion = NULL;

	if ( ! pFnSingularityExplosion )
		pFnSingularityExplosion = (UFunction*) UObject::GObjObjects()->Data[ 128739 ];

	Usfxpowercustomaction_singularity_execSingularityExplosion_Parms SingularityExplosion_Parms;

	this->ProcessEvent ( pFnSingularityExplosion, &SingularityExplosion_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.Internal_TurnOffSingularity
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_singularity::Internal_TurnOffSingularity ( )
{
	static UFunction* pFnInternal_TurnOffSingularity = NULL;

	if ( ! pFnInternal_TurnOffSingularity )
		pFnInternal_TurnOffSingularity = (UFunction*) UObject::GObjObjects()->Data[ 128733 ];

	Usfxpowercustomaction_singularity_execInternal_TurnOffSingularity_Parms Internal_TurnOffSingularity_Parms;

	this->ProcessEvent ( pFnInternal_TurnOffSingularity, &Internal_TurnOffSingularity_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.TurnOffSingularity
// [0x00024002] 
// Parameters infos:
// unsigned long                  bDoReplication                 ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_singularity::TurnOffSingularity ( unsigned long bDoReplication )
{
	static UFunction* pFnTurnOffSingularity = NULL;

	if ( ! pFnTurnOffSingularity )
		pFnTurnOffSingularity = (UFunction*) UObject::GObjObjects()->Data[ 128731 ];

	Usfxpowercustomaction_singularity_execTurnOffSingularity_Parms TurnOffSingularity_Parms;
	TurnOffSingularity_Parms.bDoReplication = bDoReplication;

	this->ProcessEvent ( pFnTurnOffSingularity, &TurnOffSingularity_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.CanPutInSingularity
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool Usfxpowercustomaction_singularity::CanPutInSingularity ( class AActor* oActor )
{
	static UFunction* pFnCanPutInSingularity = NULL;

	if ( ! pFnCanPutInSingularity )
		pFnCanPutInSingularity = (UFunction*) UObject::GObjObjects()->Data[ 128726 ];

	Usfxpowercustomaction_singularity_execCanPutInSingularity_Parms CanPutInSingularity_Parms;
	CanPutInSingularity_Parms.oActor = oActor;

	this->ProcessEvent ( pFnCanPutInSingularity, &CanPutInSingularity_Parms, NULL );

	return CanPutInSingularity_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnGameEffectEnded
// [0x00020002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )

void Usfxpowercustomaction_singularity::OnGameEffectEnded ( class AActor* oActor )
{
	static UFunction* pFnOnGameEffectEnded = NULL;

	if ( ! pFnOnGameEffectEnded )
		pFnOnGameEffectEnded = (UFunction*) UObject::GObjObjects()->Data[ 128724 ];

	Usfxpowercustomaction_singularity_execOnGameEffectEnded_Parms OnGameEffectEnded_Parms;
	OnGameEffectEnded_Parms.oActor = oActor;

	this->ProcessEvent ( pFnOnGameEffectEnded, &OnGameEffectEnded_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ImpactNewTarget
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool Usfxpowercustomaction_singularity::ImpactNewTarget ( class AActor* oImpacted )
{
	static UFunction* pFnImpactNewTarget = NULL;

	if ( ! pFnImpactNewTarget )
		pFnImpactNewTarget = (UFunction*) UObject::GObjObjects()->Data[ 128701 ];

	Usfxpowercustomaction_singularity_execImpactNewTarget_Parms ImpactNewTarget_Parms;
	ImpactNewTarget_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnImpactNewTarget, &ImpactNewTarget_Parms, NULL );

	return ImpactNewTarget_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ApplyBioticComboEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool Usfxpowercustomaction_singularity::ApplyBioticComboEffect ( class AActor* oTarget )
{
	static UFunction* pFnApplyBioticComboEffect = NULL;

	if ( ! pFnApplyBioticComboEffect )
		pFnApplyBioticComboEffect = (UFunction*) UObject::GObjObjects()->Data[ 128717 ];

	Usfxpowercustomaction_singularity_execApplyBioticComboEffect_Parms ApplyBioticComboEffect_Parms;
	ApplyBioticComboEffect_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnApplyBioticComboEffect, &ApplyBioticComboEffect_Parms, NULL );

	return ApplyBioticComboEffect_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.TickCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void Usfxpowercustomaction_singularity::eventTickCustomAction ( float fDeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128679 ];

	Usfxpowercustomaction_singularity_eventTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_singularity::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 128672 ];

	Usfxpowercustomaction_singularity_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnPowerDetonated
// [0x00024002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_singularity::OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor )
{
	static UFunction* pFnOnPowerDetonated = NULL;

	if ( ! pFnOnPowerDetonated )
		pFnOnPowerDetonated = (UFunction*) UObject::GObjObjects()->Data[ 128663 ];

	Usfxpowercustomaction_singularity_execOnPowerDetonated_Parms OnPowerDetonated_Parms;
	memcpy ( &OnPowerDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerDetonated_Parms.HitNormal, &HitNormal, 0xC );
	OnPowerDetonated_Parms.oProjectile = oProjectile;
	OnPowerDetonated_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnOnPowerDetonated, &OnPowerDetonated_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.ReleasePower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_singularity::ReleasePower ( )
{
	static UFunction* pFnReleasePower = NULL;

	if ( ! pFnReleasePower )
		pFnReleasePower = (UFunction*) UObject::GObjObjects()->Data[ 128661 ];

	Usfxpowercustomaction_singularity_execReleasePower_Parms ReleasePower_Parms;

	this->ProcessEvent ( pFnReleasePower, &ReleasePower_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.GetImpactForce
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

float Usfxpowercustomaction_singularity::GetImpactForce ( class AActor* oImpacted )
{
	static UFunction* pFnGetImpactForce = NULL;

	if ( ! pFnGetImpactForce )
		pFnGetImpactForce = (UFunction*) UObject::GObjObjects()->Data[ 128658 ];

	Usfxpowercustomaction_singularity_execGetImpactForce_Parms GetImpactForce_Parms;
	GetImpactForce_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactForce, &GetImpactForce_Parms, NULL );

	return GetImpactForce_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.StartCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_singularity::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128655 ];

	Usfxpowercustomaction_singularity_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_singularity.OnPowersLoaded
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_singularity::OnPowersLoaded ( )
{
	static UFunction* pFnOnPowersLoaded = NULL;

	if ( ! pFnOnPowersLoaded )
		pFnOnPowersLoaded = (UFunction*) UObject::GObjObjects()->Data[ 128656 ];

	Usfxpowercustomaction_singularity_execOnPowersLoaded_Parms OnPowersLoaded_Parms;

	this->ProcessEvent ( pFnOnPowersLoaded, &OnPowersLoaded_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Stasis.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Stasis::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 128518 ];

	USFXGameEffect_Stasis_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Stasis.UnStasisTarget
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Stasis::UnStasisTarget ( )
{
	static UFunction* pFnUnStasisTarget = NULL;

	if ( ! pFnUnStasisTarget )
		pFnUnStasisTarget = (UFunction*) UObject::GObjObjects()->Data[ 128515 ];

	USFXGameEffect_Stasis_execUnStasisTarget_Parms UnStasisTarget_Parms;

	this->ProcessEvent ( pFnUnStasisTarget, &UnStasisTarget_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Stasis.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_Stasis::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 128511 ];

	USFXGameEffect_Stasis_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Stasis.NullVelocity
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_Stasis::NullVelocity ( float DeltaSeconds )
{
	static UFunction* pFnNullVelocity = NULL;

	if ( ! pFnNullVelocity )
		pFnNullVelocity = (UFunction*) UObject::GObjObjects()->Data[ 128505 ];

	USFXGameEffect_Stasis_execNullVelocity_Parms NullVelocity_Parms;
	NullVelocity_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnNullVelocity, &NullVelocity_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Stasis.StartCrustVFX
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void USFXGameEffect_Stasis::StartCrustVFX ( )
{
	static UFunction* pFnStartCrustVFX = NULL;

	if ( ! pFnStartCrustVFX )
		pFnStartCrustVFX = (UFunction*) UObject::GObjObjects()->Data[ 128500 ];

	USFXGameEffect_Stasis_execStartCrustVFX_Parms StartCrustVFX_Parms;

	this->ProcessEvent ( pFnStartCrustVFX, &StartCrustVFX_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Stasis.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Stasis::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 128494 ];

	USFXGameEffect_Stasis_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_stasis::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 128914 ];

	Usfxpowercustomaction_stasis_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_stasis::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 128911 ];

	Usfxpowercustomaction_stasis_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void Usfxpowercustomaction_stasis::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 128904 ];

	Usfxpowercustomaction_stasis_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.ShouldUsePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool Usfxpowercustomaction_stasis::ShouldUsePower ( class AActor* Target, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 128899 ];

	Usfxpowercustomaction_stasis_execShouldUsePower_Parms ShouldUsePower_Parms;
	ShouldUsePower_Parms.Target = Target;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePower_Parms.sOptionalInfo, 0xC );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.OnGameEffectEnded
// [0x00020002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )

void Usfxpowercustomaction_stasis::OnGameEffectEnded ( class AActor* oActor )
{
	static UFunction* pFnOnGameEffectEnded = NULL;

	if ( ! pFnOnGameEffectEnded )
		pFnOnGameEffectEnded = (UFunction*) UObject::GObjObjects()->Data[ 128897 ];

	Usfxpowercustomaction_stasis_execOnGameEffectEnded_Parms OnGameEffectEnded_Parms;
	OnGameEffectEnded_Parms.oActor = oActor;

	this->ProcessEvent ( pFnOnGameEffectEnded, &OnGameEffectEnded_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.OnOwnerDestroyed
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_stasis::OnOwnerDestroyed ( )
{
	static UFunction* pFnOnOwnerDestroyed = NULL;

	if ( ! pFnOnOwnerDestroyed )
		pFnOnOwnerDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 128896 ];

	Usfxpowercustomaction_stasis_execOnOwnerDestroyed_Parms OnOwnerDestroyed_Parms;

	this->ProcessEvent ( pFnOnOwnerDestroyed, &OnOwnerDestroyed_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.DoJoinInProgress
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_stasis::DoJoinInProgress ( )
{
	static UFunction* pFnDoJoinInProgress = NULL;

	if ( ! pFnDoJoinInProgress )
		pFnDoJoinInProgress = (UFunction*) UObject::GObjObjects()->Data[ 128891 ];

	Usfxpowercustomaction_stasis_execDoJoinInProgress_Parms DoJoinInProgress_Parms;

	this->ProcessEvent ( pFnDoJoinInProgress, &DoJoinInProgress_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.UnStasisCurrentTargets
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_stasis::UnStasisCurrentTargets ( )
{
	static UFunction* pFnUnStasisCurrentTargets = NULL;

	if ( ! pFnUnStasisCurrentTargets )
		pFnUnStasisCurrentTargets = (UFunction*) UObject::GObjObjects()->Data[ 128886 ];

	Usfxpowercustomaction_stasis_execUnStasisCurrentTargets_Parms UnStasisCurrentTargets_Parms;

	this->ProcessEvent ( pFnUnStasisCurrentTargets, &UnStasisCurrentTargets_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.ClientImpactClearEffects
// [0x00020002] 
// Parameters infos:
// class AActor*                  oImpacted                      ( CPF_Parm )

void Usfxpowercustomaction_stasis::ClientImpactClearEffects ( class AActor* oImpacted )
{
	static UFunction* pFnClientImpactClearEffects = NULL;

	if ( ! pFnClientImpactClearEffects )
		pFnClientImpactClearEffects = (UFunction*) UObject::GObjObjects()->Data[ 128890 ];

	Usfxpowercustomaction_stasis_execClientImpactClearEffects_Parms ClientImpactClearEffects_Parms;
	ClientImpactClearEffects_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnClientImpactClearEffects, &ClientImpactClearEffects_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.ImpactStasis
// [0x00020002] 
// Parameters infos:
// class AActor*                  oImpacted                      ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )

void Usfxpowercustomaction_stasis::ImpactStasis ( class AActor* oImpacted, float fDuration )
{
	static UFunction* pFnImpactStasis = NULL;

	if ( ! pFnImpactStasis )
		pFnImpactStasis = (UFunction*) UObject::GObjObjects()->Data[ 128917 ];

	Usfxpowercustomaction_stasis_execImpactStasis_Parms ImpactStasis_Parms;
	ImpactStasis_Parms.oImpacted = oImpacted;
	ImpactStasis_Parms.fDuration = fDuration;

	this->ProcessEvent ( pFnImpactStasis, &ImpactStasis_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.ImpactPushAway
// [0x00020002] 
// Parameters infos:
// class AActor*                  oImpacted                      ( CPF_Parm )

void Usfxpowercustomaction_stasis::ImpactPushAway ( class AActor* oImpacted )
{
	static UFunction* pFnImpactPushAway = NULL;

	if ( ! pFnImpactPushAway )
		pFnImpactPushAway = (UFunction*) UObject::GObjObjects()->Data[ 128921 ];

	Usfxpowercustomaction_stasis_execImpactPushAway_Parms ImpactPushAway_Parms;
	ImpactPushAway_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnImpactPushAway, &ImpactPushAway_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.OnImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxpowercustomaction_stasis::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 128875 ];

	Usfxpowercustomaction_stasis_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.TickCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void Usfxpowercustomaction_stasis::eventTickCustomAction ( float fDeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128871 ];

	Usfxpowercustomaction_stasis_eventTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.ClientEndStasisEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )

void Usfxpowercustomaction_stasis::ClientEndStasisEffect ( class AActor* oActor )
{
	static UFunction* pFnClientEndStasisEffect = NULL;

	if ( ! pFnClientEndStasisEffect )
		pFnClientEndStasisEffect = (UFunction*) UObject::GObjObjects()->Data[ 128859 ];

	Usfxpowercustomaction_stasis_execClientEndStasisEffect_Parms ClientEndStasisEffect_Parms;
	ClientEndStasisEffect_Parms.oActor = oActor;

	this->ProcessEvent ( pFnClientEndStasisEffect, &ClientEndStasisEffect_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.ClientDoCustomActionImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            ImpactCount                    ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_stasis::ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType )
{
	static UFunction* pFnClientDoCustomActionImpact = NULL;

	if ( ! pFnClientDoCustomActionImpact )
		pFnClientDoCustomActionImpact = (UFunction*) UObject::GObjObjects()->Data[ 128861 ];

	Usfxpowercustomaction_stasis_execClientDoCustomActionImpact_Parms ClientDoCustomActionImpact_Parms;
	ClientDoCustomActionImpact_Parms.oActor = oActor;
	ClientDoCustomActionImpact_Parms.ImpactCount = ImpactCount;
	ClientDoCustomActionImpact_Parms.bFirstTarget = bFirstTarget;
	memcpy ( &ClientDoCustomActionImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ClientDoCustomActionImpact_Parms.HitNormal, &HitNormal, 0xC );
	ClientDoCustomActionImpact_Parms.CustomActionReactionType = CustomActionReactionType;

	this->ProcessEvent ( pFnClientDoCustomActionImpact, &ClientDoCustomActionImpact_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.ClientDoPowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_stasis::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 128852 ];

	Usfxpowercustomaction_stasis_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.StopStasisBubble
// [0x00020002] 
// Parameters infos:
// unsigned long                  bReplicate                     ( CPF_Parm )

void Usfxpowercustomaction_stasis::StopStasisBubble ( unsigned long bReplicate )
{
	static UFunction* pFnStopStasisBubble = NULL;

	if ( ! pFnStopStasisBubble )
		pFnStopStasisBubble = (UFunction*) UObject::GObjObjects()->Data[ 128850 ];

	Usfxpowercustomaction_stasis_execStopStasisBubble_Parms StopStasisBubble_Parms;
	StopStasisBubble_Parms.bReplicate = bReplicate;

	this->ProcessEvent ( pFnStopStasisBubble, &StopStasisBubble_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.StartStasisBubbleVFX
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void Usfxpowercustomaction_stasis::StartStasisBubbleVFX ( )
{
	static UFunction* pFnStartStasisBubbleVFX = NULL;

	if ( ! pFnStartStasisBubbleVFX )
		pFnStartStasisBubbleVFX = (UFunction*) UObject::GObjObjects()->Data[ 128844 ];

	Usfxpowercustomaction_stasis_execStartStasisBubbleVFX_Parms StartStasisBubbleVFX_Parms;

	this->ProcessEvent ( pFnStartStasisBubbleVFX, &StartStasisBubbleVFX_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.OnPowerDetonated
// [0x00024002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_stasis::OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor )
{
	static UFunction* pFnOnPowerDetonated = NULL;

	if ( ! pFnOnPowerDetonated )
		pFnOnPowerDetonated = (UFunction*) UObject::GObjObjects()->Data[ 128835 ];

	Usfxpowercustomaction_stasis_execOnPowerDetonated_Parms OnPowerDetonated_Parms;
	memcpy ( &OnPowerDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerDetonated_Parms.HitNormal, &HitNormal, 0xC );
	OnPowerDetonated_Parms.oProjectile = oProjectile;
	OnPowerDetonated_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnOnPowerDetonated, &OnPowerDetonated_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.StartPowerCooldown
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_stasis::StartPowerCooldown ( )
{
	static UFunction* pFnStartPowerCooldown = NULL;

	if ( ! pFnStartPowerCooldown )
		pFnStartPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 128831 ];

	Usfxpowercustomaction_stasis_execStartPowerCooldown_Parms StartPowerCooldown_Parms;

	this->ProcessEvent ( pFnStartPowerCooldown, &StartPowerCooldown_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_stasis.StartCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_stasis::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 128830 ];

	Usfxpowercustomaction_stasis_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.CheckOwnerInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Attacker                       ( CPF_Parm )

class AController* USFXGameEffect_WeaponDamageTakenBonus::CheckOwnerInstigator ( class AController* Attacker )
{
	static UFunction* pFnCheckOwnerInstigator = NULL;

	if ( ! pFnCheckOwnerInstigator )
		pFnCheckOwnerInstigator = (UFunction*) UObject::GObjObjects()->Data[ 52269 ];

	USFXGameEffect_WeaponDamageTakenBonus_execCheckOwnerInstigator_Parms CheckOwnerInstigator_Parms;
	CheckOwnerInstigator_Parms.Attacker = Attacker;

	this->ProcessEvent ( pFnCheckOwnerInstigator, &CheckOwnerInstigator_Parms, NULL );

	return CheckOwnerInstigator_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.SpawnWeaponImpactVFX
// [0x00026002] 
// Parameters infos:
// class AActor*                  inInstigator                   ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )
// unsigned long                  UseImpactNormal                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  UseGodBone                     ( CPF_OptionalParm | CPF_Parm )
// float                          DrawScale                      ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_WeaponDamageTakenBonus::SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale )
{
	static UFunction* pFnSpawnWeaponImpactVFX = NULL;

	if ( ! pFnSpawnWeaponImpactVFX )
		pFnSpawnWeaponImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 52254 ];

	USFXGameEffect_WeaponDamageTakenBonus_execSpawnWeaponImpactVFX_Parms SpawnWeaponImpactVFX_Parms;
	SpawnWeaponImpactVFX_Parms.inInstigator = inInstigator;
	memcpy ( &SpawnWeaponImpactVFX_Parms.Impact, &Impact, 0x54 );
	SpawnWeaponImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;
	SpawnWeaponImpactVFX_Parms.UseImpactNormal = UseImpactNormal;
	SpawnWeaponImpactVFX_Parms.UseGodBone = UseGodBone;
	SpawnWeaponImpactVFX_Parms.DrawScale = DrawScale;

	this->ProcessEvent ( pFnSpawnWeaponImpactVFX, &SpawnWeaponImpactVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_WeaponDamageTakenBonus::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 52251 ];

	USFXGameEffect_WeaponDamageTakenBonus_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.LoadGameEffectClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GEClassName                    ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXGameEffect_WeaponDamageTakenBonus::LoadGameEffectClass ( struct FString GEClassName )
{
	static UFunction* pFnLoadGameEffectClass = NULL;

	if ( ! pFnLoadGameEffectClass )
		pFnLoadGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 52248 ];

	USFXGameEffect_WeaponDamageTakenBonus_execLoadGameEffectClass_Parms LoadGameEffectClass_Parms;
	memcpy ( &LoadGameEffectClass_Parms.GEClassName, &GEClassName, 0xC );

	this->ProcessEvent ( pFnLoadGameEffectClass, &LoadGameEffectClass_Parms, NULL );

	return LoadGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.OnUnpaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_WeaponDamageTakenBonus::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 52247 ];

	USFXGameEffect_WeaponDamageTakenBonus_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnPaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_WeaponDamageTakenBonus::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 52246 ];

	USFXGameEffect_WeaponDamageTakenBonus_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnCombatEnd
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_WeaponDamageTakenBonus::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	USFXGameEffect_WeaponDamageTakenBonus_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnRemoved
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXGameEffect_WeaponDamageTakenBonus::eventOnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 52244 ];

	USFXGameEffect_WeaponDamageTakenBonus_eventOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnUpdate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_WeaponDamageTakenBonus::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 52242 ];

	USFXGameEffect_WeaponDamageTakenBonus_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_WeaponDamageTakenBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	USFXGameEffect_WeaponDamageTakenBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.ComputeCustomEffectValue
// [0x00420000] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_WeaponDamageTakenBonus::ComputeCustomEffectValue ( float* Value )
{
	static UFunction* pFnComputeCustomEffectValue = NULL;

	if ( ! pFnComputeCustomEffectValue )
		pFnComputeCustomEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 52239 ];

	USFXGameEffect_WeaponDamageTakenBonus_execComputeCustomEffectValue_Parms ComputeCustomEffectValue_Parms;

	this->ProcessEvent ( pFnComputeCustomEffectValue, &ComputeCustomEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeCustomEffectValue_Parms.Value;
};

// Function sfxgamecontent.SFXGameEffect_WeaponWeightModifier.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponWeightModifier::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 128536 ];

	USFXGameEffect_WeaponWeightModifier_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponWeightModifier.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponWeightModifier::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 128533 ];

	USFXGameEffect_WeaponWeightModifier_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.CheckOwnerInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Attacker                       ( CPF_Parm )

class AController* USFXGameEffect_WeightCapacity::CheckOwnerInstigator ( class AController* Attacker )
{
	static UFunction* pFnCheckOwnerInstigator = NULL;

	if ( ! pFnCheckOwnerInstigator )
		pFnCheckOwnerInstigator = (UFunction*) UObject::GObjObjects()->Data[ 52269 ];

	USFXGameEffect_WeightCapacity_execCheckOwnerInstigator_Parms CheckOwnerInstigator_Parms;
	CheckOwnerInstigator_Parms.Attacker = Attacker;

	this->ProcessEvent ( pFnCheckOwnerInstigator, &CheckOwnerInstigator_Parms, NULL );

	return CheckOwnerInstigator_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.SpawnWeaponImpactVFX
// [0x00026002] 
// Parameters infos:
// class AActor*                  inInstigator                   ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )
// unsigned long                  UseImpactNormal                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  UseGodBone                     ( CPF_OptionalParm | CPF_Parm )
// float                          DrawScale                      ( CPF_OptionalParm | CPF_Parm )

void USFXGameEffect_WeightCapacity::SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale )
{
	static UFunction* pFnSpawnWeaponImpactVFX = NULL;

	if ( ! pFnSpawnWeaponImpactVFX )
		pFnSpawnWeaponImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 52254 ];

	USFXGameEffect_WeightCapacity_execSpawnWeaponImpactVFX_Parms SpawnWeaponImpactVFX_Parms;
	SpawnWeaponImpactVFX_Parms.inInstigator = inInstigator;
	memcpy ( &SpawnWeaponImpactVFX_Parms.Impact, &Impact, 0x54 );
	SpawnWeaponImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;
	SpawnWeaponImpactVFX_Parms.UseImpactNormal = UseImpactNormal;
	SpawnWeaponImpactVFX_Parms.UseGodBone = UseGodBone;
	SpawnWeaponImpactVFX_Parms.DrawScale = DrawScale;

	this->ProcessEvent ( pFnSpawnWeaponImpactVFX, &SpawnWeaponImpactVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void USFXGameEffect_WeightCapacity::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 52251 ];

	USFXGameEffect_WeightCapacity_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.LoadGameEffectClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GEClassName                    ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXGameEffect_WeightCapacity::LoadGameEffectClass ( struct FString GEClassName )
{
	static UFunction* pFnLoadGameEffectClass = NULL;

	if ( ! pFnLoadGameEffectClass )
		pFnLoadGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 52248 ];

	USFXGameEffect_WeightCapacity_execLoadGameEffectClass_Parms LoadGameEffectClass_Parms;
	memcpy ( &LoadGameEffectClass_Parms.GEClassName, &GEClassName, 0xC );

	this->ProcessEvent ( pFnLoadGameEffectClass, &LoadGameEffectClass_Parms, NULL );

	return LoadGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.OnUnpaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_WeightCapacity::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 52247 ];

	USFXGameEffect_WeightCapacity_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnPaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_WeightCapacity::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 52246 ];

	USFXGameEffect_WeightCapacity_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnCombatEnd
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_WeightCapacity::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	USFXGameEffect_WeightCapacity_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnRemoved
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USFXGameEffect_WeightCapacity::eventOnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 52244 ];

	USFXGameEffect_WeightCapacity_eventOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnUpdate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_WeightCapacity::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 52242 ];

	USFXGameEffect_WeightCapacity_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_WeightCapacity::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	USFXGameEffect_WeightCapacity_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.ComputeCustomEffectValue
// [0x00420000] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_WeightCapacity::ComputeCustomEffectValue ( float* Value )
{
	static UFunction* pFnComputeCustomEffectValue = NULL;

	if ( ! pFnComputeCustomEffectValue )
		pFnComputeCustomEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 52239 ];

	USFXGameEffect_WeightCapacity_execComputeCustomEffectValue_Parms ComputeCustomEffectValue_Parms;

	this->ProcessEvent ( pFnComputeCustomEffectValue, &ComputeCustomEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeCustomEffectValue_Parms.Value;
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_Shockwave::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 128630 ];

	USFXPowerCustomAction_Shockwave_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_Shockwave::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 128626 ];

	USFXPowerCustomAction_Shockwave_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_Shockwave::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 128623 ];

	USFXPowerCustomAction_Shockwave_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void USFXPowerCustomAction_Shockwave::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 128617 ];

	USFXPowerCustomAction_Shockwave_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.ShouldUsePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomAction_Shockwave::ShouldUsePower ( class AActor* Target, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 128611 ];

	USFXPowerCustomAction_Shockwave_execShouldUsePower_Parms ShouldUsePower_Parms;
	ShouldUsePower_Parms.Target = Target;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePower_Parms.sOptionalInfo, 0xC );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.OnRagdollPhysicsImpact
// [0x00020002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )
// class AActor*                  oImpactActor                   ( CPF_Parm )
// struct FVector                 vImpactDir                     ( CPF_Parm )

void USFXPowerCustomAction_Shockwave::OnRagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir )
{
	static UFunction* pFnOnRagdollPhysicsImpact = NULL;

	if ( ! pFnOnRagdollPhysicsImpact )
		pFnOnRagdollPhysicsImpact = (UFunction*) UObject::GObjObjects()->Data[ 128606 ];

	USFXPowerCustomAction_Shockwave_execOnRagdollPhysicsImpact_Parms OnRagdollPhysicsImpact_Parms;
	OnRagdollPhysicsImpact_Parms.oPawn = oPawn;
	OnRagdollPhysicsImpact_Parms.oImpactActor = oImpactActor;
	memcpy ( &OnRagdollPhysicsImpact_Parms.vImpactDir, &vImpactDir, 0xC );

	this->ProcessEvent ( pFnOnRagdollPhysicsImpact, &OnRagdollPhysicsImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.ClientDoPowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_Shockwave::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 128598 ];

	USFXPowerCustomAction_Shockwave_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.DoSubsequentImpact
// [0x00020002] 
// Parameters infos:
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// int                            nImpactCount                   ( CPF_Parm )

void USFXPowerCustomAction_Shockwave::DoSubsequentImpact ( class AActor* HitActor, struct FVector ImpactLocation, int nImpactCount )
{
	static UFunction* pFnDoSubsequentImpact = NULL;

	if ( ! pFnDoSubsequentImpact )
		pFnDoSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 128576 ];

	USFXPowerCustomAction_Shockwave_execDoSubsequentImpact_Parms DoSubsequentImpact_Parms;
	DoSubsequentImpact_Parms.HitActor = HitActor;
	memcpy ( &DoSubsequentImpact_Parms.ImpactLocation, &ImpactLocation, 0xC );
	DoSubsequentImpact_Parms.nImpactCount = nImpactCount;

	this->ProcessEvent ( pFnDoSubsequentImpact, &DoSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.DoImpact
// [0x00020002] 
// Parameters infos:
// struct FVector                 location                       ( CPF_Parm )
// struct FRotator                ProjectileRotation             ( CPF_Parm )

void USFXPowerCustomAction_Shockwave::DoImpact ( struct FVector location, struct FRotator ProjectileRotation )
{
	static UFunction* pFnDoImpact = NULL;

	if ( ! pFnDoImpact )
		pFnDoImpact = (UFunction*) UObject::GObjObjects()->Data[ 128564 ];

	USFXPowerCustomAction_Shockwave_execDoImpact_Parms DoImpact_Parms;
	memcpy ( &DoImpact_Parms.location, &location, 0xC );
	memcpy ( &DoImpact_Parms.ProjectileRotation, &ProjectileRotation, 0xC );

	this->ProcessEvent ( pFnDoImpact, &DoImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.OnPowerDetonated
// [0x00024000] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_Shockwave::OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor )
{
	static UFunction* pFnOnPowerDetonated = NULL;

	if ( ! pFnOnPowerDetonated )
		pFnOnPowerDetonated = (UFunction*) UObject::GObjObjects()->Data[ 128559 ];

	USFXPowerCustomAction_Shockwave_execOnPowerDetonated_Parms OnPowerDetonated_Parms;
	memcpy ( &OnPowerDetonated_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnPowerDetonated_Parms.HitNormal, &HitNormal, 0xC );
	OnPowerDetonated_Parms.oProjectile = oProjectile;
	OnPowerDetonated_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnOnPowerDetonated, &OnPowerDetonated_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Shockwave.ReleaseProjectilePower
// [0x00020002] 
// Parameters infos:
// class ASFXProjectile_PowerCustomAction* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXProjectile_PowerCustomAction* USFXPowerCustomAction_Shockwave::ReleaseProjectilePower ( )
{
	static UFunction* pFnReleaseProjectilePower = NULL;

	if ( ! pFnReleaseProjectilePower )
		pFnReleaseProjectilePower = (UFunction*) UObject::GObjObjects()->Data[ 128549 ];

	USFXPowerCustomAction_Shockwave_execReleaseProjectilePower_Parms ReleaseProjectilePower_Parms;

	this->ProcessEvent ( pFnReleaseProjectilePower, &ReleaseProjectilePower_Parms, NULL );

	return ReleaseProjectilePower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXProjectile_PowerCustomAction_Shockwave.ReplicateExplode
// [0x00020000] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_Shockwave::ReplicateExplode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnReplicateExplode = NULL;

	if ( ! pFnReplicateExplode )
		pFnReplicateExplode = (UFunction*) UObject::GObjObjects()->Data[ 129048 ];

	ASFXProjectile_PowerCustomAction_Shockwave_execReplicateExplode_Parms ReplicateExplode_Parms;
	memcpy ( &ReplicateExplode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicateExplode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnReplicateExplode, &ReplicateExplode_Parms, NULL );
};

// Function sfxgamecontent.SFXProjectile_PowerCustomAction_Shockwave.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_Shockwave::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 129044 ];

	ASFXProjectile_PowerCustomAction_Shockwave_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function sfxgamecontent.SFXProjectile_PowerCustomAction_Shockwave.InitializePowerProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// float                          fTravelSpeed                   ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// class Usfxpowercustomaction*   oPower                         ( CPF_Parm )

bool ASFXProjectile_PowerCustomAction_Shockwave::InitializePowerProjectile ( class AActor* oCaster, float fTravelSpeed, float fRadius, class Usfxpowercustomaction* oPower )
{
	static UFunction* pFnInitializePowerProjectile = NULL;

	if ( ! pFnInitializePowerProjectile )
		pFnInitializePowerProjectile = (UFunction*) UObject::GObjObjects()->Data[ 129032 ];

	ASFXProjectile_PowerCustomAction_Shockwave_execInitializePowerProjectile_Parms InitializePowerProjectile_Parms;
	InitializePowerProjectile_Parms.oCaster = oCaster;
	InitializePowerProjectile_Parms.fTravelSpeed = fTravelSpeed;
	InitializePowerProjectile_Parms.fRadius = fRadius;
	InitializePowerProjectile_Parms.oPower = oPower;

	this->ProcessEvent ( pFnInitializePowerProjectile, &InitializePowerProjectile_Parms, NULL );

	return InitializePowerProjectile_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXProjectile_PowerCustomAction_Shockwave.ProcessTouch
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_Shockwave::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 129028 ];

	ASFXProjectile_PowerCustomAction_Shockwave_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function sfxgamecontent.SFXProjectile_PowerCustomAction_Shockwave.HitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ASFXProjectile_PowerCustomAction_Shockwave::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 129024 ];

	ASFXProjectile_PowerCustomAction_Shockwave_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function sfxgamecontent.SFXProjectile_PowerCustomAction_SuperSeeking.InitializeRotation
// [0x00020002] 
// Parameters infos:
// class APawn*                   oCasterPawn                    ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_SuperSeeking::InitializeRotation ( class APawn* oCasterPawn )
{
	static UFunction* pFnInitializeRotation = NULL;

	if ( ! pFnInitializeRotation )
		pFnInitializeRotation = (UFunction*) UObject::GObjObjects()->Data[ 129062 ];

	ASFXProjectile_PowerCustomAction_SuperSeeking_execInitializeRotation_Parms InitializeRotation_Parms;
	InitializeRotation_Parms.oCasterPawn = oCasterPawn;

	this->ProcessEvent ( pFnInitializeRotation, &InitializeRotation_Parms, NULL );
};

// Function sfxgamecontent.SFXProjectile_PowerCustomAction_SuperSeeking.TickAimRotation
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 SeekVector                     ( CPF_Parm )

void ASFXProjectile_PowerCustomAction_SuperSeeking::TickAimRotation ( float DeltaTime, struct FVector SeekVector )
{
	static UFunction* pFnTickAimRotation = NULL;

	if ( ! pFnTickAimRotation )
		pFnTickAimRotation = (UFunction*) UObject::GObjObjects()->Data[ 129055 ];

	ASFXProjectile_PowerCustomAction_SuperSeeking_execTickAimRotation_Parms TickAimRotation_Parms;
	TickAimRotation_Parms.DeltaTime = DeltaTime;
	memcpy ( &TickAimRotation_Parms.SeekVector, &SeekVector, 0xC );

	this->ProcessEvent ( pFnTickAimRotation, &TickAimRotation_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void USFXPowerCustomAction_Warp::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 129004 ];

	USFXPowerCustomAction_Warp_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_Warp::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 129000 ];

	USFXPowerCustomAction_Warp_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void USFXPowerCustomAction_Warp::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 128998 ];

	USFXPowerCustomAction_Warp_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void USFXPowerCustomAction_Warp::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 128991 ];

	USFXPowerCustomAction_Warp_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.ShouldUsePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPowerCustomAction_Warp::ShouldUsePower ( class AActor* Target, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 128986 ];

	USFXPowerCustomAction_Warp_execShouldUsePower_Parms ShouldUsePower_Parms;
	ShouldUsePower_Parms.Target = Target;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePower_Parms.sOptionalInfo, 0xC );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.PlayImpactEffects
// [0x00020002] 
// Parameters infos:
// class AActor*                  oImpacted                      ( CPF_Parm )
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// struct FVector                 ImpactNormal                   ( CPF_Parm )

void USFXPowerCustomAction_Warp::PlayImpactEffects ( class AActor* oImpacted, struct FVector ImpactLocation, struct FVector ImpactNormal )
{
	static UFunction* pFnPlayImpactEffects = NULL;

	if ( ! pFnPlayImpactEffects )
		pFnPlayImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 128982 ];

	USFXPowerCustomAction_Warp_execPlayImpactEffects_Parms PlayImpactEffects_Parms;
	PlayImpactEffects_Parms.oImpacted = oImpacted;
	memcpy ( &PlayImpactEffects_Parms.ImpactLocation, &ImpactLocation, 0xC );
	memcpy ( &PlayImpactEffects_Parms.ImpactNormal, &ImpactNormal, 0xC );

	this->ProcessEvent ( pFnPlayImpactEffects, &PlayImpactEffects_Parms, NULL );
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.OnImpact
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool USFXPowerCustomAction_Warp::OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 128957 ];

	USFXPowerCustomAction_Warp_execOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.Resistance = Resistance;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.GetTotalDamage
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm | CPF_OutParm )

float USFXPowerCustomAction_Warp::GetTotalDamage ( class AActor* oImpacted, class UClass** DamageType )
{
	static UFunction* pFnGetTotalDamage = NULL;

	if ( ! pFnGetTotalDamage )
		pFnGetTotalDamage = (UFunction*) UObject::GObjObjects()->Data[ 128953 ];

	USFXPowerCustomAction_Warp_execGetTotalDamage_Parms GetTotalDamage_Parms;
	GetTotalDamage_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetTotalDamage, &GetTotalDamage_Parms, NULL );

	if ( DamageType )
		*DamageType = GetTotalDamage_Parms.DamageType;

	return GetTotalDamage_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXPowerCustomAction_Warp.GetImpactDamage
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm | CPF_OutParm )

float USFXPowerCustomAction_Warp::GetImpactDamage ( class AActor* oImpacted, class UClass** DamageType )
{
	static UFunction* pFnGetImpactDamage = NULL;

	if ( ! pFnGetImpactDamage )
		pFnGetImpactDamage = (UFunction*) UObject::GObjObjects()->Data[ 128948 ];

	USFXPowerCustomAction_Warp_execGetImpactDamage_Parms GetImpactDamage_Parms;
	GetImpactDamage_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactDamage, &GetImpactDamage_Parms, NULL );

	if ( DamageType )
		*DamageType = GetImpactDamage_Parms.DamageType;

	return GetImpactDamage_Parms.ReturnValue;
};

// Function SFXGame.sfxshield_player.BeginRecharge
// [0x00020102] 
// Parameters infos:

void ASFXShield_Biotic_Player::BeginRecharge ( )
{
	static UFunction* pFnBeginRecharge = NULL;

	if ( ! pFnBeginRecharge )
		pFnBeginRecharge = (UFunction*) UObject::GObjObjects()->Data[ 87028 ];

	ASFXShield_Biotic_Player_execBeginRecharge_Parms BeginRecharge_Parms;

	this->ProcessEvent ( pFnBeginRecharge, &BeginRecharge_Parms, NULL );
};

// Function SFXGame.sfxshield_player.PlayRecharge
// [0x00020102] 
// Parameters infos:

void ASFXShield_Biotic_Player::PlayRecharge ( )
{
	static UFunction* pFnPlayRecharge = NULL;

	if ( ! pFnPlayRecharge )
		pFnPlayRecharge = (UFunction*) UObject::GObjObjects()->Data[ 87026 ];

	ASFXShield_Biotic_Player_execPlayRecharge_Parms PlayRecharge_Parms;

	this->ProcessEvent ( pFnPlayRecharge, &PlayRecharge_Parms, NULL );
};

// Function SFXGame.sfxshield_player.BreachShields
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )

void ASFXShield_Biotic_Player::BreachShields ( class UClass* DamageType )
{
	static UFunction* pFnBreachShields = NULL;

	if ( ! pFnBreachShields )
		pFnBreachShields = (UFunction*) UObject::GObjObjects()->Data[ 87013 ];

	ASFXShield_Biotic_Player_execBreachShields_Parms BreachShields_Parms;
	BreachShields_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnBreachShields, &BreachShields_Parms, NULL );
};

// Function SFXGame.sfxshield_player.ApplyDamageToShields
// [0x00480102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// class AController*             instigatedBy                   ( CPF_Parm )
// float                          Damage                         ( CPF_Parm | CPF_OutParm )
// float                          TotalDamageDone                ( CPF_Parm | CPF_OutParm )

void ASFXShield_Biotic_Player::ApplyDamageToShields ( class UClass* DamageType, struct FVector Momentum, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class AController* instigatedBy, float* Damage, float* TotalDamageDone )
{
	static UFunction* pFnApplyDamageToShields = NULL;

	if ( ! pFnApplyDamageToShields )
		pFnApplyDamageToShields = (UFunction*) UObject::GObjObjects()->Data[ 87001 ];

	ASFXShield_Biotic_Player_execApplyDamageToShields_Parms ApplyDamageToShields_Parms;
	ApplyDamageToShields_Parms.DamageType = DamageType;
	memcpy ( &ApplyDamageToShields_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &ApplyDamageToShields_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ApplyDamageToShields_Parms.HitInfo, &HitInfo, 0x1C );
	ApplyDamageToShields_Parms.instigatedBy = instigatedBy;

	this->ProcessEvent ( pFnApplyDamageToShields, &ApplyDamageToShields_Parms, NULL );

	if ( Damage )
		*Damage = ApplyDamageToShields_Parms.Damage;

	if ( TotalDamageDone )
		*TotalDamageDone = ApplyDamageToShields_Parms.TotalDamageDone;
};

// Function SFXGame.sfxshield_player.GetShieldRegenDelay
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXShield_Biotic_Player::GetShieldRegenDelay ( )
{
	static UFunction* pFnGetShieldRegenDelay = NULL;

	if ( ! pFnGetShieldRegenDelay )
		pFnGetShieldRegenDelay = (UFunction*) UObject::GObjObjects()->Data[ 86998 ];

	ASFXShield_Biotic_Player_execGetShieldRegenDelay_Parms GetShieldRegenDelay_Parms;

	this->ProcessEvent ( pFnGetShieldRegenDelay, &GetShieldRegenDelay_Parms, NULL );

	return GetShieldRegenDelay_Parms.ReturnValue;
};

// Function SFXGame.sfxshield_player.GetShieldRegenRate
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXShield_Biotic_Player::GetShieldRegenRate ( )
{
	static UFunction* pFnGetShieldRegenRate = NULL;

	if ( ! pFnGetShieldRegenRate )
		pFnGetShieldRegenRate = (UFunction*) UObject::GObjObjects()->Data[ 86995 ];

	ASFXShield_Biotic_Player_execGetShieldRegenRate_Parms GetShieldRegenRate_Parms;

	this->ProcessEvent ( pFnGetShieldRegenRate, &GetShieldRegenRate_Parms, NULL );

	return GetShieldRegenRate_Parms.ReturnValue;
};

// Function SFXGame.sfxshield_player.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void ASFXShield_Biotic_Player::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 86991 ];

	ASFXShield_Biotic_Player_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.GetStoreQualification
// [0x00022002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASFXWeapon_AssaultRifle_Avenger::GetStoreQualification ( )
{
	static UFunction* pFnGetStoreQualification = NULL;

	if ( ! pFnGetStoreQualification )
		pFnGetStoreQualification = (UFunction*) UObject::GObjObjects()->Data[ 88057 ];

	ASFXWeapon_AssaultRifle_Avenger_execGetStoreQualification_Parms GetStoreQualification_Parms;

	this->ProcessEvent ( pFnGetStoreQualification, &GetStoreQualification_Parms, NULL );

	return GetStoreQualification_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.GetWeaponSpecificImpactSound
// [0x00020102] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactSounds* ImpactSounds                   ( CPF_Parm )

class UWwiseEvent* ASFXWeapon_AssaultRifle_Avenger::GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds )
{
	static UFunction* pFnGetWeaponSpecificImpactSound = NULL;

	if ( ! pFnGetWeaponSpecificImpactSound )
		pFnGetWeaponSpecificImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 88054 ];

	ASFXWeapon_AssaultRifle_Avenger_execGetWeaponSpecificImpactSound_Parms GetWeaponSpecificImpactSound_Parms;
	GetWeaponSpecificImpactSound_Parms.ImpactSounds = ImpactSounds;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactSound, &GetWeaponSpecificImpactSound_Parms, NULL );

	return GetWeaponSpecificImpactSound_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.GetWeaponSpecificImpactEffect
// [0x00022102] 
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactEffects* ImpactEffects                  ( CPF_Parm )

class UParticleSystem* ASFXWeapon_AssaultRifle_Avenger::GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects )
{
	static UFunction* pFnGetWeaponSpecificImpactEffect = NULL;

	if ( ! pFnGetWeaponSpecificImpactEffect )
		pFnGetWeaponSpecificImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 88051 ];

	ASFXWeapon_AssaultRifle_Avenger_execGetWeaponSpecificImpactEffect_Parms GetWeaponSpecificImpactEffect_Parms;
	GetWeaponSpecificImpactEffect_Parms.ImpactEffects = ImpactEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactEffect, &GetWeaponSpecificImpactEffect_Parms, NULL );

	return GetWeaponSpecificImpactEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.GetWeaponSpecificDecalData
// [0x00420102] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USFXPhysicalMaterialDecals* DecalEffects                   ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm | CPF_OutParm )

class UDecalComponent* ASFXWeapon_AssaultRifle_Avenger::GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime )
{
	static UFunction* pFnGetWeaponSpecificDecalData = NULL;

	if ( ! pFnGetWeaponSpecificDecalData )
		pFnGetWeaponSpecificDecalData = (UFunction*) UObject::GObjObjects()->Data[ 88046 ];

	ASFXWeapon_AssaultRifle_Avenger_execGetWeaponSpecificDecalData_Parms GetWeaponSpecificDecalData_Parms;
	GetWeaponSpecificDecalData_Parms.DecalEffects = DecalEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificDecalData, &GetWeaponSpecificDecalData_Parms, NULL );

	if ( FadeTime )
		*FadeTime = GetWeaponSpecificDecalData_Parms.FadeTime;

	return GetWeaponSpecificDecalData_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.PlayFireEffects
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_AssaultRifle_Avenger::PlayFireEffects ( unsigned char FiringMode, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 88043 ];

	ASFXWeapon_AssaultRifle_Avenger_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FiringMode = FiringMode;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.ShouldSpawnTracerFX
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_AssaultRifle_Avenger::ShouldSpawnTracerFX ( )
{
	static UFunction* pFnShouldSpawnTracerFX = NULL;

	if ( ! pFnShouldSpawnTracerFX )
		pFnShouldSpawnTracerFX = (UFunction*) UObject::GObjObjects()->Data[ 88040 ];

	ASFXWeapon_AssaultRifle_Avenger_execShouldSpawnTracerFX_Parms ShouldSpawnTracerFX_Parms;

	this->ProcessEvent ( pFnShouldSpawnTracerFX, &ShouldSpawnTracerFX_Parms, NULL );

	return ShouldSpawnTracerFX_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GiveWeaponCodex
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_Pistol_Predator::GiveWeaponCodex ( )
{
	static UFunction* pFnGiveWeaponCodex = NULL;

	if ( ! pFnGiveWeaponCodex )
		pFnGiveWeaponCodex = (UFunction*) UObject::GObjObjects()->Data[ 76294 ];

	ASFXWeapon_Pistol_Predator_execGiveWeaponCodex_Parms GiveWeaponCodex_Parms;

	this->ProcessEvent ( pFnGiveWeaponCodex, &GiveWeaponCodex_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ClearFizzleCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_Pistol_Predator::ClearFizzleCount ( )
{
	static UFunction* pFnClearFizzleCount = NULL;

	if ( ! pFnClearFizzleCount )
		pFnClearFizzleCount = (UFunction*) UObject::GObjObjects()->Data[ 75417 ];

	ASFXWeapon_Pistol_Predator_execClearFizzleCount_Parms ClearFizzleCount_Parms;

	this->ProcessEvent ( pFnClearFizzleCount, &ClearFizzleCount_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IncrementFizzleCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_Pistol_Predator::IncrementFizzleCount ( )
{
	static UFunction* pFnIncrementFizzleCount = NULL;

	if ( ! pFnIncrementFizzleCount )
		pFnIncrementFizzleCount = (UFunction*) UObject::GObjObjects()->Data[ 75802 ];

	ASFXWeapon_Pistol_Predator_execIncrementFizzleCount_Parms IncrementFizzleCount_Parms;

	this->ProcessEvent ( pFnIncrementFizzleCount, &IncrementFizzleCount_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IsClientReadyToInitialize
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::IsClientReadyToInitialize ( )
{
	static UFunction* pFnIsClientReadyToInitialize = NULL;

	if ( ! pFnIsClientReadyToInitialize )
		pFnIsClientReadyToInitialize = (UFunction*) UObject::GObjObjects()->Data[ 76292 ];

	ASFXWeapon_Pistol_Predator_execIsClientReadyToInitialize_Parms IsClientReadyToInitialize_Parms;

	this->ProcessEvent ( pFnIsClientReadyToInitialize, &IsClientReadyToInitialize_Parms, NULL );

	return IsClientReadyToInitialize_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.UnsubscribeFromImpactNotifications
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

void ASFXWeapon_Pistol_Predator::UnsubscribeFromImpactNotifications ( struct FScriptDelegate Callback )
{
	static UFunction* pFnUnsubscribeFromImpactNotifications = NULL;

	if ( ! pFnUnsubscribeFromImpactNotifications )
		pFnUnsubscribeFromImpactNotifications = (UFunction*) UObject::GObjObjects()->Data[ 71078 ];

	ASFXWeapon_Pistol_Predator_execUnsubscribeFromImpactNotifications_Parms UnsubscribeFromImpactNotifications_Parms;
	memcpy ( &UnsubscribeFromImpactNotifications_Parms.Callback, &Callback, 0xC );

	this->ProcessEvent ( pFnUnsubscribeFromImpactNotifications, &UnsubscribeFromImpactNotifications_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SubscribeToImpactNotifications
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

void ASFXWeapon_Pistol_Predator::SubscribeToImpactNotifications ( struct FScriptDelegate Callback )
{
	static UFunction* pFnSubscribeToImpactNotifications = NULL;

	if ( ! pFnSubscribeToImpactNotifications )
		pFnSubscribeToImpactNotifications = (UFunction*) UObject::GObjObjects()->Data[ 71075 ];

	ASFXWeapon_Pistol_Predator_execSubscribeToImpactNotifications_Parms SubscribeToImpactNotifications_Parms;
	memcpy ( &SubscribeToImpactNotifications_Parms.Callback, &Callback, 0xC );

	this->ProcessEvent ( pFnSubscribeToImpactNotifications, &SubscribeToImpactNotifications_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetPenetrationDepth
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_Pistol_Predator::eventGetPenetrationDepth ( )
{
	static UFunction* pFnGetPenetrationDepth = NULL;

	if ( ! pFnGetPenetrationDepth )
		pFnGetPenetrationDepth = (UFunction*) UObject::GObjObjects()->Data[ 76288 ];

	ASFXWeapon_Pistol_Predator_eventGetPenetrationDepth_Parms GetPenetrationDepth_Parms;

	this->ProcessEvent ( pFnGetPenetrationDepth, &GetPenetrationDepth_Parms, NULL );

	return GetPenetrationDepth_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.LoadWeaponClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 WeaponClassName                ( CPF_Parm | CPF_NeedCtorLink )

class UClass* ASFXWeapon_Pistol_Predator::LoadWeaponClass ( struct FString WeaponClassName )
{
	static UFunction* pFnLoadWeaponClass = NULL;

	if ( ! pFnLoadWeaponClass )
		pFnLoadWeaponClass = (UFunction*) UObject::GObjObjects()->Data[ 47758 ];

	ASFXWeapon_Pistol_Predator_execLoadWeaponClass_Parms LoadWeaponClass_Parms;
	memcpy ( &LoadWeaponClass_Parms.WeaponClassName, &WeaponClassName, 0xC );

	this->ProcessEvent ( pFnLoadWeaponClass, &LoadWeaponClass_Parms, NULL );

	return LoadWeaponClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.FindWeaponClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 WeaponClassName                ( CPF_Parm | CPF_NeedCtorLink )

class UClass* ASFXWeapon_Pistol_Predator::FindWeaponClass ( struct FString WeaponClassName )
{
	static UFunction* pFnFindWeaponClass = NULL;

	if ( ! pFnFindWeaponClass )
		pFnFindWeaponClass = (UFunction*) UObject::GObjObjects()->Data[ 76282 ];

	ASFXWeapon_Pistol_Predator_execFindWeaponClass_Parms FindWeaponClass_Parms;
	memcpy ( &FindWeaponClass_Parms.WeaponClassName, &WeaponClassName, 0xC );

	this->ProcessEvent ( pFnFindWeaponClass, &FindWeaponClass_Parms, NULL );

	return FindWeaponClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetStoreQualification
// [0x00022002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASFXWeapon_Pistol_Predator::GetStoreQualification ( )
{
	static UFunction* pFnGetStoreQualification = NULL;

	if ( ! pFnGetStoreQualification )
		pFnGetStoreQualification = (UFunction*) UObject::GObjObjects()->Data[ 76280 ];

	ASFXWeapon_Pistol_Predator_execGetStoreQualification_Parms GetStoreQualification_Parms;

	this->ProcessEvent ( pFnGetStoreQualification, &GetStoreQualification_Parms, NULL );

	return GetStoreQualification_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SetWeaponHidden
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWeaponHidden                  ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SetWeaponHidden ( unsigned long bWeaponHidden )
{
	static UFunction* pFnSetWeaponHidden = NULL;

	if ( ! pFnSetWeaponHidden )
		pFnSetWeaponHidden = (UFunction*) UObject::GObjObjects()->Data[ 48379 ];

	ASFXWeapon_Pistol_Predator_execSetWeaponHidden_Parms SetWeaponHidden_Parms;
	SetWeaponHidden_Parms.bWeaponHidden = bWeaponHidden;

	this->ProcessEvent ( pFnSetWeaponHidden, &SetWeaponHidden_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponStatBarValues
// [0x00422003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  StatBar                        ( CPF_Parm )
// float                          WeaponValue                    ( CPF_Parm | CPF_OutParm )

void ASFXWeapon_Pistol_Predator::GetWeaponStatBarValues ( unsigned char StatBar, float* WeaponValue )
{
	static UFunction* pFnGetWeaponStatBarValues = NULL;

	if ( ! pFnGetWeaponStatBarValues )
		pFnGetWeaponStatBarValues = (UFunction*) UObject::GObjObjects()->Data[ 76274 ];

	ASFXWeapon_Pistol_Predator_execGetWeaponStatBarValues_Parms GetWeaponStatBarValues_Parms;
	GetWeaponStatBarValues_Parms.StatBar = StatBar;

	this->ProcessEvent ( pFnGetWeaponStatBarValues, &GetWeaponStatBarValues_Parms, NULL );

	if ( WeaponValue )
		*WeaponValue = GetWeaponStatBarValues_Parms.WeaponValue;
};

// Function SFXGame.SFXWeapon.HasLoopingFire
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::eventHasLoopingFire ( )
{
	static UFunction* pFnHasLoopingFire = NULL;

	if ( ! pFnHasLoopingFire )
		pFnHasLoopingFire = (UFunction*) UObject::GObjObjects()->Data[ 76272 ];

	ASFXWeapon_Pistol_Predator_eventHasLoopingFire_Parms HasLoopingFire_Parms;

	this->ProcessEvent ( pFnHasLoopingFire, &HasLoopingFire_Parms, NULL );

	return HasLoopingFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ClearFlashLocation
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::ClearFlashLocation ( )
{
	static UFunction* pFnClearFlashLocation = NULL;

	if ( ! pFnClearFlashLocation )
		pFnClearFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 76271 ];

	ASFXWeapon_Pistol_Predator_execClearFlashLocation_Parms ClearFlashLocation_Parms;

	this->ProcessEvent ( pFnClearFlashLocation, &ClearFlashLocation_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetFlashLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SetFlashLocation ( struct FVector HitLocation )
{
	static UFunction* pFnSetFlashLocation = NULL;

	if ( ! pFnSetFlashLocation )
		pFnSetFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 76269 ];

	ASFXWeapon_Pistol_Predator_execSetFlashLocation_Parms SetFlashLocation_Parms;
	memcpy ( &SetFlashLocation_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSetFlashLocation, &SetFlashLocation_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ApplyDefaultWeaponMods
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bClearOldMods                  ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::ApplyDefaultWeaponMods ( unsigned long bClearOldMods )
{
	static UFunction* pFnApplyDefaultWeaponMods = NULL;

	if ( ! pFnApplyDefaultWeaponMods )
		pFnApplyDefaultWeaponMods = (UFunction*) UObject::GObjObjects()->Data[ 76249 ];

	ASFXWeapon_Pistol_Predator_execApplyDefaultWeaponMods_Parms ApplyDefaultWeaponMods_Parms;
	ApplyDefaultWeaponMods_Parms.bClearOldMods = bClearOldMods;

	this->ProcessEvent ( pFnApplyDefaultWeaponMods, &ApplyDefaultWeaponMods_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetWeaponModBodyColour
// [0x00820102] 
// Parameters infos:
// int                            ModLevel                       ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SetWeaponModBodyColour ( int ModLevel )
{
	static UFunction* pFnSetWeaponModBodyColour = NULL;

	if ( ! pFnSetWeaponModBodyColour )
		pFnSetWeaponModBodyColour = (UFunction*) UObject::GObjObjects()->Data[ 76243 ];

	ASFXWeapon_Pistol_Predator_execSetWeaponModBodyColour_Parms SetWeaponModBodyColour_Parms;
	SetWeaponModBodyColour_Parms.ModLevel = ModLevel;

	this->ProcessEvent ( pFnSetWeaponModBodyColour, &SetWeaponModBodyColour_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetWeaponModGripColour
// [0x00820102] 
// Parameters infos:
// int                            ModLevel                       ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SetWeaponModGripColour ( int ModLevel )
{
	static UFunction* pFnSetWeaponModGripColour = NULL;

	if ( ! pFnSetWeaponModGripColour )
		pFnSetWeaponModGripColour = (UFunction*) UObject::GObjObjects()->Data[ 76237 ];

	ASFXWeapon_Pistol_Predator_execSetWeaponModGripColour_Parms SetWeaponModGripColour_Parms;
	SetWeaponModGripColour_Parms.ModLevel = ModLevel;

	this->ProcessEvent ( pFnSetWeaponModGripColour, &SetWeaponModGripColour_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetWeaponModEmissiveValue
// [0x00820102] 
// Parameters infos:
// int                            ModLevel                       ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SetWeaponModEmissiveValue ( int ModLevel )
{
	static UFunction* pFnSetWeaponModEmissiveValue = NULL;

	if ( ! pFnSetWeaponModEmissiveValue )
		pFnSetWeaponModEmissiveValue = (UFunction*) UObject::GObjObjects()->Data[ 76231 ];

	ASFXWeapon_Pistol_Predator_execSetWeaponModEmissiveValue_Parms SetWeaponModEmissiveValue_Parms;
	SetWeaponModEmissiveValue_Parms.ModLevel = ModLevel;

	this->ProcessEvent ( pFnSetWeaponModEmissiveValue, &SetWeaponModEmissiveValue_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ClearWeaponModMaterialParameters
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::ClearWeaponModMaterialParameters ( )
{
	static UFunction* pFnClearWeaponModMaterialParameters = NULL;

	if ( ! pFnClearWeaponModMaterialParameters )
		pFnClearWeaponModMaterialParameters = (UFunction*) UObject::GObjObjects()->Data[ 76229 ];

	ASFXWeapon_Pistol_Predator_execClearWeaponModMaterialParameters_Parms ClearWeaponModMaterialParameters_Parms;

	this->ProcessEvent ( pFnClearWeaponModMaterialParameters, &ClearWeaponModMaterialParameters_Parms, NULL );
};

// Function SFXGame.SFXWeapon.RestoreFlashlightToNormal
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::RestoreFlashlightToNormal ( )
{
	static UFunction* pFnRestoreFlashlightToNormal = NULL;

	if ( ! pFnRestoreFlashlightToNormal )
		pFnRestoreFlashlightToNormal = (UFunction*) UObject::GObjObjects()->Data[ 76225 ];

	ASFXWeapon_Pistol_Predator_execRestoreFlashlightToNormal_Parms RestoreFlashlightToNormal_Parms;

	this->ProcessEvent ( pFnRestoreFlashlightToNormal, &RestoreFlashlightToNormal_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DelayedRestoreFlashlightToNormal
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::DelayedRestoreFlashlightToNormal ( )
{
	static UFunction* pFnDelayedRestoreFlashlightToNormal = NULL;

	if ( ! pFnDelayedRestoreFlashlightToNormal )
		pFnDelayedRestoreFlashlightToNormal = (UFunction*) UObject::GObjObjects()->Data[ 76223 ];

	ASFXWeapon_Pistol_Predator_execDelayedRestoreFlashlightToNormal_Parms DelayedRestoreFlashlightToNormal_Parms;

	this->ProcessEvent ( pFnDelayedRestoreFlashlightToNormal, &DelayedRestoreFlashlightToNormal_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetFlashlightFireMode
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::SetFlashlightFireMode ( )
{
	static UFunction* pFnSetFlashlightFireMode = NULL;

	if ( ! pFnSetFlashlightFireMode )
		pFnSetFlashlightFireMode = (UFunction*) UObject::GObjObjects()->Data[ 76214 ];

	ASFXWeapon_Pistol_Predator_execSetFlashlightFireMode_Parms SetFlashlightFireMode_Parms;

	this->ProcessEvent ( pFnSetFlashlightFireMode, &SetFlashlightFireMode_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DetachFlashlight
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_Pistol_Predator::DetachFlashlight ( )
{
	static UFunction* pFnDetachFlashlight = NULL;

	if ( ! pFnDetachFlashlight )
		pFnDetachFlashlight = (UFunction*) UObject::GObjObjects()->Data[ 75811 ];

	ASFXWeapon_Pistol_Predator_execDetachFlashlight_Parms DetachFlashlight_Parms;

	this->ProcessEvent ( pFnDetachFlashlight, &DetachFlashlight_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AttachFlashlight
// [0x00820103] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_Pistol_Predator::AttachFlashlight ( )
{
	static UFunction* pFnAttachFlashlight = NULL;

	if ( ! pFnAttachFlashlight )
		pFnAttachFlashlight = (UFunction*) UObject::GObjObjects()->Data[ 75788 ];

	ASFXWeapon_Pistol_Predator_execAttachFlashlight_Parms AttachFlashlight_Parms;

	this->ProcessEvent ( pFnAttachFlashlight, &AttachFlashlight_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IsWeaponAlreadyAwarded
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WeaponClass                    ( CPF_Parm )

bool ASFXWeapon_Pistol_Predator::IsWeaponAlreadyAwarded ( class UClass* WeaponClass )
{
	static UFunction* pFnIsWeaponAlreadyAwarded = NULL;

	if ( ! pFnIsWeaponAlreadyAwarded )
		pFnIsWeaponAlreadyAwarded = (UFunction*) UObject::GObjObjects()->Data[ 76193 ];

	ASFXWeapon_Pistol_Predator_execIsWeaponAlreadyAwarded_Parms IsWeaponAlreadyAwarded_Parms;
	IsWeaponAlreadyAwarded_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFnIsWeaponAlreadyAwarded, &IsWeaponAlreadyAwarded_Parms, NULL );

	return IsWeaponAlreadyAwarded_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsWeaponUnlocked
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WeaponClass                    ( CPF_Parm )

bool ASFXWeapon_Pistol_Predator::IsWeaponUnlocked ( class UClass* WeaponClass )
{
	static UFunction* pFnIsWeaponUnlocked = NULL;

	if ( ! pFnIsWeaponUnlocked )
		pFnIsWeaponUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 76189 ];

	ASFXWeapon_Pistol_Predator_execIsWeaponUnlocked_Parms IsWeaponUnlocked_Parms;
	IsWeaponUnlocked_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFnIsWeaponUnlocked, &IsWeaponUnlocked_Parms, NULL );

	return IsWeaponUnlocked_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.Upgrade
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXPawn_Player*         Player                         ( CPF_Parm )
// class UClass*                  WeaponClass                    ( CPF_Parm )
// unsigned long                  bNoNotification                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsMultiplayer                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDoesNotCountasNGPFound        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUnlockOnly                    ( CPF_OptionalParm | CPF_Parm )

bool ASFXWeapon_Pistol_Predator::Upgrade ( class ASFXPawn_Player* Player, class UClass* WeaponClass, unsigned long bNoNotification, unsigned long bIsMultiplayer, unsigned long bDoesNotCountasNGPFound, unsigned long bUnlockOnly )
{
	static UFunction* pFnUpgrade = NULL;

	if ( ! pFnUpgrade )
		pFnUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 47760 ];

	ASFXWeapon_Pistol_Predator_execUpgrade_Parms Upgrade_Parms;
	Upgrade_Parms.Player = Player;
	Upgrade_Parms.WeaponClass = WeaponClass;
	Upgrade_Parms.bNoNotification = bNoNotification;
	Upgrade_Parms.bIsMultiplayer = bIsMultiplayer;
	Upgrade_Parms.bDoesNotCountasNGPFound = bDoesNotCountasNGPFound;
	Upgrade_Parms.bUnlockOnly = bUnlockOnly;

	this->ProcessEvent ( pFnUpgrade, &Upgrade_Parms, NULL );

	return Upgrade_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsAnimTypeSniper
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::IsAnimTypeSniper ( )
{
	static UFunction* pFnIsAnimTypeSniper = NULL;

	if ( ! pFnIsAnimTypeSniper )
		pFnIsAnimTypeSniper = (UFunction*) UObject::GObjObjects()->Data[ 76168 ];

	ASFXWeapon_Pistol_Predator_execIsAnimTypeSniper_Parms IsAnimTypeSniper_Parms;

	this->ProcessEvent ( pFnIsAnimTypeSniper, &IsAnimTypeSniper_Parms, NULL );

	return IsAnimTypeSniper_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsAnimTypeShotgun
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::IsAnimTypeShotgun ( )
{
	static UFunction* pFnIsAnimTypeShotgun = NULL;

	if ( ! pFnIsAnimTypeShotgun )
		pFnIsAnimTypeShotgun = (UFunction*) UObject::GObjObjects()->Data[ 76166 ];

	ASFXWeapon_Pistol_Predator_execIsAnimTypeShotgun_Parms IsAnimTypeShotgun_Parms;

	this->ProcessEvent ( pFnIsAnimTypeShotgun, &IsAnimTypeShotgun_Parms, NULL );

	return IsAnimTypeShotgun_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsAnimTypePistol
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::IsAnimTypePistol ( )
{
	static UFunction* pFnIsAnimTypePistol = NULL;

	if ( ! pFnIsAnimTypePistol )
		pFnIsAnimTypePistol = (UFunction*) UObject::GObjObjects()->Data[ 67107 ];

	ASFXWeapon_Pistol_Predator_execIsAnimTypePistol_Parms IsAnimTypePistol_Parms;

	this->ProcessEvent ( pFnIsAnimTypePistol, &IsAnimTypePistol_Parms, NULL );

	return IsAnimTypePistol_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetReactionChanceModifier
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_Pistol_Predator::eventGetReactionChanceModifier ( )
{
	static UFunction* pFnGetReactionChanceModifier = NULL;

	if ( ! pFnGetReactionChanceModifier )
		pFnGetReactionChanceModifier = (UFunction*) UObject::GObjObjects()->Data[ 76164 ];

	ASFXWeapon_Pistol_Predator_eventGetReactionChanceModifier_Parms GetReactionChanceModifier_Parms;

	this->ProcessEvent ( pFnGetReactionChanceModifier, &GetReactionChanceModifier_Parms, NULL );

	return GetReactionChanceModifier_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ClientWeaponSet
// [0x010241C0] 
// Parameters infos:
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 76161 ];

	ASFXWeapon_Pistol_Predator_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CleanUpDummyFire
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXWeapon_Pistol_Predator::eventCleanUpDummyFire ( )
{
	static UFunction* pFnCleanUpDummyFire = NULL;

	if ( ! pFnCleanUpDummyFire )
		pFnCleanUpDummyFire = (UFunction*) UObject::GObjObjects()->Data[ 76160 ];

	ASFXWeapon_Pistol_Predator_eventCleanUpDummyFire_Parms CleanUpDummyFire_Parms;

	this->ProcessEvent ( pFnCleanUpDummyFire, &CleanUpDummyFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.WeaponStoppedFiring
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::eventWeaponStoppedFiring ( unsigned char FiringMode )
{
	static UFunction* pFnWeaponStoppedFiring = NULL;

	if ( ! pFnWeaponStoppedFiring )
		pFnWeaponStoppedFiring = (UFunction*) UObject::GObjObjects()->Data[ 76158 ];

	ASFXWeapon_Pistol_Predator_eventWeaponStoppedFiring_Parms WeaponStoppedFiring_Parms;
	WeaponStoppedFiring_Parms.FiringMode = FiringMode;

	this->ProcessEvent ( pFnWeaponStoppedFiring, &WeaponStoppedFiring_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DummyFire
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 TargetLoc                      ( CPF_Parm )
// class AActor*                  AttachedTo                     ( CPF_OptionalParm | CPF_Parm )
// float                          AimErrorDeg                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::eventDummyFire ( unsigned char FireModeNum, struct FVector TargetLoc, class AActor* AttachedTo, float AimErrorDeg, class AActor* TargetActor )
{
	static UFunction* pFnDummyFire = NULL;

	if ( ! pFnDummyFire )
		pFnDummyFire = (UFunction*) UObject::GObjObjects()->Data[ 76141 ];

	ASFXWeapon_Pistol_Predator_eventDummyFire_Parms DummyFire_Parms;
	DummyFire_Parms.FireModeNum = FireModeNum;
	memcpy ( &DummyFire_Parms.TargetLoc, &TargetLoc, 0xC );
	DummyFire_Parms.AttachedTo = AttachedTo;
	DummyFire_Parms.AimErrorDeg = AimErrorDeg;
	DummyFire_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnDummyFire, &DummyFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetInitialDummyFireDelay
// [0x00020100] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_Pistol_Predator::GetInitialDummyFireDelay ( )
{
	static UFunction* pFnGetInitialDummyFireDelay = NULL;

	if ( ! pFnGetInitialDummyFireDelay )
		pFnGetInitialDummyFireDelay = (UFunction*) UObject::GObjObjects()->Data[ 76139 ];

	ASFXWeapon_Pistol_Predator_execGetInitialDummyFireDelay_Parms GetInitialDummyFireDelay_Parms;

	this->ProcessEvent ( pFnGetInitialDummyFireDelay, &GetInitialDummyFireDelay_Parms, NULL );

	return GetInitialDummyFireDelay_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.BeginDummyFire
// [0x00024100] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// class AActor*                  AttachedTo                     ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::BeginDummyFire ( unsigned char FiringMode, class AActor* AttachedTo )
{
	static UFunction* pFnBeginDummyFire = NULL;

	if ( ! pFnBeginDummyFire )
		pFnBeginDummyFire = (UFunction*) UObject::GObjObjects()->Data[ 76136 ];

	ASFXWeapon_Pistol_Predator_execBeginDummyFire_Parms BeginDummyFire_Parms;
	BeginDummyFire_Parms.FiringMode = FiringMode;
	BeginDummyFire_Parms.AttachedTo = AttachedTo;

	this->ProcessEvent ( pFnBeginDummyFire, &BeginDummyFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.WeaponFired
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::WeaponFired ( unsigned char FiringMode, unsigned long bViaReplication, struct FVector HitLocation )
{
	static UFunction* pFnWeaponFired = NULL;

	if ( ! pFnWeaponFired )
		pFnWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 76132 ];

	ASFXWeapon_Pistol_Predator_execWeaponFired_Parms WeaponFired_Parms;
	WeaponFired_Parms.FiringMode = FiringMode;
	WeaponFired_Parms.bViaReplication = bViaReplication;
	memcpy ( &WeaponFired_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnWeaponFired, &WeaponFired_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProjectileFireSimple
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          AimErrorDeg                    ( CPF_OptionalParm | CPF_Parm )

class AProjectile* ASFXWeapon_Pistol_Predator::eventProjectileFireSimple ( float AimErrorDeg )
{
	static UFunction* pFnProjectileFireSimple = NULL;

	if ( ! pFnProjectileFireSimple )
		pFnProjectileFireSimple = (UFunction*) UObject::GObjObjects()->Data[ 76124 ];

	ASFXWeapon_Pistol_Predator_eventProjectileFireSimple_Parms ProjectileFireSimple_Parms;
	ProjectileFireSimple_Parms.AimErrorDeg = AimErrorDeg;

	this->ProcessEvent ( pFnProjectileFireSimple, &ProjectileFireSimple_Parms, NULL );

	return ProjectileFireSimple_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.CalcRemoteImpactEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 GivenHitLocation               ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::CalcRemoteImpactEffects ( unsigned char FireModeNum, struct FVector GivenHitLocation, unsigned long bViaReplication )
{
	static UFunction* pFnCalcRemoteImpactEffects = NULL;

	if ( ! pFnCalcRemoteImpactEffects )
		pFnCalcRemoteImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 76115 ];

	ASFXWeapon_Pistol_Predator_execCalcRemoteImpactEffects_Parms CalcRemoteImpactEffects_Parms;
	CalcRemoteImpactEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &CalcRemoteImpactEffects_Parms.GivenHitLocation, &GivenHitLocation, 0xC );
	CalcRemoteImpactEffects_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnCalcRemoteImpactEffects, &CalcRemoteImpactEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CalculateCoverLeanOutOffset
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Direction                      ( CPF_Parm )
// unsigned char                  Type                           ( CPF_Parm )
// struct FVector                 Offset                         ( CPF_Parm | CPF_OutParm )

bool ASFXWeapon_Pistol_Predator::eventCalculateCoverLeanOutOffset ( unsigned char Direction, unsigned char Type, struct FVector* Offset )
{
	static UFunction* pFnCalculateCoverLeanOutOffset = NULL;

	if ( ! pFnCalculateCoverLeanOutOffset )
		pFnCalculateCoverLeanOutOffset = (UFunction*) UObject::GObjObjects()->Data[ 76108 ];

	ASFXWeapon_Pistol_Predator_eventCalculateCoverLeanOutOffset_Parms CalculateCoverLeanOutOffset_Parms;
	CalculateCoverLeanOutOffset_Parms.Direction = Direction;
	CalculateCoverLeanOutOffset_Parms.Type = Type;

	this->ProcessEvent ( pFnCalculateCoverLeanOutOffset, &CalculateCoverLeanOutOffset_Parms, NULL );

	if ( Offset )
		memcpy ( Offset, &CalculateCoverLeanOutOffset_Parms.Offset, 0xC );

	return CalculateCoverLeanOutOffset_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetGeneralDescription
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXWeapon_Pistol_Predator::GetGeneralDescription ( )
{
	static UFunction* pFnGetGeneralDescription = NULL;

	if ( ! pFnGetGeneralDescription )
		pFnGetGeneralDescription = (UFunction*) UObject::GObjObjects()->Data[ 76106 ];

	ASFXWeapon_Pistol_Predator_execGetGeneralDescription_Parms GetGeneralDescription_Parms;

	this->ProcessEvent ( pFnGetGeneralDescription, &GetGeneralDescription_Parms, NULL );

	return GetGeneralDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetShortDescription
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXWeapon_Pistol_Predator::GetShortDescription ( )
{
	static UFunction* pFnGetShortDescription = NULL;

	if ( ! pFnGetShortDescription )
		pFnGetShortDescription = (UFunction*) UObject::GObjObjects()->Data[ 76104 ];

	ASFXWeapon_Pistol_Predator_execGetShortDescription_Parms GetShortDescription_Parms;

	this->ProcessEvent ( pFnGetShortDescription, &GetShortDescription_Parms, NULL );

	return GetShortDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetPrettyName
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Level                          ( CPF_OptionalParm | CPF_Parm )

struct FString ASFXWeapon_Pistol_Predator::GetPrettyName ( int Level )
{
	static UFunction* pFnGetPrettyName = NULL;

	if ( ! pFnGetPrettyName )
		pFnGetPrettyName = (UFunction*) UObject::GObjObjects()->Data[ 61727 ];

	ASFXWeapon_Pistol_Predator_execGetPrettyName_Parms GetPrettyName_Parms;
	GetPrettyName_Parms.Level = Level;

	this->ProcessEvent ( pFnGetPrettyName, &GetPrettyName_Parms, NULL );

	return GetPrettyName_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetWeaponDebug
// [0x00420100] 
// Parameters infos:
// TArray< struct FString >       DebugInfo                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXWeapon_Pistol_Predator::GetWeaponDebug ( TArray< struct FString >* DebugInfo )
{
	static UFunction* pFnGetWeaponDebug = NULL;

	if ( ! pFnGetWeaponDebug )
		pFnGetWeaponDebug = (UFunction*) UObject::GObjObjects()->Data[ 76099 ];

	ASFXWeapon_Pistol_Predator_execGetWeaponDebug_Parms GetWeaponDebug_Parms;

	this->ProcessEvent ( pFnGetWeaponDebug, &GetWeaponDebug_Parms, NULL );

	if ( DebugInfo )
		memcpy ( DebugInfo, &GetWeaponDebug_Parms.DebugInfo, 0xC );
};

// Function SFXGame.SFXWeapon.DrawDebugShot
// [0x00020100] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 EndLocation                    ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::DrawDebugShot ( struct FVector StartLocation, struct FVector EndLocation )
{
	static UFunction* pFnDrawDebugShot = NULL;

	if ( ! pFnDrawDebugShot )
		pFnDrawDebugShot = (UFunction*) UObject::GObjObjects()->Data[ 76096 ];

	ASFXWeapon_Pistol_Predator_execDrawDebugShot_Parms DrawDebugShot_Parms;
	memcpy ( &DrawDebugShot_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DrawDebugShot_Parms.EndLocation, &EndLocation, 0xC );

	this->ProcessEvent ( pFnDrawDebugShot, &DrawDebugShot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetAmmoPowerHologramEnabled
// [0x00024102] 
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )
// unsigned long                  bForceEnabled                  ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::SetAmmoPowerHologramEnabled ( unsigned long bEnabled, unsigned long bForceEnabled )
{
	static UFunction* pFnSetAmmoPowerHologramEnabled = NULL;

	if ( ! pFnSetAmmoPowerHologramEnabled )
		pFnSetAmmoPowerHologramEnabled = (UFunction*) UObject::GObjObjects()->Data[ 76092 ];

	ASFXWeapon_Pistol_Predator_execSetAmmoPowerHologramEnabled_Parms SetAmmoPowerHologramEnabled_Parms;
	SetAmmoPowerHologramEnabled_Parms.bEnabled = bEnabled;
	SetAmmoPowerHologramEnabled_Parms.bForceEnabled = bForceEnabled;

	this->ProcessEvent ( pFnSetAmmoPowerHologramEnabled, &SetAmmoPowerHologramEnabled_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetAmmoPowerHologramTemplates
// [0x00020102] 
// Parameters infos:
// class UParticleSystem*         Template                       ( CPF_Parm )
// class UParticleSystem*         IconTemplate                   ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SetAmmoPowerHologramTemplates ( class UParticleSystem* Template, class UParticleSystem* IconTemplate )
{
	static UFunction* pFnSetAmmoPowerHologramTemplates = NULL;

	if ( ! pFnSetAmmoPowerHologramTemplates )
		pFnSetAmmoPowerHologramTemplates = (UFunction*) UObject::GObjObjects()->Data[ 76089 ];

	ASFXWeapon_Pistol_Predator_execSetAmmoPowerHologramTemplates_Parms SetAmmoPowerHologramTemplates_Parms;
	SetAmmoPowerHologramTemplates_Parms.Template = Template;
	SetAmmoPowerHologramTemplates_Parms.IconTemplate = IconTemplate;

	this->ProcessEvent ( pFnSetAmmoPowerHologramTemplates, &SetAmmoPowerHologramTemplates_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXWeapon_Pistol_Predator::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 76088 ];

	ASFXWeapon_Pistol_Predator_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HolderDied
// [0x00020002] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::HolderDied ( )
{
	static UFunction* pFnHolderDied = NULL;

	if ( ! pFnHolderDied )
		pFnHolderDied = (UFunction*) UObject::GObjObjects()->Data[ 76087 ];

	ASFXWeapon_Pistol_Predator_execHolderDied_Parms HolderDied_Parms;

	this->ProcessEvent ( pFnHolderDied, &HolderDied_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = (UFunction*) UObject::GObjObjects()->Data[ 76074 ];

	ASFXWeapon_Pistol_Predator_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ClientWeaponThrown
// [0x010201C2] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::ClientWeaponThrown ( )
{
	static UFunction* pFnClientWeaponThrown = NULL;

	if ( ! pFnClientWeaponThrown )
		pFnClientWeaponThrown = (UFunction*) UObject::GObjObjects()->Data[ 76072 ];

	ASFXWeapon_Pistol_Predator_execClientWeaponThrown_Parms ClientWeaponThrown_Parms;

	this->ProcessEvent ( pFnClientWeaponThrown, &ClientWeaponThrown_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CanThrow
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::CanThrow ( )
{
	static UFunction* pFnCanThrow = NULL;

	if ( ! pFnCanThrow )
		pFnCanThrow = (UFunction*) UObject::GObjObjects()->Data[ 76070 ];

	ASFXWeapon_Pistol_Predator_execCanThrow_Parms CanThrow_Parms;

	this->ProcessEvent ( pFnCanThrow, &CanThrow_Parms, NULL );

	return CanThrow_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.DetachWeapon
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = (UFunction*) UObject::GObjObjects()->Data[ 76068 ];

	ASFXWeapon_Pistol_Predator_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AttachMuzzleEffectsComponents
// [0x00024102] 
// Parameters infos:
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )
// struct FName                   MuzzleSocket                   ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CasingSocket                   ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::AttachMuzzleEffectsComponents ( class USkeletalMeshComponent* SkelMesh, struct FName MuzzleSocket, struct FName CasingSocket )
{
	static UFunction* pFnAttachMuzzleEffectsComponents = NULL;

	if ( ! pFnAttachMuzzleEffectsComponents )
		pFnAttachMuzzleEffectsComponents = (UFunction*) UObject::GObjObjects()->Data[ 76064 ];

	ASFXWeapon_Pistol_Predator_execAttachMuzzleEffectsComponents_Parms AttachMuzzleEffectsComponents_Parms;
	AttachMuzzleEffectsComponents_Parms.SkelMesh = SkelMesh;
	memcpy ( &AttachMuzzleEffectsComponents_Parms.MuzzleSocket, &MuzzleSocket, 0x8 );
	memcpy ( &AttachMuzzleEffectsComponents_Parms.CasingSocket, &CasingSocket, 0x8 );

	this->ProcessEvent ( pFnAttachMuzzleEffectsComponents, &AttachMuzzleEffectsComponents_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AttachWeaponTo
// [0x00024102] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm | CPF_EditInline )
// struct FName                   SocketName                     ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = (UFunction*) UObject::GObjObjects()->Data[ 76057 ];

	ASFXWeapon_Pistol_Predator_execAttachWeaponTo_Parms AttachWeaponTo_Parms;
	AttachWeaponTo_Parms.MeshCpnt = MeshCpnt;
	memcpy ( &AttachWeaponTo_Parms.SocketName, &SocketName, 0x8 );

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Internal_AssignToSlot
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::Internal_AssignToSlot ( )
{
	static UFunction* pFnInternal_AssignToSlot = NULL;

	if ( ! pFnInternal_AssignToSlot )
		pFnInternal_AssignToSlot = (UFunction*) UObject::GObjObjects()->Data[ 76055 ];

	ASFXWeapon_Pistol_Predator_execInternal_AssignToSlot_Parms Internal_AssignToSlot_Parms;

	this->ProcessEvent ( pFnInternal_AssignToSlot, &Internal_AssignToSlot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AssignToSlot
// [0x00020102] 
// Parameters infos:
// unsigned char                  Slot                           ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::AssignToSlot ( unsigned char Slot )
{
	static UFunction* pFnAssignToSlot = NULL;

	if ( ! pFnAssignToSlot )
		pFnAssignToSlot = (UFunction*) UObject::GObjObjects()->Data[ 76053 ];

	ASFXWeapon_Pistol_Predator_execAssignToSlot_Parms AssignToSlot_Parms;
	AssignToSlot_Parms.Slot = Slot;

	this->ProcessEvent ( pFnAssignToSlot, &AssignToSlot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GivenTo
// [0x00024002] 
// Parameters infos:
// class APawn*                   thisPawn                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 76047 ];

	ASFXWeapon_Pistol_Predator_execGivenTo_Parms GivenTo_Parms;
	GivenTo_Parms.thisPawn = thisPawn;
	GivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EquipTimedOut
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::EquipTimedOut ( )
{
	static UFunction* pFnEquipTimedOut = NULL;

	if ( ! pFnEquipTimedOut )
		pFnEquipTimedOut = (UFunction*) UObject::GObjObjects()->Data[ 76030 ];

	ASFXWeapon_Pistol_Predator_execEquipTimedOut_Parms EquipTimedOut_Parms;

	this->ProcessEvent ( pFnEquipTimedOut, &EquipTimedOut_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EquipFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::EquipFinished ( )
{
	static UFunction* pFnEquipFinished = NULL;

	if ( ! pFnEquipFinished )
		pFnEquipFinished = (UFunction*) UObject::GObjObjects()->Data[ 76029 ];

	ASFXWeapon_Pistol_Predator_execEquipFinished_Parms EquipFinished_Parms;

	this->ProcessEvent ( pFnEquipFinished, &EquipFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EquipNearFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::EquipNearFinished ( )
{
	static UFunction* pFnEquipNearFinished = NULL;

	if ( ! pFnEquipNearFinished )
		pFnEquipNearFinished = (UFunction*) UObject::GObjObjects()->Data[ 76028 ];

	ASFXWeapon_Pistol_Predator_execEquipNearFinished_Parms EquipNearFinished_Parms;

	this->ProcessEvent ( pFnEquipNearFinished, &EquipNearFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Collapse
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::Collapse ( )
{
	static UFunction* pFnCollapse = NULL;

	if ( ! pFnCollapse )
		pFnCollapse = (UFunction*) UObject::GObjObjects()->Data[ 76027 ];

	ASFXWeapon_Pistol_Predator_execCollapse_Parms Collapse_Parms;

	this->ProcessEvent ( pFnCollapse, &Collapse_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Expand
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::Expand ( )
{
	static UFunction* pFnExpand = NULL;

	if ( ! pFnExpand )
		pFnExpand = (UFunction*) UObject::GObjObjects()->Data[ 76026 ];

	ASFXWeapon_Pistol_Predator_execExpand_Parms Expand_Parms;

	this->ProcessEvent ( pFnExpand, &Expand_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StopChargeEffects
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::StopChargeEffects ( )
{
	static UFunction* pFnStopChargeEffects = NULL;

	if ( ! pFnStopChargeEffects )
		pFnStopChargeEffects = (UFunction*) UObject::GObjObjects()->Data[ 76022 ];

	ASFXWeapon_Pistol_Predator_execStopChargeEffects_Parms StopChargeEffects_Parms;

	this->ProcessEvent ( pFnStopChargeEffects, &StopChargeEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ShutOffAllEmitters
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::ShutOffAllEmitters ( )
{
	static UFunction* pFnShutOffAllEmitters = NULL;

	if ( ! pFnShutOffAllEmitters )
		pFnShutOffAllEmitters = (UFunction*) UObject::GObjObjects()->Data[ 76018 ];

	ASFXWeapon_Pistol_Predator_execShutOffAllEmitters_Parms ShutOffAllEmitters_Parms;

	this->ProcessEvent ( pFnShutOffAllEmitters, &ShutOffAllEmitters_Parms, NULL );
};

// Function SFXGame.SFXWeapon.UnEquipTimedOut
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::UnEquipTimedOut ( )
{
	static UFunction* pFnUnEquipTimedOut = NULL;

	if ( ! pFnUnEquipTimedOut )
		pFnUnEquipTimedOut = (UFunction*) UObject::GObjObjects()->Data[ 76005 ];

	ASFXWeapon_Pistol_Predator_execUnEquipTimedOut_Parms UnEquipTimedOut_Parms;

	this->ProcessEvent ( pFnUnEquipTimedOut, &UnEquipTimedOut_Parms, NULL );
};

// Function SFXGame.SFXWeapon.UnEquipFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::UnEquipFinished ( )
{
	static UFunction* pFnUnEquipFinished = NULL;

	if ( ! pFnUnEquipFinished )
		pFnUnEquipFinished = (UFunction*) UObject::GObjObjects()->Data[ 76004 ];

	ASFXWeapon_Pistol_Predator_execUnEquipFinished_Parms UnEquipFinished_Parms;

	this->ProcessEvent ( pFnUnEquipFinished, &UnEquipFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ServerCancelReload
// [0x002200C2] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::ServerCancelReload ( )
{
	static UFunction* pFnServerCancelReload = NULL;

	if ( ! pFnServerCancelReload )
		pFnServerCancelReload = (UFunction*) UObject::GObjObjects()->Data[ 75982 ];

	ASFXWeapon_Pistol_Predator_execServerCancelReload_Parms ServerCancelReload_Parms;

	this->ProcessEvent ( pFnServerCancelReload, &ServerCancelReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CancelReload
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::CancelReload ( )
{
	static UFunction* pFnCancelReload = NULL;

	if ( ! pFnCancelReload )
		pFnCancelReload = (UFunction*) UObject::GObjObjects()->Data[ 75981 ];

	ASFXWeapon_Pistol_Predator_execCancelReload_Parms CancelReload_Parms;

	this->ProcessEvent ( pFnCancelReload, &CancelReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DoAReload
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::DoAReload ( )
{
	static UFunction* pFnDoAReload = NULL;

	if ( ! pFnDoAReload )
		pFnDoAReload = (UFunction*) UObject::GObjObjects()->Data[ 75980 ];

	ASFXWeapon_Pistol_Predator_execDoAReload_Parms DoAReload_Parms;

	this->ProcessEvent ( pFnDoAReload, &DoAReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ReloadNearFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::ReloadNearFinished ( )
{
	static UFunction* pFnReloadNearFinished = NULL;

	if ( ! pFnReloadNearFinished )
		pFnReloadNearFinished = (UFunction*) UObject::GObjObjects()->Data[ 75979 ];

	ASFXWeapon_Pistol_Predator_execReloadNearFinished_Parms ReloadNearFinished_Parms;

	this->ProcessEvent ( pFnReloadNearFinished, &ReloadNearFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.NotifyWeaponRefireDelayExpired
// [0x00020002] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::NotifyWeaponRefireDelayExpired ( )
{
	static UFunction* pFnNotifyWeaponRefireDelayExpired = NULL;

	if ( ! pFnNotifyWeaponRefireDelayExpired )
		pFnNotifyWeaponRefireDelayExpired = (UFunction*) UObject::GObjObjects()->Data[ 75978 ];

	ASFXWeapon_Pistol_Predator_execNotifyWeaponRefireDelayExpired_Parms NotifyWeaponRefireDelayExpired_Parms;

	this->ProcessEvent ( pFnNotifyWeaponRefireDelayExpired, &NotifyWeaponRefireDelayExpired_Parms, NULL );
};

// Function SFXGame.SFXWeapon.NotifyWeaponFired
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireMode                       ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::NotifyWeaponFired ( unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFired = NULL;

	if ( ! pFnNotifyWeaponFired )
		pFnNotifyWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 75940 ];

	ASFXWeapon_Pistol_Predator_execNotifyWeaponFired_Parms NotifyWeaponFired_Parms;
	NotifyWeaponFired_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFired, &NotifyWeaponFired_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HandleFinishedFiring
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::HandleFinishedFiring ( )
{
	static UFunction* pFnHandleFinishedFiring = NULL;

	if ( ! pFnHandleFinishedFiring )
		pFnHandleFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 75975 ];

	ASFXWeapon_Pistol_Predator_execHandleFinishedFiring_Parms HandleFinishedFiring_Parms;

	this->ProcessEvent ( pFnHandleFinishedFiring, &HandleFinishedFiring_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ShouldRefire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = (UFunction*) UObject::GObjObjects()->Data[ 75972 ];

	ASFXWeapon_Pistol_Predator_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetBurstsToFire
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_Pistol_Predator::GetBurstsToFire ( )
{
	static UFunction* pFnGetBurstsToFire = NULL;

	if ( ! pFnGetBurstsToFire )
		pFnGetBurstsToFire = (UFunction*) UObject::GObjObjects()->Data[ 45634 ];

	ASFXWeapon_Pistol_Predator_execGetBurstsToFire_Parms GetBurstsToFire_Parms;

	this->ProcessEvent ( pFnGetBurstsToFire, &GetBurstsToFire_Parms, NULL );

	return GetBurstsToFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetBurstFireCount
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_Pistol_Predator::GetBurstFireCount ( )
{
	static UFunction* pFnGetBurstFireCount = NULL;

	if ( ! pFnGetBurstFireCount )
		pFnGetBurstFireCount = (UFunction*) UObject::GObjObjects()->Data[ 75967 ];

	ASFXWeapon_Pistol_Predator_execGetBurstFireCount_Parms GetBurstFireCount_Parms;

	this->ProcessEvent ( pFnGetBurstFireCount, &GetBurstFireCount_Parms, NULL );

	return GetBurstFireCount_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SetupWeaponFire
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SetupWeaponFire ( unsigned char FireModeNum )
{
	static UFunction* pFnSetupWeaponFire = NULL;

	if ( ! pFnSetupWeaponFire )
		pFnSetupWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 75965 ];

	ASFXWeapon_Pistol_Predator_execSetupWeaponFire_Parms SetupWeaponFire_Parms;
	SetupWeaponFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnSetupWeaponFire, &SetupWeaponFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ServerStopFire
// [0x002200C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::ServerStopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnServerStopFire = NULL;

	if ( ! pFnServerStopFire )
		pFnServerStopFire = (UFunction*) UObject::GObjObjects()->Data[ 75963 ];

	ASFXWeapon_Pistol_Predator_execServerStopFire_Parms ServerStopFire_Parms;
	ServerStopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerStopFire, &ServerStopFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EndFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 75931 ];

	ASFXWeapon_Pistol_Predator_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SelectTarget
// [0x00020102] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ASFXWeapon_Pistol_Predator::SelectTarget ( )
{
	static UFunction* pFnSelectTarget = NULL;

	if ( ! pFnSelectTarget )
		pFnSelectTarget = (UFunction*) UObject::GObjObjects()->Data[ 75960 ];

	ASFXWeapon_Pistol_Predator_execSelectTarget_Parms SelectTarget_Parms;

	this->ProcessEvent ( pFnSelectTarget, &SelectTarget_Parms, NULL );

	return SelectTarget_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 75958 ];

	ASFXWeapon_Pistol_Predator_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CanFire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::CanFire ( )
{
	static UFunction* pFnCanFire = NULL;

	if ( ! pFnCanFire )
		pFnCanFire = (UFunction*) UObject::GObjObjects()->Data[ 75944 ];

	ASFXWeapon_Pistol_Predator_execCanFire_Parms CanFire_Parms;

	this->ProcessEvent ( pFnCanFire, &CanFire_Parms, NULL );

	return CanFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.StartFullChargeRumble
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::StartFullChargeRumble ( )
{
	static UFunction* pFnStartFullChargeRumble = NULL;

	if ( ! pFnStartFullChargeRumble )
		pFnStartFullChargeRumble = (UFunction*) UObject::GObjObjects()->Data[ 75920 ];

	ASFXWeapon_Pistol_Predator_execStartFullChargeRumble_Parms StartFullChargeRumble_Parms;

	this->ProcessEvent ( pFnStartFullChargeRumble, &StartFullChargeRumble_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StartChargeEffects
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::StartChargeEffects ( )
{
	static UFunction* pFnStartChargeEffects = NULL;

	if ( ! pFnStartChargeEffects )
		pFnStartChargeEffects = (UFunction*) UObject::GObjObjects()->Data[ 75913 ];

	ASFXWeapon_Pistol_Predator_execStartChargeEffects_Parms StartChargeEffects_Parms;

	this->ProcessEvent ( pFnStartChargeEffects, &StartChargeEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IsChargingWeapon
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::IsChargingWeapon ( )
{
	static UFunction* pFnIsChargingWeapon = NULL;

	if ( ! pFnIsChargingWeapon )
		pFnIsChargingWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75817 ];

	ASFXWeapon_Pistol_Predator_execIsChargingWeapon_Parms IsChargingWeapon_Parms;

	this->ProcessEvent ( pFnIsChargingWeapon, &IsChargingWeapon_Parms, NULL );

	return IsChargingWeapon_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ServerFireChargedShot
// [0x002200C0] 
// Parameters infos:
// float                          SentChargeAmount               ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::ServerFireChargedShot ( float SentChargeAmount )
{
	static UFunction* pFnServerFireChargedShot = NULL;

	if ( ! pFnServerFireChargedShot )
		pFnServerFireChargedShot = (UFunction*) UObject::GObjObjects()->Data[ 75812 ];

	ASFXWeapon_Pistol_Predator_execServerFireChargedShot_Parms ServerFireChargedShot_Parms;
	ServerFireChargedShot_Parms.SentChargeAmount = SentChargeAmount;

	this->ProcessEvent ( pFnServerFireChargedShot, &ServerFireChargedShot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayNoAmmoFireSound
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::PlayNoAmmoFireSound ( )
{
	static UFunction* pFnPlayNoAmmoFireSound = NULL;

	if ( ! pFnPlayNoAmmoFireSound )
		pFnPlayNoAmmoFireSound = (UFunction*) UObject::GObjObjects()->Data[ 75806 ];

	ASFXWeapon_Pistol_Predator_execPlayNoAmmoFireSound_Parms PlayNoAmmoFireSound_Parms;

	this->ProcessEvent ( pFnPlayNoAmmoFireSound, &PlayNoAmmoFireSound_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayNoAmmoEffects
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::PlayNoAmmoEffects ( )
{
	static UFunction* pFnPlayNoAmmoEffects = NULL;

	if ( ! pFnPlayNoAmmoEffects )
		pFnPlayNoAmmoEffects = (UFunction*) UObject::GObjObjects()->Data[ 75774 ];

	ASFXWeapon_Pistol_Predator_execPlayNoAmmoEffects_Parms PlayNoAmmoEffects_Parms;

	this->ProcessEvent ( pFnPlayNoAmmoEffects, &PlayNoAmmoEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.TryReload
// [0x00024102] 
// Parameters infos:
// unsigned long                  bDisplayHint                   ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::TryReload ( unsigned long bDisplayHint )
{
	static UFunction* pFnTryReload = NULL;

	if ( ! pFnTryReload )
		pFnTryReload = (UFunction*) UObject::GObjObjects()->Data[ 75771 ];

	ASFXWeapon_Pistol_Predator_execTryReload_Parms TryReload_Parms;
	TryReload_Parms.bDisplayHint = bDisplayHint;

	this->ProcessEvent ( pFnTryReload, &TryReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DoReload
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::DoReload ( )
{
	static UFunction* pFnDoReload = NULL;

	if ( ! pFnDoReload )
		pFnDoReload = (UFunction*) UObject::GObjObjects()->Data[ 75767 ];

	ASFXWeapon_Pistol_Predator_execDoReload_Parms DoReload_Parms;

	this->ProcessEvent ( pFnDoReload, &DoReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetAmmoRestoredPerReload
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_Pistol_Predator::GetAmmoRestoredPerReload ( )
{
	static UFunction* pFnGetAmmoRestoredPerReload = NULL;

	if ( ! pFnGetAmmoRestoredPerReload )
		pFnGetAmmoRestoredPerReload = (UFunction*) UObject::GObjObjects()->Data[ 75765 ];

	ASFXWeapon_Pistol_Predator_execGetAmmoRestoredPerReload_Parms GetAmmoRestoredPerReload_Parms;

	this->ProcessEvent ( pFnGetAmmoRestoredPerReload, &GetAmmoRestoredPerReload_Parms, NULL );

	return GetAmmoRestoredPerReload_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetReloadDuration
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_Pistol_Predator::GetReloadDuration ( )
{
	static UFunction* pFnGetReloadDuration = NULL;

	if ( ! pFnGetReloadDuration )
		pFnGetReloadDuration = (UFunction*) UObject::GObjObjects()->Data[ 41736 ];

	ASFXWeapon_Pistol_Predator_execGetReloadDuration_Parms GetReloadDuration_Parms;

	this->ProcessEvent ( pFnGetReloadDuration, &GetReloadDuration_Parms, NULL );

	return GetReloadDuration_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ShouldAutoReload
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = (UFunction*) UObject::GObjObjects()->Data[ 75763 ];

	ASFXWeapon_Pistol_Predator_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );

	return ShouldAutoReload_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.CanReload
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::CanReload ( )
{
	static UFunction* pFnCanReload = NULL;

	if ( ! pFnCanReload )
		pFnCanReload = (UFunction*) UObject::GObjObjects()->Data[ 55519 ];

	ASFXWeapon_Pistol_Predator_execCanReload_Parms CanReload_Parms;

	this->ProcessEvent ( pFnCanReload, &CanReload_Parms, NULL );

	return CanReload_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.EffectIsRelevant
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool ASFXWeapon_Pistol_Predator::EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance )
{
	static UFunction* pFnEffectIsRelevant = NULL;

	if ( ! pFnEffectIsRelevant )
		pFnEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 75756 ];

	ASFXWeapon_Pistol_Predator_execEffectIsRelevant_Parms EffectIsRelevant_Parms;
	memcpy ( &EffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	EffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	EffectIsRelevant_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnEffectIsRelevant, &EffectIsRelevant_Parms, NULL );

	return EffectIsRelevant_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayReloadEject
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::PlayReloadEject ( )
{
	static UFunction* pFnPlayReloadEject = NULL;

	if ( ! pFnPlayReloadEject )
		pFnPlayReloadEject = (UFunction*) UObject::GObjObjects()->Data[ 75753 ];

	ASFXWeapon_Pistol_Predator_execPlayReloadEject_Parms PlayReloadEject_Parms;

	this->ProcessEvent ( pFnPlayReloadEject, &PlayReloadEject_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StopFireEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::StopFireEffects ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFireEffects = NULL;

	if ( ! pFnStopFireEffects )
		pFnStopFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 75750 ];

	ASFXWeapon_Pistol_Predator_execStopFireEffects_Parms StopFireEffects_Parms;
	StopFireEffects_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFireEffects, &StopFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HearNoiseTimer
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::HearNoiseTimer ( )
{
	static UFunction* pFnHearNoiseTimer = NULL;

	if ( ! pFnHearNoiseTimer )
		pFnHearNoiseTimer = (UFunction*) UObject::GObjObjects()->Data[ 75749 ];

	ASFXWeapon_Pistol_Predator_execHearNoiseTimer_Parms HearNoiseTimer_Parms;

	this->ProcessEvent ( pFnHearNoiseTimer, &HearNoiseTimer_Parms, NULL );
};

// Function SFXGame.SFXWeapon.WeaponPlayWwiseEvent
// [0x00024102] 
// Parameters infos:
// class UWwiseEvent*             Sound                          ( CPF_Parm )
// float                          NoiseLoudness                  ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SoundLoc                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::WeaponPlayWwiseEvent ( class UWwiseEvent* Sound, float NoiseLoudness, struct FVector SoundLoc, struct FName NoiseType )
{
	static UFunction* pFnWeaponPlayWwiseEvent = NULL;

	if ( ! pFnWeaponPlayWwiseEvent )
		pFnWeaponPlayWwiseEvent = (UFunction*) UObject::GObjObjects()->Data[ 75743 ];

	ASFXWeapon_Pistol_Predator_execWeaponPlayWwiseEvent_Parms WeaponPlayWwiseEvent_Parms;
	WeaponPlayWwiseEvent_Parms.Sound = Sound;
	WeaponPlayWwiseEvent_Parms.NoiseLoudness = NoiseLoudness;
	memcpy ( &WeaponPlayWwiseEvent_Parms.SoundLoc, &SoundLoc, 0xC );
	memcpy ( &WeaponPlayWwiseEvent_Parms.NoiseType, &NoiseType, 0x8 );

	this->ProcessEvent ( pFnWeaponPlayWwiseEvent, &WeaponPlayWwiseEvent_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SpawnTracerEffect
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          HitDistance                    ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SpawnTracerEffect ( struct FVector HitLocation, float HitDistance )
{
	static UFunction* pFnSpawnTracerEffect = NULL;

	if ( ! pFnSpawnTracerEffect )
		pFnSpawnTracerEffect = (UFunction*) UObject::GObjObjects()->Data[ 75739 ];

	ASFXWeapon_Pistol_Predator_execSpawnTracerEffect_Parms SpawnTracerEffect_Parms;
	memcpy ( &SpawnTracerEffect_Parms.HitLocation, &HitLocation, 0xC );
	SpawnTracerEffect_Parms.HitDistance = HitDistance;

	this->ProcessEvent ( pFnSpawnTracerEffect, &SpawnTracerEffect_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ShouldSpawnTracerFX
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::ShouldSpawnTracerFX ( )
{
	static UFunction* pFnShouldSpawnTracerFX = NULL;

	if ( ! pFnShouldSpawnTracerFX )
		pFnShouldSpawnTracerFX = (UFunction*) UObject::GObjObjects()->Data[ 75737 ];

	ASFXWeapon_Pistol_Predator_execShouldSpawnTracerFX_Parms ShouldSpawnTracerFX_Parms;

	this->ProcessEvent ( pFnShouldSpawnTracerFX, &ShouldSpawnTracerFX_Parms, NULL );

	return ShouldSpawnTracerFX_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayOwnedFireEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::PlayOwnedFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayOwnedFireEffects = NULL;

	if ( ! pFnPlayOwnedFireEffects )
		pFnPlayOwnedFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 75730 ];

	ASFXWeapon_Pistol_Predator_execPlayOwnedFireEffects_Parms PlayOwnedFireEffects_Parms;
	PlayOwnedFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayOwnedFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayOwnedFireEffects, &PlayOwnedFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HideReloadEmitters
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::HideReloadEmitters ( )
{
	static UFunction* pFnHideReloadEmitters = NULL;

	if ( ! pFnHideReloadEmitters )
		pFnHideReloadEmitters = (UFunction*) UObject::GObjObjects()->Data[ 75728 ];

	ASFXWeapon_Pistol_Predator_execHideReloadEmitters_Parms HideReloadEmitters_Parms;

	this->ProcessEvent ( pFnHideReloadEmitters, &HideReloadEmitters_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HideMuzzleFlashEmitter
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::HideMuzzleFlashEmitter ( )
{
	static UFunction* pFnHideMuzzleFlashEmitter = NULL;

	if ( ! pFnHideMuzzleFlashEmitter )
		pFnHideMuzzleFlashEmitter = (UFunction*) UObject::GObjObjects()->Data[ 75727 ];

	ASFXWeapon_Pistol_Predator_execHideMuzzleFlashEmitter_Parms HideMuzzleFlashEmitter_Parms;

	this->ProcessEvent ( pFnHideMuzzleFlashEmitter, &HideMuzzleFlashEmitter_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StopMuzzleFlashEffect
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::StopMuzzleFlashEffect ( )
{
	static UFunction* pFnStopMuzzleFlashEffect = NULL;

	if ( ! pFnStopMuzzleFlashEffect )
		pFnStopMuzzleFlashEffect = (UFunction*) UObject::GObjObjects()->Data[ 75723 ];

	ASFXWeapon_Pistol_Predator_execStopMuzzleFlashEffect_Parms StopMuzzleFlashEffect_Parms;

	this->ProcessEvent ( pFnStopMuzzleFlashEffect, &StopMuzzleFlashEffect_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IsCameraWithinRadius
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

bool ASFXWeapon_Pistol_Predator::IsCameraWithinRadius ( struct FVector TestLocation, float Radius )
{
	static UFunction* pFnIsCameraWithinRadius = NULL;

	if ( ! pFnIsCameraWithinRadius )
		pFnIsCameraWithinRadius = (UFunction*) UObject::GObjObjects()->Data[ 75716 ];

	ASFXWeapon_Pistol_Predator_execIsCameraWithinRadius_Parms IsCameraWithinRadius_Parms;
	memcpy ( &IsCameraWithinRadius_Parms.TestLocation, &TestLocation, 0xC );
	IsCameraWithinRadius_Parms.Radius = Radius;

	this->ProcessEvent ( pFnIsCameraWithinRadius, &IsCameraWithinRadius_Parms, NULL );

	return IsCameraWithinRadius_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsMuzzleFlashRelevant
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::IsMuzzleFlashRelevant ( )
{
	static UFunction* pFnIsMuzzleFlashRelevant = NULL;

	if ( ! pFnIsMuzzleFlashRelevant )
		pFnIsMuzzleFlashRelevant = (UFunction*) UObject::GObjObjects()->Data[ 75714 ];

	ASFXWeapon_Pistol_Predator_execIsMuzzleFlashRelevant_Parms IsMuzzleFlashRelevant_Parms;

	this->ProcessEvent ( pFnIsMuzzleFlashRelevant, &IsMuzzleFlashRelevant_Parms, NULL );

	return IsMuzzleFlashRelevant_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayMuzzleFlashEffect
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::PlayMuzzleFlashEffect ( )
{
	static UFunction* pFnPlayMuzzleFlashEffect = NULL;

	if ( ! pFnPlayMuzzleFlashEffect )
		pFnPlayMuzzleFlashEffect = (UFunction*) UObject::GObjObjects()->Data[ 75710 ];

	ASFXWeapon_Pistol_Predator_execPlayMuzzleFlashEffect_Parms PlayMuzzleFlashEffect_Parms;

	this->ProcessEvent ( pFnPlayMuzzleFlashEffect, &PlayMuzzleFlashEffect_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayFireEffects
// [0x00024102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 75704 ];

	ASFXWeapon_Pistol_Predator_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DummyFireTimerFunction
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::DummyFireTimerFunction ( )
{
	static UFunction* pFnDummyFireTimerFunction = NULL;

	if ( ! pFnDummyFireTimerFunction )
		pFnDummyFireTimerFunction = (UFunction*) UObject::GObjObjects()->Data[ 75699 ];

	ASFXWeapon_Pistol_Predator_execDummyFireTimerFunction_Parms DummyFireTimerFunction_Parms;

	this->ProcessEvent ( pFnDummyFireTimerFunction, &DummyFireTimerFunction_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DummyFireNumTimes
// [0x00024102] 
// Parameters infos:
// int                            nNumTimes                      ( CPF_Parm )
// struct FVector                 vHitLocation                   ( CPF_Parm )
// class AActor*                  AttachedTo                     ( CPF_OptionalParm | CPF_Parm )
// float                          fInaccuracy                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::DummyFireNumTimes ( int nNumTimes, struct FVector vHitLocation, class AActor* AttachedTo, float fInaccuracy, class AActor* TargetActor )
{
	static UFunction* pFnDummyFireNumTimes = NULL;

	if ( ! pFnDummyFireNumTimes )
		pFnDummyFireNumTimes = (UFunction*) UObject::GObjObjects()->Data[ 75692 ];

	ASFXWeapon_Pistol_Predator_execDummyFireNumTimes_Parms DummyFireNumTimes_Parms;
	DummyFireNumTimes_Parms.nNumTimes = nNumTimes;
	memcpy ( &DummyFireNumTimes_Parms.vHitLocation, &vHitLocation, 0xC );
	DummyFireNumTimes_Parms.AttachedTo = AttachedTo;
	DummyFireNumTimes_Parms.fInaccuracy = fInaccuracy;
	DummyFireNumTimes_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnDummyFireNumTimes, &DummyFireNumTimes_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CheckTimerFireOnce
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::CheckTimerFireOnce ( )
{
	static UFunction* pFnCheckTimerFireOnce = NULL;

	if ( ! pFnCheckTimerFireOnce )
		pFnCheckTimerFireOnce = (UFunction*) UObject::GObjObjects()->Data[ 75691 ];

	ASFXWeapon_Pistol_Predator_execCheckTimerFireOnce_Parms CheckTimerFireOnce_Parms;

	this->ProcessEvent ( pFnCheckTimerFireOnce, &CheckTimerFireOnce_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayFireEffectsOnce
// [0x00024102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::PlayFireEffectsOnce ( struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffectsOnce = NULL;

	if ( ! pFnPlayFireEffectsOnce )
		pFnPlayFireEffectsOnce = (UFunction*) UObject::GObjObjects()->Data[ 75688 ];

	ASFXWeapon_Pistol_Predator_execPlayFireEffectsOnce_Parms PlayFireEffectsOnce_Parms;
	memcpy ( &PlayFireEffectsOnce_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffectsOnce, &PlayFireEffectsOnce_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PrecacheVFX
// [0x00022102] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 75678 ];

	ASFXWeapon_Pistol_Predator_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponSpecificDecalData
// [0x00420100] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USFXPhysicalMaterialDecals* DecalEffects                   ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm | CPF_OutParm )

class UDecalComponent* ASFXWeapon_Pistol_Predator::GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime )
{
	static UFunction* pFnGetWeaponSpecificDecalData = NULL;

	if ( ! pFnGetWeaponSpecificDecalData )
		pFnGetWeaponSpecificDecalData = (UFunction*) UObject::GObjObjects()->Data[ 75673 ];

	ASFXWeapon_Pistol_Predator_execGetWeaponSpecificDecalData_Parms GetWeaponSpecificDecalData_Parms;
	GetWeaponSpecificDecalData_Parms.DecalEffects = DecalEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificDecalData, &GetWeaponSpecificDecalData_Parms, NULL );

	if ( FadeTime )
		*FadeTime = GetWeaponSpecificDecalData_Parms.FadeTime;

	return GetWeaponSpecificDecalData_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetDecalData
// [0x00420102] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm | CPF_OutParm )

class UDecalComponent* ASFXWeapon_Pistol_Predator::GetDecalData ( class UPhysicalMaterial* PhysMat, float* FadeTime )
{
	static UFunction* pFnGetDecalData = NULL;

	if ( ! pFnGetDecalData )
		pFnGetDecalData = (UFunction*) UObject::GObjObjects()->Data[ 75667 ];

	ASFXWeapon_Pistol_Predator_execGetDecalData_Parms GetDecalData_Parms;
	GetDecalData_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetDecalData, &GetDecalData_Parms, NULL );

	if ( FadeTime )
		*FadeTime = GetDecalData_Parms.FadeTime;

	return GetDecalData_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SpawnADecal
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SpawnADecal ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnADecal = NULL;

	if ( ! pFnSpawnADecal )
		pFnSpawnADecal = (UFunction*) UObject::GObjObjects()->Data[ 75661 ];

	ASFXWeapon_Pistol_Predator_execSpawnADecal_Parms SpawnADecal_Parms;
	memcpy ( &SpawnADecal_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnSpawnADecal, &SpawnADecal_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponSpecificImpactSound
// [0x00020100] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactSounds* ImpactSounds                   ( CPF_Parm )

class UWwiseEvent* ASFXWeapon_Pistol_Predator::GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds )
{
	static UFunction* pFnGetWeaponSpecificImpactSound = NULL;

	if ( ! pFnGetWeaponSpecificImpactSound )
		pFnGetWeaponSpecificImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 75657 ];

	ASFXWeapon_Pistol_Predator_execGetWeaponSpecificImpactSound_Parms GetWeaponSpecificImpactSound_Parms;
	GetWeaponSpecificImpactSound_Parms.ImpactSounds = ImpactSounds;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactSound, &GetWeaponSpecificImpactSound_Parms, NULL );

	return GetWeaponSpecificImpactSound_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetImpactSound
// [0x00020102] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )

class UWwiseEvent* ASFXWeapon_Pistol_Predator::GetImpactSound ( class UPhysicalMaterial* PhysMat )
{
	static UFunction* pFnGetImpactSound = NULL;

	if ( ! pFnGetImpactSound )
		pFnGetImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 75652 ];

	ASFXWeapon_Pistol_Predator_execGetImpactSound_Parms GetImpactSound_Parms;
	GetImpactSound_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetImpactSound, &GetImpactSound_Parms, NULL );

	return GetImpactSound_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SpawnImpactSounds
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SpawnImpactSounds ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnImpactSounds = NULL;

	if ( ! pFnSpawnImpactSounds )
		pFnSpawnImpactSounds = (UFunction*) UObject::GObjObjects()->Data[ 75647 ];

	ASFXWeapon_Pistol_Predator_execSpawnImpactSounds_Parms SpawnImpactSounds_Parms;
	memcpy ( &SpawnImpactSounds_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnSpawnImpactSounds, &SpawnImpactSounds_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponSpecificImpactEffect
// [0x00022100] 
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactEffects* ImpactEffects                  ( CPF_Parm )

class UParticleSystem* ASFXWeapon_Pistol_Predator::GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects )
{
	static UFunction* pFnGetWeaponSpecificImpactEffect = NULL;

	if ( ! pFnGetWeaponSpecificImpactEffect )
		pFnGetWeaponSpecificImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 75643 ];

	ASFXWeapon_Pistol_Predator_execGetWeaponSpecificImpactEffect_Parms GetWeaponSpecificImpactEffect_Parms;
	GetWeaponSpecificImpactEffect_Parms.ImpactEffects = ImpactEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactEffect, &GetWeaponSpecificImpactEffect_Parms, NULL );

	return GetWeaponSpecificImpactEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetImpactEffect
// [0x00022102] 
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )

class UParticleSystem* ASFXWeapon_Pistol_Predator::GetImpactEffect ( class UPhysicalMaterial* PhysMat )
{
	static UFunction* pFnGetImpactEffect = NULL;

	if ( ! pFnGetImpactEffect )
		pFnGetImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 75638 ];

	ASFXWeapon_Pistol_Predator_execGetImpactEffect_Parms GetImpactEffect_Parms;
	GetImpactEffect_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetImpactEffect, &GetImpactEffect_Parms, NULL );

	return GetImpactEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SpawnImpactEffects
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SpawnImpactEffects ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnImpactEffects = NULL;

	if ( ! pFnSpawnImpactEffects )
		pFnSpawnImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 75630 ];

	ASFXWeapon_Pistol_Predator_execSpawnImpactEffects_Parms SpawnImpactEffects_Parms;
	memcpy ( &SpawnImpactEffects_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnSpawnImpactEffects, &SpawnImpactEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ReplicateImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                ImpactedPawn                   ( CPF_Parm )
// class ASFXProjectile*          InProjectile                   ( CPF_OptionalParm | CPF_Parm )
// float                          fDelay                         ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::ReplicateImpact ( class ABioPawn* ImpactedPawn, class ASFXProjectile* InProjectile, float fDelay )
{
	static UFunction* pFnReplicateImpact = NULL;

	if ( ! pFnReplicateImpact )
		pFnReplicateImpact = (UFunction*) UObject::GObjObjects()->Data[ 75625 ];

	ASFXWeapon_Pistol_Predator_execReplicateImpact_Parms ReplicateImpact_Parms;
	ReplicateImpact_Parms.ImpactedPawn = ImpactedPawn;
	ReplicateImpact_Parms.InProjectile = InProjectile;
	ReplicateImpact_Parms.fDelay = fDelay;

	this->ProcessEvent ( pFnReplicateImpact, &ReplicateImpact_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ClientDoImpact
// [0x00020102] 
// Parameters infos:
// class ABioPawn*                InImpactedPawn                 ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::ClientDoImpact ( class ABioPawn* InImpactedPawn )
{
	static UFunction* pFnClientDoImpact = NULL;

	if ( ! pFnClientDoImpact )
		pFnClientDoImpact = (UFunction*) UObject::GObjObjects()->Data[ 75623 ];

	ASFXWeapon_Pistol_Predator_execClientDoImpact_Parms ClientDoImpact_Parms;
	ClientDoImpact_Parms.InImpactedPawn = InImpactedPawn;

	this->ProcessEvent ( pFnClientDoImpact, &ClientDoImpact_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProcessInstantHit_Internal
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::ProcessInstantHit_Internal ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit_Internal = NULL;

	if ( ! pFnProcessInstantHit_Internal )
		pFnProcessInstantHit_Internal = (UFunction*) UObject::GObjObjects()->Data[ 75611 ];

	ASFXWeapon_Pistol_Predator_execProcessInstantHit_Internal_Parms ProcessInstantHit_Internal_Parms;
	ProcessInstantHit_Internal_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Internal_Parms.Impact, &Impact, 0x54 );
	ProcessInstantHit_Internal_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit_Internal, &ProcessInstantHit_Internal_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProcessInstantHitNearMiss
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::ProcessInstantHitNearMiss ( struct FVector StartTrace, struct FVector HitLocation )
{
	static UFunction* pFnProcessInstantHitNearMiss = NULL;

	if ( ! pFnProcessInstantHitNearMiss )
		pFnProcessInstantHitNearMiss = (UFunction*) UObject::GObjObjects()->Data[ 75603 ];

	ASFXWeapon_Pistol_Predator_execProcessInstantHitNearMiss_Parms ProcessInstantHitNearMiss_Parms;
	memcpy ( &ProcessInstantHitNearMiss_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &ProcessInstantHitNearMiss_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnProcessInstantHitNearMiss, &ProcessInstantHitNearMiss_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ServerProcessInstantHit
// [0x002240C2] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            HitArmourIdx                   ( CPF_Parm )
// unsigned long                  bSuppressedAudio               ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::ServerProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int HitArmourIdx, unsigned long bSuppressedAudio, int NumHits )
{
	static UFunction* pFnServerProcessInstantHit = NULL;

	if ( ! pFnServerProcessInstantHit )
		pFnServerProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 75581 ];

	ASFXWeapon_Pistol_Predator_execServerProcessInstantHit_Parms ServerProcessInstantHit_Parms;
	ServerProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ServerProcessInstantHit_Parms.Impact, &Impact, 0x54 );
	ServerProcessInstantHit_Parms.HitArmourIdx = HitArmourIdx;
	ServerProcessInstantHit_Parms.bSuppressedAudio = bSuppressedAudio;
	ServerProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnServerProcessInstantHit, &ServerProcessInstantHit_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Pistol_Predator::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 75572 ];

	ASFXWeapon_Pistol_Predator_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x54 );
	ProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CalcWeaponFire
// [0x00424102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo ASFXWeapon_Pistol_Predator::CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcWeaponFire = NULL;

	if ( ! pFnCalcWeaponFire )
		pFnCalcWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 75560 ];

	ASFXWeapon_Pistol_Predator_execCalcWeaponFire_Parms CalcWeaponFire_Parms;
	memcpy ( &CalcWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.EndTrace, &EndTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnCalcWeaponFire, &CalcWeaponFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcWeaponFire_Parms.ImpactList, 0xC );

	return CalcWeaponFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.InstantFire
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::InstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 75552 ];

	ASFXWeapon_Pistol_Predator_execInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetAmmoCountInMagazine
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_Pistol_Predator::GetAmmoCountInMagazine ( )
{
	static UFunction* pFnGetAmmoCountInMagazine = NULL;

	if ( ! pFnGetAmmoCountInMagazine )
		pFnGetAmmoCountInMagazine = (UFunction*) UObject::GObjObjects()->Data[ 49970 ];

	ASFXWeapon_Pistol_Predator_execGetAmmoCountInMagazine_Parms GetAmmoCountInMagazine_Parms;

	this->ProcessEvent ( pFnGetAmmoCountInMagazine, &GetAmmoCountInMagazine_Parms, NULL );

	return GetAmmoCountInMagazine_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetLazyFireInterval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float ASFXWeapon_Pistol_Predator::GetLazyFireInterval ( unsigned char FireModeNum )
{
	static UFunction* pFnGetLazyFireInterval = NULL;

	if ( ! pFnGetLazyFireInterval )
		pFnGetLazyFireInterval = (UFunction*) UObject::GObjObjects()->Data[ 75548 ];

	ASFXWeapon_Pistol_Predator_execGetLazyFireInterval_Parms GetLazyFireInterval_Parms;
	GetLazyFireInterval_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetLazyFireInterval, &GetLazyFireInterval_Parms, NULL );

	return GetLazyFireInterval_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetFireInterval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float ASFXWeapon_Pistol_Predator::GetFireInterval ( unsigned char FireModeNum )
{
	static UFunction* pFnGetFireInterval = NULL;

	if ( ! pFnGetFireInterval )
		pFnGetFireInterval = (UFunction*) UObject::GObjObjects()->Data[ 75545 ];

	ASFXWeapon_Pistol_Predator_execGetFireInterval_Parms GetFireInterval_Parms;
	GetFireInterval_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetFireInterval, &GetFireInterval_Parms, NULL );

	return GetFireInterval_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.HasAnyAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49972 ];

	ASFXWeapon_Pistol_Predator_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );

	return HasAnyAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool ASFXWeapon_Pistol_Predator::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 53129 ];

	ASFXWeapon_Pistol_Predator_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.HasSpareAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::HasSpareAmmo ( )
{
	static UFunction* pFnHasSpareAmmo = NULL;

	if ( ! pFnHasSpareAmmo )
		pFnHasSpareAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75540 ];

	ASFXWeapon_Pistol_Predator_execHasSpareAmmo_Parms HasSpareAmmo_Parms;

	this->ProcessEvent ( pFnHasSpareAmmo, &HasSpareAmmo_Parms, NULL );

	return HasSpareAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.AddAmmo
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int ASFXWeapon_Pistol_Predator::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = (UFunction*) UObject::GObjObjects()->Data[ 45207 ];

	ASFXWeapon_Pistol_Predator_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ConsumeAmmo
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75525 ];

	ASFXWeapon_Pistol_Predator_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.InitializeAmmo
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::InitializeAmmo ( )
{
	static UFunction* pFnInitializeAmmo = NULL;

	if ( ! pFnInitializeAmmo )
		pFnInitializeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75524 ];

	ASFXWeapon_Pistol_Predator_execInitializeAmmo_Parms InitializeAmmo_Parms;

	this->ProcessEvent ( pFnInitializeAmmo, &InitializeAmmo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponFireType
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASFXWeapon_Pistol_Predator::GetWeaponFireType ( )
{
	static UFunction* pFnGetWeaponFireType = NULL;

	if ( ! pFnGetWeaponFireType )
		pFnGetWeaponFireType = (UFunction*) UObject::GObjObjects()->Data[ 71104 ];

	ASFXWeapon_Pistol_Predator_execGetWeaponFireType_Parms GetWeaponFireType_Parms;

	this->ProcessEvent ( pFnGetWeaponFireType, &GetWeaponFireType_Parms, NULL );

	return GetWeaponFireType_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetZoomFOV
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_Pistol_Predator::GetZoomFOV ( )
{
	static UFunction* pFnGetZoomFOV = NULL;

	if ( ! pFnGetZoomFOV )
		pFnGetZoomFOV = (UFunction*) UObject::GObjObjects()->Data[ 65814 ];

	ASFXWeapon_Pistol_Predator_execGetZoomFOV_Parms GetZoomFOV_Parms;

	this->ProcessEvent ( pFnGetZoomFOV, &GetZoomFOV_Parms, NULL );

	return GetZoomFOV_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetModifiedFOV
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          FOV                            ( CPF_Parm | CPF_OutParm )

bool ASFXWeapon_Pistol_Predator::GetModifiedFOV ( float* FOV )
{
	static UFunction* pFnGetModifiedFOV = NULL;

	if ( ! pFnGetModifiedFOV )
		pFnGetModifiedFOV = (UFunction*) UObject::GObjObjects()->Data[ 75521 ];

	ASFXWeapon_Pistol_Predator_execGetModifiedFOV_Parms GetModifiedFOV_Parms;

	this->ProcessEvent ( pFnGetModifiedFOV, &GetModifiedFOV_Parms, NULL );

	if ( FOV )
		*FOV = GetModifiedFOV_Parms.FOV;

	return GetModifiedFOV_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetMuzzleLoc
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASFXWeapon_Pistol_Predator::GetMuzzleLoc ( )
{
	static UFunction* pFnGetMuzzleLoc = NULL;

	if ( ! pFnGetMuzzleLoc )
		pFnGetMuzzleLoc = (UFunction*) UObject::GObjObjects()->Data[ 75510 ];

	ASFXWeapon_Pistol_Predator_execGetMuzzleLoc_Parms GetMuzzleLoc_Parms;

	this->ProcessEvent ( pFnGetMuzzleLoc, &GetMuzzleLoc_Parms, NULL );

	return GetMuzzleLoc_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SetWeaponRecoil
// [0x00020102] 
// Parameters infos:
// float                          PitchRecoil                    ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SetWeaponRecoil ( float PitchRecoil )
{
	static UFunction* pFnSetWeaponRecoil = NULL;

	if ( ! pFnSetWeaponRecoil )
		pFnSetWeaponRecoil = (UFunction*) UObject::GObjObjects()->Data[ 75507 ];

	ASFXWeapon_Pistol_Predator_execSetWeaponRecoil_Parms SetWeaponRecoil_Parms;
	SetWeaponRecoil_Parms.PitchRecoil = PitchRecoil;

	this->ProcessEvent ( pFnSetWeaponRecoil, &SetWeaponRecoil_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ServerSetIsZoomed
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bState                         ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::ServerSetIsZoomed ( unsigned long bState )
{
	static UFunction* pFnServerSetIsZoomed = NULL;

	if ( ! pFnServerSetIsZoomed )
		pFnServerSetIsZoomed = (UFunction*) UObject::GObjObjects()->Data[ 75505 ];

	ASFXWeapon_Pistol_Predator_execServerSetIsZoomed_Parms ServerSetIsZoomed_Parms;
	ServerSetIsZoomed_Parms.bState = bState;

	this->ProcessEvent ( pFnServerSetIsZoomed, &ServerSetIsZoomed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetRTPCPlayerPosition
// [0x00020102] 
// Parameters infos:
// unsigned char                  NewPlayerPosition              ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SetRTPCPlayerPosition ( unsigned char NewPlayerPosition )
{
	static UFunction* pFnSetRTPCPlayerPosition = NULL;

	if ( ! pFnSetRTPCPlayerPosition )
		pFnSetRTPCPlayerPosition = (UFunction*) UObject::GObjObjects()->Data[ 75501 ];

	ASFXWeapon_Pistol_Predator_execSetRTPCPlayerPosition_Parms SetRTPCPlayerPosition_Parms;
	SetRTPCPlayerPosition_Parms.NewPlayerPosition = NewPlayerPosition;

	this->ProcessEvent ( pFnSetRTPCPlayerPosition, &SetRTPCPlayerPosition_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetZoomed
// [0x00020102] 
// Parameters infos:
// unsigned long                  bState                         ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::SetZoomed ( unsigned long bState )
{
	static UFunction* pFnSetZoomed = NULL;

	if ( ! pFnSetZoomed )
		pFnSetZoomed = (UFunction*) UObject::GObjObjects()->Data[ 75491 ];

	ASFXWeapon_Pistol_Predator_execSetZoomed_Parms SetZoomed_Parms;
	SetZoomed_Parms.bState = bState;

	this->ProcessEvent ( pFnSetZoomed, &SetZoomed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetAIAimDelay
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_Pistol_Predator::GetAIAimDelay ( )
{
	static UFunction* pFnGetAIAimDelay = NULL;

	if ( ! pFnGetAIAimDelay )
		pFnGetAIAimDelay = (UFunction*) UObject::GObjObjects()->Data[ 55312 ];

	ASFXWeapon_Pistol_Predator_execGetAIAimDelay_Parms GetAIAimDelay_Parms;

	this->ProcessEvent ( pFnGetAIAimDelay, &GetAIAimDelay_Parms, NULL );

	return GetAIAimDelay_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetPlayerAimError
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Accuracy                       ( CPF_Parm )

float ASFXWeapon_Pistol_Predator::GetPlayerAimError ( float Accuracy )
{
	static UFunction* pFnGetPlayerAimError = NULL;

	if ( ! pFnGetPlayerAimError )
		pFnGetPlayerAimError = (UFunction*) UObject::GObjObjects()->Data[ 75487 ];

	ASFXWeapon_Pistol_Predator_execGetPlayerAimError_Parms GetPlayerAimError_Parms;
	GetPlayerAimError_Parms.Accuracy = Accuracy;

	this->ProcessEvent ( pFnGetPlayerAimError, &GetPlayerAimError_Parms, NULL );

	return GetPlayerAimError_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetAdjustedAim
// [0x00020102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ASFXWeapon_Pistol_Predator::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 75481 ];

	ASFXWeapon_Pistol_Predator_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetRateOfFire
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_Pistol_Predator::GetRateOfFire ( )
{
	static UFunction* pFnGetRateOfFire = NULL;

	if ( ! pFnGetRateOfFire )
		pFnGetRateOfFire = (UFunction*) UObject::GObjObjects()->Data[ 41706 ];

	ASFXWeapon_Pistol_Predator_execGetRateOfFire_Parms GetRateOfFire_Parms;

	this->ProcessEvent ( pFnGetRateOfFire, &GetRateOfFire_Parms, NULL );

	return GetRateOfFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetTraceRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_Pistol_Predator::GetTraceRange ( )
{
	static UFunction* pFnGetTraceRange = NULL;

	if ( ! pFnGetTraceRange )
		pFnGetTraceRange = (UFunction*) UObject::GObjObjects()->Data[ 71107 ];

	ASFXWeapon_Pistol_Predator_execGetTraceRange_Parms GetTraceRange_Parms;

	this->ProcessEvent ( pFnGetTraceRange, &GetTraceRange_Parms, NULL );

	return GetTraceRange_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetWeaponAimErrorRange
// [0x00020102] 
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector2D ASFXWeapon_Pistol_Predator::GetWeaponAimErrorRange ( )
{
	static UFunction* pFnGetWeaponAimErrorRange = NULL;

	if ( ! pFnGetWeaponAimErrorRange )
		pFnGetWeaponAimErrorRange = (UFunction*) UObject::GObjObjects()->Data[ 45632 ];

	ASFXWeapon_Pistol_Predator_execGetWeaponAimErrorRange_Parms GetWeaponAimErrorRange_Parms;

	this->ProcessEvent ( pFnGetWeaponAimErrorRange, &GetWeaponAimErrorRange_Parms, NULL );

	return GetWeaponAimErrorRange_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetWeaponRecoil
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_Pistol_Predator::GetWeaponRecoil ( )
{
	static UFunction* pFnGetWeaponRecoil = NULL;

	if ( ! pFnGetWeaponRecoil )
		pFnGetWeaponRecoil = (UFunction*) UObject::GObjObjects()->Data[ 75471 ];

	ASFXWeapon_Pistol_Predator_execGetWeaponRecoil_Parms GetWeaponRecoil_Parms;

	this->ProcessEvent ( pFnGetWeaponRecoil, &GetWeaponRecoil_Parms, NULL );

	return GetWeaponRecoil_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ResetAmmoOnHolster
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::ResetAmmoOnHolster ( )
{
	static UFunction* pFnResetAmmoOnHolster = NULL;

	if ( ! pFnResetAmmoOnHolster )
		pFnResetAmmoOnHolster = (UFunction*) UObject::GObjObjects()->Data[ 75470 ];

	ASFXWeapon_Pistol_Predator_execResetAmmoOnHolster_Parms ResetAmmoOnHolster_Parms;

	this->ProcessEvent ( pFnResetAmmoOnHolster, &ResetAmmoOnHolster_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetMaxTotalAmmo
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_Pistol_Predator::GetMaxTotalAmmo ( )
{
	static UFunction* pFnGetMaxTotalAmmo = NULL;

	if ( ! pFnGetMaxTotalAmmo )
		pFnGetMaxTotalAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75468 ];

	ASFXWeapon_Pistol_Predator_execGetMaxTotalAmmo_Parms GetMaxTotalAmmo_Parms;

	this->ProcessEvent ( pFnGetMaxTotalAmmo, &GetMaxTotalAmmo_Parms, NULL );

	return GetMaxTotalAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetCurrentTotalAmmo
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_Pistol_Predator::GetCurrentTotalAmmo ( )
{
	static UFunction* pFnGetCurrentTotalAmmo = NULL;

	if ( ! pFnGetCurrentTotalAmmo )
		pFnGetCurrentTotalAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75465 ];

	ASFXWeapon_Pistol_Predator_execGetCurrentTotalAmmo_Parms GetCurrentTotalAmmo_Parms;

	this->ProcessEvent ( pFnGetCurrentTotalAmmo, &GetCurrentTotalAmmo_Parms, NULL );

	return GetCurrentTotalAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetCurrentSpareAmmo
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_Pistol_Predator::GetCurrentSpareAmmo ( )
{
	static UFunction* pFnGetCurrentSpareAmmo = NULL;

	if ( ! pFnGetCurrentSpareAmmo )
		pFnGetCurrentSpareAmmo = (UFunction*) UObject::GObjObjects()->Data[ 43672 ];

	ASFXWeapon_Pistol_Predator_execGetCurrentSpareAmmo_Parms GetCurrentSpareAmmo_Parms;

	this->ProcessEvent ( pFnGetCurrentSpareAmmo, &GetCurrentSpareAmmo_Parms, NULL );

	return GetCurrentSpareAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetMaxSpareAmmo
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIgnoreCurrentMag              ( CPF_OptionalParm | CPF_Parm )

int ASFXWeapon_Pistol_Predator::GetMaxSpareAmmo ( unsigned long bIgnoreCurrentMag )
{
	static UFunction* pFnGetMaxSpareAmmo = NULL;

	if ( ! pFnGetMaxSpareAmmo )
		pFnGetMaxSpareAmmo = (UFunction*) UObject::GObjObjects()->Data[ 53089 ];

	ASFXWeapon_Pistol_Predator_execGetMaxSpareAmmo_Parms GetMaxSpareAmmo_Parms;
	GetMaxSpareAmmo_Parms.bIgnoreCurrentMag = bIgnoreCurrentMag;

	this->ProcessEvent ( pFnGetMaxSpareAmmo, &GetMaxSpareAmmo_Parms, NULL );

	return GetMaxSpareAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetMagazineSize
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_Pistol_Predator::GetMagazineSize ( )
{
	static UFunction* pFnGetMagazineSize = NULL;

	if ( ! pFnGetMagazineSize )
		pFnGetMagazineSize = (UFunction*) UObject::GObjObjects()->Data[ 43511 ];

	ASFXWeapon_Pistol_Predator_execGetMagazineSize_Parms GetMagazineSize_Parms;

	this->ProcessEvent ( pFnGetMagazineSize, &GetMagazineSize_Parms, NULL );

	return GetMagazineSize_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.OutOfAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::OutOfAmmo ( )
{
	static UFunction* pFnOutOfAmmo = NULL;

	if ( ! pFnOutOfAmmo )
		pFnOutOfAmmo = (UFunction*) UObject::GObjObjects()->Data[ 68201 ];

	ASFXWeapon_Pistol_Predator_execOutOfAmmo_Parms OutOfAmmo_Parms;

	this->ProcessEvent ( pFnOutOfAmmo, &OutOfAmmo_Parms, NULL );

	return OutOfAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetDamageType
// [0x00024102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FiringMode                     ( CPF_OptionalParm | CPF_Parm )

class UClass* ASFXWeapon_Pistol_Predator::GetDamageType ( unsigned char FiringMode )
{
	static UFunction* pFnGetDamageType = NULL;

	if ( ! pFnGetDamageType )
		pFnGetDamageType = (UFunction*) UObject::GObjObjects()->Data[ 45628 ];

	ASFXWeapon_Pistol_Predator_execGetDamageType_Parms GetDamageType_Parms;
	GetDamageType_Parms.FiringMode = FiringMode;

	this->ProcessEvent ( pFnGetDamageType, &GetDamageType_Parms, NULL );

	return GetDamageType_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.CalculateBonus
// [0x00424102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

void ASFXWeapon_Pistol_Predator::CalculateBonus ( struct FVector HitLocation, class AActor* HitActor, struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnCalculateBonus = NULL;

	if ( ! pFnCalculateBonus )
		pFnCalculateBonus = (UFunction*) UObject::GObjObjects()->Data[ 75458 ];

	ASFXWeapon_Pistol_Predator_execCalculateBonus_Parms CalculateBonus_Parms;
	memcpy ( &CalculateBonus_Parms.HitLocation, &HitLocation, 0xC );
	CalculateBonus_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnCalculateBonus, &CalculateBonus_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &CalculateBonus_Parms.DamageCalc, 0x60 );
};

// Function SFXGame.SFXWeapon.GetFireModeBaseDamage
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_Pistol_Predator::GetFireModeBaseDamage ( )
{
	static UFunction* pFnGetFireModeBaseDamage = NULL;

	if ( ! pFnGetFireModeBaseDamage )
		pFnGetFireModeBaseDamage = (UFunction*) UObject::GObjObjects()->Data[ 45626 ];

	ASFXWeapon_Pistol_Predator_execGetFireModeBaseDamage_Parms GetFireModeBaseDamage_Parms;

	this->ProcessEvent ( pFnGetFireModeBaseDamage, &GetFireModeBaseDamage_Parms, NULL );

	return GetFireModeBaseDamage_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.NotifyUnpossessed
// [0x00020000] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::NotifyUnpossessed ( )
{
	static UFunction* pFnNotifyUnpossessed = NULL;

	if ( ! pFnNotifyUnpossessed )
		pFnNotifyUnpossessed = (UFunction*) UObject::GObjObjects()->Data[ 75456 ];

	ASFXWeapon_Pistol_Predator_execNotifyUnpossessed_Parms NotifyUnpossessed_Parms;

	this->ProcessEvent ( pFnNotifyUnpossessed, &NotifyUnpossessed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.UseFirstPersonCamera
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Pistol_Predator::UseFirstPersonCamera ( )
{
	static UFunction* pFnUseFirstPersonCamera = NULL;

	if ( ! pFnUseFirstPersonCamera )
		pFnUseFirstPersonCamera = (UFunction*) UObject::GObjObjects()->Data[ 75454 ];

	ASFXWeapon_Pistol_Predator_execUseFirstPersonCamera_Parms UseFirstPersonCamera_Parms;

	this->ProcessEvent ( pFnUseFirstPersonCamera, &UseFirstPersonCamera_Parms, NULL );

	return UseFirstPersonCamera_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetProjectileFirePosition
// [0x00420102] 
// Parameters infos:
// struct FVector                 out_ProjLoc                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 out_ProjDir                    ( CPF_Parm | CPF_OutParm )

void ASFXWeapon_Pistol_Predator::GetProjectileFirePosition ( struct FVector* out_ProjLoc, struct FVector* out_ProjDir )
{
	static UFunction* pFnGetProjectileFirePosition = NULL;

	if ( ! pFnGetProjectileFirePosition )
		pFnGetProjectileFirePosition = (UFunction*) UObject::GObjObjects()->Data[ 75448 ];

	ASFXWeapon_Pistol_Predator_execGetProjectileFirePosition_Parms GetProjectileFirePosition_Parms;

	this->ProcessEvent ( pFnGetProjectileFirePosition, &GetProjectileFirePosition_Parms, NULL );

	if ( out_ProjLoc )
		memcpy ( out_ProjLoc, &GetProjectileFirePosition_Parms.out_ProjLoc, 0xC );

	if ( out_ProjDir )
		memcpy ( out_ProjDir, &GetProjectileFirePosition_Parms.out_ProjDir, 0xC );
};

// Function SFXGame.SFXWeapon.GetPhysicalFireStartLoc
// [0x00024102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AimDir                         ( CPF_OptionalParm | CPF_Parm )

struct FVector ASFXWeapon_Pistol_Predator::GetPhysicalFireStartLoc ( struct FVector AimDir )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 75445 ];

	ASFXWeapon_Pistol_Predator_execGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;
	memcpy ( &GetPhysicalFireStartLoc_Parms.AimDir, &AimDir, 0xC );

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.OnClientProjectileSpawned
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class ASFXProjectile*          NewProjectile                  ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::OnClientProjectileSpawned ( class ASFXProjectile* NewProjectile )
{
	static UFunction* pFnOnClientProjectileSpawned = NULL;

	if ( ! pFnOnClientProjectileSpawned )
		pFnOnClientProjectileSpawned = (UFunction*) UObject::GObjObjects()->Data[ 75438 ];

	ASFXWeapon_Pistol_Predator_execOnClientProjectileSpawned_Parms OnClientProjectileSpawned_Parms;
	OnClientProjectileSpawned_Parms.NewProjectile = NewProjectile;

	this->ProcessEvent ( pFnOnClientProjectileSpawned, &OnClientProjectileSpawned_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Internal_ProjectileFire
// [0x00020102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* ASFXWeapon_Pistol_Predator::Internal_ProjectileFire ( )
{
	static UFunction* pFnInternal_ProjectileFire = NULL;

	if ( ! pFnInternal_ProjectileFire )
		pFnInternal_ProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 75427 ];

	ASFXWeapon_Pistol_Predator_execInternal_ProjectileFire_Parms Internal_ProjectileFire_Parms;

	this->ProcessEvent ( pFnInternal_ProjectileFire, &Internal_ProjectileFire_Parms, NULL );

	return Internal_ProjectileFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ServerProjectileFire
// [0x002200C2] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// struct FVector                 ProjLocation                   ( CPF_Parm )
// struct FVector                 ProjDirection                  ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::ServerProjectileFire ( class AActor* Target, struct FVector ProjLocation, struct FVector ProjDirection )
{
	static UFunction* pFnServerProjectileFire = NULL;

	if ( ! pFnServerProjectileFire )
		pFnServerProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 75423 ];

	ASFXWeapon_Pistol_Predator_execServerProjectileFire_Parms ServerProjectileFire_Parms;
	ServerProjectileFire_Parms.Target = Target;
	memcpy ( &ServerProjectileFire_Parms.ProjLocation, &ProjLocation, 0xC );
	memcpy ( &ServerProjectileFire_Parms.ProjDirection, &ProjDirection, 0xC );

	this->ProcessEvent ( pFnServerProjectileFire, &ServerProjectileFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProjectileFire
// [0x00020102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* ASFXWeapon_Pistol_Predator::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 75418 ];

	ASFXWeapon_Pistol_Predator_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ForceEndFire
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::ForceEndFire ( )
{
	static UFunction* pFnForceEndFire = NULL;

	if ( ! pFnForceEndFire )
		pFnForceEndFire = (UFunction*) UObject::GObjObjects()->Data[ 75416 ];

	ASFXWeapon_Pistol_Predator_execForceEndFire_Parms ForceEndFire_Parms;

	this->ProcessEvent ( pFnForceEndFire, &ForceEndFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.InitDefaultDecalProperties
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::InitDefaultDecalProperties ( )
{
	static UFunction* pFnInitDefaultDecalProperties = NULL;

	if ( ! pFnInitDefaultDecalProperties )
		pFnInitDefaultDecalProperties = (UFunction*) UObject::GObjObjects()->Data[ 75413 ];

	ASFXWeapon_Pistol_Predator_execInitDefaultDecalProperties_Parms InitDefaultDecalProperties_Parms;

	this->ProcessEvent ( pFnInitDefaultDecalProperties, &InitDefaultDecalProperties_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ScaleWeapon
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::ScaleWeapon ( )
{
	static UFunction* pFnScaleWeapon = NULL;

	if ( ! pFnScaleWeapon )
		pFnScaleWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75398 ];

	ASFXWeapon_Pistol_Predator_execScaleWeapon_Parms ScaleWeapon_Parms;

	this->ProcessEvent ( pFnScaleWeapon, &ScaleWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CacheAnimNodes
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::CacheAnimNodes ( )
{
	static UFunction* pFnCacheAnimNodes = NULL;

	if ( ! pFnCacheAnimNodes )
		pFnCacheAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 75394 ];

	ASFXWeapon_Pistol_Predator_execCacheAnimNodes_Parms CacheAnimNodes_Parms;

	this->ProcessEvent ( pFnCacheAnimNodes, &CacheAnimNodes_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PostInitAnimTree
// [0x00020102] 
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ASFXWeapon_Pistol_Predator::PostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 75392 ];

	ASFXWeapon_Pistol_Predator_execPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function SFXGame.SFXWeapon.InitializeWeapon
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::InitializeWeapon ( )
{
	static UFunction* pFnInitializeWeapon = NULL;

	if ( ! pFnInitializeWeapon )
		pFnInitializeWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75381 ];

	ASFXWeapon_Pistol_Predator_execInitializeWeapon_Parms InitializeWeapon_Parms;

	this->ProcessEvent ( pFnInitializeWeapon, &InitializeWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DeferredPostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::DeferredPostBeginPlay ( )
{
	static UFunction* pFnDeferredPostBeginPlay = NULL;

	if ( ! pFnDeferredPostBeginPlay )
		pFnDeferredPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 75380 ];

	ASFXWeapon_Pistol_Predator_execDeferredPostBeginPlay_Parms DeferredPostBeginPlay_Parms;

	this->ProcessEvent ( pFnDeferredPostBeginPlay, &DeferredPostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 75379 ];

	ASFXWeapon_Pistol_Predator_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXWeapon.FireModeUpdated
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication )
{
	static UFunction* pFnFireModeUpdated = NULL;

	if ( ! pFnFireModeUpdated )
		pFnFireModeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 75376 ];

	ASFXWeapon_Pistol_Predator_execFireModeUpdated_Parms FireModeUpdated_Parms;
	FireModeUpdated_Parms.FiringMode = FiringMode;
	FireModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFireModeUpdated, &FireModeUpdated_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CharacterSlotUpdated
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Pistol_Predator::CharacterSlotUpdated ( )
{
	static UFunction* pFnCharacterSlotUpdated = NULL;

	if ( ! pFnCharacterSlotUpdated )
		pFnCharacterSlotUpdated = (UFunction*) UObject::GObjObjects()->Data[ 75374 ];

	ASFXWeapon_Pistol_Predator_execCharacterSlotUpdated_Parms CharacterSlotUpdated_Parms;

	this->ProcessEvent ( pFnCharacterSlotUpdated, &CharacterSlotUpdated_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 75371 ];

	ASFXWeapon_Pistol_Predator_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function SFXGame.SFXWeapon.OnWeaponUnequip
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::OnWeaponUnequip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponUnequip = NULL;

	if ( ! pFnOnWeaponUnequip )
		pFnOnWeaponUnequip = (UFunction*) UObject::GObjObjects()->Data[ 75369 ];

	ASFXWeapon_Pistol_Predator_execOnWeaponUnequip_Parms OnWeaponUnequip_Parms;
	OnWeaponUnequip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponUnequip, &OnWeaponUnequip_Parms, NULL );
};

// Function SFXGame.SFXWeapon.OnWeaponEquip
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::OnWeaponEquip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponEquip = NULL;

	if ( ! pFnOnWeaponEquip )
		pFnOnWeaponEquip = (UFunction*) UObject::GObjObjects()->Data[ 75367 ];

	ASFXWeapon_Pistol_Predator_execOnWeaponEquip_Parms OnWeaponEquip_Parms;
	OnWeaponEquip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponEquip, &OnWeaponEquip_Parms, NULL );
};

// Function SFXGame.SFXWeapon.OnWeaponReload
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::OnWeaponReload ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponReload = NULL;

	if ( ! pFnOnWeaponReload )
		pFnOnWeaponReload = (UFunction*) UObject::GObjObjects()->Data[ 75365 ];

	ASFXWeapon_Pistol_Predator_execOnWeaponReload_Parms OnWeaponReload_Parms;
	OnWeaponReload_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponReload, &OnWeaponReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetDamageVocProbabilityMod
// [0x00120000] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_Pistol_Predator::GetDamageVocProbabilityMod ( )
{
	static UFunction* pFnGetDamageVocProbabilityMod = NULL;

	if ( ! pFnGetDamageVocProbabilityMod )
		pFnGetDamageVocProbabilityMod = (UFunction*) UObject::GObjObjects()->Data[ 54000 ];

	ASFXWeapon_Pistol_Predator_execGetDamageVocProbabilityMod_Parms GetDamageVocProbabilityMod_Parms;

	this->ProcessEvent ( pFnGetDamageVocProbabilityMod, &GetDamageVocProbabilityMod_Parms, NULL );

	return GetDamageVocProbabilityMod_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.OnWeaponImpact
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_Pistol_Predator::OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact )
{
	static UFunction* pFnOnWeaponImpact = NULL;

	if ( ! pFnOnWeaponImpact )
		pFnOnWeaponImpact = (UFunction*) UObject::GObjObjects()->Data[ 75362 ];

	ASFXWeapon_Pistol_Predator_execOnWeaponImpact_Parms OnWeaponImpact_Parms;
	OnWeaponImpact_Parms.Weapon = Weapon;
	memcpy ( &OnWeaponImpact_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnOnWeaponImpact, &OnWeaponImpact_Parms, NULL );
};

// Function SFXGame.SFXDamageType.CalculateDamageMultiplier
// [0x00422002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

float USFXDamageType_AutoPistol::CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnCalculateDamageMultiplier = NULL;

	if ( ! pFnCalculateDamageMultiplier )
		pFnCalculateDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 44579 ];

	USFXDamageType_AutoPistol_execCalculateDamageMultiplier_Parms CalculateDamageMultiplier_Parms;

	this->ProcessEvent ( pFnCalculateDamageMultiplier, &CalculateDamageMultiplier_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &CalculateDamageMultiplier_Parms.DamageCalc, 0x60 );

	return CalculateDamageMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.ResetDamageCalc
// [0x00422002] 
// Parameters infos:
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

void USFXDamageType_AutoPistol::ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnResetDamageCalc = NULL;

	if ( ! pFnResetDamageCalc )
		pFnResetDamageCalc = (UFunction*) UObject::GObjObjects()->Data[ 44554 ];

	USFXDamageType_AutoPistol_execResetDamageCalc_Parms ResetDamageCalc_Parms;

	this->ProcessEvent ( pFnResetDamageCalc, &ResetDamageCalc_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &ResetDamageCalc_Parms.DamageCalc, 0x60 );
};

// Function SFXGame.SFXDamageType.CanPlayDeathEffect
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

bool USFXDamageType_AutoPistol::CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 44550 ];

	USFXDamageType_AutoPistol_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;
	CanPlayDeathEffect_Parms.Target = Target;
	CanPlayDeathEffect_Parms.Killer = Killer;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.CalculateDamageMultiplier
// [0x00422002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

float USFXDamageType_Shotgun::CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnCalculateDamageMultiplier = NULL;

	if ( ! pFnCalculateDamageMultiplier )
		pFnCalculateDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 44579 ];

	USFXDamageType_Shotgun_execCalculateDamageMultiplier_Parms CalculateDamageMultiplier_Parms;

	this->ProcessEvent ( pFnCalculateDamageMultiplier, &CalculateDamageMultiplier_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &CalculateDamageMultiplier_Parms.DamageCalc, 0x60 );

	return CalculateDamageMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.ResetDamageCalc
// [0x00422002] 
// Parameters infos:
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

void USFXDamageType_Shotgun::ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnResetDamageCalc = NULL;

	if ( ! pFnResetDamageCalc )
		pFnResetDamageCalc = (UFunction*) UObject::GObjObjects()->Data[ 44554 ];

	USFXDamageType_Shotgun_execResetDamageCalc_Parms ResetDamageCalc_Parms;

	this->ProcessEvent ( pFnResetDamageCalc, &ResetDamageCalc_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &ResetDamageCalc_Parms.DamageCalc, 0x60 );
};

// Function SFXGame.SFXDamageType.CanPlayDeathEffect
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

bool USFXDamageType_Shotgun::CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 44550 ];

	USFXDamageType_Shotgun_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;
	CanPlayDeathEffect_Parms.Target = Target;
	CanPlayDeathEffect_Parms.Killer = Killer;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGameEffect_Cloak.OnCombatEnd
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Cloak::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 135599 ];

	USFXGameEffect_Cloak_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Cloak.DelayedRemoval
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Cloak::DelayedRemoval ( )
{
	static UFunction* pFnDelayedRemoval = NULL;

	if ( ! pFnDelayedRemoval )
		pFnDelayedRemoval = (UFunction*) UObject::GObjObjects()->Data[ 135595 ];

	USFXGameEffect_Cloak_execDelayedRemoval_Parms DelayedRemoval_Parms;

	this->ProcessEvent ( pFnDelayedRemoval, &DelayedRemoval_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Cloak.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Cloak::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 135592 ];

	USFXGameEffect_Cloak_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Cloak.OnUpdate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_Cloak::eventOnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 135587 ];

	USFXGameEffect_Cloak_eventOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Cloak.TurnVFXOn
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGameEffect_Cloak::TurnVFXOn ( )
{
	static UFunction* pFnTurnVFXOn = NULL;

	if ( ! pFnTurnVFXOn )
		pFnTurnVFXOn = (UFunction*) UObject::GObjObjects()->Data[ 135583 ];

	USFXGameEffect_Cloak_execTurnVFXOn_Parms TurnVFXOn_Parms;

	this->ProcessEvent ( pFnTurnVFXOn, &TurnVFXOn_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Cloak.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Cloak::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 135580 ];

	USFXGameEffect_Cloak_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_Cloak.OnCloakEnded
// [0x00120000] 
// Parameters infos:
// float                          TimeInCloak                    ( CPF_Parm )

void USFXGameEffect_Cloak::OnCloakEnded ( float TimeInCloak )
{
	static UFunction* pFnOnCloakEnded = NULL;

	if ( ! pFnOnCloakEnded )
		pFnOnCloakEnded = (UFunction*) UObject::GObjObjects()->Data[ 135578 ];

	USFXGameEffect_Cloak_execOnCloakEnded_Parms OnCloakEnded_Parms;
	OnCloakEnded_Parms.TimeInCloak = TimeInCloak;

	this->ProcessEvent ( pFnOnCloakEnded, &OnCloakEnded_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_ShotgunReticle.ResetReticle
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bUnsubscribe                   ( CPF_OptionalParm | CPF_Parm )

void USFXGUI_ShotgunReticle::eventResetReticle ( unsigned long bUnsubscribe )
{
	static UFunction* pFnResetReticle = NULL;

	if ( ! pFnResetReticle )
		pFnResetReticle = (UFunction*) UObject::GObjObjects()->Data[ 135623 ];

	USFXGUI_ShotgunReticle_eventResetReticle_Parms ResetReticle_Parms;
	ResetReticle_Parms.bUnsubscribe = bUnsubscribe;

	this->ProcessEvent ( pFnResetReticle, &ResetReticle_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_ShotgunReticle.TargetCanHitChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInSights                      ( CPF_Parm )

void USFXGUI_ShotgunReticle::eventTargetCanHitChanged ( unsigned long bInSights )
{
	static UFunction* pFnTargetCanHitChanged = NULL;

	if ( ! pFnTargetCanHitChanged )
		pFnTargetCanHitChanged = (UFunction*) UObject::GObjObjects()->Data[ 135621 ];

	USFXGUI_ShotgunReticle_eventTargetCanHitChanged_Parms TargetCanHitChanged_Parms;
	TargetCanHitChanged_Parms.bInSights = bInSights;

	this->ProcessEvent ( pFnTargetCanHitChanged, &TargetCanHitChanged_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_ShotgunReticle.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void USFXGUI_ShotgunReticle::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 135611 ];

	USFXGUI_ShotgunReticle_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_ShotgunReticle.PerformReticleHide
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInstant                       ( CPF_Parm )

void USFXGUI_ShotgunReticle::eventPerformReticleHide ( unsigned long bInstant )
{
	static UFunction* pFnPerformReticleHide = NULL;

	if ( ! pFnPerformReticleHide )
		pFnPerformReticleHide = (UFunction*) UObject::GObjObjects()->Data[ 135609 ];

	USFXGUI_ShotgunReticle_eventPerformReticleHide_Parms PerformReticleHide_Parms;
	PerformReticleHide_Parms.bInstant = bInstant;

	this->ProcessEvent ( pFnPerformReticleHide, &PerformReticleHide_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_ShotgunReticle.PerformReticleShow
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInstant                       ( CPF_Parm )

void USFXGUI_ShotgunReticle::eventPerformReticleShow ( unsigned long bInstant )
{
	static UFunction* pFnPerformReticleShow = NULL;

	if ( ! pFnPerformReticleShow )
		pFnPerformReticleShow = (UFunction*) UObject::GObjObjects()->Data[ 135607 ];

	USFXGUI_ShotgunReticle_eventPerformReticleShow_Parms PerformReticleShow_Parms;
	PerformReticleShow_Parms.bInstant = bInstant;

	this->ProcessEvent ( pFnPerformReticleShow, &PerformReticleShow_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_ShotgunReticle.OnReticleLoaded
// [0x00020002] 
// Parameters infos:

void USFXGUI_ShotgunReticle::OnReticleLoaded ( )
{
	static UFunction* pFnOnReticleLoaded = NULL;

	if ( ! pFnOnReticleLoaded )
		pFnOnReticleLoaded = (UFunction*) UObject::GObjObjects()->Data[ 135605 ];

	USFXGUI_ShotgunReticle_execOnReticleLoaded_Parms OnReticleLoaded_Parms;

	this->ProcessEvent ( pFnOnReticleLoaded, &OnReticleLoaded_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.PopulatePowerStatBarEvolves
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::PopulatePowerStatBarEvolves ( )
{
	static UFunction* pFnPopulatePowerStatBarEvolves = NULL;

	if ( ! pFnPopulatePowerStatBarEvolves )
		pFnPopulatePowerStatBarEvolves = (UFunction*) UObject::GObjObjects()->Data[ 135845 ];

	Usfxpowercustomaction_bioticcharge_execPopulatePowerStatBarEvolves_Parms PopulatePowerStatBarEvolves_Parms;

	this->ProcessEvent ( pFnPopulatePowerStatBarEvolves, &PopulatePowerStatBarEvolves_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.RecalculateAllPowerData
// [0x00024002] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_bioticcharge::RecalculateAllPowerData ( unsigned long bReset )
{
	static UFunction* pFnRecalculateAllPowerData = NULL;

	if ( ! pFnRecalculateAllPowerData )
		pFnRecalculateAllPowerData = (UFunction*) UObject::GObjObjects()->Data[ 135843 ];

	Usfxpowercustomaction_bioticcharge_execRecalculateAllPowerData_Parms RecalculateAllPowerData_Parms;
	RecalculateAllPowerData_Parms.bReset = bReset;

	this->ProcessEvent ( pFnRecalculateAllPowerData, &RecalculateAllPowerData_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.ApplyBonus
// [0x00024002] 
// Parameters infos:
// struct FName                   Parameter                      ( CPF_Parm )
// class USFXGameEffect*          Bonus                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_bioticcharge::ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove )
{
	static UFunction* pFnApplyBonus = NULL;

	if ( ! pFnApplyBonus )
		pFnApplyBonus = (UFunction*) UObject::GObjObjects()->Data[ 135839 ];

	Usfxpowercustomaction_bioticcharge_execApplyBonus_Parms ApplyBonus_Parms;
	memcpy ( &ApplyBonus_Parms.Parameter, &Parameter, 0x8 );
	ApplyBonus_Parms.Bonus = Bonus;
	ApplyBonus_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyBonus, &ApplyBonus_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.ResetPower
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::ResetPower ( )
{
	static UFunction* pFnResetPower = NULL;

	if ( ! pFnResetPower )
		pFnResetPower = (UFunction*) UObject::GObjObjects()->Data[ 135838 ];

	Usfxpowercustomaction_bioticcharge_execResetPower_Parms ResetPower_Parms;

	this->ProcessEvent ( pFnResetPower, &ResetPower_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.EvolvePower
// [0x00020002] 
// Parameters infos:
// unsigned char                  choice                         ( CPF_Parm )

void Usfxpowercustomaction_bioticcharge::EvolvePower ( unsigned char choice )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 135832 ];

	Usfxpowercustomaction_bioticcharge_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.choice = choice;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.StartPowerCooldown
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::StartPowerCooldown ( )
{
	static UFunction* pFnStartPowerCooldown = NULL;

	if ( ! pFnStartPowerCooldown )
		pFnStartPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 135830 ];

	Usfxpowercustomaction_bioticcharge_execStartPowerCooldown_Parms StartPowerCooldown_Parms;

	this->ProcessEvent ( pFnStartPowerCooldown, &StartPowerCooldown_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.Replicate
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::Replicate ( )
{
	static UFunction* pFnReplicate = NULL;

	if ( ! pFnReplicate )
		pFnReplicate = (UFunction*) UObject::GObjObjects()->Data[ 135829 ];

	Usfxpowercustomaction_bioticcharge_execReplicate_Parms Replicate_Parms;

	this->ProcessEvent ( pFnReplicate, &Replicate_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.DoPowerDetonatedForActor
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            nImpactCount                   ( CPF_Parm )
// unsigned long                  bFirstTarget                   ( CPF_Parm )
// class ASFXProjectile_PowerCustomAction* oProjectile                    ( CPF_OptionalParm | CPF_Parm )

bool Usfxpowercustomaction_bioticcharge::DoPowerDetonatedForActor ( class AActor* oActor, struct FVector HitLocation, struct FVector HitNormal, int nImpactCount, unsigned long bFirstTarget, class ASFXProjectile_PowerCustomAction* oProjectile )
{
	static UFunction* pFnDoPowerDetonatedForActor = NULL;

	if ( ! pFnDoPowerDetonatedForActor )
		pFnDoPowerDetonatedForActor = (UFunction*) UObject::GObjObjects()->Data[ 135821 ];

	Usfxpowercustomaction_bioticcharge_execDoPowerDetonatedForActor_Parms DoPowerDetonatedForActor_Parms;
	DoPowerDetonatedForActor_Parms.oActor = oActor;
	memcpy ( &DoPowerDetonatedForActor_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoPowerDetonatedForActor_Parms.HitNormal, &HitNormal, 0xC );
	DoPowerDetonatedForActor_Parms.nImpactCount = nImpactCount;
	DoPowerDetonatedForActor_Parms.bFirstTarget = bFirstTarget;
	DoPowerDetonatedForActor_Parms.oProjectile = oProjectile;

	this->ProcessEvent ( pFnDoPowerDetonatedForActor, &DoPowerDetonatedForActor_Parms, NULL );

	return DoPowerDetonatedForActor_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.PlayFailedChargeEffects
// [0x00820002] 
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::PlayFailedChargeEffects ( )
{
	static UFunction* pFnPlayFailedChargeEffects = NULL;

	if ( ! pFnPlayFailedChargeEffects )
		pFnPlayFailedChargeEffects = (UFunction*) UObject::GObjObjects()->Data[ 135819 ];

	Usfxpowercustomaction_bioticcharge_execPlayFailedChargeEffects_Parms PlayFailedChargeEffects_Parms;

	this->ProcessEvent ( pFnPlayFailedChargeEffects, &PlayFailedChargeEffects_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.SpawnProjectile
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::SpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = (UFunction*) UObject::GObjObjects()->Data[ 135817 ];

	Usfxpowercustomaction_bioticcharge_execSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.TimeStinger
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::TimeStinger ( )
{
	static UFunction* pFnTimeStinger = NULL;

	if ( ! pFnTimeStinger )
		pFnTimeStinger = (UFunction*) UObject::GObjObjects()->Data[ 135814 ];

	Usfxpowercustomaction_bioticcharge_execTimeStinger_Parms TimeStinger_Parms;

	this->ProcessEvent ( pFnTimeStinger, &TimeStinger_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.OnRagdollPhysicsImpact
// [0x00020002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )
// class AActor*                  oImpactActor                   ( CPF_Parm )
// struct FVector                 vImpactDir                     ( CPF_Parm )

void Usfxpowercustomaction_bioticcharge::OnRagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir )
{
	static UFunction* pFnOnRagdollPhysicsImpact = NULL;

	if ( ! pFnOnRagdollPhysicsImpact )
		pFnOnRagdollPhysicsImpact = (UFunction*) UObject::GObjObjects()->Data[ 135809 ];

	Usfxpowercustomaction_bioticcharge_execOnRagdollPhysicsImpact_Parms OnRagdollPhysicsImpact_Parms;
	OnRagdollPhysicsImpact_Parms.oPawn = oPawn;
	OnRagdollPhysicsImpact_Parms.oImpactActor = oImpactActor;
	memcpy ( &OnRagdollPhysicsImpact_Parms.vImpactDir, &vImpactDir, 0xC );

	this->ProcessEvent ( pFnOnRagdollPhysicsImpact, &OnRagdollPhysicsImpact_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.GetImpactForce
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

float Usfxpowercustomaction_bioticcharge::GetImpactForce ( class AActor* oImpacted )
{
	static UFunction* pFnGetImpactForce = NULL;

	if ( ! pFnGetImpactForce )
		pFnGetImpactForce = (UFunction*) UObject::GObjObjects()->Data[ 135803 ];

	Usfxpowercustomaction_bioticcharge_execGetImpactForce_Parms GetImpactForce_Parms;
	GetImpactForce_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnGetImpactForce, &GetImpactForce_Parms, NULL );

	return GetImpactForce_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.ClientDoPowerSubsequentImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// int                            CustomActionReactionType       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            ImpactCount                    ( CPF_OptionalParm | CPF_Parm )
// float                          Delay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoCallback                     ( CPF_OptionalParm | CPF_Parm )

void Usfxpowercustomaction_bioticcharge::ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback )
{
	static UFunction* pFnClientDoPowerSubsequentImpact = NULL;

	if ( ! pFnClientDoPowerSubsequentImpact )
		pFnClientDoPowerSubsequentImpact = (UFunction*) UObject::GObjObjects()->Data[ 135794 ];

	Usfxpowercustomaction_bioticcharge_execClientDoPowerSubsequentImpact_Parms ClientDoPowerSubsequentImpact_Parms;
	ClientDoPowerSubsequentImpact_Parms.oActor = oActor;
	ClientDoPowerSubsequentImpact_Parms.CustomActionReactionType = CustomActionReactionType;
	ClientDoPowerSubsequentImpact_Parms.Duration = Duration;
	ClientDoPowerSubsequentImpact_Parms.ImpactCount = ImpactCount;
	ClientDoPowerSubsequentImpact_Parms.Delay = Delay;
	ClientDoPowerSubsequentImpact_Parms.DoCallback = DoCallback;

	this->ProcessEvent ( pFnClientDoPowerSubsequentImpact, &ClientDoPowerSubsequentImpact_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.OnChargeImpact
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Resistance                     ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool Usfxpowercustomaction_bioticcharge::OnChargeImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnChargeImpact = NULL;

	if ( ! pFnOnChargeImpact )
		pFnOnChargeImpact = (UFunction*) UObject::GObjObjects()->Data[ 135781 ];

	Usfxpowercustomaction_bioticcharge_execOnChargeImpact_Parms OnChargeImpact_Parms;
	OnChargeImpact_Parms.Resistance = Resistance;
	OnChargeImpact_Parms.oImpacted = oImpacted;
	OnChargeImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;
	memcpy ( &OnChargeImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnChargeImpact_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnChargeImpact, &OnChargeImpact_Parms, NULL );

	return OnChargeImpact_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.Impact
// [0x00820002] 
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::Impact ( )
{
	static UFunction* pFnImpact = NULL;

	if ( ! pFnImpact )
		pFnImpact = (UFunction*) UObject::GObjObjects()->Data[ 135761 ];

	Usfxpowercustomaction_bioticcharge_execImpact_Parms Impact_Parms;

	this->ProcessEvent ( pFnImpact, &Impact_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.Teleport
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::Teleport ( )
{
	static UFunction* pFnTeleport = NULL;

	if ( ! pFnTeleport )
		pFnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 135760 ];

	Usfxpowercustomaction_bioticcharge_execTeleport_Parms Teleport_Parms;

	this->ProcessEvent ( pFnTeleport, &Teleport_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.StartTeleport
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::StartTeleport ( )
{
	static UFunction* pFnStartTeleport = NULL;

	if ( ! pFnStartTeleport )
		pFnStartTeleport = (UFunction*) UObject::GObjObjects()->Data[ 135756 ];

	Usfxpowercustomaction_bioticcharge_execStartTeleport_Parms StartTeleport_Parms;

	this->ProcessEvent ( pFnStartTeleport, &StartTeleport_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void Usfxpowercustomaction_bioticcharge::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 135751 ];

	Usfxpowercustomaction_bioticcharge_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.StopCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 135749 ];

	Usfxpowercustomaction_bioticcharge_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.InterruptThisCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::InterruptThisCustomAction ( )
{
	static UFunction* pFnInterruptThisCustomAction = NULL;

	if ( ! pFnInterruptThisCustomAction )
		pFnInterruptThisCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 135747 ];

	Usfxpowercustomaction_bioticcharge_execInterruptThisCustomAction_Parms InterruptThisCustomAction_Parms;

	this->ProcessEvent ( pFnInterruptThisCustomAction, &InterruptThisCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.StartCustomAction
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 135729 ];

	Usfxpowercustomaction_bioticcharge_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.TickCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void Usfxpowercustomaction_bioticcharge::eventTickCustomAction ( float fDeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 135721 ];

	Usfxpowercustomaction_bioticcharge_eventTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.FinalizePawnMove
// [0x00444003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 Loc                            ( CPF_Parm | CPF_OutParm )
// struct FVector                 TargetLoc                      ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void Usfxpowercustomaction_bioticcharge::FinalizePawnMove ( struct FVector* Loc, struct FVector* TargetLoc )
{
	static UFunction* pFnFinalizePawnMove = NULL;

	if ( ! pFnFinalizePawnMove )
		pFnFinalizePawnMove = (UFunction*) UObject::GObjObjects()->Data[ 135716 ];

	Usfxpowercustomaction_bioticcharge_execFinalizePawnMove_Parms FinalizePawnMove_Parms;

	this->ProcessEvent ( pFnFinalizePawnMove, &FinalizePawnMove_Parms, NULL );

	if ( Loc )
		memcpy ( Loc, &FinalizePawnMove_Parms.Loc, 0xC );

	if ( TargetLoc )
		memcpy ( TargetLoc, &FinalizePawnMove_Parms.TargetLoc, 0xC );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.ValidateTarget
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool Usfxpowercustomaction_bioticcharge::ValidateTarget ( )
{
	static UFunction* pFnValidateTarget = NULL;

	if ( ! pFnValidateTarget )
		pFnValidateTarget = (UFunction*) UObject::GObjObjects()->Data[ 135709 ];

	Usfxpowercustomaction_bioticcharge_execValidateTarget_Parms ValidateTarget_Parms;

	this->ProcessEvent ( pFnValidateTarget, &ValidateTarget_Parms, NULL );

	return ValidateTarget_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.FindSpace
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Extent                         ( CPF_Parm )
// class AActor*                  TraceActor                     ( CPF_Parm )
// struct FVector                 NearLocation                   ( CPF_Parm | CPF_OutParm )

bool Usfxpowercustomaction_bioticcharge::FindSpace ( struct FVector Extent, class AActor* TraceActor, struct FVector* NearLocation )
{
	static UFunction* pFnFindSpace = NULL;

	if ( ! pFnFindSpace )
		pFnFindSpace = (UFunction*) UObject::GObjObjects()->Data[ 135695 ];

	Usfxpowercustomaction_bioticcharge_execFindSpace_Parms FindSpace_Parms;
	memcpy ( &FindSpace_Parms.Extent, &Extent, 0xC );
	FindSpace_Parms.TraceActor = TraceActor;

	this->ProcessEvent ( pFnFindSpace, &FindSpace_Parms, NULL );

	if ( NearLocation )
		memcpy ( NearLocation, &FindSpace_Parms.NearLocation, 0xC );

	return FindSpace_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.TryMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FVector                 Dir                            ( CPF_Parm )
// class APawn*                   CollisionActor                 ( CPF_Parm )

bool Usfxpowercustomaction_bioticcharge::TryMove ( struct FVector NewLocation, struct FVector Dir, class APawn* CollisionActor )
{
	static UFunction* pFnTryMove = NULL;

	if ( ! pFnTryMove )
		pFnTryMove = (UFunction*) UObject::GObjObjects()->Data[ 135690 ];

	Usfxpowercustomaction_bioticcharge_execTryMove_Parms TryMove_Parms;
	memcpy ( &TryMove_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &TryMove_Parms.Dir, &Dir, 0xC );
	TryMove_Parms.CollisionActor = CollisionActor;

	this->ProcessEvent ( pFnTryMove, &TryMove_Parms, NULL );

	return TryMove_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.CollectVolumes
// [0x00020002] 
// Parameters infos:

void Usfxpowercustomaction_bioticcharge::CollectVolumes ( )
{
	static UFunction* pFnCollectVolumes = NULL;

	if ( ! pFnCollectVolumes )
		pFnCollectVolumes = (UFunction*) UObject::GObjObjects()->Data[ 135679 ];

	Usfxpowercustomaction_bioticcharge_execCollectVolumes_Parms CollectVolumes_Parms;

	this->ProcessEvent ( pFnCollectVolumes, &CollectVolumes_Parms, NULL );
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.ValidateTargetLocation
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TargetLocation                 ( CPF_Parm )

bool Usfxpowercustomaction_bioticcharge::ValidateTargetLocation ( struct FVector TargetLocation )
{
	static UFunction* pFnValidateTargetLocation = NULL;

	if ( ! pFnValidateTargetLocation )
		pFnValidateTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 135664 ];

	Usfxpowercustomaction_bioticcharge_execValidateTargetLocation_Parms ValidateTargetLocation_Parms;
	memcpy ( &ValidateTargetLocation_Parms.TargetLocation, &TargetLocation, 0xC );

	this->ProcessEvent ( pFnValidateTargetLocation, &ValidateTargetLocation_Parms, NULL );

	return ValidateTargetLocation_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.TestPathReachability
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Anchor                         ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// struct FVector                 StartLocation                  ( CPF_Const | CPF_Parm | CPF_OutParm )

bool Usfxpowercustomaction_bioticcharge::TestPathReachability ( class ANavigationPoint* Anchor, struct FVector Extent, struct FVector* StartLocation )
{
	static UFunction* pFnTestPathReachability = NULL;

	if ( ! pFnTestPathReachability )
		pFnTestPathReachability = (UFunction*) UObject::GObjObjects()->Data[ 135658 ];

	Usfxpowercustomaction_bioticcharge_execTestPathReachability_Parms TestPathReachability_Parms;
	TestPathReachability_Parms.Anchor = Anchor;
	memcpy ( &TestPathReachability_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnTestPathReachability, &TestPathReachability_Parms, NULL );

	if ( StartLocation )
		memcpy ( StartLocation, &TestPathReachability_Parms.StartLocation, 0xC );

	return TestPathReachability_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.NewVector
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Z                              ( CPF_Parm )

struct FVector Usfxpowercustomaction_bioticcharge::NewVector ( float X, float Y, float Z )
{
	static UFunction* pFnNewVector = NULL;

	if ( ! pFnNewVector )
		pFnNewVector = (UFunction*) UObject::GObjObjects()->Data[ 135652 ];

	Usfxpowercustomaction_bioticcharge_execNewVector_Parms NewVector_Parms;
	NewVector_Parms.X = X;
	NewVector_Parms.Y = Y;
	NewVector_Parms.Z = Z;

	this->ProcessEvent ( pFnNewVector, &NewVector_Parms, NULL );

	return NewVector_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.CanUsePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool Usfxpowercustomaction_bioticcharge::CanUsePower ( class AActor* oTarget )
{
	static UFunction* pFnCanUsePower = NULL;

	if ( ! pFnCanUsePower )
		pFnCanUsePower = (UFunction*) UObject::GObjObjects()->Data[ 135638 ];

	Usfxpowercustomaction_bioticcharge_execCanUsePower_Parms CanUsePower_Parms;
	CanUsePower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanUsePower, &CanUsePower_Parms, NULL );

	return CanUsePower_Parms.ReturnValue;
};

// Function sfxgamecontent.sfxpowercustomaction_bioticcharge.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                SyncPawn                       ( CPF_Parm )
// unsigned long                  bForced                        ( CPF_Parm )

bool Usfxpowercustomaction_bioticcharge::InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 135644 ];

	Usfxpowercustomaction_bioticcharge_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;
	InternalCanDoCustomAction_Parms.SyncPawn = SyncPawn;
	InternalCanDoCustomAction_Parms.bForced = bForced;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile.PrecacheVFX
// [0x00022002] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 83104 ];

	ASFXProjectile_Power_BioticCharge_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXProjectile.IsTargettedProjectile
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXProjectile_Power_BioticCharge::IsTargettedProjectile ( )
{
	static UFunction* pFnIsTargettedProjectile = NULL;

	if ( ! pFnIsTargettedProjectile )
		pFnIsTargettedProjectile = (UFunction*) UObject::GObjObjects()->Data[ 83102 ];

	ASFXProjectile_Power_BioticCharge_execIsTargettedProjectile_Parms IsTargettedProjectile_Parms;

	this->ProcessEvent ( pFnIsTargettedProjectile, &IsTargettedProjectile_Parms, NULL );

	return IsTargettedProjectile_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile.Destroyed
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Power_BioticCharge::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 83101 ];

	ASFXProjectile_Power_BioticCharge_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function SFXGame.SFXProjectile.Tick_Prediction
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::Tick_Prediction ( float DeltaTime )
{
	static UFunction* pFnTick_Prediction = NULL;

	if ( ! pFnTick_Prediction )
		pFnTick_Prediction = (UFunction*) UObject::GObjObjects()->Data[ 83095 ];

	ASFXProjectile_Power_BioticCharge_execTick_Prediction_Parms Tick_Prediction_Parms;
	Tick_Prediction_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick_Prediction, &Tick_Prediction_Parms, NULL );
};

// Function SFXGame.SFXProjectile.SetPredictionTarget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ASFXProjectile*          NewTargetProjectile            ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::SetPredictionTarget ( class ASFXProjectile* NewTargetProjectile )
{
	static UFunction* pFnSetPredictionTarget = NULL;

	if ( ! pFnSetPredictionTarget )
		pFnSetPredictionTarget = (UFunction*) UObject::GObjObjects()->Data[ 75444 ];

	ASFXProjectile_Power_BioticCharge_execSetPredictionTarget_Parms SetPredictionTarget_Parms;
	SetPredictionTarget_Parms.NewTargetProjectile = NewTargetProjectile;

	this->ProcessEvent ( pFnSetPredictionTarget, &SetPredictionTarget_Parms, NULL );
};

// Function SFXGame.SFXProjectile.SetPrediction
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// unsigned long                  Active                         ( CPF_Parm )
// unsigned long                  bIsATarget                     ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::SetPrediction ( unsigned long Active, unsigned long bIsATarget )
{
	static UFunction* pFnSetPrediction = NULL;

	if ( ! pFnSetPrediction )
		pFnSetPrediction = (UFunction*) UObject::GObjObjects()->Data[ 75435 ];

	ASFXProjectile_Power_BioticCharge_execSetPrediction_Parms SetPrediction_Parms;
	SetPrediction_Parms.Active = Active;
	SetPrediction_Parms.bIsATarget = bIsATarget;

	this->ProcessEvent ( pFnSetPrediction, &SetPrediction_Parms, NULL );
};

// Function SFXGame.SFXProjectile.SetPredictedInitialSpeed
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXProjectile_Power_BioticCharge::SetPredictedInitialSpeed ( )
{
	static UFunction* pFnSetPredictedInitialSpeed = NULL;

	if ( ! pFnSetPredictedInitialSpeed )
		pFnSetPredictedInitialSpeed = (UFunction*) UObject::GObjObjects()->Data[ 83024 ];

	ASFXProjectile_Power_BioticCharge_execSetPredictedInitialSpeed_Parms SetPredictedInitialSpeed_Parms;

	this->ProcessEvent ( pFnSetPredictedInitialSpeed, &SetPredictedInitialSpeed_Parms, NULL );
};

// Function SFXGame.SFXProjectile.Reset
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Power_BioticCharge::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 83090 ];

	ASFXProjectile_Power_BioticCharge_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function SFXGame.SFXProjectile.ReplicatedExplosionUpdated
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Power_BioticCharge::ReplicatedExplosionUpdated ( )
{
	static UFunction* pFnReplicatedExplosionUpdated = NULL;

	if ( ! pFnReplicatedExplosionUpdated )
		pFnReplicatedExplosionUpdated = (UFunction*) UObject::GObjObjects()->Data[ 83089 ];

	ASFXProjectile_Power_BioticCharge_execReplicatedExplosionUpdated_Parms ReplicatedExplosionUpdated_Parms;

	this->ProcessEvent ( pFnReplicatedExplosionUpdated, &ReplicatedExplosionUpdated_Parms, NULL );
};

// Function SFXGame.SFXProjectile.ReplicatedInitUpdated
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Power_BioticCharge::ReplicatedInitUpdated ( )
{
	static UFunction* pFnReplicatedInitUpdated = NULL;

	if ( ! pFnReplicatedInitUpdated )
		pFnReplicatedInitUpdated = (UFunction*) UObject::GObjObjects()->Data[ 83086 ];

	ASFXProjectile_Power_BioticCharge_execReplicatedInitUpdated_Parms ReplicatedInitUpdated_Parms;

	this->ProcessEvent ( pFnReplicatedInitUpdated, &ReplicatedInitUpdated_Parms, NULL );
};

// Function SFXGame.SFXProjectile.ReplicateExplode
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::ReplicateExplode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnReplicateExplode = NULL;

	if ( ! pFnReplicateExplode )
		pFnReplicateExplode = (UFunction*) UObject::GObjObjects()->Data[ 83081 ];

	ASFXProjectile_Power_BioticCharge_execReplicateExplode_Parms ReplicateExplode_Parms;
	memcpy ( &ReplicateExplode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReplicateExplode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnReplicateExplode, &ReplicateExplode_Parms, NULL );
};

// Function SFXGame.SFXProjectile.ReplicateInit
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::ReplicateInit ( struct FVector Direction )
{
	static UFunction* pFnReplicateInit = NULL;

	if ( ! pFnReplicateInit )
		pFnReplicateInit = (UFunction*) UObject::GObjObjects()->Data[ 83078 ];

	ASFXProjectile_Power_BioticCharge_execReplicateInit_Parms ReplicateInit_Parms;
	memcpy ( &ReplicateInit_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnReplicateInit, &ReplicateInit_Parms, NULL );
};

// Function SFXGame.SFXProjectile.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 83075 ];

	ASFXProjectile_Power_BioticCharge_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function SFXGame.SFXProjectile.SpawnImpactEffect
// [0x00020100] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::SpawnImpactEffect ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnSpawnImpactEffect = NULL;

	if ( ! pFnSpawnImpactEffect )
		pFnSpawnImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 83072 ];

	ASFXProjectile_Power_BioticCharge_execSpawnImpactEffect_Parms SpawnImpactEffect_Parms;
	memcpy ( &SpawnImpactEffect_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &SpawnImpactEffect_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnSpawnImpactEffect, &SpawnImpactEffect_Parms, NULL );
};

// Function SFXGame.SFXProjectile.GetMomentum
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXProjectile_Power_BioticCharge::GetMomentum ( )
{
	static UFunction* pFnGetMomentum = NULL;

	if ( ! pFnGetMomentum )
		pFnGetMomentum = (UFunction*) UObject::GObjObjects()->Data[ 83068 ];

	ASFXProjectile_Power_BioticCharge_execGetMomentum_Parms GetMomentum_Parms;

	this->ProcessEvent ( pFnGetMomentum, &GetMomentum_Parms, NULL );

	return GetMomentum_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile.GetDamageRadius
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXProjectile_Power_BioticCharge::GetDamageRadius ( )
{
	static UFunction* pFnGetDamageRadius = NULL;

	if ( ! pFnGetDamageRadius )
		pFnGetDamageRadius = (UFunction*) UObject::GObjObjects()->Data[ 83065 ];

	ASFXProjectile_Power_BioticCharge_execGetDamageRadius_Parms GetDamageRadius_Parms;

	this->ProcessEvent ( pFnGetDamageRadius, &GetDamageRadius_Parms, NULL );

	return GetDamageRadius_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile.GetDamage
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXProjectile_Power_BioticCharge::GetDamage ( )
{
	static UFunction* pFnGetDamage = NULL;

	if ( ! pFnGetDamage )
		pFnGetDamage = (UFunction*) UObject::GObjObjects()->Data[ 83062 ];

	ASFXProjectile_Power_BioticCharge_execGetDamage_Parms GetDamage_Parms;

	this->ProcessEvent ( pFnGetDamage, &GetDamage_Parms, NULL );

	return GetDamage_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile.Bounce
// [0x00020102] 
// Parameters infos:
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::Bounce ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnBounce = NULL;

	if ( ! pFnBounce )
		pFnBounce = (UFunction*) UObject::GObjObjects()->Data[ 83053 ];

	ASFXProjectile_Power_BioticCharge_execBounce_Parms Bounce_Parms;
	Bounce_Parms.HitActor = HitActor;
	memcpy ( &Bounce_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Bounce_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnBounce, &Bounce_Parms, NULL );
};

// Function SFXGame.SFXProjectile.ProcessTouch
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 83049 ];

	ASFXProjectile_Power_BioticCharge_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function SFXGame.SFXProjectile.ApplyExternalForce
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Power_BioticCharge::ApplyExternalForce ( )
{
	static UFunction* pFnApplyExternalForce = NULL;

	if ( ! pFnApplyExternalForce )
		pFnApplyExternalForce = (UFunction*) UObject::GObjObjects()->Data[ 83048 ];

	ASFXProjectile_Power_BioticCharge_execApplyExternalForce_Parms ApplyExternalForce_Parms;

	this->ProcessEvent ( pFnApplyExternalForce, &ApplyExternalForce_Parms, NULL );
};

// Function SFXGame.SFXProjectile.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 83043 ];

	ASFXProjectile_Power_BioticCharge_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXProjectile.ProjEffectsTrailFinished
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void ASFXProjectile_Power_BioticCharge::ProjEffectsTrailFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnProjEffectsTrailFinished = NULL;

	if ( ! pFnProjEffectsTrailFinished )
		pFnProjEffectsTrailFinished = (UFunction*) UObject::GObjObjects()->Data[ 83041 ];

	ASFXProjectile_Power_BioticCharge_execProjEffectsTrailFinished_Parms ProjEffectsTrailFinished_Parms;
	ProjEffectsTrailFinished_Parms.PSC = PSC;

	this->ProcessEvent ( pFnProjEffectsTrailFinished, &ProjEffectsTrailFinished_Parms, NULL );
};

// Function SFXGame.SFXProjectile.SetProjectileHidden
// [0x00020102] 
// Parameters infos:
// unsigned long                  bHide                          ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::SetProjectileHidden ( unsigned long bHide )
{
	static UFunction* pFnSetProjectileHidden = NULL;

	if ( ! pFnSetProjectileHidden )
		pFnSetProjectileHidden = (UFunction*) UObject::GObjObjects()->Data[ 83038 ];

	ASFXProjectile_Power_BioticCharge_execSetProjectileHidden_Parms SetProjectileHidden_Parms;
	SetProjectileHidden_Parms.bHide = bHide;

	this->ProcessEvent ( pFnSetProjectileHidden, &SetProjectileHidden_Parms, NULL );
};

// Function SFXGame.SFXProjectile.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 83035 ];

	ASFXProjectile_Power_BioticCharge_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function SFXGame.SFXProjectile.HitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ASFXProjectile_Power_BioticCharge::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 83030 ];

	ASFXProjectile_Power_BioticCharge_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function SFXGame.SFXProjectile.OutsideWorldBounds
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Power_BioticCharge::OutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = (UFunction*) UObject::GObjObjects()->Data[ 83029 ];

	ASFXProjectile_Power_BioticCharge_execOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function SFXGame.SFXProjectile.FellOutOfWorld
// [0x00020100] 
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::FellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 83027 ];

	ASFXProjectile_Power_BioticCharge_execFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function SFXGame.SFXProjectile.IsShuttingDown
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXProjectile_Power_BioticCharge::IsShuttingDown ( )
{
	static UFunction* pFnIsShuttingDown = NULL;

	if ( ! pFnIsShuttingDown )
		pFnIsShuttingDown = (UFunction*) UObject::GObjObjects()->Data[ 75442 ];

	ASFXProjectile_Power_BioticCharge_execIsShuttingDown_Parms IsShuttingDown_Parms;

	this->ProcessEvent ( pFnIsShuttingDown, &IsShuttingDown_Parms, NULL );

	return IsShuttingDown_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile.ShutDown
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Power_BioticCharge::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 83025 ];

	ASFXProjectile_Power_BioticCharge_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function SFXGame.SFXProjectile.Init
// [0x00020102] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ASFXProjectile_Power_BioticCharge::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 83022 ];

	ASFXProjectile_Power_BioticCharge_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXProjectile.ShutdownPostEffects
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Power_BioticCharge::ShutdownPostEffects ( )
{
	static UFunction* pFnShutdownPostEffects = NULL;

	if ( ! pFnShutdownPostEffects )
		pFnShutdownPostEffects = (UFunction*) UObject::GObjObjects()->Data[ 83021 ];

	ASFXProjectile_Power_BioticCharge_execShutdownPostEffects_Parms ShutdownPostEffects_Parms;

	this->ProcessEvent ( pFnShutdownPostEffects, &ShutdownPostEffects_Parms, NULL );
};

// Function SFXGame.SFXProjectile.Reuse
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void ASFXProjectile_Power_BioticCharge::eventReuse ( )
{
	static UFunction* pFnReuse = NULL;

	if ( ! pFnReuse )
		pFnReuse = (UFunction*) UObject::GObjObjects()->Data[ 78095 ];

	ASFXProjectile_Power_BioticCharge_eventReuse_Parms Reuse_Parms;

	this->ProcessEvent ( pFnReuse, &Reuse_Parms, NULL );
};

// Function SFXGame.SFXProjectile.Recycle
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXProjectile_Power_BioticCharge::eventRecycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 83014 ];

	ASFXProjectile_Power_BioticCharge_eventRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function SFXGame.SFXProjectile.SpawnFlightEffects
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void ASFXProjectile_Power_BioticCharge::SpawnFlightEffects ( )
{
	static UFunction* pFnSpawnFlightEffects = NULL;

	if ( ! pFnSpawnFlightEffects )
		pFnSpawnFlightEffects = (UFunction*) UObject::GObjObjects()->Data[ 83006 ];

	ASFXProjectile_Power_BioticCharge_execSpawnFlightEffects_Parms SpawnFlightEffects_Parms;

	this->ProcessEvent ( pFnSpawnFlightEffects, &SpawnFlightEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon_Shotgun_Base.GetStoreQualification
// [0x00022002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASFXWeapon_Shotgun_Katana::GetStoreQualification ( )
{
	static UFunction* pFnGetStoreQualification = NULL;

	if ( ! pFnGetStoreQualification )
		pFnGetStoreQualification = (UFunction*) UObject::GObjObjects()->Data[ 88163 ];

	ASFXWeapon_Shotgun_Katana_execGetStoreQualification_Parms GetStoreQualification_Parms;

	this->ProcessEvent ( pFnGetStoreQualification, &GetStoreQualification_Parms, NULL );

	return GetStoreQualification_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_Shotgun_Base.DummyFire
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 TargetLoc                      ( CPF_Parm )
// class AActor*                  AttachedTo                     ( CPF_OptionalParm | CPF_Parm )
// float                          AimErrorDeg                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_Shotgun_Katana::eventDummyFire ( unsigned char FireModeNum, struct FVector TargetLoc, class AActor* AttachedTo, float AimErrorDeg, class AActor* TargetActor )
{
	static UFunction* pFnDummyFire = NULL;

	if ( ! pFnDummyFire )
		pFnDummyFire = (UFunction*) UObject::GObjObjects()->Data[ 88144 ];

	ASFXWeapon_Shotgun_Katana_eventDummyFire_Parms DummyFire_Parms;
	DummyFire_Parms.FireModeNum = FireModeNum;
	memcpy ( &DummyFire_Parms.TargetLoc, &TargetLoc, 0xC );
	DummyFire_Parms.AttachedTo = AttachedTo;
	DummyFire_Parms.AimErrorDeg = AimErrorDeg;
	DummyFire_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnDummyFire, &DummyFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon_Shotgun_Base.GetWeaponSpecificImpactSound
// [0x00020102] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactSounds* ImpactSounds                   ( CPF_Parm )

class UWwiseEvent* ASFXWeapon_Shotgun_Katana::GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds )
{
	static UFunction* pFnGetWeaponSpecificImpactSound = NULL;

	if ( ! pFnGetWeaponSpecificImpactSound )
		pFnGetWeaponSpecificImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 88141 ];

	ASFXWeapon_Shotgun_Katana_execGetWeaponSpecificImpactSound_Parms GetWeaponSpecificImpactSound_Parms;
	GetWeaponSpecificImpactSound_Parms.ImpactSounds = ImpactSounds;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactSound, &GetWeaponSpecificImpactSound_Parms, NULL );

	return GetWeaponSpecificImpactSound_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_Shotgun_Base.GetWeaponSpecificImpactEffect
// [0x00022102] 
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactEffects* ImpactEffects                  ( CPF_Parm )

class UParticleSystem* ASFXWeapon_Shotgun_Katana::GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects )
{
	static UFunction* pFnGetWeaponSpecificImpactEffect = NULL;

	if ( ! pFnGetWeaponSpecificImpactEffect )
		pFnGetWeaponSpecificImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 88138 ];

	ASFXWeapon_Shotgun_Katana_execGetWeaponSpecificImpactEffect_Parms GetWeaponSpecificImpactEffect_Parms;
	GetWeaponSpecificImpactEffect_Parms.ImpactEffects = ImpactEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactEffect, &GetWeaponSpecificImpactEffect_Parms, NULL );

	return GetWeaponSpecificImpactEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_Shotgun_Base.GetWeaponSpecificDecalData
// [0x00420102] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USFXPhysicalMaterialDecals* DecalEffects                   ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm | CPF_OutParm )

class UDecalComponent* ASFXWeapon_Shotgun_Katana::GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime )
{
	static UFunction* pFnGetWeaponSpecificDecalData = NULL;

	if ( ! pFnGetWeaponSpecificDecalData )
		pFnGetWeaponSpecificDecalData = (UFunction*) UObject::GObjObjects()->Data[ 88133 ];

	ASFXWeapon_Shotgun_Katana_execGetWeaponSpecificDecalData_Parms GetWeaponSpecificDecalData_Parms;
	GetWeaponSpecificDecalData_Parms.DecalEffects = DecalEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificDecalData, &GetWeaponSpecificDecalData_Parms, NULL );

	if ( FadeTime )
		*FadeTime = GetWeaponSpecificDecalData_Parms.FadeTime;

	return GetWeaponSpecificDecalData_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_Shotgun_Base.FinishLatentFire
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_Shotgun_Katana::FinishLatentFire ( )
{
	static UFunction* pFnFinishLatentFire = NULL;

	if ( ! pFnFinishLatentFire )
		pFnFinishLatentFire = (UFunction*) UObject::GObjObjects()->Data[ 88132 ];

	ASFXWeapon_Shotgun_Katana_execFinishLatentFire_Parms FinishLatentFire_Parms;

	this->ProcessEvent ( pFnFinishLatentFire, &FinishLatentFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon_Shotgun_Base.PollLatentFire
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_Shotgun_Katana::PollLatentFire ( )
{
	static UFunction* pFnPollLatentFire = NULL;

	if ( ! pFnPollLatentFire )
		pFnPollLatentFire = (UFunction*) UObject::GObjObjects()->Data[ 88119 ];

	ASFXWeapon_Shotgun_Katana_execPollLatentFire_Parms PollLatentFire_Parms;

	this->ProcessEvent ( pFnPollLatentFire, &PollLatentFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon_Shotgun_Base.FirePellets
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FRotator                AimRotation                    ( CPF_Parm )
// unsigned char                  FireMode                       ( CPF_Parm )

void ASFXWeapon_Shotgun_Katana::FirePellets ( struct FVector StartLocation, struct FRotator AimRotation, unsigned char FireMode )
{
	static UFunction* pFnFirePellets = NULL;

	if ( ! pFnFirePellets )
		pFnFirePellets = (UFunction*) UObject::GObjObjects()->Data[ 88100 ];

	ASFXWeapon_Shotgun_Katana_execFirePellets_Parms FirePellets_Parms;
	memcpy ( &FirePellets_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &FirePellets_Parms.AimRotation, &AimRotation, 0xC );
	FirePellets_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnFirePellets, &FirePellets_Parms, NULL );
};

// Function SFXGame.SFXWeapon_Shotgun_Base.CalcRemoteImpactEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 GivenHitLocation               ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASFXWeapon_Shotgun_Katana::CalcRemoteImpactEffects ( unsigned char FireModeNum, struct FVector GivenHitLocation, unsigned long bViaReplication )
{
	static UFunction* pFnCalcRemoteImpactEffects = NULL;

	if ( ! pFnCalcRemoteImpactEffects )
		pFnCalcRemoteImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 88105 ];

	ASFXWeapon_Shotgun_Katana_execCalcRemoteImpactEffects_Parms CalcRemoteImpactEffects_Parms;
	CalcRemoteImpactEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &CalcRemoteImpactEffects_Parms.GivenHitLocation, &GivenHitLocation, 0xC );
	CalcRemoteImpactEffects_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnCalcRemoteImpactEffects, &CalcRemoteImpactEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon_Shotgun_Base.DrawDebugShotgunCone
// [0x00020102] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FRotator                AimRot                         ( CPF_Parm )

void ASFXWeapon_Shotgun_Katana::DrawDebugShotgunCone ( struct FVector StartLocation, struct FRotator AimRot )
{
	static UFunction* pFnDrawDebugShotgunCone = NULL;

	if ( ! pFnDrawDebugShotgunCone )
		pFnDrawDebugShotgunCone = (UFunction*) UObject::GObjObjects()->Data[ 88101 ];

	ASFXWeapon_Shotgun_Katana_execDrawDebugShotgunCone_Parms DrawDebugShotgunCone_Parms;
	memcpy ( &DrawDebugShotgunCone_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DrawDebugShotgunCone_Parms.AimRot, &AimRot, 0xC );

	this->ProcessEvent ( pFnDrawDebugShotgunCone, &DrawDebugShotgunCone_Parms, NULL );
};

// Function SFXGame.SFXWeapon_Shotgun_Base.CustomFire
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Shotgun_Katana::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = (UFunction*) UObject::GObjObjects()->Data[ 88097 ];

	ASFXWeapon_Shotgun_Katana_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon_Shotgun_Base.ShouldSpawnTracerFX
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_Shotgun_Katana::ShouldSpawnTracerFX ( )
{
	static UFunction* pFnShouldSpawnTracerFX = NULL;

	if ( ! pFnShouldSpawnTracerFX )
		pFnShouldSpawnTracerFX = (UFunction*) UObject::GObjObjects()->Data[ 88095 ];

	ASFXWeapon_Shotgun_Katana_execShouldSpawnTracerFX_Parms ShouldSpawnTracerFX_Parms;

	this->ProcessEvent ( pFnShouldSpawnTracerFX, &ShouldSpawnTracerFX_Parms, NULL );

	return ShouldSpawnTracerFX_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_Shotgun_Base.ScaleWeapon
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_Shotgun_Katana::ScaleWeapon ( )
{
	static UFunction* pFnScaleWeapon = NULL;

	if ( ! pFnScaleWeapon )
		pFnScaleWeapon = (UFunction*) UObject::GObjObjects()->Data[ 88093 ];

	ASFXWeapon_Shotgun_Katana_execScaleWeapon_Parms ScaleWeapon_Parms;

	this->ProcessEvent ( pFnScaleWeapon, &ScaleWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GiveWeaponCodex
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::GiveWeaponCodex ( )
{
	static UFunction* pFnGiveWeaponCodex = NULL;

	if ( ! pFnGiveWeaponCodex )
		pFnGiveWeaponCodex = (UFunction*) UObject::GObjObjects()->Data[ 76294 ];

	ASFXWeapon_SMG_Shuriken_execGiveWeaponCodex_Parms GiveWeaponCodex_Parms;

	this->ProcessEvent ( pFnGiveWeaponCodex, &GiveWeaponCodex_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ClearFizzleCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::ClearFizzleCount ( )
{
	static UFunction* pFnClearFizzleCount = NULL;

	if ( ! pFnClearFizzleCount )
		pFnClearFizzleCount = (UFunction*) UObject::GObjObjects()->Data[ 75417 ];

	ASFXWeapon_SMG_Shuriken_execClearFizzleCount_Parms ClearFizzleCount_Parms;

	this->ProcessEvent ( pFnClearFizzleCount, &ClearFizzleCount_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IncrementFizzleCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::IncrementFizzleCount ( )
{
	static UFunction* pFnIncrementFizzleCount = NULL;

	if ( ! pFnIncrementFizzleCount )
		pFnIncrementFizzleCount = (UFunction*) UObject::GObjObjects()->Data[ 75802 ];

	ASFXWeapon_SMG_Shuriken_execIncrementFizzleCount_Parms IncrementFizzleCount_Parms;

	this->ProcessEvent ( pFnIncrementFizzleCount, &IncrementFizzleCount_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IsClientReadyToInitialize
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::IsClientReadyToInitialize ( )
{
	static UFunction* pFnIsClientReadyToInitialize = NULL;

	if ( ! pFnIsClientReadyToInitialize )
		pFnIsClientReadyToInitialize = (UFunction*) UObject::GObjObjects()->Data[ 76292 ];

	ASFXWeapon_SMG_Shuriken_execIsClientReadyToInitialize_Parms IsClientReadyToInitialize_Parms;

	this->ProcessEvent ( pFnIsClientReadyToInitialize, &IsClientReadyToInitialize_Parms, NULL );

	return IsClientReadyToInitialize_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.UnsubscribeFromImpactNotifications
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

void ASFXWeapon_SMG_Shuriken::UnsubscribeFromImpactNotifications ( struct FScriptDelegate Callback )
{
	static UFunction* pFnUnsubscribeFromImpactNotifications = NULL;

	if ( ! pFnUnsubscribeFromImpactNotifications )
		pFnUnsubscribeFromImpactNotifications = (UFunction*) UObject::GObjObjects()->Data[ 71078 ];

	ASFXWeapon_SMG_Shuriken_execUnsubscribeFromImpactNotifications_Parms UnsubscribeFromImpactNotifications_Parms;
	memcpy ( &UnsubscribeFromImpactNotifications_Parms.Callback, &Callback, 0xC );

	this->ProcessEvent ( pFnUnsubscribeFromImpactNotifications, &UnsubscribeFromImpactNotifications_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SubscribeToImpactNotifications
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

void ASFXWeapon_SMG_Shuriken::SubscribeToImpactNotifications ( struct FScriptDelegate Callback )
{
	static UFunction* pFnSubscribeToImpactNotifications = NULL;

	if ( ! pFnSubscribeToImpactNotifications )
		pFnSubscribeToImpactNotifications = (UFunction*) UObject::GObjObjects()->Data[ 71075 ];

	ASFXWeapon_SMG_Shuriken_execSubscribeToImpactNotifications_Parms SubscribeToImpactNotifications_Parms;
	memcpy ( &SubscribeToImpactNotifications_Parms.Callback, &Callback, 0xC );

	this->ProcessEvent ( pFnSubscribeToImpactNotifications, &SubscribeToImpactNotifications_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetPenetrationDepth
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Shuriken::eventGetPenetrationDepth ( )
{
	static UFunction* pFnGetPenetrationDepth = NULL;

	if ( ! pFnGetPenetrationDepth )
		pFnGetPenetrationDepth = (UFunction*) UObject::GObjObjects()->Data[ 76288 ];

	ASFXWeapon_SMG_Shuriken_eventGetPenetrationDepth_Parms GetPenetrationDepth_Parms;

	this->ProcessEvent ( pFnGetPenetrationDepth, &GetPenetrationDepth_Parms, NULL );

	return GetPenetrationDepth_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.LoadWeaponClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 WeaponClassName                ( CPF_Parm | CPF_NeedCtorLink )

class UClass* ASFXWeapon_SMG_Shuriken::LoadWeaponClass ( struct FString WeaponClassName )
{
	static UFunction* pFnLoadWeaponClass = NULL;

	if ( ! pFnLoadWeaponClass )
		pFnLoadWeaponClass = (UFunction*) UObject::GObjObjects()->Data[ 47758 ];

	ASFXWeapon_SMG_Shuriken_execLoadWeaponClass_Parms LoadWeaponClass_Parms;
	memcpy ( &LoadWeaponClass_Parms.WeaponClassName, &WeaponClassName, 0xC );

	this->ProcessEvent ( pFnLoadWeaponClass, &LoadWeaponClass_Parms, NULL );

	return LoadWeaponClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.FindWeaponClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 WeaponClassName                ( CPF_Parm | CPF_NeedCtorLink )

class UClass* ASFXWeapon_SMG_Shuriken::FindWeaponClass ( struct FString WeaponClassName )
{
	static UFunction* pFnFindWeaponClass = NULL;

	if ( ! pFnFindWeaponClass )
		pFnFindWeaponClass = (UFunction*) UObject::GObjObjects()->Data[ 76282 ];

	ASFXWeapon_SMG_Shuriken_execFindWeaponClass_Parms FindWeaponClass_Parms;
	memcpy ( &FindWeaponClass_Parms.WeaponClassName, &WeaponClassName, 0xC );

	this->ProcessEvent ( pFnFindWeaponClass, &FindWeaponClass_Parms, NULL );

	return FindWeaponClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetStoreQualification
// [0x00022002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASFXWeapon_SMG_Shuriken::GetStoreQualification ( )
{
	static UFunction* pFnGetStoreQualification = NULL;

	if ( ! pFnGetStoreQualification )
		pFnGetStoreQualification = (UFunction*) UObject::GObjObjects()->Data[ 76280 ];

	ASFXWeapon_SMG_Shuriken_execGetStoreQualification_Parms GetStoreQualification_Parms;

	this->ProcessEvent ( pFnGetStoreQualification, &GetStoreQualification_Parms, NULL );

	return GetStoreQualification_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SetWeaponHidden
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWeaponHidden                  ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SetWeaponHidden ( unsigned long bWeaponHidden )
{
	static UFunction* pFnSetWeaponHidden = NULL;

	if ( ! pFnSetWeaponHidden )
		pFnSetWeaponHidden = (UFunction*) UObject::GObjObjects()->Data[ 48379 ];

	ASFXWeapon_SMG_Shuriken_execSetWeaponHidden_Parms SetWeaponHidden_Parms;
	SetWeaponHidden_Parms.bWeaponHidden = bWeaponHidden;

	this->ProcessEvent ( pFnSetWeaponHidden, &SetWeaponHidden_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponStatBarValues
// [0x00422003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  StatBar                        ( CPF_Parm )
// float                          WeaponValue                    ( CPF_Parm | CPF_OutParm )

void ASFXWeapon_SMG_Shuriken::GetWeaponStatBarValues ( unsigned char StatBar, float* WeaponValue )
{
	static UFunction* pFnGetWeaponStatBarValues = NULL;

	if ( ! pFnGetWeaponStatBarValues )
		pFnGetWeaponStatBarValues = (UFunction*) UObject::GObjObjects()->Data[ 76274 ];

	ASFXWeapon_SMG_Shuriken_execGetWeaponStatBarValues_Parms GetWeaponStatBarValues_Parms;
	GetWeaponStatBarValues_Parms.StatBar = StatBar;

	this->ProcessEvent ( pFnGetWeaponStatBarValues, &GetWeaponStatBarValues_Parms, NULL );

	if ( WeaponValue )
		*WeaponValue = GetWeaponStatBarValues_Parms.WeaponValue;
};

// Function SFXGame.SFXWeapon.HasLoopingFire
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::eventHasLoopingFire ( )
{
	static UFunction* pFnHasLoopingFire = NULL;

	if ( ! pFnHasLoopingFire )
		pFnHasLoopingFire = (UFunction*) UObject::GObjObjects()->Data[ 76272 ];

	ASFXWeapon_SMG_Shuriken_eventHasLoopingFire_Parms HasLoopingFire_Parms;

	this->ProcessEvent ( pFnHasLoopingFire, &HasLoopingFire_Parms, NULL );

	return HasLoopingFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ClearFlashLocation
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::ClearFlashLocation ( )
{
	static UFunction* pFnClearFlashLocation = NULL;

	if ( ! pFnClearFlashLocation )
		pFnClearFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 76271 ];

	ASFXWeapon_SMG_Shuriken_execClearFlashLocation_Parms ClearFlashLocation_Parms;

	this->ProcessEvent ( pFnClearFlashLocation, &ClearFlashLocation_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetFlashLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SetFlashLocation ( struct FVector HitLocation )
{
	static UFunction* pFnSetFlashLocation = NULL;

	if ( ! pFnSetFlashLocation )
		pFnSetFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 76269 ];

	ASFXWeapon_SMG_Shuriken_execSetFlashLocation_Parms SetFlashLocation_Parms;
	memcpy ( &SetFlashLocation_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSetFlashLocation, &SetFlashLocation_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ApplyDefaultWeaponMods
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bClearOldMods                  ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::ApplyDefaultWeaponMods ( unsigned long bClearOldMods )
{
	static UFunction* pFnApplyDefaultWeaponMods = NULL;

	if ( ! pFnApplyDefaultWeaponMods )
		pFnApplyDefaultWeaponMods = (UFunction*) UObject::GObjObjects()->Data[ 76249 ];

	ASFXWeapon_SMG_Shuriken_execApplyDefaultWeaponMods_Parms ApplyDefaultWeaponMods_Parms;
	ApplyDefaultWeaponMods_Parms.bClearOldMods = bClearOldMods;

	this->ProcessEvent ( pFnApplyDefaultWeaponMods, &ApplyDefaultWeaponMods_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetWeaponModBodyColour
// [0x00820102] 
// Parameters infos:
// int                            ModLevel                       ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SetWeaponModBodyColour ( int ModLevel )
{
	static UFunction* pFnSetWeaponModBodyColour = NULL;

	if ( ! pFnSetWeaponModBodyColour )
		pFnSetWeaponModBodyColour = (UFunction*) UObject::GObjObjects()->Data[ 76243 ];

	ASFXWeapon_SMG_Shuriken_execSetWeaponModBodyColour_Parms SetWeaponModBodyColour_Parms;
	SetWeaponModBodyColour_Parms.ModLevel = ModLevel;

	this->ProcessEvent ( pFnSetWeaponModBodyColour, &SetWeaponModBodyColour_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetWeaponModGripColour
// [0x00820102] 
// Parameters infos:
// int                            ModLevel                       ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SetWeaponModGripColour ( int ModLevel )
{
	static UFunction* pFnSetWeaponModGripColour = NULL;

	if ( ! pFnSetWeaponModGripColour )
		pFnSetWeaponModGripColour = (UFunction*) UObject::GObjObjects()->Data[ 76237 ];

	ASFXWeapon_SMG_Shuriken_execSetWeaponModGripColour_Parms SetWeaponModGripColour_Parms;
	SetWeaponModGripColour_Parms.ModLevel = ModLevel;

	this->ProcessEvent ( pFnSetWeaponModGripColour, &SetWeaponModGripColour_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetWeaponModEmissiveValue
// [0x00820102] 
// Parameters infos:
// int                            ModLevel                       ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SetWeaponModEmissiveValue ( int ModLevel )
{
	static UFunction* pFnSetWeaponModEmissiveValue = NULL;

	if ( ! pFnSetWeaponModEmissiveValue )
		pFnSetWeaponModEmissiveValue = (UFunction*) UObject::GObjObjects()->Data[ 76231 ];

	ASFXWeapon_SMG_Shuriken_execSetWeaponModEmissiveValue_Parms SetWeaponModEmissiveValue_Parms;
	SetWeaponModEmissiveValue_Parms.ModLevel = ModLevel;

	this->ProcessEvent ( pFnSetWeaponModEmissiveValue, &SetWeaponModEmissiveValue_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ClearWeaponModMaterialParameters
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::ClearWeaponModMaterialParameters ( )
{
	static UFunction* pFnClearWeaponModMaterialParameters = NULL;

	if ( ! pFnClearWeaponModMaterialParameters )
		pFnClearWeaponModMaterialParameters = (UFunction*) UObject::GObjObjects()->Data[ 76229 ];

	ASFXWeapon_SMG_Shuriken_execClearWeaponModMaterialParameters_Parms ClearWeaponModMaterialParameters_Parms;

	this->ProcessEvent ( pFnClearWeaponModMaterialParameters, &ClearWeaponModMaterialParameters_Parms, NULL );
};

// Function SFXGame.SFXWeapon.RestoreFlashlightToNormal
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::RestoreFlashlightToNormal ( )
{
	static UFunction* pFnRestoreFlashlightToNormal = NULL;

	if ( ! pFnRestoreFlashlightToNormal )
		pFnRestoreFlashlightToNormal = (UFunction*) UObject::GObjObjects()->Data[ 76225 ];

	ASFXWeapon_SMG_Shuriken_execRestoreFlashlightToNormal_Parms RestoreFlashlightToNormal_Parms;

	this->ProcessEvent ( pFnRestoreFlashlightToNormal, &RestoreFlashlightToNormal_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DelayedRestoreFlashlightToNormal
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::DelayedRestoreFlashlightToNormal ( )
{
	static UFunction* pFnDelayedRestoreFlashlightToNormal = NULL;

	if ( ! pFnDelayedRestoreFlashlightToNormal )
		pFnDelayedRestoreFlashlightToNormal = (UFunction*) UObject::GObjObjects()->Data[ 76223 ];

	ASFXWeapon_SMG_Shuriken_execDelayedRestoreFlashlightToNormal_Parms DelayedRestoreFlashlightToNormal_Parms;

	this->ProcessEvent ( pFnDelayedRestoreFlashlightToNormal, &DelayedRestoreFlashlightToNormal_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetFlashlightFireMode
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::SetFlashlightFireMode ( )
{
	static UFunction* pFnSetFlashlightFireMode = NULL;

	if ( ! pFnSetFlashlightFireMode )
		pFnSetFlashlightFireMode = (UFunction*) UObject::GObjObjects()->Data[ 76214 ];

	ASFXWeapon_SMG_Shuriken_execSetFlashlightFireMode_Parms SetFlashlightFireMode_Parms;

	this->ProcessEvent ( pFnSetFlashlightFireMode, &SetFlashlightFireMode_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DetachFlashlight
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::DetachFlashlight ( )
{
	static UFunction* pFnDetachFlashlight = NULL;

	if ( ! pFnDetachFlashlight )
		pFnDetachFlashlight = (UFunction*) UObject::GObjObjects()->Data[ 75811 ];

	ASFXWeapon_SMG_Shuriken_execDetachFlashlight_Parms DetachFlashlight_Parms;

	this->ProcessEvent ( pFnDetachFlashlight, &DetachFlashlight_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AttachFlashlight
// [0x00820103] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::AttachFlashlight ( )
{
	static UFunction* pFnAttachFlashlight = NULL;

	if ( ! pFnAttachFlashlight )
		pFnAttachFlashlight = (UFunction*) UObject::GObjObjects()->Data[ 75788 ];

	ASFXWeapon_SMG_Shuriken_execAttachFlashlight_Parms AttachFlashlight_Parms;

	this->ProcessEvent ( pFnAttachFlashlight, &AttachFlashlight_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IsWeaponAlreadyAwarded
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WeaponClass                    ( CPF_Parm )

bool ASFXWeapon_SMG_Shuriken::IsWeaponAlreadyAwarded ( class UClass* WeaponClass )
{
	static UFunction* pFnIsWeaponAlreadyAwarded = NULL;

	if ( ! pFnIsWeaponAlreadyAwarded )
		pFnIsWeaponAlreadyAwarded = (UFunction*) UObject::GObjObjects()->Data[ 76193 ];

	ASFXWeapon_SMG_Shuriken_execIsWeaponAlreadyAwarded_Parms IsWeaponAlreadyAwarded_Parms;
	IsWeaponAlreadyAwarded_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFnIsWeaponAlreadyAwarded, &IsWeaponAlreadyAwarded_Parms, NULL );

	return IsWeaponAlreadyAwarded_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsWeaponUnlocked
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WeaponClass                    ( CPF_Parm )

bool ASFXWeapon_SMG_Shuriken::IsWeaponUnlocked ( class UClass* WeaponClass )
{
	static UFunction* pFnIsWeaponUnlocked = NULL;

	if ( ! pFnIsWeaponUnlocked )
		pFnIsWeaponUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 76189 ];

	ASFXWeapon_SMG_Shuriken_execIsWeaponUnlocked_Parms IsWeaponUnlocked_Parms;
	IsWeaponUnlocked_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFnIsWeaponUnlocked, &IsWeaponUnlocked_Parms, NULL );

	return IsWeaponUnlocked_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.Upgrade
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXPawn_Player*         Player                         ( CPF_Parm )
// class UClass*                  WeaponClass                    ( CPF_Parm )
// unsigned long                  bNoNotification                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsMultiplayer                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDoesNotCountasNGPFound        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUnlockOnly                    ( CPF_OptionalParm | CPF_Parm )

bool ASFXWeapon_SMG_Shuriken::Upgrade ( class ASFXPawn_Player* Player, class UClass* WeaponClass, unsigned long bNoNotification, unsigned long bIsMultiplayer, unsigned long bDoesNotCountasNGPFound, unsigned long bUnlockOnly )
{
	static UFunction* pFnUpgrade = NULL;

	if ( ! pFnUpgrade )
		pFnUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 47760 ];

	ASFXWeapon_SMG_Shuriken_execUpgrade_Parms Upgrade_Parms;
	Upgrade_Parms.Player = Player;
	Upgrade_Parms.WeaponClass = WeaponClass;
	Upgrade_Parms.bNoNotification = bNoNotification;
	Upgrade_Parms.bIsMultiplayer = bIsMultiplayer;
	Upgrade_Parms.bDoesNotCountasNGPFound = bDoesNotCountasNGPFound;
	Upgrade_Parms.bUnlockOnly = bUnlockOnly;

	this->ProcessEvent ( pFnUpgrade, &Upgrade_Parms, NULL );

	return Upgrade_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsAnimTypeSniper
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::IsAnimTypeSniper ( )
{
	static UFunction* pFnIsAnimTypeSniper = NULL;

	if ( ! pFnIsAnimTypeSniper )
		pFnIsAnimTypeSniper = (UFunction*) UObject::GObjObjects()->Data[ 76168 ];

	ASFXWeapon_SMG_Shuriken_execIsAnimTypeSniper_Parms IsAnimTypeSniper_Parms;

	this->ProcessEvent ( pFnIsAnimTypeSniper, &IsAnimTypeSniper_Parms, NULL );

	return IsAnimTypeSniper_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsAnimTypeShotgun
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::IsAnimTypeShotgun ( )
{
	static UFunction* pFnIsAnimTypeShotgun = NULL;

	if ( ! pFnIsAnimTypeShotgun )
		pFnIsAnimTypeShotgun = (UFunction*) UObject::GObjObjects()->Data[ 76166 ];

	ASFXWeapon_SMG_Shuriken_execIsAnimTypeShotgun_Parms IsAnimTypeShotgun_Parms;

	this->ProcessEvent ( pFnIsAnimTypeShotgun, &IsAnimTypeShotgun_Parms, NULL );

	return IsAnimTypeShotgun_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsAnimTypePistol
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::IsAnimTypePistol ( )
{
	static UFunction* pFnIsAnimTypePistol = NULL;

	if ( ! pFnIsAnimTypePistol )
		pFnIsAnimTypePistol = (UFunction*) UObject::GObjObjects()->Data[ 67107 ];

	ASFXWeapon_SMG_Shuriken_execIsAnimTypePistol_Parms IsAnimTypePistol_Parms;

	this->ProcessEvent ( pFnIsAnimTypePistol, &IsAnimTypePistol_Parms, NULL );

	return IsAnimTypePistol_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetReactionChanceModifier
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Shuriken::eventGetReactionChanceModifier ( )
{
	static UFunction* pFnGetReactionChanceModifier = NULL;

	if ( ! pFnGetReactionChanceModifier )
		pFnGetReactionChanceModifier = (UFunction*) UObject::GObjObjects()->Data[ 76164 ];

	ASFXWeapon_SMG_Shuriken_eventGetReactionChanceModifier_Parms GetReactionChanceModifier_Parms;

	this->ProcessEvent ( pFnGetReactionChanceModifier, &GetReactionChanceModifier_Parms, NULL );

	return GetReactionChanceModifier_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ClientWeaponSet
// [0x010241C0] 
// Parameters infos:
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 76161 ];

	ASFXWeapon_SMG_Shuriken_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CleanUpDummyFire
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::eventCleanUpDummyFire ( )
{
	static UFunction* pFnCleanUpDummyFire = NULL;

	if ( ! pFnCleanUpDummyFire )
		pFnCleanUpDummyFire = (UFunction*) UObject::GObjObjects()->Data[ 76160 ];

	ASFXWeapon_SMG_Shuriken_eventCleanUpDummyFire_Parms CleanUpDummyFire_Parms;

	this->ProcessEvent ( pFnCleanUpDummyFire, &CleanUpDummyFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.WeaponStoppedFiring
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::eventWeaponStoppedFiring ( unsigned char FiringMode )
{
	static UFunction* pFnWeaponStoppedFiring = NULL;

	if ( ! pFnWeaponStoppedFiring )
		pFnWeaponStoppedFiring = (UFunction*) UObject::GObjObjects()->Data[ 76158 ];

	ASFXWeapon_SMG_Shuriken_eventWeaponStoppedFiring_Parms WeaponStoppedFiring_Parms;
	WeaponStoppedFiring_Parms.FiringMode = FiringMode;

	this->ProcessEvent ( pFnWeaponStoppedFiring, &WeaponStoppedFiring_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DummyFire
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 TargetLoc                      ( CPF_Parm )
// class AActor*                  AttachedTo                     ( CPF_OptionalParm | CPF_Parm )
// float                          AimErrorDeg                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::eventDummyFire ( unsigned char FireModeNum, struct FVector TargetLoc, class AActor* AttachedTo, float AimErrorDeg, class AActor* TargetActor )
{
	static UFunction* pFnDummyFire = NULL;

	if ( ! pFnDummyFire )
		pFnDummyFire = (UFunction*) UObject::GObjObjects()->Data[ 76141 ];

	ASFXWeapon_SMG_Shuriken_eventDummyFire_Parms DummyFire_Parms;
	DummyFire_Parms.FireModeNum = FireModeNum;
	memcpy ( &DummyFire_Parms.TargetLoc, &TargetLoc, 0xC );
	DummyFire_Parms.AttachedTo = AttachedTo;
	DummyFire_Parms.AimErrorDeg = AimErrorDeg;
	DummyFire_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnDummyFire, &DummyFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetInitialDummyFireDelay
// [0x00020100] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Shuriken::GetInitialDummyFireDelay ( )
{
	static UFunction* pFnGetInitialDummyFireDelay = NULL;

	if ( ! pFnGetInitialDummyFireDelay )
		pFnGetInitialDummyFireDelay = (UFunction*) UObject::GObjObjects()->Data[ 76139 ];

	ASFXWeapon_SMG_Shuriken_execGetInitialDummyFireDelay_Parms GetInitialDummyFireDelay_Parms;

	this->ProcessEvent ( pFnGetInitialDummyFireDelay, &GetInitialDummyFireDelay_Parms, NULL );

	return GetInitialDummyFireDelay_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.BeginDummyFire
// [0x00024100] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// class AActor*                  AttachedTo                     ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::BeginDummyFire ( unsigned char FiringMode, class AActor* AttachedTo )
{
	static UFunction* pFnBeginDummyFire = NULL;

	if ( ! pFnBeginDummyFire )
		pFnBeginDummyFire = (UFunction*) UObject::GObjObjects()->Data[ 76136 ];

	ASFXWeapon_SMG_Shuriken_execBeginDummyFire_Parms BeginDummyFire_Parms;
	BeginDummyFire_Parms.FiringMode = FiringMode;
	BeginDummyFire_Parms.AttachedTo = AttachedTo;

	this->ProcessEvent ( pFnBeginDummyFire, &BeginDummyFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.WeaponFired
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::WeaponFired ( unsigned char FiringMode, unsigned long bViaReplication, struct FVector HitLocation )
{
	static UFunction* pFnWeaponFired = NULL;

	if ( ! pFnWeaponFired )
		pFnWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 76132 ];

	ASFXWeapon_SMG_Shuriken_execWeaponFired_Parms WeaponFired_Parms;
	WeaponFired_Parms.FiringMode = FiringMode;
	WeaponFired_Parms.bViaReplication = bViaReplication;
	memcpy ( &WeaponFired_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnWeaponFired, &WeaponFired_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProjectileFireSimple
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          AimErrorDeg                    ( CPF_OptionalParm | CPF_Parm )

class AProjectile* ASFXWeapon_SMG_Shuriken::eventProjectileFireSimple ( float AimErrorDeg )
{
	static UFunction* pFnProjectileFireSimple = NULL;

	if ( ! pFnProjectileFireSimple )
		pFnProjectileFireSimple = (UFunction*) UObject::GObjObjects()->Data[ 76124 ];

	ASFXWeapon_SMG_Shuriken_eventProjectileFireSimple_Parms ProjectileFireSimple_Parms;
	ProjectileFireSimple_Parms.AimErrorDeg = AimErrorDeg;

	this->ProcessEvent ( pFnProjectileFireSimple, &ProjectileFireSimple_Parms, NULL );

	return ProjectileFireSimple_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.CalcRemoteImpactEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 GivenHitLocation               ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::CalcRemoteImpactEffects ( unsigned char FireModeNum, struct FVector GivenHitLocation, unsigned long bViaReplication )
{
	static UFunction* pFnCalcRemoteImpactEffects = NULL;

	if ( ! pFnCalcRemoteImpactEffects )
		pFnCalcRemoteImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 76115 ];

	ASFXWeapon_SMG_Shuriken_execCalcRemoteImpactEffects_Parms CalcRemoteImpactEffects_Parms;
	CalcRemoteImpactEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &CalcRemoteImpactEffects_Parms.GivenHitLocation, &GivenHitLocation, 0xC );
	CalcRemoteImpactEffects_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnCalcRemoteImpactEffects, &CalcRemoteImpactEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CalculateCoverLeanOutOffset
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Direction                      ( CPF_Parm )
// unsigned char                  Type                           ( CPF_Parm )
// struct FVector                 Offset                         ( CPF_Parm | CPF_OutParm )

bool ASFXWeapon_SMG_Shuriken::eventCalculateCoverLeanOutOffset ( unsigned char Direction, unsigned char Type, struct FVector* Offset )
{
	static UFunction* pFnCalculateCoverLeanOutOffset = NULL;

	if ( ! pFnCalculateCoverLeanOutOffset )
		pFnCalculateCoverLeanOutOffset = (UFunction*) UObject::GObjObjects()->Data[ 76108 ];

	ASFXWeapon_SMG_Shuriken_eventCalculateCoverLeanOutOffset_Parms CalculateCoverLeanOutOffset_Parms;
	CalculateCoverLeanOutOffset_Parms.Direction = Direction;
	CalculateCoverLeanOutOffset_Parms.Type = Type;

	this->ProcessEvent ( pFnCalculateCoverLeanOutOffset, &CalculateCoverLeanOutOffset_Parms, NULL );

	if ( Offset )
		memcpy ( Offset, &CalculateCoverLeanOutOffset_Parms.Offset, 0xC );

	return CalculateCoverLeanOutOffset_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetGeneralDescription
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXWeapon_SMG_Shuriken::GetGeneralDescription ( )
{
	static UFunction* pFnGetGeneralDescription = NULL;

	if ( ! pFnGetGeneralDescription )
		pFnGetGeneralDescription = (UFunction*) UObject::GObjObjects()->Data[ 76106 ];

	ASFXWeapon_SMG_Shuriken_execGetGeneralDescription_Parms GetGeneralDescription_Parms;

	this->ProcessEvent ( pFnGetGeneralDescription, &GetGeneralDescription_Parms, NULL );

	return GetGeneralDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetShortDescription
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXWeapon_SMG_Shuriken::GetShortDescription ( )
{
	static UFunction* pFnGetShortDescription = NULL;

	if ( ! pFnGetShortDescription )
		pFnGetShortDescription = (UFunction*) UObject::GObjObjects()->Data[ 76104 ];

	ASFXWeapon_SMG_Shuriken_execGetShortDescription_Parms GetShortDescription_Parms;

	this->ProcessEvent ( pFnGetShortDescription, &GetShortDescription_Parms, NULL );

	return GetShortDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetPrettyName
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Level                          ( CPF_OptionalParm | CPF_Parm )

struct FString ASFXWeapon_SMG_Shuriken::GetPrettyName ( int Level )
{
	static UFunction* pFnGetPrettyName = NULL;

	if ( ! pFnGetPrettyName )
		pFnGetPrettyName = (UFunction*) UObject::GObjObjects()->Data[ 61727 ];

	ASFXWeapon_SMG_Shuriken_execGetPrettyName_Parms GetPrettyName_Parms;
	GetPrettyName_Parms.Level = Level;

	this->ProcessEvent ( pFnGetPrettyName, &GetPrettyName_Parms, NULL );

	return GetPrettyName_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetWeaponDebug
// [0x00420100] 
// Parameters infos:
// TArray< struct FString >       DebugInfo                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXWeapon_SMG_Shuriken::GetWeaponDebug ( TArray< struct FString >* DebugInfo )
{
	static UFunction* pFnGetWeaponDebug = NULL;

	if ( ! pFnGetWeaponDebug )
		pFnGetWeaponDebug = (UFunction*) UObject::GObjObjects()->Data[ 76099 ];

	ASFXWeapon_SMG_Shuriken_execGetWeaponDebug_Parms GetWeaponDebug_Parms;

	this->ProcessEvent ( pFnGetWeaponDebug, &GetWeaponDebug_Parms, NULL );

	if ( DebugInfo )
		memcpy ( DebugInfo, &GetWeaponDebug_Parms.DebugInfo, 0xC );
};

// Function SFXGame.SFXWeapon.DrawDebugShot
// [0x00020100] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 EndLocation                    ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::DrawDebugShot ( struct FVector StartLocation, struct FVector EndLocation )
{
	static UFunction* pFnDrawDebugShot = NULL;

	if ( ! pFnDrawDebugShot )
		pFnDrawDebugShot = (UFunction*) UObject::GObjObjects()->Data[ 76096 ];

	ASFXWeapon_SMG_Shuriken_execDrawDebugShot_Parms DrawDebugShot_Parms;
	memcpy ( &DrawDebugShot_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DrawDebugShot_Parms.EndLocation, &EndLocation, 0xC );

	this->ProcessEvent ( pFnDrawDebugShot, &DrawDebugShot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetAmmoPowerHologramEnabled
// [0x00024102] 
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )
// unsigned long                  bForceEnabled                  ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SetAmmoPowerHologramEnabled ( unsigned long bEnabled, unsigned long bForceEnabled )
{
	static UFunction* pFnSetAmmoPowerHologramEnabled = NULL;

	if ( ! pFnSetAmmoPowerHologramEnabled )
		pFnSetAmmoPowerHologramEnabled = (UFunction*) UObject::GObjObjects()->Data[ 76092 ];

	ASFXWeapon_SMG_Shuriken_execSetAmmoPowerHologramEnabled_Parms SetAmmoPowerHologramEnabled_Parms;
	SetAmmoPowerHologramEnabled_Parms.bEnabled = bEnabled;
	SetAmmoPowerHologramEnabled_Parms.bForceEnabled = bForceEnabled;

	this->ProcessEvent ( pFnSetAmmoPowerHologramEnabled, &SetAmmoPowerHologramEnabled_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetAmmoPowerHologramTemplates
// [0x00020102] 
// Parameters infos:
// class UParticleSystem*         Template                       ( CPF_Parm )
// class UParticleSystem*         IconTemplate                   ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SetAmmoPowerHologramTemplates ( class UParticleSystem* Template, class UParticleSystem* IconTemplate )
{
	static UFunction* pFnSetAmmoPowerHologramTemplates = NULL;

	if ( ! pFnSetAmmoPowerHologramTemplates )
		pFnSetAmmoPowerHologramTemplates = (UFunction*) UObject::GObjObjects()->Data[ 76089 ];

	ASFXWeapon_SMG_Shuriken_execSetAmmoPowerHologramTemplates_Parms SetAmmoPowerHologramTemplates_Parms;
	SetAmmoPowerHologramTemplates_Parms.Template = Template;
	SetAmmoPowerHologramTemplates_Parms.IconTemplate = IconTemplate;

	this->ProcessEvent ( pFnSetAmmoPowerHologramTemplates, &SetAmmoPowerHologramTemplates_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 76088 ];

	ASFXWeapon_SMG_Shuriken_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HolderDied
// [0x00020002] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::HolderDied ( )
{
	static UFunction* pFnHolderDied = NULL;

	if ( ! pFnHolderDied )
		pFnHolderDied = (UFunction*) UObject::GObjObjects()->Data[ 76087 ];

	ASFXWeapon_SMG_Shuriken_execHolderDied_Parms HolderDied_Parms;

	this->ProcessEvent ( pFnHolderDied, &HolderDied_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = (UFunction*) UObject::GObjObjects()->Data[ 76074 ];

	ASFXWeapon_SMG_Shuriken_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ClientWeaponThrown
// [0x010201C2] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::ClientWeaponThrown ( )
{
	static UFunction* pFnClientWeaponThrown = NULL;

	if ( ! pFnClientWeaponThrown )
		pFnClientWeaponThrown = (UFunction*) UObject::GObjObjects()->Data[ 76072 ];

	ASFXWeapon_SMG_Shuriken_execClientWeaponThrown_Parms ClientWeaponThrown_Parms;

	this->ProcessEvent ( pFnClientWeaponThrown, &ClientWeaponThrown_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CanThrow
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::CanThrow ( )
{
	static UFunction* pFnCanThrow = NULL;

	if ( ! pFnCanThrow )
		pFnCanThrow = (UFunction*) UObject::GObjObjects()->Data[ 76070 ];

	ASFXWeapon_SMG_Shuriken_execCanThrow_Parms CanThrow_Parms;

	this->ProcessEvent ( pFnCanThrow, &CanThrow_Parms, NULL );

	return CanThrow_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.DetachWeapon
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = (UFunction*) UObject::GObjObjects()->Data[ 76068 ];

	ASFXWeapon_SMG_Shuriken_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AttachMuzzleEffectsComponents
// [0x00024102] 
// Parameters infos:
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )
// struct FName                   MuzzleSocket                   ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CasingSocket                   ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::AttachMuzzleEffectsComponents ( class USkeletalMeshComponent* SkelMesh, struct FName MuzzleSocket, struct FName CasingSocket )
{
	static UFunction* pFnAttachMuzzleEffectsComponents = NULL;

	if ( ! pFnAttachMuzzleEffectsComponents )
		pFnAttachMuzzleEffectsComponents = (UFunction*) UObject::GObjObjects()->Data[ 76064 ];

	ASFXWeapon_SMG_Shuriken_execAttachMuzzleEffectsComponents_Parms AttachMuzzleEffectsComponents_Parms;
	AttachMuzzleEffectsComponents_Parms.SkelMesh = SkelMesh;
	memcpy ( &AttachMuzzleEffectsComponents_Parms.MuzzleSocket, &MuzzleSocket, 0x8 );
	memcpy ( &AttachMuzzleEffectsComponents_Parms.CasingSocket, &CasingSocket, 0x8 );

	this->ProcessEvent ( pFnAttachMuzzleEffectsComponents, &AttachMuzzleEffectsComponents_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AttachWeaponTo
// [0x00024102] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm | CPF_EditInline )
// struct FName                   SocketName                     ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = (UFunction*) UObject::GObjObjects()->Data[ 76057 ];

	ASFXWeapon_SMG_Shuriken_execAttachWeaponTo_Parms AttachWeaponTo_Parms;
	AttachWeaponTo_Parms.MeshCpnt = MeshCpnt;
	memcpy ( &AttachWeaponTo_Parms.SocketName, &SocketName, 0x8 );

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Internal_AssignToSlot
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::Internal_AssignToSlot ( )
{
	static UFunction* pFnInternal_AssignToSlot = NULL;

	if ( ! pFnInternal_AssignToSlot )
		pFnInternal_AssignToSlot = (UFunction*) UObject::GObjObjects()->Data[ 76055 ];

	ASFXWeapon_SMG_Shuriken_execInternal_AssignToSlot_Parms Internal_AssignToSlot_Parms;

	this->ProcessEvent ( pFnInternal_AssignToSlot, &Internal_AssignToSlot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AssignToSlot
// [0x00020102] 
// Parameters infos:
// unsigned char                  Slot                           ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::AssignToSlot ( unsigned char Slot )
{
	static UFunction* pFnAssignToSlot = NULL;

	if ( ! pFnAssignToSlot )
		pFnAssignToSlot = (UFunction*) UObject::GObjObjects()->Data[ 76053 ];

	ASFXWeapon_SMG_Shuriken_execAssignToSlot_Parms AssignToSlot_Parms;
	AssignToSlot_Parms.Slot = Slot;

	this->ProcessEvent ( pFnAssignToSlot, &AssignToSlot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GivenTo
// [0x00024002] 
// Parameters infos:
// class APawn*                   thisPawn                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 76047 ];

	ASFXWeapon_SMG_Shuriken_execGivenTo_Parms GivenTo_Parms;
	GivenTo_Parms.thisPawn = thisPawn;
	GivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EquipTimedOut
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::EquipTimedOut ( )
{
	static UFunction* pFnEquipTimedOut = NULL;

	if ( ! pFnEquipTimedOut )
		pFnEquipTimedOut = (UFunction*) UObject::GObjObjects()->Data[ 76030 ];

	ASFXWeapon_SMG_Shuriken_execEquipTimedOut_Parms EquipTimedOut_Parms;

	this->ProcessEvent ( pFnEquipTimedOut, &EquipTimedOut_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EquipFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::EquipFinished ( )
{
	static UFunction* pFnEquipFinished = NULL;

	if ( ! pFnEquipFinished )
		pFnEquipFinished = (UFunction*) UObject::GObjObjects()->Data[ 76029 ];

	ASFXWeapon_SMG_Shuriken_execEquipFinished_Parms EquipFinished_Parms;

	this->ProcessEvent ( pFnEquipFinished, &EquipFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EquipNearFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::EquipNearFinished ( )
{
	static UFunction* pFnEquipNearFinished = NULL;

	if ( ! pFnEquipNearFinished )
		pFnEquipNearFinished = (UFunction*) UObject::GObjObjects()->Data[ 76028 ];

	ASFXWeapon_SMG_Shuriken_execEquipNearFinished_Parms EquipNearFinished_Parms;

	this->ProcessEvent ( pFnEquipNearFinished, &EquipNearFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Collapse
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::Collapse ( )
{
	static UFunction* pFnCollapse = NULL;

	if ( ! pFnCollapse )
		pFnCollapse = (UFunction*) UObject::GObjObjects()->Data[ 76027 ];

	ASFXWeapon_SMG_Shuriken_execCollapse_Parms Collapse_Parms;

	this->ProcessEvent ( pFnCollapse, &Collapse_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Expand
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::Expand ( )
{
	static UFunction* pFnExpand = NULL;

	if ( ! pFnExpand )
		pFnExpand = (UFunction*) UObject::GObjObjects()->Data[ 76026 ];

	ASFXWeapon_SMG_Shuriken_execExpand_Parms Expand_Parms;

	this->ProcessEvent ( pFnExpand, &Expand_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StopChargeEffects
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::StopChargeEffects ( )
{
	static UFunction* pFnStopChargeEffects = NULL;

	if ( ! pFnStopChargeEffects )
		pFnStopChargeEffects = (UFunction*) UObject::GObjObjects()->Data[ 76022 ];

	ASFXWeapon_SMG_Shuriken_execStopChargeEffects_Parms StopChargeEffects_Parms;

	this->ProcessEvent ( pFnStopChargeEffects, &StopChargeEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ShutOffAllEmitters
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::ShutOffAllEmitters ( )
{
	static UFunction* pFnShutOffAllEmitters = NULL;

	if ( ! pFnShutOffAllEmitters )
		pFnShutOffAllEmitters = (UFunction*) UObject::GObjObjects()->Data[ 76018 ];

	ASFXWeapon_SMG_Shuriken_execShutOffAllEmitters_Parms ShutOffAllEmitters_Parms;

	this->ProcessEvent ( pFnShutOffAllEmitters, &ShutOffAllEmitters_Parms, NULL );
};

// Function SFXGame.SFXWeapon.UnEquipTimedOut
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::UnEquipTimedOut ( )
{
	static UFunction* pFnUnEquipTimedOut = NULL;

	if ( ! pFnUnEquipTimedOut )
		pFnUnEquipTimedOut = (UFunction*) UObject::GObjObjects()->Data[ 76005 ];

	ASFXWeapon_SMG_Shuriken_execUnEquipTimedOut_Parms UnEquipTimedOut_Parms;

	this->ProcessEvent ( pFnUnEquipTimedOut, &UnEquipTimedOut_Parms, NULL );
};

// Function SFXGame.SFXWeapon.UnEquipFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::UnEquipFinished ( )
{
	static UFunction* pFnUnEquipFinished = NULL;

	if ( ! pFnUnEquipFinished )
		pFnUnEquipFinished = (UFunction*) UObject::GObjObjects()->Data[ 76004 ];

	ASFXWeapon_SMG_Shuriken_execUnEquipFinished_Parms UnEquipFinished_Parms;

	this->ProcessEvent ( pFnUnEquipFinished, &UnEquipFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ServerCancelReload
// [0x002200C2] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::ServerCancelReload ( )
{
	static UFunction* pFnServerCancelReload = NULL;

	if ( ! pFnServerCancelReload )
		pFnServerCancelReload = (UFunction*) UObject::GObjObjects()->Data[ 75982 ];

	ASFXWeapon_SMG_Shuriken_execServerCancelReload_Parms ServerCancelReload_Parms;

	this->ProcessEvent ( pFnServerCancelReload, &ServerCancelReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CancelReload
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::CancelReload ( )
{
	static UFunction* pFnCancelReload = NULL;

	if ( ! pFnCancelReload )
		pFnCancelReload = (UFunction*) UObject::GObjObjects()->Data[ 75981 ];

	ASFXWeapon_SMG_Shuriken_execCancelReload_Parms CancelReload_Parms;

	this->ProcessEvent ( pFnCancelReload, &CancelReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DoAReload
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::DoAReload ( )
{
	static UFunction* pFnDoAReload = NULL;

	if ( ! pFnDoAReload )
		pFnDoAReload = (UFunction*) UObject::GObjObjects()->Data[ 75980 ];

	ASFXWeapon_SMG_Shuriken_execDoAReload_Parms DoAReload_Parms;

	this->ProcessEvent ( pFnDoAReload, &DoAReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ReloadNearFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::ReloadNearFinished ( )
{
	static UFunction* pFnReloadNearFinished = NULL;

	if ( ! pFnReloadNearFinished )
		pFnReloadNearFinished = (UFunction*) UObject::GObjObjects()->Data[ 75979 ];

	ASFXWeapon_SMG_Shuriken_execReloadNearFinished_Parms ReloadNearFinished_Parms;

	this->ProcessEvent ( pFnReloadNearFinished, &ReloadNearFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.NotifyWeaponRefireDelayExpired
// [0x00020002] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::NotifyWeaponRefireDelayExpired ( )
{
	static UFunction* pFnNotifyWeaponRefireDelayExpired = NULL;

	if ( ! pFnNotifyWeaponRefireDelayExpired )
		pFnNotifyWeaponRefireDelayExpired = (UFunction*) UObject::GObjObjects()->Data[ 75978 ];

	ASFXWeapon_SMG_Shuriken_execNotifyWeaponRefireDelayExpired_Parms NotifyWeaponRefireDelayExpired_Parms;

	this->ProcessEvent ( pFnNotifyWeaponRefireDelayExpired, &NotifyWeaponRefireDelayExpired_Parms, NULL );
};

// Function SFXGame.SFXWeapon.NotifyWeaponFired
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireMode                       ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::NotifyWeaponFired ( unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFired = NULL;

	if ( ! pFnNotifyWeaponFired )
		pFnNotifyWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 75940 ];

	ASFXWeapon_SMG_Shuriken_execNotifyWeaponFired_Parms NotifyWeaponFired_Parms;
	NotifyWeaponFired_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFired, &NotifyWeaponFired_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HandleFinishedFiring
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::HandleFinishedFiring ( )
{
	static UFunction* pFnHandleFinishedFiring = NULL;

	if ( ! pFnHandleFinishedFiring )
		pFnHandleFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 75975 ];

	ASFXWeapon_SMG_Shuriken_execHandleFinishedFiring_Parms HandleFinishedFiring_Parms;

	this->ProcessEvent ( pFnHandleFinishedFiring, &HandleFinishedFiring_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ShouldRefire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = (UFunction*) UObject::GObjObjects()->Data[ 75972 ];

	ASFXWeapon_SMG_Shuriken_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetBurstsToFire
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Shuriken::GetBurstsToFire ( )
{
	static UFunction* pFnGetBurstsToFire = NULL;

	if ( ! pFnGetBurstsToFire )
		pFnGetBurstsToFire = (UFunction*) UObject::GObjObjects()->Data[ 45634 ];

	ASFXWeapon_SMG_Shuriken_execGetBurstsToFire_Parms GetBurstsToFire_Parms;

	this->ProcessEvent ( pFnGetBurstsToFire, &GetBurstsToFire_Parms, NULL );

	return GetBurstsToFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetBurstFireCount
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Shuriken::GetBurstFireCount ( )
{
	static UFunction* pFnGetBurstFireCount = NULL;

	if ( ! pFnGetBurstFireCount )
		pFnGetBurstFireCount = (UFunction*) UObject::GObjObjects()->Data[ 75967 ];

	ASFXWeapon_SMG_Shuriken_execGetBurstFireCount_Parms GetBurstFireCount_Parms;

	this->ProcessEvent ( pFnGetBurstFireCount, &GetBurstFireCount_Parms, NULL );

	return GetBurstFireCount_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SetupWeaponFire
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SetupWeaponFire ( unsigned char FireModeNum )
{
	static UFunction* pFnSetupWeaponFire = NULL;

	if ( ! pFnSetupWeaponFire )
		pFnSetupWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 75965 ];

	ASFXWeapon_SMG_Shuriken_execSetupWeaponFire_Parms SetupWeaponFire_Parms;
	SetupWeaponFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnSetupWeaponFire, &SetupWeaponFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ServerStopFire
// [0x002200C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::ServerStopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnServerStopFire = NULL;

	if ( ! pFnServerStopFire )
		pFnServerStopFire = (UFunction*) UObject::GObjObjects()->Data[ 75963 ];

	ASFXWeapon_SMG_Shuriken_execServerStopFire_Parms ServerStopFire_Parms;
	ServerStopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerStopFire, &ServerStopFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EndFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 75931 ];

	ASFXWeapon_SMG_Shuriken_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SelectTarget
// [0x00020102] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ASFXWeapon_SMG_Shuriken::SelectTarget ( )
{
	static UFunction* pFnSelectTarget = NULL;

	if ( ! pFnSelectTarget )
		pFnSelectTarget = (UFunction*) UObject::GObjObjects()->Data[ 75960 ];

	ASFXWeapon_SMG_Shuriken_execSelectTarget_Parms SelectTarget_Parms;

	this->ProcessEvent ( pFnSelectTarget, &SelectTarget_Parms, NULL );

	return SelectTarget_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 75958 ];

	ASFXWeapon_SMG_Shuriken_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CanFire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::CanFire ( )
{
	static UFunction* pFnCanFire = NULL;

	if ( ! pFnCanFire )
		pFnCanFire = (UFunction*) UObject::GObjObjects()->Data[ 75944 ];

	ASFXWeapon_SMG_Shuriken_execCanFire_Parms CanFire_Parms;

	this->ProcessEvent ( pFnCanFire, &CanFire_Parms, NULL );

	return CanFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.StartFullChargeRumble
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::StartFullChargeRumble ( )
{
	static UFunction* pFnStartFullChargeRumble = NULL;

	if ( ! pFnStartFullChargeRumble )
		pFnStartFullChargeRumble = (UFunction*) UObject::GObjObjects()->Data[ 75920 ];

	ASFXWeapon_SMG_Shuriken_execStartFullChargeRumble_Parms StartFullChargeRumble_Parms;

	this->ProcessEvent ( pFnStartFullChargeRumble, &StartFullChargeRumble_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StartChargeEffects
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::StartChargeEffects ( )
{
	static UFunction* pFnStartChargeEffects = NULL;

	if ( ! pFnStartChargeEffects )
		pFnStartChargeEffects = (UFunction*) UObject::GObjObjects()->Data[ 75913 ];

	ASFXWeapon_SMG_Shuriken_execStartChargeEffects_Parms StartChargeEffects_Parms;

	this->ProcessEvent ( pFnStartChargeEffects, &StartChargeEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IsChargingWeapon
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::IsChargingWeapon ( )
{
	static UFunction* pFnIsChargingWeapon = NULL;

	if ( ! pFnIsChargingWeapon )
		pFnIsChargingWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75817 ];

	ASFXWeapon_SMG_Shuriken_execIsChargingWeapon_Parms IsChargingWeapon_Parms;

	this->ProcessEvent ( pFnIsChargingWeapon, &IsChargingWeapon_Parms, NULL );

	return IsChargingWeapon_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ServerFireChargedShot
// [0x002200C0] 
// Parameters infos:
// float                          SentChargeAmount               ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::ServerFireChargedShot ( float SentChargeAmount )
{
	static UFunction* pFnServerFireChargedShot = NULL;

	if ( ! pFnServerFireChargedShot )
		pFnServerFireChargedShot = (UFunction*) UObject::GObjObjects()->Data[ 75812 ];

	ASFXWeapon_SMG_Shuriken_execServerFireChargedShot_Parms ServerFireChargedShot_Parms;
	ServerFireChargedShot_Parms.SentChargeAmount = SentChargeAmount;

	this->ProcessEvent ( pFnServerFireChargedShot, &ServerFireChargedShot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayNoAmmoFireSound
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::PlayNoAmmoFireSound ( )
{
	static UFunction* pFnPlayNoAmmoFireSound = NULL;

	if ( ! pFnPlayNoAmmoFireSound )
		pFnPlayNoAmmoFireSound = (UFunction*) UObject::GObjObjects()->Data[ 75806 ];

	ASFXWeapon_SMG_Shuriken_execPlayNoAmmoFireSound_Parms PlayNoAmmoFireSound_Parms;

	this->ProcessEvent ( pFnPlayNoAmmoFireSound, &PlayNoAmmoFireSound_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayNoAmmoEffects
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::PlayNoAmmoEffects ( )
{
	static UFunction* pFnPlayNoAmmoEffects = NULL;

	if ( ! pFnPlayNoAmmoEffects )
		pFnPlayNoAmmoEffects = (UFunction*) UObject::GObjObjects()->Data[ 75774 ];

	ASFXWeapon_SMG_Shuriken_execPlayNoAmmoEffects_Parms PlayNoAmmoEffects_Parms;

	this->ProcessEvent ( pFnPlayNoAmmoEffects, &PlayNoAmmoEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.TryReload
// [0x00024102] 
// Parameters infos:
// unsigned long                  bDisplayHint                   ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::TryReload ( unsigned long bDisplayHint )
{
	static UFunction* pFnTryReload = NULL;

	if ( ! pFnTryReload )
		pFnTryReload = (UFunction*) UObject::GObjObjects()->Data[ 75771 ];

	ASFXWeapon_SMG_Shuriken_execTryReload_Parms TryReload_Parms;
	TryReload_Parms.bDisplayHint = bDisplayHint;

	this->ProcessEvent ( pFnTryReload, &TryReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DoReload
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::DoReload ( )
{
	static UFunction* pFnDoReload = NULL;

	if ( ! pFnDoReload )
		pFnDoReload = (UFunction*) UObject::GObjObjects()->Data[ 75767 ];

	ASFXWeapon_SMG_Shuriken_execDoReload_Parms DoReload_Parms;

	this->ProcessEvent ( pFnDoReload, &DoReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetAmmoRestoredPerReload
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Shuriken::GetAmmoRestoredPerReload ( )
{
	static UFunction* pFnGetAmmoRestoredPerReload = NULL;

	if ( ! pFnGetAmmoRestoredPerReload )
		pFnGetAmmoRestoredPerReload = (UFunction*) UObject::GObjObjects()->Data[ 75765 ];

	ASFXWeapon_SMG_Shuriken_execGetAmmoRestoredPerReload_Parms GetAmmoRestoredPerReload_Parms;

	this->ProcessEvent ( pFnGetAmmoRestoredPerReload, &GetAmmoRestoredPerReload_Parms, NULL );

	return GetAmmoRestoredPerReload_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetReloadDuration
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Shuriken::GetReloadDuration ( )
{
	static UFunction* pFnGetReloadDuration = NULL;

	if ( ! pFnGetReloadDuration )
		pFnGetReloadDuration = (UFunction*) UObject::GObjObjects()->Data[ 41736 ];

	ASFXWeapon_SMG_Shuriken_execGetReloadDuration_Parms GetReloadDuration_Parms;

	this->ProcessEvent ( pFnGetReloadDuration, &GetReloadDuration_Parms, NULL );

	return GetReloadDuration_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ShouldAutoReload
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = (UFunction*) UObject::GObjObjects()->Data[ 75763 ];

	ASFXWeapon_SMG_Shuriken_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );

	return ShouldAutoReload_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.CanReload
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::CanReload ( )
{
	static UFunction* pFnCanReload = NULL;

	if ( ! pFnCanReload )
		pFnCanReload = (UFunction*) UObject::GObjObjects()->Data[ 55519 ];

	ASFXWeapon_SMG_Shuriken_execCanReload_Parms CanReload_Parms;

	this->ProcessEvent ( pFnCanReload, &CanReload_Parms, NULL );

	return CanReload_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.EffectIsRelevant
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool ASFXWeapon_SMG_Shuriken::EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance )
{
	static UFunction* pFnEffectIsRelevant = NULL;

	if ( ! pFnEffectIsRelevant )
		pFnEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 75756 ];

	ASFXWeapon_SMG_Shuriken_execEffectIsRelevant_Parms EffectIsRelevant_Parms;
	memcpy ( &EffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	EffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	EffectIsRelevant_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnEffectIsRelevant, &EffectIsRelevant_Parms, NULL );

	return EffectIsRelevant_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayReloadEject
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::PlayReloadEject ( )
{
	static UFunction* pFnPlayReloadEject = NULL;

	if ( ! pFnPlayReloadEject )
		pFnPlayReloadEject = (UFunction*) UObject::GObjObjects()->Data[ 75753 ];

	ASFXWeapon_SMG_Shuriken_execPlayReloadEject_Parms PlayReloadEject_Parms;

	this->ProcessEvent ( pFnPlayReloadEject, &PlayReloadEject_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StopFireEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::StopFireEffects ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFireEffects = NULL;

	if ( ! pFnStopFireEffects )
		pFnStopFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 75750 ];

	ASFXWeapon_SMG_Shuriken_execStopFireEffects_Parms StopFireEffects_Parms;
	StopFireEffects_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFireEffects, &StopFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HearNoiseTimer
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::HearNoiseTimer ( )
{
	static UFunction* pFnHearNoiseTimer = NULL;

	if ( ! pFnHearNoiseTimer )
		pFnHearNoiseTimer = (UFunction*) UObject::GObjObjects()->Data[ 75749 ];

	ASFXWeapon_SMG_Shuriken_execHearNoiseTimer_Parms HearNoiseTimer_Parms;

	this->ProcessEvent ( pFnHearNoiseTimer, &HearNoiseTimer_Parms, NULL );
};

// Function SFXGame.SFXWeapon.WeaponPlayWwiseEvent
// [0x00024102] 
// Parameters infos:
// class UWwiseEvent*             Sound                          ( CPF_Parm )
// float                          NoiseLoudness                  ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SoundLoc                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::WeaponPlayWwiseEvent ( class UWwiseEvent* Sound, float NoiseLoudness, struct FVector SoundLoc, struct FName NoiseType )
{
	static UFunction* pFnWeaponPlayWwiseEvent = NULL;

	if ( ! pFnWeaponPlayWwiseEvent )
		pFnWeaponPlayWwiseEvent = (UFunction*) UObject::GObjObjects()->Data[ 75743 ];

	ASFXWeapon_SMG_Shuriken_execWeaponPlayWwiseEvent_Parms WeaponPlayWwiseEvent_Parms;
	WeaponPlayWwiseEvent_Parms.Sound = Sound;
	WeaponPlayWwiseEvent_Parms.NoiseLoudness = NoiseLoudness;
	memcpy ( &WeaponPlayWwiseEvent_Parms.SoundLoc, &SoundLoc, 0xC );
	memcpy ( &WeaponPlayWwiseEvent_Parms.NoiseType, &NoiseType, 0x8 );

	this->ProcessEvent ( pFnWeaponPlayWwiseEvent, &WeaponPlayWwiseEvent_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SpawnTracerEffect
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          HitDistance                    ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SpawnTracerEffect ( struct FVector HitLocation, float HitDistance )
{
	static UFunction* pFnSpawnTracerEffect = NULL;

	if ( ! pFnSpawnTracerEffect )
		pFnSpawnTracerEffect = (UFunction*) UObject::GObjObjects()->Data[ 75739 ];

	ASFXWeapon_SMG_Shuriken_execSpawnTracerEffect_Parms SpawnTracerEffect_Parms;
	memcpy ( &SpawnTracerEffect_Parms.HitLocation, &HitLocation, 0xC );
	SpawnTracerEffect_Parms.HitDistance = HitDistance;

	this->ProcessEvent ( pFnSpawnTracerEffect, &SpawnTracerEffect_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ShouldSpawnTracerFX
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::ShouldSpawnTracerFX ( )
{
	static UFunction* pFnShouldSpawnTracerFX = NULL;

	if ( ! pFnShouldSpawnTracerFX )
		pFnShouldSpawnTracerFX = (UFunction*) UObject::GObjObjects()->Data[ 75737 ];

	ASFXWeapon_SMG_Shuriken_execShouldSpawnTracerFX_Parms ShouldSpawnTracerFX_Parms;

	this->ProcessEvent ( pFnShouldSpawnTracerFX, &ShouldSpawnTracerFX_Parms, NULL );

	return ShouldSpawnTracerFX_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayOwnedFireEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::PlayOwnedFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayOwnedFireEffects = NULL;

	if ( ! pFnPlayOwnedFireEffects )
		pFnPlayOwnedFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 75730 ];

	ASFXWeapon_SMG_Shuriken_execPlayOwnedFireEffects_Parms PlayOwnedFireEffects_Parms;
	PlayOwnedFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayOwnedFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayOwnedFireEffects, &PlayOwnedFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HideReloadEmitters
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::HideReloadEmitters ( )
{
	static UFunction* pFnHideReloadEmitters = NULL;

	if ( ! pFnHideReloadEmitters )
		pFnHideReloadEmitters = (UFunction*) UObject::GObjObjects()->Data[ 75728 ];

	ASFXWeapon_SMG_Shuriken_execHideReloadEmitters_Parms HideReloadEmitters_Parms;

	this->ProcessEvent ( pFnHideReloadEmitters, &HideReloadEmitters_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HideMuzzleFlashEmitter
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::HideMuzzleFlashEmitter ( )
{
	static UFunction* pFnHideMuzzleFlashEmitter = NULL;

	if ( ! pFnHideMuzzleFlashEmitter )
		pFnHideMuzzleFlashEmitter = (UFunction*) UObject::GObjObjects()->Data[ 75727 ];

	ASFXWeapon_SMG_Shuriken_execHideMuzzleFlashEmitter_Parms HideMuzzleFlashEmitter_Parms;

	this->ProcessEvent ( pFnHideMuzzleFlashEmitter, &HideMuzzleFlashEmitter_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StopMuzzleFlashEffect
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::StopMuzzleFlashEffect ( )
{
	static UFunction* pFnStopMuzzleFlashEffect = NULL;

	if ( ! pFnStopMuzzleFlashEffect )
		pFnStopMuzzleFlashEffect = (UFunction*) UObject::GObjObjects()->Data[ 75723 ];

	ASFXWeapon_SMG_Shuriken_execStopMuzzleFlashEffect_Parms StopMuzzleFlashEffect_Parms;

	this->ProcessEvent ( pFnStopMuzzleFlashEffect, &StopMuzzleFlashEffect_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IsCameraWithinRadius
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

bool ASFXWeapon_SMG_Shuriken::IsCameraWithinRadius ( struct FVector TestLocation, float Radius )
{
	static UFunction* pFnIsCameraWithinRadius = NULL;

	if ( ! pFnIsCameraWithinRadius )
		pFnIsCameraWithinRadius = (UFunction*) UObject::GObjObjects()->Data[ 75716 ];

	ASFXWeapon_SMG_Shuriken_execIsCameraWithinRadius_Parms IsCameraWithinRadius_Parms;
	memcpy ( &IsCameraWithinRadius_Parms.TestLocation, &TestLocation, 0xC );
	IsCameraWithinRadius_Parms.Radius = Radius;

	this->ProcessEvent ( pFnIsCameraWithinRadius, &IsCameraWithinRadius_Parms, NULL );

	return IsCameraWithinRadius_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsMuzzleFlashRelevant
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::IsMuzzleFlashRelevant ( )
{
	static UFunction* pFnIsMuzzleFlashRelevant = NULL;

	if ( ! pFnIsMuzzleFlashRelevant )
		pFnIsMuzzleFlashRelevant = (UFunction*) UObject::GObjObjects()->Data[ 75714 ];

	ASFXWeapon_SMG_Shuriken_execIsMuzzleFlashRelevant_Parms IsMuzzleFlashRelevant_Parms;

	this->ProcessEvent ( pFnIsMuzzleFlashRelevant, &IsMuzzleFlashRelevant_Parms, NULL );

	return IsMuzzleFlashRelevant_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayMuzzleFlashEffect
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::PlayMuzzleFlashEffect ( )
{
	static UFunction* pFnPlayMuzzleFlashEffect = NULL;

	if ( ! pFnPlayMuzzleFlashEffect )
		pFnPlayMuzzleFlashEffect = (UFunction*) UObject::GObjObjects()->Data[ 75710 ];

	ASFXWeapon_SMG_Shuriken_execPlayMuzzleFlashEffect_Parms PlayMuzzleFlashEffect_Parms;

	this->ProcessEvent ( pFnPlayMuzzleFlashEffect, &PlayMuzzleFlashEffect_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayFireEffects
// [0x00024102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 75704 ];

	ASFXWeapon_SMG_Shuriken_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DummyFireTimerFunction
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::DummyFireTimerFunction ( )
{
	static UFunction* pFnDummyFireTimerFunction = NULL;

	if ( ! pFnDummyFireTimerFunction )
		pFnDummyFireTimerFunction = (UFunction*) UObject::GObjObjects()->Data[ 75699 ];

	ASFXWeapon_SMG_Shuriken_execDummyFireTimerFunction_Parms DummyFireTimerFunction_Parms;

	this->ProcessEvent ( pFnDummyFireTimerFunction, &DummyFireTimerFunction_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DummyFireNumTimes
// [0x00024102] 
// Parameters infos:
// int                            nNumTimes                      ( CPF_Parm )
// struct FVector                 vHitLocation                   ( CPF_Parm )
// class AActor*                  AttachedTo                     ( CPF_OptionalParm | CPF_Parm )
// float                          fInaccuracy                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::DummyFireNumTimes ( int nNumTimes, struct FVector vHitLocation, class AActor* AttachedTo, float fInaccuracy, class AActor* TargetActor )
{
	static UFunction* pFnDummyFireNumTimes = NULL;

	if ( ! pFnDummyFireNumTimes )
		pFnDummyFireNumTimes = (UFunction*) UObject::GObjObjects()->Data[ 75692 ];

	ASFXWeapon_SMG_Shuriken_execDummyFireNumTimes_Parms DummyFireNumTimes_Parms;
	DummyFireNumTimes_Parms.nNumTimes = nNumTimes;
	memcpy ( &DummyFireNumTimes_Parms.vHitLocation, &vHitLocation, 0xC );
	DummyFireNumTimes_Parms.AttachedTo = AttachedTo;
	DummyFireNumTimes_Parms.fInaccuracy = fInaccuracy;
	DummyFireNumTimes_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnDummyFireNumTimes, &DummyFireNumTimes_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CheckTimerFireOnce
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::CheckTimerFireOnce ( )
{
	static UFunction* pFnCheckTimerFireOnce = NULL;

	if ( ! pFnCheckTimerFireOnce )
		pFnCheckTimerFireOnce = (UFunction*) UObject::GObjObjects()->Data[ 75691 ];

	ASFXWeapon_SMG_Shuriken_execCheckTimerFireOnce_Parms CheckTimerFireOnce_Parms;

	this->ProcessEvent ( pFnCheckTimerFireOnce, &CheckTimerFireOnce_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayFireEffectsOnce
// [0x00024102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::PlayFireEffectsOnce ( struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffectsOnce = NULL;

	if ( ! pFnPlayFireEffectsOnce )
		pFnPlayFireEffectsOnce = (UFunction*) UObject::GObjObjects()->Data[ 75688 ];

	ASFXWeapon_SMG_Shuriken_execPlayFireEffectsOnce_Parms PlayFireEffectsOnce_Parms;
	memcpy ( &PlayFireEffectsOnce_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffectsOnce, &PlayFireEffectsOnce_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PrecacheVFX
// [0x00022102] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 75678 ];

	ASFXWeapon_SMG_Shuriken_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponSpecificDecalData
// [0x00420100] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USFXPhysicalMaterialDecals* DecalEffects                   ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm | CPF_OutParm )

class UDecalComponent* ASFXWeapon_SMG_Shuriken::GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime )
{
	static UFunction* pFnGetWeaponSpecificDecalData = NULL;

	if ( ! pFnGetWeaponSpecificDecalData )
		pFnGetWeaponSpecificDecalData = (UFunction*) UObject::GObjObjects()->Data[ 75673 ];

	ASFXWeapon_SMG_Shuriken_execGetWeaponSpecificDecalData_Parms GetWeaponSpecificDecalData_Parms;
	GetWeaponSpecificDecalData_Parms.DecalEffects = DecalEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificDecalData, &GetWeaponSpecificDecalData_Parms, NULL );

	if ( FadeTime )
		*FadeTime = GetWeaponSpecificDecalData_Parms.FadeTime;

	return GetWeaponSpecificDecalData_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetDecalData
// [0x00420102] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm | CPF_OutParm )

class UDecalComponent* ASFXWeapon_SMG_Shuriken::GetDecalData ( class UPhysicalMaterial* PhysMat, float* FadeTime )
{
	static UFunction* pFnGetDecalData = NULL;

	if ( ! pFnGetDecalData )
		pFnGetDecalData = (UFunction*) UObject::GObjObjects()->Data[ 75667 ];

	ASFXWeapon_SMG_Shuriken_execGetDecalData_Parms GetDecalData_Parms;
	GetDecalData_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetDecalData, &GetDecalData_Parms, NULL );

	if ( FadeTime )
		*FadeTime = GetDecalData_Parms.FadeTime;

	return GetDecalData_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SpawnADecal
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SpawnADecal ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnADecal = NULL;

	if ( ! pFnSpawnADecal )
		pFnSpawnADecal = (UFunction*) UObject::GObjObjects()->Data[ 75661 ];

	ASFXWeapon_SMG_Shuriken_execSpawnADecal_Parms SpawnADecal_Parms;
	memcpy ( &SpawnADecal_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnSpawnADecal, &SpawnADecal_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponSpecificImpactSound
// [0x00020100] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactSounds* ImpactSounds                   ( CPF_Parm )

class UWwiseEvent* ASFXWeapon_SMG_Shuriken::GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds )
{
	static UFunction* pFnGetWeaponSpecificImpactSound = NULL;

	if ( ! pFnGetWeaponSpecificImpactSound )
		pFnGetWeaponSpecificImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 75657 ];

	ASFXWeapon_SMG_Shuriken_execGetWeaponSpecificImpactSound_Parms GetWeaponSpecificImpactSound_Parms;
	GetWeaponSpecificImpactSound_Parms.ImpactSounds = ImpactSounds;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactSound, &GetWeaponSpecificImpactSound_Parms, NULL );

	return GetWeaponSpecificImpactSound_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetImpactSound
// [0x00020102] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )

class UWwiseEvent* ASFXWeapon_SMG_Shuriken::GetImpactSound ( class UPhysicalMaterial* PhysMat )
{
	static UFunction* pFnGetImpactSound = NULL;

	if ( ! pFnGetImpactSound )
		pFnGetImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 75652 ];

	ASFXWeapon_SMG_Shuriken_execGetImpactSound_Parms GetImpactSound_Parms;
	GetImpactSound_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetImpactSound, &GetImpactSound_Parms, NULL );

	return GetImpactSound_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SpawnImpactSounds
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SpawnImpactSounds ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnImpactSounds = NULL;

	if ( ! pFnSpawnImpactSounds )
		pFnSpawnImpactSounds = (UFunction*) UObject::GObjObjects()->Data[ 75647 ];

	ASFXWeapon_SMG_Shuriken_execSpawnImpactSounds_Parms SpawnImpactSounds_Parms;
	memcpy ( &SpawnImpactSounds_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnSpawnImpactSounds, &SpawnImpactSounds_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponSpecificImpactEffect
// [0x00022100] 
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactEffects* ImpactEffects                  ( CPF_Parm )

class UParticleSystem* ASFXWeapon_SMG_Shuriken::GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects )
{
	static UFunction* pFnGetWeaponSpecificImpactEffect = NULL;

	if ( ! pFnGetWeaponSpecificImpactEffect )
		pFnGetWeaponSpecificImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 75643 ];

	ASFXWeapon_SMG_Shuriken_execGetWeaponSpecificImpactEffect_Parms GetWeaponSpecificImpactEffect_Parms;
	GetWeaponSpecificImpactEffect_Parms.ImpactEffects = ImpactEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactEffect, &GetWeaponSpecificImpactEffect_Parms, NULL );

	return GetWeaponSpecificImpactEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetImpactEffect
// [0x00022102] 
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )

class UParticleSystem* ASFXWeapon_SMG_Shuriken::GetImpactEffect ( class UPhysicalMaterial* PhysMat )
{
	static UFunction* pFnGetImpactEffect = NULL;

	if ( ! pFnGetImpactEffect )
		pFnGetImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 75638 ];

	ASFXWeapon_SMG_Shuriken_execGetImpactEffect_Parms GetImpactEffect_Parms;
	GetImpactEffect_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetImpactEffect, &GetImpactEffect_Parms, NULL );

	return GetImpactEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SpawnImpactEffects
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SpawnImpactEffects ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnImpactEffects = NULL;

	if ( ! pFnSpawnImpactEffects )
		pFnSpawnImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 75630 ];

	ASFXWeapon_SMG_Shuriken_execSpawnImpactEffects_Parms SpawnImpactEffects_Parms;
	memcpy ( &SpawnImpactEffects_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnSpawnImpactEffects, &SpawnImpactEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ReplicateImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                ImpactedPawn                   ( CPF_Parm )
// class ASFXProjectile*          InProjectile                   ( CPF_OptionalParm | CPF_Parm )
// float                          fDelay                         ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::ReplicateImpact ( class ABioPawn* ImpactedPawn, class ASFXProjectile* InProjectile, float fDelay )
{
	static UFunction* pFnReplicateImpact = NULL;

	if ( ! pFnReplicateImpact )
		pFnReplicateImpact = (UFunction*) UObject::GObjObjects()->Data[ 75625 ];

	ASFXWeapon_SMG_Shuriken_execReplicateImpact_Parms ReplicateImpact_Parms;
	ReplicateImpact_Parms.ImpactedPawn = ImpactedPawn;
	ReplicateImpact_Parms.InProjectile = InProjectile;
	ReplicateImpact_Parms.fDelay = fDelay;

	this->ProcessEvent ( pFnReplicateImpact, &ReplicateImpact_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ClientDoImpact
// [0x00020102] 
// Parameters infos:
// class ABioPawn*                InImpactedPawn                 ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::ClientDoImpact ( class ABioPawn* InImpactedPawn )
{
	static UFunction* pFnClientDoImpact = NULL;

	if ( ! pFnClientDoImpact )
		pFnClientDoImpact = (UFunction*) UObject::GObjObjects()->Data[ 75623 ];

	ASFXWeapon_SMG_Shuriken_execClientDoImpact_Parms ClientDoImpact_Parms;
	ClientDoImpact_Parms.InImpactedPawn = InImpactedPawn;

	this->ProcessEvent ( pFnClientDoImpact, &ClientDoImpact_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProcessInstantHit_Internal
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::ProcessInstantHit_Internal ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit_Internal = NULL;

	if ( ! pFnProcessInstantHit_Internal )
		pFnProcessInstantHit_Internal = (UFunction*) UObject::GObjObjects()->Data[ 75611 ];

	ASFXWeapon_SMG_Shuriken_execProcessInstantHit_Internal_Parms ProcessInstantHit_Internal_Parms;
	ProcessInstantHit_Internal_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Internal_Parms.Impact, &Impact, 0x54 );
	ProcessInstantHit_Internal_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit_Internal, &ProcessInstantHit_Internal_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProcessInstantHitNearMiss
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::ProcessInstantHitNearMiss ( struct FVector StartTrace, struct FVector HitLocation )
{
	static UFunction* pFnProcessInstantHitNearMiss = NULL;

	if ( ! pFnProcessInstantHitNearMiss )
		pFnProcessInstantHitNearMiss = (UFunction*) UObject::GObjObjects()->Data[ 75603 ];

	ASFXWeapon_SMG_Shuriken_execProcessInstantHitNearMiss_Parms ProcessInstantHitNearMiss_Parms;
	memcpy ( &ProcessInstantHitNearMiss_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &ProcessInstantHitNearMiss_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnProcessInstantHitNearMiss, &ProcessInstantHitNearMiss_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ServerProcessInstantHit
// [0x002240C2] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            HitArmourIdx                   ( CPF_Parm )
// unsigned long                  bSuppressedAudio               ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::ServerProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int HitArmourIdx, unsigned long bSuppressedAudio, int NumHits )
{
	static UFunction* pFnServerProcessInstantHit = NULL;

	if ( ! pFnServerProcessInstantHit )
		pFnServerProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 75581 ];

	ASFXWeapon_SMG_Shuriken_execServerProcessInstantHit_Parms ServerProcessInstantHit_Parms;
	ServerProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ServerProcessInstantHit_Parms.Impact, &Impact, 0x54 );
	ServerProcessInstantHit_Parms.HitArmourIdx = HitArmourIdx;
	ServerProcessInstantHit_Parms.bSuppressedAudio = bSuppressedAudio;
	ServerProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnServerProcessInstantHit, &ServerProcessInstantHit_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Shuriken::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 75572 ];

	ASFXWeapon_SMG_Shuriken_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x54 );
	ProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CalcWeaponFire
// [0x00424102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo ASFXWeapon_SMG_Shuriken::CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcWeaponFire = NULL;

	if ( ! pFnCalcWeaponFire )
		pFnCalcWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 75560 ];

	ASFXWeapon_SMG_Shuriken_execCalcWeaponFire_Parms CalcWeaponFire_Parms;
	memcpy ( &CalcWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.EndTrace, &EndTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnCalcWeaponFire, &CalcWeaponFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcWeaponFire_Parms.ImpactList, 0xC );

	return CalcWeaponFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.InstantFire
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::InstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 75552 ];

	ASFXWeapon_SMG_Shuriken_execInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetAmmoCountInMagazine
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Shuriken::GetAmmoCountInMagazine ( )
{
	static UFunction* pFnGetAmmoCountInMagazine = NULL;

	if ( ! pFnGetAmmoCountInMagazine )
		pFnGetAmmoCountInMagazine = (UFunction*) UObject::GObjObjects()->Data[ 49970 ];

	ASFXWeapon_SMG_Shuriken_execGetAmmoCountInMagazine_Parms GetAmmoCountInMagazine_Parms;

	this->ProcessEvent ( pFnGetAmmoCountInMagazine, &GetAmmoCountInMagazine_Parms, NULL );

	return GetAmmoCountInMagazine_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetLazyFireInterval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float ASFXWeapon_SMG_Shuriken::GetLazyFireInterval ( unsigned char FireModeNum )
{
	static UFunction* pFnGetLazyFireInterval = NULL;

	if ( ! pFnGetLazyFireInterval )
		pFnGetLazyFireInterval = (UFunction*) UObject::GObjObjects()->Data[ 75548 ];

	ASFXWeapon_SMG_Shuriken_execGetLazyFireInterval_Parms GetLazyFireInterval_Parms;
	GetLazyFireInterval_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetLazyFireInterval, &GetLazyFireInterval_Parms, NULL );

	return GetLazyFireInterval_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetFireInterval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float ASFXWeapon_SMG_Shuriken::GetFireInterval ( unsigned char FireModeNum )
{
	static UFunction* pFnGetFireInterval = NULL;

	if ( ! pFnGetFireInterval )
		pFnGetFireInterval = (UFunction*) UObject::GObjObjects()->Data[ 75545 ];

	ASFXWeapon_SMG_Shuriken_execGetFireInterval_Parms GetFireInterval_Parms;
	GetFireInterval_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetFireInterval, &GetFireInterval_Parms, NULL );

	return GetFireInterval_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.HasAnyAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49972 ];

	ASFXWeapon_SMG_Shuriken_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );

	return HasAnyAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool ASFXWeapon_SMG_Shuriken::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 53129 ];

	ASFXWeapon_SMG_Shuriken_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.HasSpareAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::HasSpareAmmo ( )
{
	static UFunction* pFnHasSpareAmmo = NULL;

	if ( ! pFnHasSpareAmmo )
		pFnHasSpareAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75540 ];

	ASFXWeapon_SMG_Shuriken_execHasSpareAmmo_Parms HasSpareAmmo_Parms;

	this->ProcessEvent ( pFnHasSpareAmmo, &HasSpareAmmo_Parms, NULL );

	return HasSpareAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.AddAmmo
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int ASFXWeapon_SMG_Shuriken::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = (UFunction*) UObject::GObjObjects()->Data[ 45207 ];

	ASFXWeapon_SMG_Shuriken_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ConsumeAmmo
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75525 ];

	ASFXWeapon_SMG_Shuriken_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.InitializeAmmo
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::InitializeAmmo ( )
{
	static UFunction* pFnInitializeAmmo = NULL;

	if ( ! pFnInitializeAmmo )
		pFnInitializeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75524 ];

	ASFXWeapon_SMG_Shuriken_execInitializeAmmo_Parms InitializeAmmo_Parms;

	this->ProcessEvent ( pFnInitializeAmmo, &InitializeAmmo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponFireType
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASFXWeapon_SMG_Shuriken::GetWeaponFireType ( )
{
	static UFunction* pFnGetWeaponFireType = NULL;

	if ( ! pFnGetWeaponFireType )
		pFnGetWeaponFireType = (UFunction*) UObject::GObjObjects()->Data[ 71104 ];

	ASFXWeapon_SMG_Shuriken_execGetWeaponFireType_Parms GetWeaponFireType_Parms;

	this->ProcessEvent ( pFnGetWeaponFireType, &GetWeaponFireType_Parms, NULL );

	return GetWeaponFireType_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetZoomFOV
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Shuriken::GetZoomFOV ( )
{
	static UFunction* pFnGetZoomFOV = NULL;

	if ( ! pFnGetZoomFOV )
		pFnGetZoomFOV = (UFunction*) UObject::GObjObjects()->Data[ 65814 ];

	ASFXWeapon_SMG_Shuriken_execGetZoomFOV_Parms GetZoomFOV_Parms;

	this->ProcessEvent ( pFnGetZoomFOV, &GetZoomFOV_Parms, NULL );

	return GetZoomFOV_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetModifiedFOV
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          FOV                            ( CPF_Parm | CPF_OutParm )

bool ASFXWeapon_SMG_Shuriken::GetModifiedFOV ( float* FOV )
{
	static UFunction* pFnGetModifiedFOV = NULL;

	if ( ! pFnGetModifiedFOV )
		pFnGetModifiedFOV = (UFunction*) UObject::GObjObjects()->Data[ 75521 ];

	ASFXWeapon_SMG_Shuriken_execGetModifiedFOV_Parms GetModifiedFOV_Parms;

	this->ProcessEvent ( pFnGetModifiedFOV, &GetModifiedFOV_Parms, NULL );

	if ( FOV )
		*FOV = GetModifiedFOV_Parms.FOV;

	return GetModifiedFOV_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetMuzzleLoc
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASFXWeapon_SMG_Shuriken::GetMuzzleLoc ( )
{
	static UFunction* pFnGetMuzzleLoc = NULL;

	if ( ! pFnGetMuzzleLoc )
		pFnGetMuzzleLoc = (UFunction*) UObject::GObjObjects()->Data[ 75510 ];

	ASFXWeapon_SMG_Shuriken_execGetMuzzleLoc_Parms GetMuzzleLoc_Parms;

	this->ProcessEvent ( pFnGetMuzzleLoc, &GetMuzzleLoc_Parms, NULL );

	return GetMuzzleLoc_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SetWeaponRecoil
// [0x00020102] 
// Parameters infos:
// float                          PitchRecoil                    ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SetWeaponRecoil ( float PitchRecoil )
{
	static UFunction* pFnSetWeaponRecoil = NULL;

	if ( ! pFnSetWeaponRecoil )
		pFnSetWeaponRecoil = (UFunction*) UObject::GObjObjects()->Data[ 75507 ];

	ASFXWeapon_SMG_Shuriken_execSetWeaponRecoil_Parms SetWeaponRecoil_Parms;
	SetWeaponRecoil_Parms.PitchRecoil = PitchRecoil;

	this->ProcessEvent ( pFnSetWeaponRecoil, &SetWeaponRecoil_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ServerSetIsZoomed
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bState                         ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::ServerSetIsZoomed ( unsigned long bState )
{
	static UFunction* pFnServerSetIsZoomed = NULL;

	if ( ! pFnServerSetIsZoomed )
		pFnServerSetIsZoomed = (UFunction*) UObject::GObjObjects()->Data[ 75505 ];

	ASFXWeapon_SMG_Shuriken_execServerSetIsZoomed_Parms ServerSetIsZoomed_Parms;
	ServerSetIsZoomed_Parms.bState = bState;

	this->ProcessEvent ( pFnServerSetIsZoomed, &ServerSetIsZoomed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetRTPCPlayerPosition
// [0x00020102] 
// Parameters infos:
// unsigned char                  NewPlayerPosition              ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SetRTPCPlayerPosition ( unsigned char NewPlayerPosition )
{
	static UFunction* pFnSetRTPCPlayerPosition = NULL;

	if ( ! pFnSetRTPCPlayerPosition )
		pFnSetRTPCPlayerPosition = (UFunction*) UObject::GObjObjects()->Data[ 75501 ];

	ASFXWeapon_SMG_Shuriken_execSetRTPCPlayerPosition_Parms SetRTPCPlayerPosition_Parms;
	SetRTPCPlayerPosition_Parms.NewPlayerPosition = NewPlayerPosition;

	this->ProcessEvent ( pFnSetRTPCPlayerPosition, &SetRTPCPlayerPosition_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetZoomed
// [0x00020102] 
// Parameters infos:
// unsigned long                  bState                         ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::SetZoomed ( unsigned long bState )
{
	static UFunction* pFnSetZoomed = NULL;

	if ( ! pFnSetZoomed )
		pFnSetZoomed = (UFunction*) UObject::GObjObjects()->Data[ 75491 ];

	ASFXWeapon_SMG_Shuriken_execSetZoomed_Parms SetZoomed_Parms;
	SetZoomed_Parms.bState = bState;

	this->ProcessEvent ( pFnSetZoomed, &SetZoomed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetAIAimDelay
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Shuriken::GetAIAimDelay ( )
{
	static UFunction* pFnGetAIAimDelay = NULL;

	if ( ! pFnGetAIAimDelay )
		pFnGetAIAimDelay = (UFunction*) UObject::GObjObjects()->Data[ 55312 ];

	ASFXWeapon_SMG_Shuriken_execGetAIAimDelay_Parms GetAIAimDelay_Parms;

	this->ProcessEvent ( pFnGetAIAimDelay, &GetAIAimDelay_Parms, NULL );

	return GetAIAimDelay_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetPlayerAimError
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Accuracy                       ( CPF_Parm )

float ASFXWeapon_SMG_Shuriken::GetPlayerAimError ( float Accuracy )
{
	static UFunction* pFnGetPlayerAimError = NULL;

	if ( ! pFnGetPlayerAimError )
		pFnGetPlayerAimError = (UFunction*) UObject::GObjObjects()->Data[ 75487 ];

	ASFXWeapon_SMG_Shuriken_execGetPlayerAimError_Parms GetPlayerAimError_Parms;
	GetPlayerAimError_Parms.Accuracy = Accuracy;

	this->ProcessEvent ( pFnGetPlayerAimError, &GetPlayerAimError_Parms, NULL );

	return GetPlayerAimError_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetAdjustedAim
// [0x00020102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ASFXWeapon_SMG_Shuriken::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 75481 ];

	ASFXWeapon_SMG_Shuriken_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetRateOfFire
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Shuriken::GetRateOfFire ( )
{
	static UFunction* pFnGetRateOfFire = NULL;

	if ( ! pFnGetRateOfFire )
		pFnGetRateOfFire = (UFunction*) UObject::GObjObjects()->Data[ 41706 ];

	ASFXWeapon_SMG_Shuriken_execGetRateOfFire_Parms GetRateOfFire_Parms;

	this->ProcessEvent ( pFnGetRateOfFire, &GetRateOfFire_Parms, NULL );

	return GetRateOfFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetTraceRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Shuriken::GetTraceRange ( )
{
	static UFunction* pFnGetTraceRange = NULL;

	if ( ! pFnGetTraceRange )
		pFnGetTraceRange = (UFunction*) UObject::GObjObjects()->Data[ 71107 ];

	ASFXWeapon_SMG_Shuriken_execGetTraceRange_Parms GetTraceRange_Parms;

	this->ProcessEvent ( pFnGetTraceRange, &GetTraceRange_Parms, NULL );

	return GetTraceRange_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetWeaponAimErrorRange
// [0x00020102] 
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector2D ASFXWeapon_SMG_Shuriken::GetWeaponAimErrorRange ( )
{
	static UFunction* pFnGetWeaponAimErrorRange = NULL;

	if ( ! pFnGetWeaponAimErrorRange )
		pFnGetWeaponAimErrorRange = (UFunction*) UObject::GObjObjects()->Data[ 45632 ];

	ASFXWeapon_SMG_Shuriken_execGetWeaponAimErrorRange_Parms GetWeaponAimErrorRange_Parms;

	this->ProcessEvent ( pFnGetWeaponAimErrorRange, &GetWeaponAimErrorRange_Parms, NULL );

	return GetWeaponAimErrorRange_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetWeaponRecoil
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Shuriken::GetWeaponRecoil ( )
{
	static UFunction* pFnGetWeaponRecoil = NULL;

	if ( ! pFnGetWeaponRecoil )
		pFnGetWeaponRecoil = (UFunction*) UObject::GObjObjects()->Data[ 75471 ];

	ASFXWeapon_SMG_Shuriken_execGetWeaponRecoil_Parms GetWeaponRecoil_Parms;

	this->ProcessEvent ( pFnGetWeaponRecoil, &GetWeaponRecoil_Parms, NULL );

	return GetWeaponRecoil_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ResetAmmoOnHolster
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::ResetAmmoOnHolster ( )
{
	static UFunction* pFnResetAmmoOnHolster = NULL;

	if ( ! pFnResetAmmoOnHolster )
		pFnResetAmmoOnHolster = (UFunction*) UObject::GObjObjects()->Data[ 75470 ];

	ASFXWeapon_SMG_Shuriken_execResetAmmoOnHolster_Parms ResetAmmoOnHolster_Parms;

	this->ProcessEvent ( pFnResetAmmoOnHolster, &ResetAmmoOnHolster_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetMaxTotalAmmo
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Shuriken::GetMaxTotalAmmo ( )
{
	static UFunction* pFnGetMaxTotalAmmo = NULL;

	if ( ! pFnGetMaxTotalAmmo )
		pFnGetMaxTotalAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75468 ];

	ASFXWeapon_SMG_Shuriken_execGetMaxTotalAmmo_Parms GetMaxTotalAmmo_Parms;

	this->ProcessEvent ( pFnGetMaxTotalAmmo, &GetMaxTotalAmmo_Parms, NULL );

	return GetMaxTotalAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetCurrentTotalAmmo
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Shuriken::GetCurrentTotalAmmo ( )
{
	static UFunction* pFnGetCurrentTotalAmmo = NULL;

	if ( ! pFnGetCurrentTotalAmmo )
		pFnGetCurrentTotalAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75465 ];

	ASFXWeapon_SMG_Shuriken_execGetCurrentTotalAmmo_Parms GetCurrentTotalAmmo_Parms;

	this->ProcessEvent ( pFnGetCurrentTotalAmmo, &GetCurrentTotalAmmo_Parms, NULL );

	return GetCurrentTotalAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetCurrentSpareAmmo
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Shuriken::GetCurrentSpareAmmo ( )
{
	static UFunction* pFnGetCurrentSpareAmmo = NULL;

	if ( ! pFnGetCurrentSpareAmmo )
		pFnGetCurrentSpareAmmo = (UFunction*) UObject::GObjObjects()->Data[ 43672 ];

	ASFXWeapon_SMG_Shuriken_execGetCurrentSpareAmmo_Parms GetCurrentSpareAmmo_Parms;

	this->ProcessEvent ( pFnGetCurrentSpareAmmo, &GetCurrentSpareAmmo_Parms, NULL );

	return GetCurrentSpareAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetMaxSpareAmmo
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIgnoreCurrentMag              ( CPF_OptionalParm | CPF_Parm )

int ASFXWeapon_SMG_Shuriken::GetMaxSpareAmmo ( unsigned long bIgnoreCurrentMag )
{
	static UFunction* pFnGetMaxSpareAmmo = NULL;

	if ( ! pFnGetMaxSpareAmmo )
		pFnGetMaxSpareAmmo = (UFunction*) UObject::GObjObjects()->Data[ 53089 ];

	ASFXWeapon_SMG_Shuriken_execGetMaxSpareAmmo_Parms GetMaxSpareAmmo_Parms;
	GetMaxSpareAmmo_Parms.bIgnoreCurrentMag = bIgnoreCurrentMag;

	this->ProcessEvent ( pFnGetMaxSpareAmmo, &GetMaxSpareAmmo_Parms, NULL );

	return GetMaxSpareAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetMagazineSize
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Shuriken::GetMagazineSize ( )
{
	static UFunction* pFnGetMagazineSize = NULL;

	if ( ! pFnGetMagazineSize )
		pFnGetMagazineSize = (UFunction*) UObject::GObjObjects()->Data[ 43511 ];

	ASFXWeapon_SMG_Shuriken_execGetMagazineSize_Parms GetMagazineSize_Parms;

	this->ProcessEvent ( pFnGetMagazineSize, &GetMagazineSize_Parms, NULL );

	return GetMagazineSize_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.OutOfAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::OutOfAmmo ( )
{
	static UFunction* pFnOutOfAmmo = NULL;

	if ( ! pFnOutOfAmmo )
		pFnOutOfAmmo = (UFunction*) UObject::GObjObjects()->Data[ 68201 ];

	ASFXWeapon_SMG_Shuriken_execOutOfAmmo_Parms OutOfAmmo_Parms;

	this->ProcessEvent ( pFnOutOfAmmo, &OutOfAmmo_Parms, NULL );

	return OutOfAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetDamageType
// [0x00024102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FiringMode                     ( CPF_OptionalParm | CPF_Parm )

class UClass* ASFXWeapon_SMG_Shuriken::GetDamageType ( unsigned char FiringMode )
{
	static UFunction* pFnGetDamageType = NULL;

	if ( ! pFnGetDamageType )
		pFnGetDamageType = (UFunction*) UObject::GObjObjects()->Data[ 45628 ];

	ASFXWeapon_SMG_Shuriken_execGetDamageType_Parms GetDamageType_Parms;
	GetDamageType_Parms.FiringMode = FiringMode;

	this->ProcessEvent ( pFnGetDamageType, &GetDamageType_Parms, NULL );

	return GetDamageType_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.CalculateBonus
// [0x00424102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

void ASFXWeapon_SMG_Shuriken::CalculateBonus ( struct FVector HitLocation, class AActor* HitActor, struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnCalculateBonus = NULL;

	if ( ! pFnCalculateBonus )
		pFnCalculateBonus = (UFunction*) UObject::GObjObjects()->Data[ 75458 ];

	ASFXWeapon_SMG_Shuriken_execCalculateBonus_Parms CalculateBonus_Parms;
	memcpy ( &CalculateBonus_Parms.HitLocation, &HitLocation, 0xC );
	CalculateBonus_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnCalculateBonus, &CalculateBonus_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &CalculateBonus_Parms.DamageCalc, 0x60 );
};

// Function SFXGame.SFXWeapon.GetFireModeBaseDamage
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Shuriken::GetFireModeBaseDamage ( )
{
	static UFunction* pFnGetFireModeBaseDamage = NULL;

	if ( ! pFnGetFireModeBaseDamage )
		pFnGetFireModeBaseDamage = (UFunction*) UObject::GObjObjects()->Data[ 45626 ];

	ASFXWeapon_SMG_Shuriken_execGetFireModeBaseDamage_Parms GetFireModeBaseDamage_Parms;

	this->ProcessEvent ( pFnGetFireModeBaseDamage, &GetFireModeBaseDamage_Parms, NULL );

	return GetFireModeBaseDamage_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.NotifyUnpossessed
// [0x00020000] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::NotifyUnpossessed ( )
{
	static UFunction* pFnNotifyUnpossessed = NULL;

	if ( ! pFnNotifyUnpossessed )
		pFnNotifyUnpossessed = (UFunction*) UObject::GObjObjects()->Data[ 75456 ];

	ASFXWeapon_SMG_Shuriken_execNotifyUnpossessed_Parms NotifyUnpossessed_Parms;

	this->ProcessEvent ( pFnNotifyUnpossessed, &NotifyUnpossessed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.UseFirstPersonCamera
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Shuriken::UseFirstPersonCamera ( )
{
	static UFunction* pFnUseFirstPersonCamera = NULL;

	if ( ! pFnUseFirstPersonCamera )
		pFnUseFirstPersonCamera = (UFunction*) UObject::GObjObjects()->Data[ 75454 ];

	ASFXWeapon_SMG_Shuriken_execUseFirstPersonCamera_Parms UseFirstPersonCamera_Parms;

	this->ProcessEvent ( pFnUseFirstPersonCamera, &UseFirstPersonCamera_Parms, NULL );

	return UseFirstPersonCamera_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetProjectileFirePosition
// [0x00420102] 
// Parameters infos:
// struct FVector                 out_ProjLoc                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 out_ProjDir                    ( CPF_Parm | CPF_OutParm )

void ASFXWeapon_SMG_Shuriken::GetProjectileFirePosition ( struct FVector* out_ProjLoc, struct FVector* out_ProjDir )
{
	static UFunction* pFnGetProjectileFirePosition = NULL;

	if ( ! pFnGetProjectileFirePosition )
		pFnGetProjectileFirePosition = (UFunction*) UObject::GObjObjects()->Data[ 75448 ];

	ASFXWeapon_SMG_Shuriken_execGetProjectileFirePosition_Parms GetProjectileFirePosition_Parms;

	this->ProcessEvent ( pFnGetProjectileFirePosition, &GetProjectileFirePosition_Parms, NULL );

	if ( out_ProjLoc )
		memcpy ( out_ProjLoc, &GetProjectileFirePosition_Parms.out_ProjLoc, 0xC );

	if ( out_ProjDir )
		memcpy ( out_ProjDir, &GetProjectileFirePosition_Parms.out_ProjDir, 0xC );
};

// Function SFXGame.SFXWeapon.GetPhysicalFireStartLoc
// [0x00024102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AimDir                         ( CPF_OptionalParm | CPF_Parm )

struct FVector ASFXWeapon_SMG_Shuriken::GetPhysicalFireStartLoc ( struct FVector AimDir )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 75445 ];

	ASFXWeapon_SMG_Shuriken_execGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;
	memcpy ( &GetPhysicalFireStartLoc_Parms.AimDir, &AimDir, 0xC );

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.OnClientProjectileSpawned
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class ASFXProjectile*          NewProjectile                  ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::OnClientProjectileSpawned ( class ASFXProjectile* NewProjectile )
{
	static UFunction* pFnOnClientProjectileSpawned = NULL;

	if ( ! pFnOnClientProjectileSpawned )
		pFnOnClientProjectileSpawned = (UFunction*) UObject::GObjObjects()->Data[ 75438 ];

	ASFXWeapon_SMG_Shuriken_execOnClientProjectileSpawned_Parms OnClientProjectileSpawned_Parms;
	OnClientProjectileSpawned_Parms.NewProjectile = NewProjectile;

	this->ProcessEvent ( pFnOnClientProjectileSpawned, &OnClientProjectileSpawned_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Internal_ProjectileFire
// [0x00020102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* ASFXWeapon_SMG_Shuriken::Internal_ProjectileFire ( )
{
	static UFunction* pFnInternal_ProjectileFire = NULL;

	if ( ! pFnInternal_ProjectileFire )
		pFnInternal_ProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 75427 ];

	ASFXWeapon_SMG_Shuriken_execInternal_ProjectileFire_Parms Internal_ProjectileFire_Parms;

	this->ProcessEvent ( pFnInternal_ProjectileFire, &Internal_ProjectileFire_Parms, NULL );

	return Internal_ProjectileFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ServerProjectileFire
// [0x002200C2] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// struct FVector                 ProjLocation                   ( CPF_Parm )
// struct FVector                 ProjDirection                  ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::ServerProjectileFire ( class AActor* Target, struct FVector ProjLocation, struct FVector ProjDirection )
{
	static UFunction* pFnServerProjectileFire = NULL;

	if ( ! pFnServerProjectileFire )
		pFnServerProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 75423 ];

	ASFXWeapon_SMG_Shuriken_execServerProjectileFire_Parms ServerProjectileFire_Parms;
	ServerProjectileFire_Parms.Target = Target;
	memcpy ( &ServerProjectileFire_Parms.ProjLocation, &ProjLocation, 0xC );
	memcpy ( &ServerProjectileFire_Parms.ProjDirection, &ProjDirection, 0xC );

	this->ProcessEvent ( pFnServerProjectileFire, &ServerProjectileFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProjectileFire
// [0x00020102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* ASFXWeapon_SMG_Shuriken::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 75418 ];

	ASFXWeapon_SMG_Shuriken_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ForceEndFire
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::ForceEndFire ( )
{
	static UFunction* pFnForceEndFire = NULL;

	if ( ! pFnForceEndFire )
		pFnForceEndFire = (UFunction*) UObject::GObjObjects()->Data[ 75416 ];

	ASFXWeapon_SMG_Shuriken_execForceEndFire_Parms ForceEndFire_Parms;

	this->ProcessEvent ( pFnForceEndFire, &ForceEndFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.InitDefaultDecalProperties
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::InitDefaultDecalProperties ( )
{
	static UFunction* pFnInitDefaultDecalProperties = NULL;

	if ( ! pFnInitDefaultDecalProperties )
		pFnInitDefaultDecalProperties = (UFunction*) UObject::GObjObjects()->Data[ 75413 ];

	ASFXWeapon_SMG_Shuriken_execInitDefaultDecalProperties_Parms InitDefaultDecalProperties_Parms;

	this->ProcessEvent ( pFnInitDefaultDecalProperties, &InitDefaultDecalProperties_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ScaleWeapon
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::ScaleWeapon ( )
{
	static UFunction* pFnScaleWeapon = NULL;

	if ( ! pFnScaleWeapon )
		pFnScaleWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75398 ];

	ASFXWeapon_SMG_Shuriken_execScaleWeapon_Parms ScaleWeapon_Parms;

	this->ProcessEvent ( pFnScaleWeapon, &ScaleWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CacheAnimNodes
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::CacheAnimNodes ( )
{
	static UFunction* pFnCacheAnimNodes = NULL;

	if ( ! pFnCacheAnimNodes )
		pFnCacheAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 75394 ];

	ASFXWeapon_SMG_Shuriken_execCacheAnimNodes_Parms CacheAnimNodes_Parms;

	this->ProcessEvent ( pFnCacheAnimNodes, &CacheAnimNodes_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PostInitAnimTree
// [0x00020102] 
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ASFXWeapon_SMG_Shuriken::PostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 75392 ];

	ASFXWeapon_SMG_Shuriken_execPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function SFXGame.SFXWeapon.InitializeWeapon
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::InitializeWeapon ( )
{
	static UFunction* pFnInitializeWeapon = NULL;

	if ( ! pFnInitializeWeapon )
		pFnInitializeWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75381 ];

	ASFXWeapon_SMG_Shuriken_execInitializeWeapon_Parms InitializeWeapon_Parms;

	this->ProcessEvent ( pFnInitializeWeapon, &InitializeWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DeferredPostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::DeferredPostBeginPlay ( )
{
	static UFunction* pFnDeferredPostBeginPlay = NULL;

	if ( ! pFnDeferredPostBeginPlay )
		pFnDeferredPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 75380 ];

	ASFXWeapon_SMG_Shuriken_execDeferredPostBeginPlay_Parms DeferredPostBeginPlay_Parms;

	this->ProcessEvent ( pFnDeferredPostBeginPlay, &DeferredPostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 75379 ];

	ASFXWeapon_SMG_Shuriken_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXWeapon.FireModeUpdated
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication )
{
	static UFunction* pFnFireModeUpdated = NULL;

	if ( ! pFnFireModeUpdated )
		pFnFireModeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 75376 ];

	ASFXWeapon_SMG_Shuriken_execFireModeUpdated_Parms FireModeUpdated_Parms;
	FireModeUpdated_Parms.FiringMode = FiringMode;
	FireModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFireModeUpdated, &FireModeUpdated_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CharacterSlotUpdated
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Shuriken::CharacterSlotUpdated ( )
{
	static UFunction* pFnCharacterSlotUpdated = NULL;

	if ( ! pFnCharacterSlotUpdated )
		pFnCharacterSlotUpdated = (UFunction*) UObject::GObjObjects()->Data[ 75374 ];

	ASFXWeapon_SMG_Shuriken_execCharacterSlotUpdated_Parms CharacterSlotUpdated_Parms;

	this->ProcessEvent ( pFnCharacterSlotUpdated, &CharacterSlotUpdated_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 75371 ];

	ASFXWeapon_SMG_Shuriken_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function SFXGame.SFXWeapon.OnWeaponUnequip
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::OnWeaponUnequip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponUnequip = NULL;

	if ( ! pFnOnWeaponUnequip )
		pFnOnWeaponUnequip = (UFunction*) UObject::GObjObjects()->Data[ 75369 ];

	ASFXWeapon_SMG_Shuriken_execOnWeaponUnequip_Parms OnWeaponUnequip_Parms;
	OnWeaponUnequip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponUnequip, &OnWeaponUnequip_Parms, NULL );
};

// Function SFXGame.SFXWeapon.OnWeaponEquip
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::OnWeaponEquip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponEquip = NULL;

	if ( ! pFnOnWeaponEquip )
		pFnOnWeaponEquip = (UFunction*) UObject::GObjObjects()->Data[ 75367 ];

	ASFXWeapon_SMG_Shuriken_execOnWeaponEquip_Parms OnWeaponEquip_Parms;
	OnWeaponEquip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponEquip, &OnWeaponEquip_Parms, NULL );
};

// Function SFXGame.SFXWeapon.OnWeaponReload
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::OnWeaponReload ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponReload = NULL;

	if ( ! pFnOnWeaponReload )
		pFnOnWeaponReload = (UFunction*) UObject::GObjObjects()->Data[ 75365 ];

	ASFXWeapon_SMG_Shuriken_execOnWeaponReload_Parms OnWeaponReload_Parms;
	OnWeaponReload_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponReload, &OnWeaponReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetDamageVocProbabilityMod
// [0x00120000] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Shuriken::GetDamageVocProbabilityMod ( )
{
	static UFunction* pFnGetDamageVocProbabilityMod = NULL;

	if ( ! pFnGetDamageVocProbabilityMod )
		pFnGetDamageVocProbabilityMod = (UFunction*) UObject::GObjObjects()->Data[ 54000 ];

	ASFXWeapon_SMG_Shuriken_execGetDamageVocProbabilityMod_Parms GetDamageVocProbabilityMod_Parms;

	this->ProcessEvent ( pFnGetDamageVocProbabilityMod, &GetDamageVocProbabilityMod_Parms, NULL );

	return GetDamageVocProbabilityMod_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.OnWeaponImpact
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_SMG_Shuriken::OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact )
{
	static UFunction* pFnOnWeaponImpact = NULL;

	if ( ! pFnOnWeaponImpact )
		pFnOnWeaponImpact = (UFunction*) UObject::GObjObjects()->Data[ 75362 ];

	ASFXWeapon_SMG_Shuriken_execOnWeaponImpact_Parms OnWeaponImpact_Parms;
	OnWeaponImpact_Parms.Weapon = Weapon;
	memcpy ( &OnWeaponImpact_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnOnWeaponImpact, &OnWeaponImpact_Parms, NULL );
};

// Function SFXGame.SFXDamageType.CalculateDamageMultiplier
// [0x00422002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

float USFXDamageType_SMG_Tempest::CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnCalculateDamageMultiplier = NULL;

	if ( ! pFnCalculateDamageMultiplier )
		pFnCalculateDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 44579 ];

	USFXDamageType_SMG_Tempest_execCalculateDamageMultiplier_Parms CalculateDamageMultiplier_Parms;

	this->ProcessEvent ( pFnCalculateDamageMultiplier, &CalculateDamageMultiplier_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &CalculateDamageMultiplier_Parms.DamageCalc, 0x60 );

	return CalculateDamageMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.ResetDamageCalc
// [0x00422002] 
// Parameters infos:
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

void USFXDamageType_SMG_Tempest::ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnResetDamageCalc = NULL;

	if ( ! pFnResetDamageCalc )
		pFnResetDamageCalc = (UFunction*) UObject::GObjObjects()->Data[ 44554 ];

	USFXDamageType_SMG_Tempest_execResetDamageCalc_Parms ResetDamageCalc_Parms;

	this->ProcessEvent ( pFnResetDamageCalc, &ResetDamageCalc_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &ResetDamageCalc_Parms.DamageCalc, 0x60 );
};

// Function SFXGame.SFXDamageType.CanPlayDeathEffect
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

bool USFXDamageType_SMG_Tempest::CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 44550 ];

	USFXDamageType_SMG_Tempest_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;
	CanPlayDeathEffect_Parms.Target = Target;
	CanPlayDeathEffect_Parms.Killer = Killer;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.CalculateDamageMultiplier
// [0x00422002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

float USFXDamageType_TacticalMachinePistol::CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnCalculateDamageMultiplier = NULL;

	if ( ! pFnCalculateDamageMultiplier )
		pFnCalculateDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 44579 ];

	USFXDamageType_TacticalMachinePistol_execCalculateDamageMultiplier_Parms CalculateDamageMultiplier_Parms;

	this->ProcessEvent ( pFnCalculateDamageMultiplier, &CalculateDamageMultiplier_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &CalculateDamageMultiplier_Parms.DamageCalc, 0x60 );

	return CalculateDamageMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.ResetDamageCalc
// [0x00422002] 
// Parameters infos:
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

void USFXDamageType_TacticalMachinePistol::ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnResetDamageCalc = NULL;

	if ( ! pFnResetDamageCalc )
		pFnResetDamageCalc = (UFunction*) UObject::GObjObjects()->Data[ 44554 ];

	USFXDamageType_TacticalMachinePistol_execResetDamageCalc_Parms ResetDamageCalc_Parms;

	this->ProcessEvent ( pFnResetDamageCalc, &ResetDamageCalc_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &ResetDamageCalc_Parms.DamageCalc, 0x60 );
};

// Function SFXGame.SFXDamageType.CanPlayDeathEffect
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

bool USFXDamageType_TacticalMachinePistol::CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 44550 ];

	USFXDamageType_TacticalMachinePistol_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;
	CanPlayDeathEffect_Parms.Target = Target;
	CanPlayDeathEffect_Parms.Killer = Killer;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GiveWeaponCodex
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_SMG_Hornet::GiveWeaponCodex ( )
{
	static UFunction* pFnGiveWeaponCodex = NULL;

	if ( ! pFnGiveWeaponCodex )
		pFnGiveWeaponCodex = (UFunction*) UObject::GObjObjects()->Data[ 76294 ];

	ASFXWeapon_SMG_Hornet_execGiveWeaponCodex_Parms GiveWeaponCodex_Parms;

	this->ProcessEvent ( pFnGiveWeaponCodex, &GiveWeaponCodex_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ClearFizzleCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_SMG_Hornet::ClearFizzleCount ( )
{
	static UFunction* pFnClearFizzleCount = NULL;

	if ( ! pFnClearFizzleCount )
		pFnClearFizzleCount = (UFunction*) UObject::GObjObjects()->Data[ 75417 ];

	ASFXWeapon_SMG_Hornet_execClearFizzleCount_Parms ClearFizzleCount_Parms;

	this->ProcessEvent ( pFnClearFizzleCount, &ClearFizzleCount_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IncrementFizzleCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_SMG_Hornet::IncrementFizzleCount ( )
{
	static UFunction* pFnIncrementFizzleCount = NULL;

	if ( ! pFnIncrementFizzleCount )
		pFnIncrementFizzleCount = (UFunction*) UObject::GObjObjects()->Data[ 75802 ];

	ASFXWeapon_SMG_Hornet_execIncrementFizzleCount_Parms IncrementFizzleCount_Parms;

	this->ProcessEvent ( pFnIncrementFizzleCount, &IncrementFizzleCount_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IsClientReadyToInitialize
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::IsClientReadyToInitialize ( )
{
	static UFunction* pFnIsClientReadyToInitialize = NULL;

	if ( ! pFnIsClientReadyToInitialize )
		pFnIsClientReadyToInitialize = (UFunction*) UObject::GObjObjects()->Data[ 76292 ];

	ASFXWeapon_SMG_Hornet_execIsClientReadyToInitialize_Parms IsClientReadyToInitialize_Parms;

	this->ProcessEvent ( pFnIsClientReadyToInitialize, &IsClientReadyToInitialize_Parms, NULL );

	return IsClientReadyToInitialize_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.UnsubscribeFromImpactNotifications
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

void ASFXWeapon_SMG_Hornet::UnsubscribeFromImpactNotifications ( struct FScriptDelegate Callback )
{
	static UFunction* pFnUnsubscribeFromImpactNotifications = NULL;

	if ( ! pFnUnsubscribeFromImpactNotifications )
		pFnUnsubscribeFromImpactNotifications = (UFunction*) UObject::GObjObjects()->Data[ 71078 ];

	ASFXWeapon_SMG_Hornet_execUnsubscribeFromImpactNotifications_Parms UnsubscribeFromImpactNotifications_Parms;
	memcpy ( &UnsubscribeFromImpactNotifications_Parms.Callback, &Callback, 0xC );

	this->ProcessEvent ( pFnUnsubscribeFromImpactNotifications, &UnsubscribeFromImpactNotifications_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SubscribeToImpactNotifications
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

void ASFXWeapon_SMG_Hornet::SubscribeToImpactNotifications ( struct FScriptDelegate Callback )
{
	static UFunction* pFnSubscribeToImpactNotifications = NULL;

	if ( ! pFnSubscribeToImpactNotifications )
		pFnSubscribeToImpactNotifications = (UFunction*) UObject::GObjObjects()->Data[ 71075 ];

	ASFXWeapon_SMG_Hornet_execSubscribeToImpactNotifications_Parms SubscribeToImpactNotifications_Parms;
	memcpy ( &SubscribeToImpactNotifications_Parms.Callback, &Callback, 0xC );

	this->ProcessEvent ( pFnSubscribeToImpactNotifications, &SubscribeToImpactNotifications_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetPenetrationDepth
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Hornet::eventGetPenetrationDepth ( )
{
	static UFunction* pFnGetPenetrationDepth = NULL;

	if ( ! pFnGetPenetrationDepth )
		pFnGetPenetrationDepth = (UFunction*) UObject::GObjObjects()->Data[ 76288 ];

	ASFXWeapon_SMG_Hornet_eventGetPenetrationDepth_Parms GetPenetrationDepth_Parms;

	this->ProcessEvent ( pFnGetPenetrationDepth, &GetPenetrationDepth_Parms, NULL );

	return GetPenetrationDepth_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.LoadWeaponClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 WeaponClassName                ( CPF_Parm | CPF_NeedCtorLink )

class UClass* ASFXWeapon_SMG_Hornet::LoadWeaponClass ( struct FString WeaponClassName )
{
	static UFunction* pFnLoadWeaponClass = NULL;

	if ( ! pFnLoadWeaponClass )
		pFnLoadWeaponClass = (UFunction*) UObject::GObjObjects()->Data[ 47758 ];

	ASFXWeapon_SMG_Hornet_execLoadWeaponClass_Parms LoadWeaponClass_Parms;
	memcpy ( &LoadWeaponClass_Parms.WeaponClassName, &WeaponClassName, 0xC );

	this->ProcessEvent ( pFnLoadWeaponClass, &LoadWeaponClass_Parms, NULL );

	return LoadWeaponClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.FindWeaponClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 WeaponClassName                ( CPF_Parm | CPF_NeedCtorLink )

class UClass* ASFXWeapon_SMG_Hornet::FindWeaponClass ( struct FString WeaponClassName )
{
	static UFunction* pFnFindWeaponClass = NULL;

	if ( ! pFnFindWeaponClass )
		pFnFindWeaponClass = (UFunction*) UObject::GObjObjects()->Data[ 76282 ];

	ASFXWeapon_SMG_Hornet_execFindWeaponClass_Parms FindWeaponClass_Parms;
	memcpy ( &FindWeaponClass_Parms.WeaponClassName, &WeaponClassName, 0xC );

	this->ProcessEvent ( pFnFindWeaponClass, &FindWeaponClass_Parms, NULL );

	return FindWeaponClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetStoreQualification
// [0x00022002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASFXWeapon_SMG_Hornet::GetStoreQualification ( )
{
	static UFunction* pFnGetStoreQualification = NULL;

	if ( ! pFnGetStoreQualification )
		pFnGetStoreQualification = (UFunction*) UObject::GObjObjects()->Data[ 76280 ];

	ASFXWeapon_SMG_Hornet_execGetStoreQualification_Parms GetStoreQualification_Parms;

	this->ProcessEvent ( pFnGetStoreQualification, &GetStoreQualification_Parms, NULL );

	return GetStoreQualification_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SetWeaponHidden
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWeaponHidden                  ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SetWeaponHidden ( unsigned long bWeaponHidden )
{
	static UFunction* pFnSetWeaponHidden = NULL;

	if ( ! pFnSetWeaponHidden )
		pFnSetWeaponHidden = (UFunction*) UObject::GObjObjects()->Data[ 48379 ];

	ASFXWeapon_SMG_Hornet_execSetWeaponHidden_Parms SetWeaponHidden_Parms;
	SetWeaponHidden_Parms.bWeaponHidden = bWeaponHidden;

	this->ProcessEvent ( pFnSetWeaponHidden, &SetWeaponHidden_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponStatBarValues
// [0x00422003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  StatBar                        ( CPF_Parm )
// float                          WeaponValue                    ( CPF_Parm | CPF_OutParm )

void ASFXWeapon_SMG_Hornet::GetWeaponStatBarValues ( unsigned char StatBar, float* WeaponValue )
{
	static UFunction* pFnGetWeaponStatBarValues = NULL;

	if ( ! pFnGetWeaponStatBarValues )
		pFnGetWeaponStatBarValues = (UFunction*) UObject::GObjObjects()->Data[ 76274 ];

	ASFXWeapon_SMG_Hornet_execGetWeaponStatBarValues_Parms GetWeaponStatBarValues_Parms;
	GetWeaponStatBarValues_Parms.StatBar = StatBar;

	this->ProcessEvent ( pFnGetWeaponStatBarValues, &GetWeaponStatBarValues_Parms, NULL );

	if ( WeaponValue )
		*WeaponValue = GetWeaponStatBarValues_Parms.WeaponValue;
};

// Function SFXGame.SFXWeapon.HasLoopingFire
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::eventHasLoopingFire ( )
{
	static UFunction* pFnHasLoopingFire = NULL;

	if ( ! pFnHasLoopingFire )
		pFnHasLoopingFire = (UFunction*) UObject::GObjObjects()->Data[ 76272 ];

	ASFXWeapon_SMG_Hornet_eventHasLoopingFire_Parms HasLoopingFire_Parms;

	this->ProcessEvent ( pFnHasLoopingFire, &HasLoopingFire_Parms, NULL );

	return HasLoopingFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ClearFlashLocation
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::ClearFlashLocation ( )
{
	static UFunction* pFnClearFlashLocation = NULL;

	if ( ! pFnClearFlashLocation )
		pFnClearFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 76271 ];

	ASFXWeapon_SMG_Hornet_execClearFlashLocation_Parms ClearFlashLocation_Parms;

	this->ProcessEvent ( pFnClearFlashLocation, &ClearFlashLocation_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetFlashLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SetFlashLocation ( struct FVector HitLocation )
{
	static UFunction* pFnSetFlashLocation = NULL;

	if ( ! pFnSetFlashLocation )
		pFnSetFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 76269 ];

	ASFXWeapon_SMG_Hornet_execSetFlashLocation_Parms SetFlashLocation_Parms;
	memcpy ( &SetFlashLocation_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSetFlashLocation, &SetFlashLocation_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ApplyDefaultWeaponMods
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bClearOldMods                  ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::ApplyDefaultWeaponMods ( unsigned long bClearOldMods )
{
	static UFunction* pFnApplyDefaultWeaponMods = NULL;

	if ( ! pFnApplyDefaultWeaponMods )
		pFnApplyDefaultWeaponMods = (UFunction*) UObject::GObjObjects()->Data[ 76249 ];

	ASFXWeapon_SMG_Hornet_execApplyDefaultWeaponMods_Parms ApplyDefaultWeaponMods_Parms;
	ApplyDefaultWeaponMods_Parms.bClearOldMods = bClearOldMods;

	this->ProcessEvent ( pFnApplyDefaultWeaponMods, &ApplyDefaultWeaponMods_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetWeaponModBodyColour
// [0x00820102] 
// Parameters infos:
// int                            ModLevel                       ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SetWeaponModBodyColour ( int ModLevel )
{
	static UFunction* pFnSetWeaponModBodyColour = NULL;

	if ( ! pFnSetWeaponModBodyColour )
		pFnSetWeaponModBodyColour = (UFunction*) UObject::GObjObjects()->Data[ 76243 ];

	ASFXWeapon_SMG_Hornet_execSetWeaponModBodyColour_Parms SetWeaponModBodyColour_Parms;
	SetWeaponModBodyColour_Parms.ModLevel = ModLevel;

	this->ProcessEvent ( pFnSetWeaponModBodyColour, &SetWeaponModBodyColour_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetWeaponModGripColour
// [0x00820102] 
// Parameters infos:
// int                            ModLevel                       ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SetWeaponModGripColour ( int ModLevel )
{
	static UFunction* pFnSetWeaponModGripColour = NULL;

	if ( ! pFnSetWeaponModGripColour )
		pFnSetWeaponModGripColour = (UFunction*) UObject::GObjObjects()->Data[ 76237 ];

	ASFXWeapon_SMG_Hornet_execSetWeaponModGripColour_Parms SetWeaponModGripColour_Parms;
	SetWeaponModGripColour_Parms.ModLevel = ModLevel;

	this->ProcessEvent ( pFnSetWeaponModGripColour, &SetWeaponModGripColour_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetWeaponModEmissiveValue
// [0x00820102] 
// Parameters infos:
// int                            ModLevel                       ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SetWeaponModEmissiveValue ( int ModLevel )
{
	static UFunction* pFnSetWeaponModEmissiveValue = NULL;

	if ( ! pFnSetWeaponModEmissiveValue )
		pFnSetWeaponModEmissiveValue = (UFunction*) UObject::GObjObjects()->Data[ 76231 ];

	ASFXWeapon_SMG_Hornet_execSetWeaponModEmissiveValue_Parms SetWeaponModEmissiveValue_Parms;
	SetWeaponModEmissiveValue_Parms.ModLevel = ModLevel;

	this->ProcessEvent ( pFnSetWeaponModEmissiveValue, &SetWeaponModEmissiveValue_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ClearWeaponModMaterialParameters
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::ClearWeaponModMaterialParameters ( )
{
	static UFunction* pFnClearWeaponModMaterialParameters = NULL;

	if ( ! pFnClearWeaponModMaterialParameters )
		pFnClearWeaponModMaterialParameters = (UFunction*) UObject::GObjObjects()->Data[ 76229 ];

	ASFXWeapon_SMG_Hornet_execClearWeaponModMaterialParameters_Parms ClearWeaponModMaterialParameters_Parms;

	this->ProcessEvent ( pFnClearWeaponModMaterialParameters, &ClearWeaponModMaterialParameters_Parms, NULL );
};

// Function SFXGame.SFXWeapon.RestoreFlashlightToNormal
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::RestoreFlashlightToNormal ( )
{
	static UFunction* pFnRestoreFlashlightToNormal = NULL;

	if ( ! pFnRestoreFlashlightToNormal )
		pFnRestoreFlashlightToNormal = (UFunction*) UObject::GObjObjects()->Data[ 76225 ];

	ASFXWeapon_SMG_Hornet_execRestoreFlashlightToNormal_Parms RestoreFlashlightToNormal_Parms;

	this->ProcessEvent ( pFnRestoreFlashlightToNormal, &RestoreFlashlightToNormal_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DelayedRestoreFlashlightToNormal
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::DelayedRestoreFlashlightToNormal ( )
{
	static UFunction* pFnDelayedRestoreFlashlightToNormal = NULL;

	if ( ! pFnDelayedRestoreFlashlightToNormal )
		pFnDelayedRestoreFlashlightToNormal = (UFunction*) UObject::GObjObjects()->Data[ 76223 ];

	ASFXWeapon_SMG_Hornet_execDelayedRestoreFlashlightToNormal_Parms DelayedRestoreFlashlightToNormal_Parms;

	this->ProcessEvent ( pFnDelayedRestoreFlashlightToNormal, &DelayedRestoreFlashlightToNormal_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetFlashlightFireMode
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::SetFlashlightFireMode ( )
{
	static UFunction* pFnSetFlashlightFireMode = NULL;

	if ( ! pFnSetFlashlightFireMode )
		pFnSetFlashlightFireMode = (UFunction*) UObject::GObjObjects()->Data[ 76214 ];

	ASFXWeapon_SMG_Hornet_execSetFlashlightFireMode_Parms SetFlashlightFireMode_Parms;

	this->ProcessEvent ( pFnSetFlashlightFireMode, &SetFlashlightFireMode_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DetachFlashlight
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_SMG_Hornet::DetachFlashlight ( )
{
	static UFunction* pFnDetachFlashlight = NULL;

	if ( ! pFnDetachFlashlight )
		pFnDetachFlashlight = (UFunction*) UObject::GObjObjects()->Data[ 75811 ];

	ASFXWeapon_SMG_Hornet_execDetachFlashlight_Parms DetachFlashlight_Parms;

	this->ProcessEvent ( pFnDetachFlashlight, &DetachFlashlight_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AttachFlashlight
// [0x00820103] ( FUNC_Final )
// Parameters infos:

void ASFXWeapon_SMG_Hornet::AttachFlashlight ( )
{
	static UFunction* pFnAttachFlashlight = NULL;

	if ( ! pFnAttachFlashlight )
		pFnAttachFlashlight = (UFunction*) UObject::GObjObjects()->Data[ 75788 ];

	ASFXWeapon_SMG_Hornet_execAttachFlashlight_Parms AttachFlashlight_Parms;

	this->ProcessEvent ( pFnAttachFlashlight, &AttachFlashlight_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IsWeaponAlreadyAwarded
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WeaponClass                    ( CPF_Parm )

bool ASFXWeapon_SMG_Hornet::IsWeaponAlreadyAwarded ( class UClass* WeaponClass )
{
	static UFunction* pFnIsWeaponAlreadyAwarded = NULL;

	if ( ! pFnIsWeaponAlreadyAwarded )
		pFnIsWeaponAlreadyAwarded = (UFunction*) UObject::GObjObjects()->Data[ 76193 ];

	ASFXWeapon_SMG_Hornet_execIsWeaponAlreadyAwarded_Parms IsWeaponAlreadyAwarded_Parms;
	IsWeaponAlreadyAwarded_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFnIsWeaponAlreadyAwarded, &IsWeaponAlreadyAwarded_Parms, NULL );

	return IsWeaponAlreadyAwarded_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsWeaponUnlocked
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WeaponClass                    ( CPF_Parm )

bool ASFXWeapon_SMG_Hornet::IsWeaponUnlocked ( class UClass* WeaponClass )
{
	static UFunction* pFnIsWeaponUnlocked = NULL;

	if ( ! pFnIsWeaponUnlocked )
		pFnIsWeaponUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 76189 ];

	ASFXWeapon_SMG_Hornet_execIsWeaponUnlocked_Parms IsWeaponUnlocked_Parms;
	IsWeaponUnlocked_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFnIsWeaponUnlocked, &IsWeaponUnlocked_Parms, NULL );

	return IsWeaponUnlocked_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.Upgrade
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXPawn_Player*         Player                         ( CPF_Parm )
// class UClass*                  WeaponClass                    ( CPF_Parm )
// unsigned long                  bNoNotification                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsMultiplayer                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDoesNotCountasNGPFound        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUnlockOnly                    ( CPF_OptionalParm | CPF_Parm )

bool ASFXWeapon_SMG_Hornet::Upgrade ( class ASFXPawn_Player* Player, class UClass* WeaponClass, unsigned long bNoNotification, unsigned long bIsMultiplayer, unsigned long bDoesNotCountasNGPFound, unsigned long bUnlockOnly )
{
	static UFunction* pFnUpgrade = NULL;

	if ( ! pFnUpgrade )
		pFnUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 47760 ];

	ASFXWeapon_SMG_Hornet_execUpgrade_Parms Upgrade_Parms;
	Upgrade_Parms.Player = Player;
	Upgrade_Parms.WeaponClass = WeaponClass;
	Upgrade_Parms.bNoNotification = bNoNotification;
	Upgrade_Parms.bIsMultiplayer = bIsMultiplayer;
	Upgrade_Parms.bDoesNotCountasNGPFound = bDoesNotCountasNGPFound;
	Upgrade_Parms.bUnlockOnly = bUnlockOnly;

	this->ProcessEvent ( pFnUpgrade, &Upgrade_Parms, NULL );

	return Upgrade_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsAnimTypeSniper
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::IsAnimTypeSniper ( )
{
	static UFunction* pFnIsAnimTypeSniper = NULL;

	if ( ! pFnIsAnimTypeSniper )
		pFnIsAnimTypeSniper = (UFunction*) UObject::GObjObjects()->Data[ 76168 ];

	ASFXWeapon_SMG_Hornet_execIsAnimTypeSniper_Parms IsAnimTypeSniper_Parms;

	this->ProcessEvent ( pFnIsAnimTypeSniper, &IsAnimTypeSniper_Parms, NULL );

	return IsAnimTypeSniper_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsAnimTypeShotgun
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::IsAnimTypeShotgun ( )
{
	static UFunction* pFnIsAnimTypeShotgun = NULL;

	if ( ! pFnIsAnimTypeShotgun )
		pFnIsAnimTypeShotgun = (UFunction*) UObject::GObjObjects()->Data[ 76166 ];

	ASFXWeapon_SMG_Hornet_execIsAnimTypeShotgun_Parms IsAnimTypeShotgun_Parms;

	this->ProcessEvent ( pFnIsAnimTypeShotgun, &IsAnimTypeShotgun_Parms, NULL );

	return IsAnimTypeShotgun_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsAnimTypePistol
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::IsAnimTypePistol ( )
{
	static UFunction* pFnIsAnimTypePistol = NULL;

	if ( ! pFnIsAnimTypePistol )
		pFnIsAnimTypePistol = (UFunction*) UObject::GObjObjects()->Data[ 67107 ];

	ASFXWeapon_SMG_Hornet_execIsAnimTypePistol_Parms IsAnimTypePistol_Parms;

	this->ProcessEvent ( pFnIsAnimTypePistol, &IsAnimTypePistol_Parms, NULL );

	return IsAnimTypePistol_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetReactionChanceModifier
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Hornet::eventGetReactionChanceModifier ( )
{
	static UFunction* pFnGetReactionChanceModifier = NULL;

	if ( ! pFnGetReactionChanceModifier )
		pFnGetReactionChanceModifier = (UFunction*) UObject::GObjObjects()->Data[ 76164 ];

	ASFXWeapon_SMG_Hornet_eventGetReactionChanceModifier_Parms GetReactionChanceModifier_Parms;

	this->ProcessEvent ( pFnGetReactionChanceModifier, &GetReactionChanceModifier_Parms, NULL );

	return GetReactionChanceModifier_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ClientWeaponSet
// [0x010241C0] 
// Parameters infos:
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 76161 ];

	ASFXWeapon_SMG_Hornet_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CleanUpDummyFire
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXWeapon_SMG_Hornet::eventCleanUpDummyFire ( )
{
	static UFunction* pFnCleanUpDummyFire = NULL;

	if ( ! pFnCleanUpDummyFire )
		pFnCleanUpDummyFire = (UFunction*) UObject::GObjObjects()->Data[ 76160 ];

	ASFXWeapon_SMG_Hornet_eventCleanUpDummyFire_Parms CleanUpDummyFire_Parms;

	this->ProcessEvent ( pFnCleanUpDummyFire, &CleanUpDummyFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.WeaponStoppedFiring
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::eventWeaponStoppedFiring ( unsigned char FiringMode )
{
	static UFunction* pFnWeaponStoppedFiring = NULL;

	if ( ! pFnWeaponStoppedFiring )
		pFnWeaponStoppedFiring = (UFunction*) UObject::GObjObjects()->Data[ 76158 ];

	ASFXWeapon_SMG_Hornet_eventWeaponStoppedFiring_Parms WeaponStoppedFiring_Parms;
	WeaponStoppedFiring_Parms.FiringMode = FiringMode;

	this->ProcessEvent ( pFnWeaponStoppedFiring, &WeaponStoppedFiring_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DummyFire
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 TargetLoc                      ( CPF_Parm )
// class AActor*                  AttachedTo                     ( CPF_OptionalParm | CPF_Parm )
// float                          AimErrorDeg                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::eventDummyFire ( unsigned char FireModeNum, struct FVector TargetLoc, class AActor* AttachedTo, float AimErrorDeg, class AActor* TargetActor )
{
	static UFunction* pFnDummyFire = NULL;

	if ( ! pFnDummyFire )
		pFnDummyFire = (UFunction*) UObject::GObjObjects()->Data[ 76141 ];

	ASFXWeapon_SMG_Hornet_eventDummyFire_Parms DummyFire_Parms;
	DummyFire_Parms.FireModeNum = FireModeNum;
	memcpy ( &DummyFire_Parms.TargetLoc, &TargetLoc, 0xC );
	DummyFire_Parms.AttachedTo = AttachedTo;
	DummyFire_Parms.AimErrorDeg = AimErrorDeg;
	DummyFire_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnDummyFire, &DummyFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetInitialDummyFireDelay
// [0x00020100] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Hornet::GetInitialDummyFireDelay ( )
{
	static UFunction* pFnGetInitialDummyFireDelay = NULL;

	if ( ! pFnGetInitialDummyFireDelay )
		pFnGetInitialDummyFireDelay = (UFunction*) UObject::GObjObjects()->Data[ 76139 ];

	ASFXWeapon_SMG_Hornet_execGetInitialDummyFireDelay_Parms GetInitialDummyFireDelay_Parms;

	this->ProcessEvent ( pFnGetInitialDummyFireDelay, &GetInitialDummyFireDelay_Parms, NULL );

	return GetInitialDummyFireDelay_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.BeginDummyFire
// [0x00024100] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// class AActor*                  AttachedTo                     ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::BeginDummyFire ( unsigned char FiringMode, class AActor* AttachedTo )
{
	static UFunction* pFnBeginDummyFire = NULL;

	if ( ! pFnBeginDummyFire )
		pFnBeginDummyFire = (UFunction*) UObject::GObjObjects()->Data[ 76136 ];

	ASFXWeapon_SMG_Hornet_execBeginDummyFire_Parms BeginDummyFire_Parms;
	BeginDummyFire_Parms.FiringMode = FiringMode;
	BeginDummyFire_Parms.AttachedTo = AttachedTo;

	this->ProcessEvent ( pFnBeginDummyFire, &BeginDummyFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.WeaponFired
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::WeaponFired ( unsigned char FiringMode, unsigned long bViaReplication, struct FVector HitLocation )
{
	static UFunction* pFnWeaponFired = NULL;

	if ( ! pFnWeaponFired )
		pFnWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 76132 ];

	ASFXWeapon_SMG_Hornet_execWeaponFired_Parms WeaponFired_Parms;
	WeaponFired_Parms.FiringMode = FiringMode;
	WeaponFired_Parms.bViaReplication = bViaReplication;
	memcpy ( &WeaponFired_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnWeaponFired, &WeaponFired_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProjectileFireSimple
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          AimErrorDeg                    ( CPF_OptionalParm | CPF_Parm )

class AProjectile* ASFXWeapon_SMG_Hornet::eventProjectileFireSimple ( float AimErrorDeg )
{
	static UFunction* pFnProjectileFireSimple = NULL;

	if ( ! pFnProjectileFireSimple )
		pFnProjectileFireSimple = (UFunction*) UObject::GObjObjects()->Data[ 76124 ];

	ASFXWeapon_SMG_Hornet_eventProjectileFireSimple_Parms ProjectileFireSimple_Parms;
	ProjectileFireSimple_Parms.AimErrorDeg = AimErrorDeg;

	this->ProcessEvent ( pFnProjectileFireSimple, &ProjectileFireSimple_Parms, NULL );

	return ProjectileFireSimple_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.CalcRemoteImpactEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 GivenHitLocation               ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::CalcRemoteImpactEffects ( unsigned char FireModeNum, struct FVector GivenHitLocation, unsigned long bViaReplication )
{
	static UFunction* pFnCalcRemoteImpactEffects = NULL;

	if ( ! pFnCalcRemoteImpactEffects )
		pFnCalcRemoteImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 76115 ];

	ASFXWeapon_SMG_Hornet_execCalcRemoteImpactEffects_Parms CalcRemoteImpactEffects_Parms;
	CalcRemoteImpactEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &CalcRemoteImpactEffects_Parms.GivenHitLocation, &GivenHitLocation, 0xC );
	CalcRemoteImpactEffects_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnCalcRemoteImpactEffects, &CalcRemoteImpactEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CalculateCoverLeanOutOffset
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Direction                      ( CPF_Parm )
// unsigned char                  Type                           ( CPF_Parm )
// struct FVector                 Offset                         ( CPF_Parm | CPF_OutParm )

bool ASFXWeapon_SMG_Hornet::eventCalculateCoverLeanOutOffset ( unsigned char Direction, unsigned char Type, struct FVector* Offset )
{
	static UFunction* pFnCalculateCoverLeanOutOffset = NULL;

	if ( ! pFnCalculateCoverLeanOutOffset )
		pFnCalculateCoverLeanOutOffset = (UFunction*) UObject::GObjObjects()->Data[ 76108 ];

	ASFXWeapon_SMG_Hornet_eventCalculateCoverLeanOutOffset_Parms CalculateCoverLeanOutOffset_Parms;
	CalculateCoverLeanOutOffset_Parms.Direction = Direction;
	CalculateCoverLeanOutOffset_Parms.Type = Type;

	this->ProcessEvent ( pFnCalculateCoverLeanOutOffset, &CalculateCoverLeanOutOffset_Parms, NULL );

	if ( Offset )
		memcpy ( Offset, &CalculateCoverLeanOutOffset_Parms.Offset, 0xC );

	return CalculateCoverLeanOutOffset_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetGeneralDescription
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXWeapon_SMG_Hornet::GetGeneralDescription ( )
{
	static UFunction* pFnGetGeneralDescription = NULL;

	if ( ! pFnGetGeneralDescription )
		pFnGetGeneralDescription = (UFunction*) UObject::GObjObjects()->Data[ 76106 ];

	ASFXWeapon_SMG_Hornet_execGetGeneralDescription_Parms GetGeneralDescription_Parms;

	this->ProcessEvent ( pFnGetGeneralDescription, &GetGeneralDescription_Parms, NULL );

	return GetGeneralDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetShortDescription
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXWeapon_SMG_Hornet::GetShortDescription ( )
{
	static UFunction* pFnGetShortDescription = NULL;

	if ( ! pFnGetShortDescription )
		pFnGetShortDescription = (UFunction*) UObject::GObjObjects()->Data[ 76104 ];

	ASFXWeapon_SMG_Hornet_execGetShortDescription_Parms GetShortDescription_Parms;

	this->ProcessEvent ( pFnGetShortDescription, &GetShortDescription_Parms, NULL );

	return GetShortDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetPrettyName
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Level                          ( CPF_OptionalParm | CPF_Parm )

struct FString ASFXWeapon_SMG_Hornet::GetPrettyName ( int Level )
{
	static UFunction* pFnGetPrettyName = NULL;

	if ( ! pFnGetPrettyName )
		pFnGetPrettyName = (UFunction*) UObject::GObjObjects()->Data[ 61727 ];

	ASFXWeapon_SMG_Hornet_execGetPrettyName_Parms GetPrettyName_Parms;
	GetPrettyName_Parms.Level = Level;

	this->ProcessEvent ( pFnGetPrettyName, &GetPrettyName_Parms, NULL );

	return GetPrettyName_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetWeaponDebug
// [0x00420100] 
// Parameters infos:
// TArray< struct FString >       DebugInfo                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXWeapon_SMG_Hornet::GetWeaponDebug ( TArray< struct FString >* DebugInfo )
{
	static UFunction* pFnGetWeaponDebug = NULL;

	if ( ! pFnGetWeaponDebug )
		pFnGetWeaponDebug = (UFunction*) UObject::GObjObjects()->Data[ 76099 ];

	ASFXWeapon_SMG_Hornet_execGetWeaponDebug_Parms GetWeaponDebug_Parms;

	this->ProcessEvent ( pFnGetWeaponDebug, &GetWeaponDebug_Parms, NULL );

	if ( DebugInfo )
		memcpy ( DebugInfo, &GetWeaponDebug_Parms.DebugInfo, 0xC );
};

// Function SFXGame.SFXWeapon.DrawDebugShot
// [0x00020100] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 EndLocation                    ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::DrawDebugShot ( struct FVector StartLocation, struct FVector EndLocation )
{
	static UFunction* pFnDrawDebugShot = NULL;

	if ( ! pFnDrawDebugShot )
		pFnDrawDebugShot = (UFunction*) UObject::GObjObjects()->Data[ 76096 ];

	ASFXWeapon_SMG_Hornet_execDrawDebugShot_Parms DrawDebugShot_Parms;
	memcpy ( &DrawDebugShot_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DrawDebugShot_Parms.EndLocation, &EndLocation, 0xC );

	this->ProcessEvent ( pFnDrawDebugShot, &DrawDebugShot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetAmmoPowerHologramEnabled
// [0x00024102] 
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )
// unsigned long                  bForceEnabled                  ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::SetAmmoPowerHologramEnabled ( unsigned long bEnabled, unsigned long bForceEnabled )
{
	static UFunction* pFnSetAmmoPowerHologramEnabled = NULL;

	if ( ! pFnSetAmmoPowerHologramEnabled )
		pFnSetAmmoPowerHologramEnabled = (UFunction*) UObject::GObjObjects()->Data[ 76092 ];

	ASFXWeapon_SMG_Hornet_execSetAmmoPowerHologramEnabled_Parms SetAmmoPowerHologramEnabled_Parms;
	SetAmmoPowerHologramEnabled_Parms.bEnabled = bEnabled;
	SetAmmoPowerHologramEnabled_Parms.bForceEnabled = bForceEnabled;

	this->ProcessEvent ( pFnSetAmmoPowerHologramEnabled, &SetAmmoPowerHologramEnabled_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetAmmoPowerHologramTemplates
// [0x00020102] 
// Parameters infos:
// class UParticleSystem*         Template                       ( CPF_Parm )
// class UParticleSystem*         IconTemplate                   ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SetAmmoPowerHologramTemplates ( class UParticleSystem* Template, class UParticleSystem* IconTemplate )
{
	static UFunction* pFnSetAmmoPowerHologramTemplates = NULL;

	if ( ! pFnSetAmmoPowerHologramTemplates )
		pFnSetAmmoPowerHologramTemplates = (UFunction*) UObject::GObjObjects()->Data[ 76089 ];

	ASFXWeapon_SMG_Hornet_execSetAmmoPowerHologramTemplates_Parms SetAmmoPowerHologramTemplates_Parms;
	SetAmmoPowerHologramTemplates_Parms.Template = Template;
	SetAmmoPowerHologramTemplates_Parms.IconTemplate = IconTemplate;

	this->ProcessEvent ( pFnSetAmmoPowerHologramTemplates, &SetAmmoPowerHologramTemplates_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXWeapon_SMG_Hornet::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 76088 ];

	ASFXWeapon_SMG_Hornet_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HolderDied
// [0x00020002] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::HolderDied ( )
{
	static UFunction* pFnHolderDied = NULL;

	if ( ! pFnHolderDied )
		pFnHolderDied = (UFunction*) UObject::GObjObjects()->Data[ 76087 ];

	ASFXWeapon_SMG_Hornet_execHolderDied_Parms HolderDied_Parms;

	this->ProcessEvent ( pFnHolderDied, &HolderDied_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = (UFunction*) UObject::GObjObjects()->Data[ 76074 ];

	ASFXWeapon_SMG_Hornet_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ClientWeaponThrown
// [0x010201C2] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::ClientWeaponThrown ( )
{
	static UFunction* pFnClientWeaponThrown = NULL;

	if ( ! pFnClientWeaponThrown )
		pFnClientWeaponThrown = (UFunction*) UObject::GObjObjects()->Data[ 76072 ];

	ASFXWeapon_SMG_Hornet_execClientWeaponThrown_Parms ClientWeaponThrown_Parms;

	this->ProcessEvent ( pFnClientWeaponThrown, &ClientWeaponThrown_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CanThrow
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::CanThrow ( )
{
	static UFunction* pFnCanThrow = NULL;

	if ( ! pFnCanThrow )
		pFnCanThrow = (UFunction*) UObject::GObjObjects()->Data[ 76070 ];

	ASFXWeapon_SMG_Hornet_execCanThrow_Parms CanThrow_Parms;

	this->ProcessEvent ( pFnCanThrow, &CanThrow_Parms, NULL );

	return CanThrow_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.DetachWeapon
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = (UFunction*) UObject::GObjObjects()->Data[ 76068 ];

	ASFXWeapon_SMG_Hornet_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AttachMuzzleEffectsComponents
// [0x00024102] 
// Parameters infos:
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )
// struct FName                   MuzzleSocket                   ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CasingSocket                   ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::AttachMuzzleEffectsComponents ( class USkeletalMeshComponent* SkelMesh, struct FName MuzzleSocket, struct FName CasingSocket )
{
	static UFunction* pFnAttachMuzzleEffectsComponents = NULL;

	if ( ! pFnAttachMuzzleEffectsComponents )
		pFnAttachMuzzleEffectsComponents = (UFunction*) UObject::GObjObjects()->Data[ 76064 ];

	ASFXWeapon_SMG_Hornet_execAttachMuzzleEffectsComponents_Parms AttachMuzzleEffectsComponents_Parms;
	AttachMuzzleEffectsComponents_Parms.SkelMesh = SkelMesh;
	memcpy ( &AttachMuzzleEffectsComponents_Parms.MuzzleSocket, &MuzzleSocket, 0x8 );
	memcpy ( &AttachMuzzleEffectsComponents_Parms.CasingSocket, &CasingSocket, 0x8 );

	this->ProcessEvent ( pFnAttachMuzzleEffectsComponents, &AttachMuzzleEffectsComponents_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AttachWeaponTo
// [0x00024102] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm | CPF_EditInline )
// struct FName                   SocketName                     ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = (UFunction*) UObject::GObjObjects()->Data[ 76057 ];

	ASFXWeapon_SMG_Hornet_execAttachWeaponTo_Parms AttachWeaponTo_Parms;
	AttachWeaponTo_Parms.MeshCpnt = MeshCpnt;
	memcpy ( &AttachWeaponTo_Parms.SocketName, &SocketName, 0x8 );

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Internal_AssignToSlot
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::Internal_AssignToSlot ( )
{
	static UFunction* pFnInternal_AssignToSlot = NULL;

	if ( ! pFnInternal_AssignToSlot )
		pFnInternal_AssignToSlot = (UFunction*) UObject::GObjObjects()->Data[ 76055 ];

	ASFXWeapon_SMG_Hornet_execInternal_AssignToSlot_Parms Internal_AssignToSlot_Parms;

	this->ProcessEvent ( pFnInternal_AssignToSlot, &Internal_AssignToSlot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AssignToSlot
// [0x00020102] 
// Parameters infos:
// unsigned char                  Slot                           ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::AssignToSlot ( unsigned char Slot )
{
	static UFunction* pFnAssignToSlot = NULL;

	if ( ! pFnAssignToSlot )
		pFnAssignToSlot = (UFunction*) UObject::GObjObjects()->Data[ 76053 ];

	ASFXWeapon_SMG_Hornet_execAssignToSlot_Parms AssignToSlot_Parms;
	AssignToSlot_Parms.Slot = Slot;

	this->ProcessEvent ( pFnAssignToSlot, &AssignToSlot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GivenTo
// [0x00024002] 
// Parameters infos:
// class APawn*                   thisPawn                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 76047 ];

	ASFXWeapon_SMG_Hornet_execGivenTo_Parms GivenTo_Parms;
	GivenTo_Parms.thisPawn = thisPawn;
	GivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EquipTimedOut
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::EquipTimedOut ( )
{
	static UFunction* pFnEquipTimedOut = NULL;

	if ( ! pFnEquipTimedOut )
		pFnEquipTimedOut = (UFunction*) UObject::GObjObjects()->Data[ 76030 ];

	ASFXWeapon_SMG_Hornet_execEquipTimedOut_Parms EquipTimedOut_Parms;

	this->ProcessEvent ( pFnEquipTimedOut, &EquipTimedOut_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EquipFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::EquipFinished ( )
{
	static UFunction* pFnEquipFinished = NULL;

	if ( ! pFnEquipFinished )
		pFnEquipFinished = (UFunction*) UObject::GObjObjects()->Data[ 76029 ];

	ASFXWeapon_SMG_Hornet_execEquipFinished_Parms EquipFinished_Parms;

	this->ProcessEvent ( pFnEquipFinished, &EquipFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EquipNearFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::EquipNearFinished ( )
{
	static UFunction* pFnEquipNearFinished = NULL;

	if ( ! pFnEquipNearFinished )
		pFnEquipNearFinished = (UFunction*) UObject::GObjObjects()->Data[ 76028 ];

	ASFXWeapon_SMG_Hornet_execEquipNearFinished_Parms EquipNearFinished_Parms;

	this->ProcessEvent ( pFnEquipNearFinished, &EquipNearFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Collapse
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::Collapse ( )
{
	static UFunction* pFnCollapse = NULL;

	if ( ! pFnCollapse )
		pFnCollapse = (UFunction*) UObject::GObjObjects()->Data[ 76027 ];

	ASFXWeapon_SMG_Hornet_execCollapse_Parms Collapse_Parms;

	this->ProcessEvent ( pFnCollapse, &Collapse_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Expand
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::Expand ( )
{
	static UFunction* pFnExpand = NULL;

	if ( ! pFnExpand )
		pFnExpand = (UFunction*) UObject::GObjObjects()->Data[ 76026 ];

	ASFXWeapon_SMG_Hornet_execExpand_Parms Expand_Parms;

	this->ProcessEvent ( pFnExpand, &Expand_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StopChargeEffects
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::StopChargeEffects ( )
{
	static UFunction* pFnStopChargeEffects = NULL;

	if ( ! pFnStopChargeEffects )
		pFnStopChargeEffects = (UFunction*) UObject::GObjObjects()->Data[ 76022 ];

	ASFXWeapon_SMG_Hornet_execStopChargeEffects_Parms StopChargeEffects_Parms;

	this->ProcessEvent ( pFnStopChargeEffects, &StopChargeEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ShutOffAllEmitters
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::ShutOffAllEmitters ( )
{
	static UFunction* pFnShutOffAllEmitters = NULL;

	if ( ! pFnShutOffAllEmitters )
		pFnShutOffAllEmitters = (UFunction*) UObject::GObjObjects()->Data[ 76018 ];

	ASFXWeapon_SMG_Hornet_execShutOffAllEmitters_Parms ShutOffAllEmitters_Parms;

	this->ProcessEvent ( pFnShutOffAllEmitters, &ShutOffAllEmitters_Parms, NULL );
};

// Function SFXGame.SFXWeapon.UnEquipTimedOut
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::UnEquipTimedOut ( )
{
	static UFunction* pFnUnEquipTimedOut = NULL;

	if ( ! pFnUnEquipTimedOut )
		pFnUnEquipTimedOut = (UFunction*) UObject::GObjObjects()->Data[ 76005 ];

	ASFXWeapon_SMG_Hornet_execUnEquipTimedOut_Parms UnEquipTimedOut_Parms;

	this->ProcessEvent ( pFnUnEquipTimedOut, &UnEquipTimedOut_Parms, NULL );
};

// Function SFXGame.SFXWeapon.UnEquipFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::UnEquipFinished ( )
{
	static UFunction* pFnUnEquipFinished = NULL;

	if ( ! pFnUnEquipFinished )
		pFnUnEquipFinished = (UFunction*) UObject::GObjObjects()->Data[ 76004 ];

	ASFXWeapon_SMG_Hornet_execUnEquipFinished_Parms UnEquipFinished_Parms;

	this->ProcessEvent ( pFnUnEquipFinished, &UnEquipFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ServerCancelReload
// [0x002200C2] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::ServerCancelReload ( )
{
	static UFunction* pFnServerCancelReload = NULL;

	if ( ! pFnServerCancelReload )
		pFnServerCancelReload = (UFunction*) UObject::GObjObjects()->Data[ 75982 ];

	ASFXWeapon_SMG_Hornet_execServerCancelReload_Parms ServerCancelReload_Parms;

	this->ProcessEvent ( pFnServerCancelReload, &ServerCancelReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CancelReload
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::CancelReload ( )
{
	static UFunction* pFnCancelReload = NULL;

	if ( ! pFnCancelReload )
		pFnCancelReload = (UFunction*) UObject::GObjObjects()->Data[ 75981 ];

	ASFXWeapon_SMG_Hornet_execCancelReload_Parms CancelReload_Parms;

	this->ProcessEvent ( pFnCancelReload, &CancelReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DoAReload
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::DoAReload ( )
{
	static UFunction* pFnDoAReload = NULL;

	if ( ! pFnDoAReload )
		pFnDoAReload = (UFunction*) UObject::GObjObjects()->Data[ 75980 ];

	ASFXWeapon_SMG_Hornet_execDoAReload_Parms DoAReload_Parms;

	this->ProcessEvent ( pFnDoAReload, &DoAReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ReloadNearFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::ReloadNearFinished ( )
{
	static UFunction* pFnReloadNearFinished = NULL;

	if ( ! pFnReloadNearFinished )
		pFnReloadNearFinished = (UFunction*) UObject::GObjObjects()->Data[ 75979 ];

	ASFXWeapon_SMG_Hornet_execReloadNearFinished_Parms ReloadNearFinished_Parms;

	this->ProcessEvent ( pFnReloadNearFinished, &ReloadNearFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.NotifyWeaponRefireDelayExpired
// [0x00020002] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::NotifyWeaponRefireDelayExpired ( )
{
	static UFunction* pFnNotifyWeaponRefireDelayExpired = NULL;

	if ( ! pFnNotifyWeaponRefireDelayExpired )
		pFnNotifyWeaponRefireDelayExpired = (UFunction*) UObject::GObjObjects()->Data[ 75978 ];

	ASFXWeapon_SMG_Hornet_execNotifyWeaponRefireDelayExpired_Parms NotifyWeaponRefireDelayExpired_Parms;

	this->ProcessEvent ( pFnNotifyWeaponRefireDelayExpired, &NotifyWeaponRefireDelayExpired_Parms, NULL );
};

// Function SFXGame.SFXWeapon.NotifyWeaponFired
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireMode                       ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::NotifyWeaponFired ( unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFired = NULL;

	if ( ! pFnNotifyWeaponFired )
		pFnNotifyWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 75940 ];

	ASFXWeapon_SMG_Hornet_execNotifyWeaponFired_Parms NotifyWeaponFired_Parms;
	NotifyWeaponFired_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFired, &NotifyWeaponFired_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HandleFinishedFiring
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::HandleFinishedFiring ( )
{
	static UFunction* pFnHandleFinishedFiring = NULL;

	if ( ! pFnHandleFinishedFiring )
		pFnHandleFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 75975 ];

	ASFXWeapon_SMG_Hornet_execHandleFinishedFiring_Parms HandleFinishedFiring_Parms;

	this->ProcessEvent ( pFnHandleFinishedFiring, &HandleFinishedFiring_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ShouldRefire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = (UFunction*) UObject::GObjObjects()->Data[ 75972 ];

	ASFXWeapon_SMG_Hornet_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetBurstsToFire
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Hornet::GetBurstsToFire ( )
{
	static UFunction* pFnGetBurstsToFire = NULL;

	if ( ! pFnGetBurstsToFire )
		pFnGetBurstsToFire = (UFunction*) UObject::GObjObjects()->Data[ 45634 ];

	ASFXWeapon_SMG_Hornet_execGetBurstsToFire_Parms GetBurstsToFire_Parms;

	this->ProcessEvent ( pFnGetBurstsToFire, &GetBurstsToFire_Parms, NULL );

	return GetBurstsToFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetBurstFireCount
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Hornet::GetBurstFireCount ( )
{
	static UFunction* pFnGetBurstFireCount = NULL;

	if ( ! pFnGetBurstFireCount )
		pFnGetBurstFireCount = (UFunction*) UObject::GObjObjects()->Data[ 75967 ];

	ASFXWeapon_SMG_Hornet_execGetBurstFireCount_Parms GetBurstFireCount_Parms;

	this->ProcessEvent ( pFnGetBurstFireCount, &GetBurstFireCount_Parms, NULL );

	return GetBurstFireCount_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SetupWeaponFire
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SetupWeaponFire ( unsigned char FireModeNum )
{
	static UFunction* pFnSetupWeaponFire = NULL;

	if ( ! pFnSetupWeaponFire )
		pFnSetupWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 75965 ];

	ASFXWeapon_SMG_Hornet_execSetupWeaponFire_Parms SetupWeaponFire_Parms;
	SetupWeaponFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnSetupWeaponFire, &SetupWeaponFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ServerStopFire
// [0x002200C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::ServerStopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnServerStopFire = NULL;

	if ( ! pFnServerStopFire )
		pFnServerStopFire = (UFunction*) UObject::GObjObjects()->Data[ 75963 ];

	ASFXWeapon_SMG_Hornet_execServerStopFire_Parms ServerStopFire_Parms;
	ServerStopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerStopFire, &ServerStopFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EndFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 75931 ];

	ASFXWeapon_SMG_Hornet_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SelectTarget
// [0x00020102] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ASFXWeapon_SMG_Hornet::SelectTarget ( )
{
	static UFunction* pFnSelectTarget = NULL;

	if ( ! pFnSelectTarget )
		pFnSelectTarget = (UFunction*) UObject::GObjObjects()->Data[ 75960 ];

	ASFXWeapon_SMG_Hornet_execSelectTarget_Parms SelectTarget_Parms;

	this->ProcessEvent ( pFnSelectTarget, &SelectTarget_Parms, NULL );

	return SelectTarget_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 75958 ];

	ASFXWeapon_SMG_Hornet_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CanFire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::CanFire ( )
{
	static UFunction* pFnCanFire = NULL;

	if ( ! pFnCanFire )
		pFnCanFire = (UFunction*) UObject::GObjObjects()->Data[ 75944 ];

	ASFXWeapon_SMG_Hornet_execCanFire_Parms CanFire_Parms;

	this->ProcessEvent ( pFnCanFire, &CanFire_Parms, NULL );

	return CanFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.StartFullChargeRumble
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::StartFullChargeRumble ( )
{
	static UFunction* pFnStartFullChargeRumble = NULL;

	if ( ! pFnStartFullChargeRumble )
		pFnStartFullChargeRumble = (UFunction*) UObject::GObjObjects()->Data[ 75920 ];

	ASFXWeapon_SMG_Hornet_execStartFullChargeRumble_Parms StartFullChargeRumble_Parms;

	this->ProcessEvent ( pFnStartFullChargeRumble, &StartFullChargeRumble_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StartChargeEffects
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::StartChargeEffects ( )
{
	static UFunction* pFnStartChargeEffects = NULL;

	if ( ! pFnStartChargeEffects )
		pFnStartChargeEffects = (UFunction*) UObject::GObjObjects()->Data[ 75913 ];

	ASFXWeapon_SMG_Hornet_execStartChargeEffects_Parms StartChargeEffects_Parms;

	this->ProcessEvent ( pFnStartChargeEffects, &StartChargeEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IsChargingWeapon
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::IsChargingWeapon ( )
{
	static UFunction* pFnIsChargingWeapon = NULL;

	if ( ! pFnIsChargingWeapon )
		pFnIsChargingWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75817 ];

	ASFXWeapon_SMG_Hornet_execIsChargingWeapon_Parms IsChargingWeapon_Parms;

	this->ProcessEvent ( pFnIsChargingWeapon, &IsChargingWeapon_Parms, NULL );

	return IsChargingWeapon_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ServerFireChargedShot
// [0x002200C0] 
// Parameters infos:
// float                          SentChargeAmount               ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::ServerFireChargedShot ( float SentChargeAmount )
{
	static UFunction* pFnServerFireChargedShot = NULL;

	if ( ! pFnServerFireChargedShot )
		pFnServerFireChargedShot = (UFunction*) UObject::GObjObjects()->Data[ 75812 ];

	ASFXWeapon_SMG_Hornet_execServerFireChargedShot_Parms ServerFireChargedShot_Parms;
	ServerFireChargedShot_Parms.SentChargeAmount = SentChargeAmount;

	this->ProcessEvent ( pFnServerFireChargedShot, &ServerFireChargedShot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayNoAmmoFireSound
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::PlayNoAmmoFireSound ( )
{
	static UFunction* pFnPlayNoAmmoFireSound = NULL;

	if ( ! pFnPlayNoAmmoFireSound )
		pFnPlayNoAmmoFireSound = (UFunction*) UObject::GObjObjects()->Data[ 75806 ];

	ASFXWeapon_SMG_Hornet_execPlayNoAmmoFireSound_Parms PlayNoAmmoFireSound_Parms;

	this->ProcessEvent ( pFnPlayNoAmmoFireSound, &PlayNoAmmoFireSound_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayNoAmmoEffects
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::PlayNoAmmoEffects ( )
{
	static UFunction* pFnPlayNoAmmoEffects = NULL;

	if ( ! pFnPlayNoAmmoEffects )
		pFnPlayNoAmmoEffects = (UFunction*) UObject::GObjObjects()->Data[ 75774 ];

	ASFXWeapon_SMG_Hornet_execPlayNoAmmoEffects_Parms PlayNoAmmoEffects_Parms;

	this->ProcessEvent ( pFnPlayNoAmmoEffects, &PlayNoAmmoEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.TryReload
// [0x00024102] 
// Parameters infos:
// unsigned long                  bDisplayHint                   ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::TryReload ( unsigned long bDisplayHint )
{
	static UFunction* pFnTryReload = NULL;

	if ( ! pFnTryReload )
		pFnTryReload = (UFunction*) UObject::GObjObjects()->Data[ 75771 ];

	ASFXWeapon_SMG_Hornet_execTryReload_Parms TryReload_Parms;
	TryReload_Parms.bDisplayHint = bDisplayHint;

	this->ProcessEvent ( pFnTryReload, &TryReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DoReload
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::DoReload ( )
{
	static UFunction* pFnDoReload = NULL;

	if ( ! pFnDoReload )
		pFnDoReload = (UFunction*) UObject::GObjObjects()->Data[ 75767 ];

	ASFXWeapon_SMG_Hornet_execDoReload_Parms DoReload_Parms;

	this->ProcessEvent ( pFnDoReload, &DoReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetAmmoRestoredPerReload
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Hornet::GetAmmoRestoredPerReload ( )
{
	static UFunction* pFnGetAmmoRestoredPerReload = NULL;

	if ( ! pFnGetAmmoRestoredPerReload )
		pFnGetAmmoRestoredPerReload = (UFunction*) UObject::GObjObjects()->Data[ 75765 ];

	ASFXWeapon_SMG_Hornet_execGetAmmoRestoredPerReload_Parms GetAmmoRestoredPerReload_Parms;

	this->ProcessEvent ( pFnGetAmmoRestoredPerReload, &GetAmmoRestoredPerReload_Parms, NULL );

	return GetAmmoRestoredPerReload_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetReloadDuration
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Hornet::GetReloadDuration ( )
{
	static UFunction* pFnGetReloadDuration = NULL;

	if ( ! pFnGetReloadDuration )
		pFnGetReloadDuration = (UFunction*) UObject::GObjObjects()->Data[ 41736 ];

	ASFXWeapon_SMG_Hornet_execGetReloadDuration_Parms GetReloadDuration_Parms;

	this->ProcessEvent ( pFnGetReloadDuration, &GetReloadDuration_Parms, NULL );

	return GetReloadDuration_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ShouldAutoReload
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = (UFunction*) UObject::GObjObjects()->Data[ 75763 ];

	ASFXWeapon_SMG_Hornet_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );

	return ShouldAutoReload_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.CanReload
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::CanReload ( )
{
	static UFunction* pFnCanReload = NULL;

	if ( ! pFnCanReload )
		pFnCanReload = (UFunction*) UObject::GObjObjects()->Data[ 55519 ];

	ASFXWeapon_SMG_Hornet_execCanReload_Parms CanReload_Parms;

	this->ProcessEvent ( pFnCanReload, &CanReload_Parms, NULL );

	return CanReload_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.EffectIsRelevant
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool ASFXWeapon_SMG_Hornet::EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance )
{
	static UFunction* pFnEffectIsRelevant = NULL;

	if ( ! pFnEffectIsRelevant )
		pFnEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 75756 ];

	ASFXWeapon_SMG_Hornet_execEffectIsRelevant_Parms EffectIsRelevant_Parms;
	memcpy ( &EffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	EffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	EffectIsRelevant_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnEffectIsRelevant, &EffectIsRelevant_Parms, NULL );

	return EffectIsRelevant_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayReloadEject
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::PlayReloadEject ( )
{
	static UFunction* pFnPlayReloadEject = NULL;

	if ( ! pFnPlayReloadEject )
		pFnPlayReloadEject = (UFunction*) UObject::GObjObjects()->Data[ 75753 ];

	ASFXWeapon_SMG_Hornet_execPlayReloadEject_Parms PlayReloadEject_Parms;

	this->ProcessEvent ( pFnPlayReloadEject, &PlayReloadEject_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StopFireEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::StopFireEffects ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFireEffects = NULL;

	if ( ! pFnStopFireEffects )
		pFnStopFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 75750 ];

	ASFXWeapon_SMG_Hornet_execStopFireEffects_Parms StopFireEffects_Parms;
	StopFireEffects_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFireEffects, &StopFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HearNoiseTimer
// [0x00020100] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::HearNoiseTimer ( )
{
	static UFunction* pFnHearNoiseTimer = NULL;

	if ( ! pFnHearNoiseTimer )
		pFnHearNoiseTimer = (UFunction*) UObject::GObjObjects()->Data[ 75749 ];

	ASFXWeapon_SMG_Hornet_execHearNoiseTimer_Parms HearNoiseTimer_Parms;

	this->ProcessEvent ( pFnHearNoiseTimer, &HearNoiseTimer_Parms, NULL );
};

// Function SFXGame.SFXWeapon.WeaponPlayWwiseEvent
// [0x00024102] 
// Parameters infos:
// class UWwiseEvent*             Sound                          ( CPF_Parm )
// float                          NoiseLoudness                  ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SoundLoc                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::WeaponPlayWwiseEvent ( class UWwiseEvent* Sound, float NoiseLoudness, struct FVector SoundLoc, struct FName NoiseType )
{
	static UFunction* pFnWeaponPlayWwiseEvent = NULL;

	if ( ! pFnWeaponPlayWwiseEvent )
		pFnWeaponPlayWwiseEvent = (UFunction*) UObject::GObjObjects()->Data[ 75743 ];

	ASFXWeapon_SMG_Hornet_execWeaponPlayWwiseEvent_Parms WeaponPlayWwiseEvent_Parms;
	WeaponPlayWwiseEvent_Parms.Sound = Sound;
	WeaponPlayWwiseEvent_Parms.NoiseLoudness = NoiseLoudness;
	memcpy ( &WeaponPlayWwiseEvent_Parms.SoundLoc, &SoundLoc, 0xC );
	memcpy ( &WeaponPlayWwiseEvent_Parms.NoiseType, &NoiseType, 0x8 );

	this->ProcessEvent ( pFnWeaponPlayWwiseEvent, &WeaponPlayWwiseEvent_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SpawnTracerEffect
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          HitDistance                    ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SpawnTracerEffect ( struct FVector HitLocation, float HitDistance )
{
	static UFunction* pFnSpawnTracerEffect = NULL;

	if ( ! pFnSpawnTracerEffect )
		pFnSpawnTracerEffect = (UFunction*) UObject::GObjObjects()->Data[ 75739 ];

	ASFXWeapon_SMG_Hornet_execSpawnTracerEffect_Parms SpawnTracerEffect_Parms;
	memcpy ( &SpawnTracerEffect_Parms.HitLocation, &HitLocation, 0xC );
	SpawnTracerEffect_Parms.HitDistance = HitDistance;

	this->ProcessEvent ( pFnSpawnTracerEffect, &SpawnTracerEffect_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ShouldSpawnTracerFX
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::ShouldSpawnTracerFX ( )
{
	static UFunction* pFnShouldSpawnTracerFX = NULL;

	if ( ! pFnShouldSpawnTracerFX )
		pFnShouldSpawnTracerFX = (UFunction*) UObject::GObjObjects()->Data[ 75737 ];

	ASFXWeapon_SMG_Hornet_execShouldSpawnTracerFX_Parms ShouldSpawnTracerFX_Parms;

	this->ProcessEvent ( pFnShouldSpawnTracerFX, &ShouldSpawnTracerFX_Parms, NULL );

	return ShouldSpawnTracerFX_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayOwnedFireEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::PlayOwnedFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayOwnedFireEffects = NULL;

	if ( ! pFnPlayOwnedFireEffects )
		pFnPlayOwnedFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 75730 ];

	ASFXWeapon_SMG_Hornet_execPlayOwnedFireEffects_Parms PlayOwnedFireEffects_Parms;
	PlayOwnedFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayOwnedFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayOwnedFireEffects, &PlayOwnedFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HideReloadEmitters
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::HideReloadEmitters ( )
{
	static UFunction* pFnHideReloadEmitters = NULL;

	if ( ! pFnHideReloadEmitters )
		pFnHideReloadEmitters = (UFunction*) UObject::GObjObjects()->Data[ 75728 ];

	ASFXWeapon_SMG_Hornet_execHideReloadEmitters_Parms HideReloadEmitters_Parms;

	this->ProcessEvent ( pFnHideReloadEmitters, &HideReloadEmitters_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HideMuzzleFlashEmitter
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::HideMuzzleFlashEmitter ( )
{
	static UFunction* pFnHideMuzzleFlashEmitter = NULL;

	if ( ! pFnHideMuzzleFlashEmitter )
		pFnHideMuzzleFlashEmitter = (UFunction*) UObject::GObjObjects()->Data[ 75727 ];

	ASFXWeapon_SMG_Hornet_execHideMuzzleFlashEmitter_Parms HideMuzzleFlashEmitter_Parms;

	this->ProcessEvent ( pFnHideMuzzleFlashEmitter, &HideMuzzleFlashEmitter_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StopMuzzleFlashEffect
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::StopMuzzleFlashEffect ( )
{
	static UFunction* pFnStopMuzzleFlashEffect = NULL;

	if ( ! pFnStopMuzzleFlashEffect )
		pFnStopMuzzleFlashEffect = (UFunction*) UObject::GObjObjects()->Data[ 75723 ];

	ASFXWeapon_SMG_Hornet_execStopMuzzleFlashEffect_Parms StopMuzzleFlashEffect_Parms;

	this->ProcessEvent ( pFnStopMuzzleFlashEffect, &StopMuzzleFlashEffect_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IsCameraWithinRadius
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

bool ASFXWeapon_SMG_Hornet::IsCameraWithinRadius ( struct FVector TestLocation, float Radius )
{
	static UFunction* pFnIsCameraWithinRadius = NULL;

	if ( ! pFnIsCameraWithinRadius )
		pFnIsCameraWithinRadius = (UFunction*) UObject::GObjObjects()->Data[ 75716 ];

	ASFXWeapon_SMG_Hornet_execIsCameraWithinRadius_Parms IsCameraWithinRadius_Parms;
	memcpy ( &IsCameraWithinRadius_Parms.TestLocation, &TestLocation, 0xC );
	IsCameraWithinRadius_Parms.Radius = Radius;

	this->ProcessEvent ( pFnIsCameraWithinRadius, &IsCameraWithinRadius_Parms, NULL );

	return IsCameraWithinRadius_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsMuzzleFlashRelevant
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::IsMuzzleFlashRelevant ( )
{
	static UFunction* pFnIsMuzzleFlashRelevant = NULL;

	if ( ! pFnIsMuzzleFlashRelevant )
		pFnIsMuzzleFlashRelevant = (UFunction*) UObject::GObjObjects()->Data[ 75714 ];

	ASFXWeapon_SMG_Hornet_execIsMuzzleFlashRelevant_Parms IsMuzzleFlashRelevant_Parms;

	this->ProcessEvent ( pFnIsMuzzleFlashRelevant, &IsMuzzleFlashRelevant_Parms, NULL );

	return IsMuzzleFlashRelevant_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayMuzzleFlashEffect
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::PlayMuzzleFlashEffect ( )
{
	static UFunction* pFnPlayMuzzleFlashEffect = NULL;

	if ( ! pFnPlayMuzzleFlashEffect )
		pFnPlayMuzzleFlashEffect = (UFunction*) UObject::GObjObjects()->Data[ 75710 ];

	ASFXWeapon_SMG_Hornet_execPlayMuzzleFlashEffect_Parms PlayMuzzleFlashEffect_Parms;

	this->ProcessEvent ( pFnPlayMuzzleFlashEffect, &PlayMuzzleFlashEffect_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayFireEffects
// [0x00024102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 75704 ];

	ASFXWeapon_SMG_Hornet_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DummyFireTimerFunction
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::DummyFireTimerFunction ( )
{
	static UFunction* pFnDummyFireTimerFunction = NULL;

	if ( ! pFnDummyFireTimerFunction )
		pFnDummyFireTimerFunction = (UFunction*) UObject::GObjObjects()->Data[ 75699 ];

	ASFXWeapon_SMG_Hornet_execDummyFireTimerFunction_Parms DummyFireTimerFunction_Parms;

	this->ProcessEvent ( pFnDummyFireTimerFunction, &DummyFireTimerFunction_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DummyFireNumTimes
// [0x00024102] 
// Parameters infos:
// int                            nNumTimes                      ( CPF_Parm )
// struct FVector                 vHitLocation                   ( CPF_Parm )
// class AActor*                  AttachedTo                     ( CPF_OptionalParm | CPF_Parm )
// float                          fInaccuracy                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::DummyFireNumTimes ( int nNumTimes, struct FVector vHitLocation, class AActor* AttachedTo, float fInaccuracy, class AActor* TargetActor )
{
	static UFunction* pFnDummyFireNumTimes = NULL;

	if ( ! pFnDummyFireNumTimes )
		pFnDummyFireNumTimes = (UFunction*) UObject::GObjObjects()->Data[ 75692 ];

	ASFXWeapon_SMG_Hornet_execDummyFireNumTimes_Parms DummyFireNumTimes_Parms;
	DummyFireNumTimes_Parms.nNumTimes = nNumTimes;
	memcpy ( &DummyFireNumTimes_Parms.vHitLocation, &vHitLocation, 0xC );
	DummyFireNumTimes_Parms.AttachedTo = AttachedTo;
	DummyFireNumTimes_Parms.fInaccuracy = fInaccuracy;
	DummyFireNumTimes_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnDummyFireNumTimes, &DummyFireNumTimes_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CheckTimerFireOnce
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::CheckTimerFireOnce ( )
{
	static UFunction* pFnCheckTimerFireOnce = NULL;

	if ( ! pFnCheckTimerFireOnce )
		pFnCheckTimerFireOnce = (UFunction*) UObject::GObjObjects()->Data[ 75691 ];

	ASFXWeapon_SMG_Hornet_execCheckTimerFireOnce_Parms CheckTimerFireOnce_Parms;

	this->ProcessEvent ( pFnCheckTimerFireOnce, &CheckTimerFireOnce_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayFireEffectsOnce
// [0x00024102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::PlayFireEffectsOnce ( struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffectsOnce = NULL;

	if ( ! pFnPlayFireEffectsOnce )
		pFnPlayFireEffectsOnce = (UFunction*) UObject::GObjObjects()->Data[ 75688 ];

	ASFXWeapon_SMG_Hornet_execPlayFireEffectsOnce_Parms PlayFireEffectsOnce_Parms;
	memcpy ( &PlayFireEffectsOnce_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffectsOnce, &PlayFireEffectsOnce_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PrecacheVFX
// [0x00022102] 
// Parameters infos:
// class ASFXObjectPool*          ObjectPool                     ( CPF_Parm )
// class URvrClientEffectManager* ClientEffects                  ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 75678 ];

	ASFXWeapon_SMG_Hornet_execPrecacheVFX_Parms PrecacheVFX_Parms;
	PrecacheVFX_Parms.ObjectPool = ObjectPool;
	PrecacheVFX_Parms.ClientEffects = ClientEffects;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponSpecificDecalData
// [0x00420100] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USFXPhysicalMaterialDecals* DecalEffects                   ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm | CPF_OutParm )

class UDecalComponent* ASFXWeapon_SMG_Hornet::GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime )
{
	static UFunction* pFnGetWeaponSpecificDecalData = NULL;

	if ( ! pFnGetWeaponSpecificDecalData )
		pFnGetWeaponSpecificDecalData = (UFunction*) UObject::GObjObjects()->Data[ 75673 ];

	ASFXWeapon_SMG_Hornet_execGetWeaponSpecificDecalData_Parms GetWeaponSpecificDecalData_Parms;
	GetWeaponSpecificDecalData_Parms.DecalEffects = DecalEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificDecalData, &GetWeaponSpecificDecalData_Parms, NULL );

	if ( FadeTime )
		*FadeTime = GetWeaponSpecificDecalData_Parms.FadeTime;

	return GetWeaponSpecificDecalData_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetDecalData
// [0x00420102] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm | CPF_OutParm )

class UDecalComponent* ASFXWeapon_SMG_Hornet::GetDecalData ( class UPhysicalMaterial* PhysMat, float* FadeTime )
{
	static UFunction* pFnGetDecalData = NULL;

	if ( ! pFnGetDecalData )
		pFnGetDecalData = (UFunction*) UObject::GObjObjects()->Data[ 75667 ];

	ASFXWeapon_SMG_Hornet_execGetDecalData_Parms GetDecalData_Parms;
	GetDecalData_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetDecalData, &GetDecalData_Parms, NULL );

	if ( FadeTime )
		*FadeTime = GetDecalData_Parms.FadeTime;

	return GetDecalData_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SpawnADecal
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SpawnADecal ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnADecal = NULL;

	if ( ! pFnSpawnADecal )
		pFnSpawnADecal = (UFunction*) UObject::GObjObjects()->Data[ 75661 ];

	ASFXWeapon_SMG_Hornet_execSpawnADecal_Parms SpawnADecal_Parms;
	memcpy ( &SpawnADecal_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnSpawnADecal, &SpawnADecal_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponSpecificImpactSound
// [0x00020100] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactSounds* ImpactSounds                   ( CPF_Parm )

class UWwiseEvent* ASFXWeapon_SMG_Hornet::GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds )
{
	static UFunction* pFnGetWeaponSpecificImpactSound = NULL;

	if ( ! pFnGetWeaponSpecificImpactSound )
		pFnGetWeaponSpecificImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 75657 ];

	ASFXWeapon_SMG_Hornet_execGetWeaponSpecificImpactSound_Parms GetWeaponSpecificImpactSound_Parms;
	GetWeaponSpecificImpactSound_Parms.ImpactSounds = ImpactSounds;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactSound, &GetWeaponSpecificImpactSound_Parms, NULL );

	return GetWeaponSpecificImpactSound_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetImpactSound
// [0x00020102] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )

class UWwiseEvent* ASFXWeapon_SMG_Hornet::GetImpactSound ( class UPhysicalMaterial* PhysMat )
{
	static UFunction* pFnGetImpactSound = NULL;

	if ( ! pFnGetImpactSound )
		pFnGetImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 75652 ];

	ASFXWeapon_SMG_Hornet_execGetImpactSound_Parms GetImpactSound_Parms;
	GetImpactSound_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetImpactSound, &GetImpactSound_Parms, NULL );

	return GetImpactSound_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SpawnImpactSounds
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SpawnImpactSounds ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnImpactSounds = NULL;

	if ( ! pFnSpawnImpactSounds )
		pFnSpawnImpactSounds = (UFunction*) UObject::GObjObjects()->Data[ 75647 ];

	ASFXWeapon_SMG_Hornet_execSpawnImpactSounds_Parms SpawnImpactSounds_Parms;
	memcpy ( &SpawnImpactSounds_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnSpawnImpactSounds, &SpawnImpactSounds_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponSpecificImpactEffect
// [0x00022100] 
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactEffects* ImpactEffects                  ( CPF_Parm )

class UParticleSystem* ASFXWeapon_SMG_Hornet::GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects )
{
	static UFunction* pFnGetWeaponSpecificImpactEffect = NULL;

	if ( ! pFnGetWeaponSpecificImpactEffect )
		pFnGetWeaponSpecificImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 75643 ];

	ASFXWeapon_SMG_Hornet_execGetWeaponSpecificImpactEffect_Parms GetWeaponSpecificImpactEffect_Parms;
	GetWeaponSpecificImpactEffect_Parms.ImpactEffects = ImpactEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactEffect, &GetWeaponSpecificImpactEffect_Parms, NULL );

	return GetWeaponSpecificImpactEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetImpactEffect
// [0x00022102] 
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )

class UParticleSystem* ASFXWeapon_SMG_Hornet::GetImpactEffect ( class UPhysicalMaterial* PhysMat )
{
	static UFunction* pFnGetImpactEffect = NULL;

	if ( ! pFnGetImpactEffect )
		pFnGetImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 75638 ];

	ASFXWeapon_SMG_Hornet_execGetImpactEffect_Parms GetImpactEffect_Parms;
	GetImpactEffect_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetImpactEffect, &GetImpactEffect_Parms, NULL );

	return GetImpactEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SpawnImpactEffects
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SpawnImpactEffects ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnImpactEffects = NULL;

	if ( ! pFnSpawnImpactEffects )
		pFnSpawnImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 75630 ];

	ASFXWeapon_SMG_Hornet_execSpawnImpactEffects_Parms SpawnImpactEffects_Parms;
	memcpy ( &SpawnImpactEffects_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnSpawnImpactEffects, &SpawnImpactEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ReplicateImpact
// [0x00024002] 
// Parameters infos:
// class ABioPawn*                ImpactedPawn                   ( CPF_Parm )
// class ASFXProjectile*          InProjectile                   ( CPF_OptionalParm | CPF_Parm )
// float                          fDelay                         ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::ReplicateImpact ( class ABioPawn* ImpactedPawn, class ASFXProjectile* InProjectile, float fDelay )
{
	static UFunction* pFnReplicateImpact = NULL;

	if ( ! pFnReplicateImpact )
		pFnReplicateImpact = (UFunction*) UObject::GObjObjects()->Data[ 75625 ];

	ASFXWeapon_SMG_Hornet_execReplicateImpact_Parms ReplicateImpact_Parms;
	ReplicateImpact_Parms.ImpactedPawn = ImpactedPawn;
	ReplicateImpact_Parms.InProjectile = InProjectile;
	ReplicateImpact_Parms.fDelay = fDelay;

	this->ProcessEvent ( pFnReplicateImpact, &ReplicateImpact_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ClientDoImpact
// [0x00020102] 
// Parameters infos:
// class ABioPawn*                InImpactedPawn                 ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::ClientDoImpact ( class ABioPawn* InImpactedPawn )
{
	static UFunction* pFnClientDoImpact = NULL;

	if ( ! pFnClientDoImpact )
		pFnClientDoImpact = (UFunction*) UObject::GObjObjects()->Data[ 75623 ];

	ASFXWeapon_SMG_Hornet_execClientDoImpact_Parms ClientDoImpact_Parms;
	ClientDoImpact_Parms.InImpactedPawn = InImpactedPawn;

	this->ProcessEvent ( pFnClientDoImpact, &ClientDoImpact_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProcessInstantHit_Internal
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::ProcessInstantHit_Internal ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit_Internal = NULL;

	if ( ! pFnProcessInstantHit_Internal )
		pFnProcessInstantHit_Internal = (UFunction*) UObject::GObjObjects()->Data[ 75611 ];

	ASFXWeapon_SMG_Hornet_execProcessInstantHit_Internal_Parms ProcessInstantHit_Internal_Parms;
	ProcessInstantHit_Internal_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Internal_Parms.Impact, &Impact, 0x54 );
	ProcessInstantHit_Internal_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit_Internal, &ProcessInstantHit_Internal_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProcessInstantHitNearMiss
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::ProcessInstantHitNearMiss ( struct FVector StartTrace, struct FVector HitLocation )
{
	static UFunction* pFnProcessInstantHitNearMiss = NULL;

	if ( ! pFnProcessInstantHitNearMiss )
		pFnProcessInstantHitNearMiss = (UFunction*) UObject::GObjObjects()->Data[ 75603 ];

	ASFXWeapon_SMG_Hornet_execProcessInstantHitNearMiss_Parms ProcessInstantHitNearMiss_Parms;
	memcpy ( &ProcessInstantHitNearMiss_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &ProcessInstantHitNearMiss_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnProcessInstantHitNearMiss, &ProcessInstantHitNearMiss_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ServerProcessInstantHit
// [0x002240C2] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            HitArmourIdx                   ( CPF_Parm )
// unsigned long                  bSuppressedAudio               ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::ServerProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int HitArmourIdx, unsigned long bSuppressedAudio, int NumHits )
{
	static UFunction* pFnServerProcessInstantHit = NULL;

	if ( ! pFnServerProcessInstantHit )
		pFnServerProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 75581 ];

	ASFXWeapon_SMG_Hornet_execServerProcessInstantHit_Parms ServerProcessInstantHit_Parms;
	ServerProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ServerProcessInstantHit_Parms.Impact, &Impact, 0x54 );
	ServerProcessInstantHit_Parms.HitArmourIdx = HitArmourIdx;
	ServerProcessInstantHit_Parms.bSuppressedAudio = bSuppressedAudio;
	ServerProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnServerProcessInstantHit, &ServerProcessInstantHit_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon_SMG_Hornet::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 75572 ];

	ASFXWeapon_SMG_Hornet_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x54 );
	ProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CalcWeaponFire
// [0x00424102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo ASFXWeapon_SMG_Hornet::CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcWeaponFire = NULL;

	if ( ! pFnCalcWeaponFire )
		pFnCalcWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 75560 ];

	ASFXWeapon_SMG_Hornet_execCalcWeaponFire_Parms CalcWeaponFire_Parms;
	memcpy ( &CalcWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.EndTrace, &EndTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnCalcWeaponFire, &CalcWeaponFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcWeaponFire_Parms.ImpactList, 0xC );

	return CalcWeaponFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.InstantFire
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::InstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 75552 ];

	ASFXWeapon_SMG_Hornet_execInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetAmmoCountInMagazine
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Hornet::GetAmmoCountInMagazine ( )
{
	static UFunction* pFnGetAmmoCountInMagazine = NULL;

	if ( ! pFnGetAmmoCountInMagazine )
		pFnGetAmmoCountInMagazine = (UFunction*) UObject::GObjObjects()->Data[ 49970 ];

	ASFXWeapon_SMG_Hornet_execGetAmmoCountInMagazine_Parms GetAmmoCountInMagazine_Parms;

	this->ProcessEvent ( pFnGetAmmoCountInMagazine, &GetAmmoCountInMagazine_Parms, NULL );

	return GetAmmoCountInMagazine_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetLazyFireInterval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float ASFXWeapon_SMG_Hornet::GetLazyFireInterval ( unsigned char FireModeNum )
{
	static UFunction* pFnGetLazyFireInterval = NULL;

	if ( ! pFnGetLazyFireInterval )
		pFnGetLazyFireInterval = (UFunction*) UObject::GObjObjects()->Data[ 75548 ];

	ASFXWeapon_SMG_Hornet_execGetLazyFireInterval_Parms GetLazyFireInterval_Parms;
	GetLazyFireInterval_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetLazyFireInterval, &GetLazyFireInterval_Parms, NULL );

	return GetLazyFireInterval_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetFireInterval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float ASFXWeapon_SMG_Hornet::GetFireInterval ( unsigned char FireModeNum )
{
	static UFunction* pFnGetFireInterval = NULL;

	if ( ! pFnGetFireInterval )
		pFnGetFireInterval = (UFunction*) UObject::GObjObjects()->Data[ 75545 ];

	ASFXWeapon_SMG_Hornet_execGetFireInterval_Parms GetFireInterval_Parms;
	GetFireInterval_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetFireInterval, &GetFireInterval_Parms, NULL );

	return GetFireInterval_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.HasAnyAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49972 ];

	ASFXWeapon_SMG_Hornet_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );

	return HasAnyAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool ASFXWeapon_SMG_Hornet::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 53129 ];

	ASFXWeapon_SMG_Hornet_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.HasSpareAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::HasSpareAmmo ( )
{
	static UFunction* pFnHasSpareAmmo = NULL;

	if ( ! pFnHasSpareAmmo )
		pFnHasSpareAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75540 ];

	ASFXWeapon_SMG_Hornet_execHasSpareAmmo_Parms HasSpareAmmo_Parms;

	this->ProcessEvent ( pFnHasSpareAmmo, &HasSpareAmmo_Parms, NULL );

	return HasSpareAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.AddAmmo
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int ASFXWeapon_SMG_Hornet::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = (UFunction*) UObject::GObjObjects()->Data[ 45207 ];

	ASFXWeapon_SMG_Hornet_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ConsumeAmmo
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75525 ];

	ASFXWeapon_SMG_Hornet_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.InitializeAmmo
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::InitializeAmmo ( )
{
	static UFunction* pFnInitializeAmmo = NULL;

	if ( ! pFnInitializeAmmo )
		pFnInitializeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75524 ];

	ASFXWeapon_SMG_Hornet_execInitializeAmmo_Parms InitializeAmmo_Parms;

	this->ProcessEvent ( pFnInitializeAmmo, &InitializeAmmo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponFireType
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASFXWeapon_SMG_Hornet::GetWeaponFireType ( )
{
	static UFunction* pFnGetWeaponFireType = NULL;

	if ( ! pFnGetWeaponFireType )
		pFnGetWeaponFireType = (UFunction*) UObject::GObjObjects()->Data[ 71104 ];

	ASFXWeapon_SMG_Hornet_execGetWeaponFireType_Parms GetWeaponFireType_Parms;

	this->ProcessEvent ( pFnGetWeaponFireType, &GetWeaponFireType_Parms, NULL );

	return GetWeaponFireType_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetZoomFOV
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Hornet::GetZoomFOV ( )
{
	static UFunction* pFnGetZoomFOV = NULL;

	if ( ! pFnGetZoomFOV )
		pFnGetZoomFOV = (UFunction*) UObject::GObjObjects()->Data[ 65814 ];

	ASFXWeapon_SMG_Hornet_execGetZoomFOV_Parms GetZoomFOV_Parms;

	this->ProcessEvent ( pFnGetZoomFOV, &GetZoomFOV_Parms, NULL );

	return GetZoomFOV_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetModifiedFOV
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          FOV                            ( CPF_Parm | CPF_OutParm )

bool ASFXWeapon_SMG_Hornet::GetModifiedFOV ( float* FOV )
{
	static UFunction* pFnGetModifiedFOV = NULL;

	if ( ! pFnGetModifiedFOV )
		pFnGetModifiedFOV = (UFunction*) UObject::GObjObjects()->Data[ 75521 ];

	ASFXWeapon_SMG_Hornet_execGetModifiedFOV_Parms GetModifiedFOV_Parms;

	this->ProcessEvent ( pFnGetModifiedFOV, &GetModifiedFOV_Parms, NULL );

	if ( FOV )
		*FOV = GetModifiedFOV_Parms.FOV;

	return GetModifiedFOV_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetMuzzleLoc
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASFXWeapon_SMG_Hornet::GetMuzzleLoc ( )
{
	static UFunction* pFnGetMuzzleLoc = NULL;

	if ( ! pFnGetMuzzleLoc )
		pFnGetMuzzleLoc = (UFunction*) UObject::GObjObjects()->Data[ 75510 ];

	ASFXWeapon_SMG_Hornet_execGetMuzzleLoc_Parms GetMuzzleLoc_Parms;

	this->ProcessEvent ( pFnGetMuzzleLoc, &GetMuzzleLoc_Parms, NULL );

	return GetMuzzleLoc_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SetWeaponRecoil
// [0x00020102] 
// Parameters infos:
// float                          PitchRecoil                    ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SetWeaponRecoil ( float PitchRecoil )
{
	static UFunction* pFnSetWeaponRecoil = NULL;

	if ( ! pFnSetWeaponRecoil )
		pFnSetWeaponRecoil = (UFunction*) UObject::GObjObjects()->Data[ 75507 ];

	ASFXWeapon_SMG_Hornet_execSetWeaponRecoil_Parms SetWeaponRecoil_Parms;
	SetWeaponRecoil_Parms.PitchRecoil = PitchRecoil;

	this->ProcessEvent ( pFnSetWeaponRecoil, &SetWeaponRecoil_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ServerSetIsZoomed
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bState                         ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::ServerSetIsZoomed ( unsigned long bState )
{
	static UFunction* pFnServerSetIsZoomed = NULL;

	if ( ! pFnServerSetIsZoomed )
		pFnServerSetIsZoomed = (UFunction*) UObject::GObjObjects()->Data[ 75505 ];

	ASFXWeapon_SMG_Hornet_execServerSetIsZoomed_Parms ServerSetIsZoomed_Parms;
	ServerSetIsZoomed_Parms.bState = bState;

	this->ProcessEvent ( pFnServerSetIsZoomed, &ServerSetIsZoomed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetRTPCPlayerPosition
// [0x00020102] 
// Parameters infos:
// unsigned char                  NewPlayerPosition              ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SetRTPCPlayerPosition ( unsigned char NewPlayerPosition )
{
	static UFunction* pFnSetRTPCPlayerPosition = NULL;

	if ( ! pFnSetRTPCPlayerPosition )
		pFnSetRTPCPlayerPosition = (UFunction*) UObject::GObjObjects()->Data[ 75501 ];

	ASFXWeapon_SMG_Hornet_execSetRTPCPlayerPosition_Parms SetRTPCPlayerPosition_Parms;
	SetRTPCPlayerPosition_Parms.NewPlayerPosition = NewPlayerPosition;

	this->ProcessEvent ( pFnSetRTPCPlayerPosition, &SetRTPCPlayerPosition_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetZoomed
// [0x00020102] 
// Parameters infos:
// unsigned long                  bState                         ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::SetZoomed ( unsigned long bState )
{
	static UFunction* pFnSetZoomed = NULL;

	if ( ! pFnSetZoomed )
		pFnSetZoomed = (UFunction*) UObject::GObjObjects()->Data[ 75491 ];

	ASFXWeapon_SMG_Hornet_execSetZoomed_Parms SetZoomed_Parms;
	SetZoomed_Parms.bState = bState;

	this->ProcessEvent ( pFnSetZoomed, &SetZoomed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetAIAimDelay
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Hornet::GetAIAimDelay ( )
{
	static UFunction* pFnGetAIAimDelay = NULL;

	if ( ! pFnGetAIAimDelay )
		pFnGetAIAimDelay = (UFunction*) UObject::GObjObjects()->Data[ 55312 ];

	ASFXWeapon_SMG_Hornet_execGetAIAimDelay_Parms GetAIAimDelay_Parms;

	this->ProcessEvent ( pFnGetAIAimDelay, &GetAIAimDelay_Parms, NULL );

	return GetAIAimDelay_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetPlayerAimError
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Accuracy                       ( CPF_Parm )

float ASFXWeapon_SMG_Hornet::GetPlayerAimError ( float Accuracy )
{
	static UFunction* pFnGetPlayerAimError = NULL;

	if ( ! pFnGetPlayerAimError )
		pFnGetPlayerAimError = (UFunction*) UObject::GObjObjects()->Data[ 75487 ];

	ASFXWeapon_SMG_Hornet_execGetPlayerAimError_Parms GetPlayerAimError_Parms;
	GetPlayerAimError_Parms.Accuracy = Accuracy;

	this->ProcessEvent ( pFnGetPlayerAimError, &GetPlayerAimError_Parms, NULL );

	return GetPlayerAimError_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetAdjustedAim
// [0x00020102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ASFXWeapon_SMG_Hornet::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 75481 ];

	ASFXWeapon_SMG_Hornet_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetRateOfFire
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Hornet::GetRateOfFire ( )
{
	static UFunction* pFnGetRateOfFire = NULL;

	if ( ! pFnGetRateOfFire )
		pFnGetRateOfFire = (UFunction*) UObject::GObjObjects()->Data[ 41706 ];

	ASFXWeapon_SMG_Hornet_execGetRateOfFire_Parms GetRateOfFire_Parms;

	this->ProcessEvent ( pFnGetRateOfFire, &GetRateOfFire_Parms, NULL );

	return GetRateOfFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetTraceRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Hornet::GetTraceRange ( )
{
	static UFunction* pFnGetTraceRange = NULL;

	if ( ! pFnGetTraceRange )
		pFnGetTraceRange = (UFunction*) UObject::GObjObjects()->Data[ 71107 ];

	ASFXWeapon_SMG_Hornet_execGetTraceRange_Parms GetTraceRange_Parms;

	this->ProcessEvent ( pFnGetTraceRange, &GetTraceRange_Parms, NULL );

	return GetTraceRange_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetWeaponAimErrorRange
// [0x00020102] 
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector2D ASFXWeapon_SMG_Hornet::GetWeaponAimErrorRange ( )
{
	static UFunction* pFnGetWeaponAimErrorRange = NULL;

	if ( ! pFnGetWeaponAimErrorRange )
		pFnGetWeaponAimErrorRange = (UFunction*) UObject::GObjObjects()->Data[ 45632 ];

	ASFXWeapon_SMG_Hornet_execGetWeaponAimErrorRange_Parms GetWeaponAimErrorRange_Parms;

	this->ProcessEvent ( pFnGetWeaponAimErrorRange, &GetWeaponAimErrorRange_Parms, NULL );

	return GetWeaponAimErrorRange_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetWeaponRecoil
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Hornet::GetWeaponRecoil ( )
{
	static UFunction* pFnGetWeaponRecoil = NULL;

	if ( ! pFnGetWeaponRecoil )
		pFnGetWeaponRecoil = (UFunction*) UObject::GObjObjects()->Data[ 75471 ];

	ASFXWeapon_SMG_Hornet_execGetWeaponRecoil_Parms GetWeaponRecoil_Parms;

	this->ProcessEvent ( pFnGetWeaponRecoil, &GetWeaponRecoil_Parms, NULL );

	return GetWeaponRecoil_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ResetAmmoOnHolster
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::ResetAmmoOnHolster ( )
{
	static UFunction* pFnResetAmmoOnHolster = NULL;

	if ( ! pFnResetAmmoOnHolster )
		pFnResetAmmoOnHolster = (UFunction*) UObject::GObjObjects()->Data[ 75470 ];

	ASFXWeapon_SMG_Hornet_execResetAmmoOnHolster_Parms ResetAmmoOnHolster_Parms;

	this->ProcessEvent ( pFnResetAmmoOnHolster, &ResetAmmoOnHolster_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetMaxTotalAmmo
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Hornet::GetMaxTotalAmmo ( )
{
	static UFunction* pFnGetMaxTotalAmmo = NULL;

	if ( ! pFnGetMaxTotalAmmo )
		pFnGetMaxTotalAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75468 ];

	ASFXWeapon_SMG_Hornet_execGetMaxTotalAmmo_Parms GetMaxTotalAmmo_Parms;

	this->ProcessEvent ( pFnGetMaxTotalAmmo, &GetMaxTotalAmmo_Parms, NULL );

	return GetMaxTotalAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetCurrentTotalAmmo
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Hornet::GetCurrentTotalAmmo ( )
{
	static UFunction* pFnGetCurrentTotalAmmo = NULL;

	if ( ! pFnGetCurrentTotalAmmo )
		pFnGetCurrentTotalAmmo = (UFunction*) UObject::GObjObjects()->Data[ 75465 ];

	ASFXWeapon_SMG_Hornet_execGetCurrentTotalAmmo_Parms GetCurrentTotalAmmo_Parms;

	this->ProcessEvent ( pFnGetCurrentTotalAmmo, &GetCurrentTotalAmmo_Parms, NULL );

	return GetCurrentTotalAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetCurrentSpareAmmo
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Hornet::GetCurrentSpareAmmo ( )
{
	static UFunction* pFnGetCurrentSpareAmmo = NULL;

	if ( ! pFnGetCurrentSpareAmmo )
		pFnGetCurrentSpareAmmo = (UFunction*) UObject::GObjObjects()->Data[ 43672 ];

	ASFXWeapon_SMG_Hornet_execGetCurrentSpareAmmo_Parms GetCurrentSpareAmmo_Parms;

	this->ProcessEvent ( pFnGetCurrentSpareAmmo, &GetCurrentSpareAmmo_Parms, NULL );

	return GetCurrentSpareAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetMaxSpareAmmo
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIgnoreCurrentMag              ( CPF_OptionalParm | CPF_Parm )

int ASFXWeapon_SMG_Hornet::GetMaxSpareAmmo ( unsigned long bIgnoreCurrentMag )
{
	static UFunction* pFnGetMaxSpareAmmo = NULL;

	if ( ! pFnGetMaxSpareAmmo )
		pFnGetMaxSpareAmmo = (UFunction*) UObject::GObjObjects()->Data[ 53089 ];

	ASFXWeapon_SMG_Hornet_execGetMaxSpareAmmo_Parms GetMaxSpareAmmo_Parms;
	GetMaxSpareAmmo_Parms.bIgnoreCurrentMag = bIgnoreCurrentMag;

	this->ProcessEvent ( pFnGetMaxSpareAmmo, &GetMaxSpareAmmo_Parms, NULL );

	return GetMaxSpareAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetMagazineSize
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon_SMG_Hornet::GetMagazineSize ( )
{
	static UFunction* pFnGetMagazineSize = NULL;

	if ( ! pFnGetMagazineSize )
		pFnGetMagazineSize = (UFunction*) UObject::GObjObjects()->Data[ 43511 ];

	ASFXWeapon_SMG_Hornet_execGetMagazineSize_Parms GetMagazineSize_Parms;

	this->ProcessEvent ( pFnGetMagazineSize, &GetMagazineSize_Parms, NULL );

	return GetMagazineSize_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.OutOfAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::OutOfAmmo ( )
{
	static UFunction* pFnOutOfAmmo = NULL;

	if ( ! pFnOutOfAmmo )
		pFnOutOfAmmo = (UFunction*) UObject::GObjObjects()->Data[ 68201 ];

	ASFXWeapon_SMG_Hornet_execOutOfAmmo_Parms OutOfAmmo_Parms;

	this->ProcessEvent ( pFnOutOfAmmo, &OutOfAmmo_Parms, NULL );

	return OutOfAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetDamageType
// [0x00024102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FiringMode                     ( CPF_OptionalParm | CPF_Parm )

class UClass* ASFXWeapon_SMG_Hornet::GetDamageType ( unsigned char FiringMode )
{
	static UFunction* pFnGetDamageType = NULL;

	if ( ! pFnGetDamageType )
		pFnGetDamageType = (UFunction*) UObject::GObjObjects()->Data[ 45628 ];

	ASFXWeapon_SMG_Hornet_execGetDamageType_Parms GetDamageType_Parms;
	GetDamageType_Parms.FiringMode = FiringMode;

	this->ProcessEvent ( pFnGetDamageType, &GetDamageType_Parms, NULL );

	return GetDamageType_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.CalculateBonus
// [0x00424102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )
// struct FDamageCalculationAlgorithm DamageCalc                     ( CPF_Parm | CPF_OutParm )

void ASFXWeapon_SMG_Hornet::CalculateBonus ( struct FVector HitLocation, class AActor* HitActor, struct FDamageCalculationAlgorithm* DamageCalc )
{
	static UFunction* pFnCalculateBonus = NULL;

	if ( ! pFnCalculateBonus )
		pFnCalculateBonus = (UFunction*) UObject::GObjObjects()->Data[ 75458 ];

	ASFXWeapon_SMG_Hornet_execCalculateBonus_Parms CalculateBonus_Parms;
	memcpy ( &CalculateBonus_Parms.HitLocation, &HitLocation, 0xC );
	CalculateBonus_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnCalculateBonus, &CalculateBonus_Parms, NULL );

	if ( DamageCalc )
		memcpy ( DamageCalc, &CalculateBonus_Parms.DamageCalc, 0x60 );
};

// Function SFXGame.SFXWeapon.GetFireModeBaseDamage
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Hornet::GetFireModeBaseDamage ( )
{
	static UFunction* pFnGetFireModeBaseDamage = NULL;

	if ( ! pFnGetFireModeBaseDamage )
		pFnGetFireModeBaseDamage = (UFunction*) UObject::GObjObjects()->Data[ 45626 ];

	ASFXWeapon_SMG_Hornet_execGetFireModeBaseDamage_Parms GetFireModeBaseDamage_Parms;

	this->ProcessEvent ( pFnGetFireModeBaseDamage, &GetFireModeBaseDamage_Parms, NULL );

	return GetFireModeBaseDamage_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.NotifyUnpossessed
// [0x00020000] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::NotifyUnpossessed ( )
{
	static UFunction* pFnNotifyUnpossessed = NULL;

	if ( ! pFnNotifyUnpossessed )
		pFnNotifyUnpossessed = (UFunction*) UObject::GObjObjects()->Data[ 75456 ];

	ASFXWeapon_SMG_Hornet_execNotifyUnpossessed_Parms NotifyUnpossessed_Parms;

	this->ProcessEvent ( pFnNotifyUnpossessed, &NotifyUnpossessed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.UseFirstPersonCamera
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_SMG_Hornet::UseFirstPersonCamera ( )
{
	static UFunction* pFnUseFirstPersonCamera = NULL;

	if ( ! pFnUseFirstPersonCamera )
		pFnUseFirstPersonCamera = (UFunction*) UObject::GObjObjects()->Data[ 75454 ];

	ASFXWeapon_SMG_Hornet_execUseFirstPersonCamera_Parms UseFirstPersonCamera_Parms;

	this->ProcessEvent ( pFnUseFirstPersonCamera, &UseFirstPersonCamera_Parms, NULL );

	return UseFirstPersonCamera_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetProjectileFirePosition
// [0x00420102] 
// Parameters infos:
// struct FVector                 out_ProjLoc                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 out_ProjDir                    ( CPF_Parm | CPF_OutParm )

void ASFXWeapon_SMG_Hornet::GetProjectileFirePosition ( struct FVector* out_ProjLoc, struct FVector* out_ProjDir )
{
	static UFunction* pFnGetProjectileFirePosition = NULL;

	if ( ! pFnGetProjectileFirePosition )
		pFnGetProjectileFirePosition = (UFunction*) UObject::GObjObjects()->Data[ 75448 ];

	ASFXWeapon_SMG_Hornet_execGetProjectileFirePosition_Parms GetProjectileFirePosition_Parms;

	this->ProcessEvent ( pFnGetProjectileFirePosition, &GetProjectileFirePosition_Parms, NULL );

	if ( out_ProjLoc )
		memcpy ( out_ProjLoc, &GetProjectileFirePosition_Parms.out_ProjLoc, 0xC );

	if ( out_ProjDir )
		memcpy ( out_ProjDir, &GetProjectileFirePosition_Parms.out_ProjDir, 0xC );
};

// Function SFXGame.SFXWeapon.GetPhysicalFireStartLoc
// [0x00024102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AimDir                         ( CPF_OptionalParm | CPF_Parm )

struct FVector ASFXWeapon_SMG_Hornet::GetPhysicalFireStartLoc ( struct FVector AimDir )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 75445 ];

	ASFXWeapon_SMG_Hornet_execGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;
	memcpy ( &GetPhysicalFireStartLoc_Parms.AimDir, &AimDir, 0xC );

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.OnClientProjectileSpawned
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class ASFXProjectile*          NewProjectile                  ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::OnClientProjectileSpawned ( class ASFXProjectile* NewProjectile )
{
	static UFunction* pFnOnClientProjectileSpawned = NULL;

	if ( ! pFnOnClientProjectileSpawned )
		pFnOnClientProjectileSpawned = (UFunction*) UObject::GObjObjects()->Data[ 75438 ];

	ASFXWeapon_SMG_Hornet_execOnClientProjectileSpawned_Parms OnClientProjectileSpawned_Parms;
	OnClientProjectileSpawned_Parms.NewProjectile = NewProjectile;

	this->ProcessEvent ( pFnOnClientProjectileSpawned, &OnClientProjectileSpawned_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Internal_ProjectileFire
// [0x00020102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* ASFXWeapon_SMG_Hornet::Internal_ProjectileFire ( )
{
	static UFunction* pFnInternal_ProjectileFire = NULL;

	if ( ! pFnInternal_ProjectileFire )
		pFnInternal_ProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 75427 ];

	ASFXWeapon_SMG_Hornet_execInternal_ProjectileFire_Parms Internal_ProjectileFire_Parms;

	this->ProcessEvent ( pFnInternal_ProjectileFire, &Internal_ProjectileFire_Parms, NULL );

	return Internal_ProjectileFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ServerProjectileFire
// [0x002200C2] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// struct FVector                 ProjLocation                   ( CPF_Parm )
// struct FVector                 ProjDirection                  ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::ServerProjectileFire ( class AActor* Target, struct FVector ProjLocation, struct FVector ProjDirection )
{
	static UFunction* pFnServerProjectileFire = NULL;

	if ( ! pFnServerProjectileFire )
		pFnServerProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 75423 ];

	ASFXWeapon_SMG_Hornet_execServerProjectileFire_Parms ServerProjectileFire_Parms;
	ServerProjectileFire_Parms.Target = Target;
	memcpy ( &ServerProjectileFire_Parms.ProjLocation, &ProjLocation, 0xC );
	memcpy ( &ServerProjectileFire_Parms.ProjDirection, &ProjDirection, 0xC );

	this->ProcessEvent ( pFnServerProjectileFire, &ServerProjectileFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProjectileFire
// [0x00020102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* ASFXWeapon_SMG_Hornet::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 75418 ];

	ASFXWeapon_SMG_Hornet_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ForceEndFire
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::ForceEndFire ( )
{
	static UFunction* pFnForceEndFire = NULL;

	if ( ! pFnForceEndFire )
		pFnForceEndFire = (UFunction*) UObject::GObjObjects()->Data[ 75416 ];

	ASFXWeapon_SMG_Hornet_execForceEndFire_Parms ForceEndFire_Parms;

	this->ProcessEvent ( pFnForceEndFire, &ForceEndFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.InitDefaultDecalProperties
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::InitDefaultDecalProperties ( )
{
	static UFunction* pFnInitDefaultDecalProperties = NULL;

	if ( ! pFnInitDefaultDecalProperties )
		pFnInitDefaultDecalProperties = (UFunction*) UObject::GObjObjects()->Data[ 75413 ];

	ASFXWeapon_SMG_Hornet_execInitDefaultDecalProperties_Parms InitDefaultDecalProperties_Parms;

	this->ProcessEvent ( pFnInitDefaultDecalProperties, &InitDefaultDecalProperties_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ScaleWeapon
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::ScaleWeapon ( )
{
	static UFunction* pFnScaleWeapon = NULL;

	if ( ! pFnScaleWeapon )
		pFnScaleWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75398 ];

	ASFXWeapon_SMG_Hornet_execScaleWeapon_Parms ScaleWeapon_Parms;

	this->ProcessEvent ( pFnScaleWeapon, &ScaleWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CacheAnimNodes
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::CacheAnimNodes ( )
{
	static UFunction* pFnCacheAnimNodes = NULL;

	if ( ! pFnCacheAnimNodes )
		pFnCacheAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 75394 ];

	ASFXWeapon_SMG_Hornet_execCacheAnimNodes_Parms CacheAnimNodes_Parms;

	this->ProcessEvent ( pFnCacheAnimNodes, &CacheAnimNodes_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PostInitAnimTree
// [0x00020102] 
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ASFXWeapon_SMG_Hornet::PostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 75392 ];

	ASFXWeapon_SMG_Hornet_execPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function SFXGame.SFXWeapon.InitializeWeapon
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::InitializeWeapon ( )
{
	static UFunction* pFnInitializeWeapon = NULL;

	if ( ! pFnInitializeWeapon )
		pFnInitializeWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75381 ];

	ASFXWeapon_SMG_Hornet_execInitializeWeapon_Parms InitializeWeapon_Parms;

	this->ProcessEvent ( pFnInitializeWeapon, &InitializeWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DeferredPostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::DeferredPostBeginPlay ( )
{
	static UFunction* pFnDeferredPostBeginPlay = NULL;

	if ( ! pFnDeferredPostBeginPlay )
		pFnDeferredPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 75380 ];

	ASFXWeapon_SMG_Hornet_execDeferredPostBeginPlay_Parms DeferredPostBeginPlay_Parms;

	this->ProcessEvent ( pFnDeferredPostBeginPlay, &DeferredPostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 75379 ];

	ASFXWeapon_SMG_Hornet_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXWeapon.FireModeUpdated
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication )
{
	static UFunction* pFnFireModeUpdated = NULL;

	if ( ! pFnFireModeUpdated )
		pFnFireModeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 75376 ];

	ASFXWeapon_SMG_Hornet_execFireModeUpdated_Parms FireModeUpdated_Parms;
	FireModeUpdated_Parms.FiringMode = FiringMode;
	FireModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFireModeUpdated, &FireModeUpdated_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CharacterSlotUpdated
// [0x00020102] 
// Parameters infos:

void ASFXWeapon_SMG_Hornet::CharacterSlotUpdated ( )
{
	static UFunction* pFnCharacterSlotUpdated = NULL;

	if ( ! pFnCharacterSlotUpdated )
		pFnCharacterSlotUpdated = (UFunction*) UObject::GObjObjects()->Data[ 75374 ];

	ASFXWeapon_SMG_Hornet_execCharacterSlotUpdated_Parms CharacterSlotUpdated_Parms;

	this->ProcessEvent ( pFnCharacterSlotUpdated, &CharacterSlotUpdated_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 75371 ];

	ASFXWeapon_SMG_Hornet_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function SFXGame.SFXWeapon.OnWeaponUnequip
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::OnWeaponUnequip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponUnequip = NULL;

	if ( ! pFnOnWeaponUnequip )
		pFnOnWeaponUnequip = (UFunction*) UObject::GObjObjects()->Data[ 75369 ];

	ASFXWeapon_SMG_Hornet_execOnWeaponUnequip_Parms OnWeaponUnequip_Parms;
	OnWeaponUnequip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponUnequip, &OnWeaponUnequip_Parms, NULL );
};

// Function SFXGame.SFXWeapon.OnWeaponEquip
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::OnWeaponEquip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponEquip = NULL;

	if ( ! pFnOnWeaponEquip )
		pFnOnWeaponEquip = (UFunction*) UObject::GObjObjects()->Data[ 75367 ];

	ASFXWeapon_SMG_Hornet_execOnWeaponEquip_Parms OnWeaponEquip_Parms;
	OnWeaponEquip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponEquip, &OnWeaponEquip_Parms, NULL );
};

// Function SFXGame.SFXWeapon.OnWeaponReload
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::OnWeaponReload ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponReload = NULL;

	if ( ! pFnOnWeaponReload )
		pFnOnWeaponReload = (UFunction*) UObject::GObjObjects()->Data[ 75365 ];

	ASFXWeapon_SMG_Hornet_execOnWeaponReload_Parms OnWeaponReload_Parms;
	OnWeaponReload_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponReload, &OnWeaponReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetDamageVocProbabilityMod
// [0x00120000] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_SMG_Hornet::GetDamageVocProbabilityMod ( )
{
	static UFunction* pFnGetDamageVocProbabilityMod = NULL;

	if ( ! pFnGetDamageVocProbabilityMod )
		pFnGetDamageVocProbabilityMod = (UFunction*) UObject::GObjObjects()->Data[ 54000 ];

	ASFXWeapon_SMG_Hornet_execGetDamageVocProbabilityMod_Parms GetDamageVocProbabilityMod_Parms;

	this->ProcessEvent ( pFnGetDamageVocProbabilityMod, &GetDamageVocProbabilityMod_Parms, NULL );

	return GetDamageVocProbabilityMod_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.OnWeaponImpact
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon_SMG_Hornet::OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact )
{
	static UFunction* pFnOnWeaponImpact = NULL;

	if ( ! pFnOnWeaponImpact )
		pFnOnWeaponImpact = (UFunction*) UObject::GObjObjects()->Data[ 75362 ];

	ASFXWeapon_SMG_Hornet_execOnWeaponImpact_Parms OnWeaponImpact_Parms;
	OnWeaponImpact_Parms.Weapon = Weapon;
	memcpy ( &OnWeaponImpact_Parms.Impact, &Impact, 0x54 );

	this->ProcessEvent ( pFnOnWeaponImpact, &OnWeaponImpact_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponMod_AccuracyBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	USFXGameEffect_WeaponMod_AccuracyBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponMod_CrosshairModifier::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	USFXGameEffect_WeaponMod_CrosshairModifier_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponMod_DamageBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	USFXGameEffect_WeaponMod_DamageBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponMod_MagSizeBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	USFXGameEffect_WeaponMod_MagSizeBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponMod_NoAmmoUsedChance::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	USFXGameEffect_WeaponMod_NoAmmoUsedChance_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void Usfxgameeffect_weaponmod_weightbonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	Usfxgameeffect_weaponmod_weightbonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponMod_ZoomShakeModifier::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	USFXGameEffect_WeaponMod_ZoomShakeModifier_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_StandardSniperZoomReticle.ZoomChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nZoom                          ( CPF_Parm )

void USFXGUI_StandardSniperZoomReticle::eventZoomChanged ( int nZoom )
{
	static UFunction* pFnZoomChanged = NULL;

	if ( ! pFnZoomChanged )
		pFnZoomChanged = (UFunction*) UObject::GObjObjects()->Data[ 138844 ];

	USFXGUI_StandardSniperZoomReticle_eventZoomChanged_Parms ZoomChanged_Parms;
	ZoomChanged_Parms.nZoom = nZoom;

	this->ProcessEvent ( pFnZoomChanged, &ZoomChanged_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_StandardSniperZoomReticle.WeaponAmmoChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nAmmo                          ( CPF_Parm )

void USFXGUI_StandardSniperZoomReticle::eventWeaponAmmoChanged ( int nAmmo )
{
	static UFunction* pFnWeaponAmmoChanged = NULL;

	if ( ! pFnWeaponAmmoChanged )
		pFnWeaponAmmoChanged = (UFunction*) UObject::GObjObjects()->Data[ 138842 ];

	USFXGUI_StandardSniperZoomReticle_eventWeaponAmmoChanged_Parms WeaponAmmoChanged_Parms;
	WeaponAmmoChanged_Parms.nAmmo = nAmmo;

	this->ProcessEvent ( pFnWeaponAmmoChanged, &WeaponAmmoChanged_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_StandardSniperZoomReticle.DistanceToTargetChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDistance                      ( CPF_Parm )

void USFXGUI_StandardSniperZoomReticle::eventDistanceToTargetChanged ( float fDistance )
{
	static UFunction* pFnDistanceToTargetChanged = NULL;

	if ( ! pFnDistanceToTargetChanged )
		pFnDistanceToTargetChanged = (UFunction*) UObject::GObjObjects()->Data[ 138840 ];

	USFXGUI_StandardSniperZoomReticle_eventDistanceToTargetChanged_Parms DistanceToTargetChanged_Parms;
	DistanceToTargetChanged_Parms.fDistance = fDistance;

	this->ProcessEvent ( pFnDistanceToTargetChanged, &DistanceToTargetChanged_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_StandardSniperZoomReticle.OnReticleLoaded
// [0x00020002] 
// Parameters infos:

void USFXGUI_StandardSniperZoomReticle::OnReticleLoaded ( )
{
	static UFunction* pFnOnReticleLoaded = NULL;

	if ( ! pFnOnReticleLoaded )
		pFnOnReticleLoaded = (UFunction*) UObject::GObjObjects()->Data[ 138834 ];

	USFXGUI_StandardSniperZoomReticle_execOnReticleLoaded_Parms OnReticleLoaded_Parms;

	this->ProcessEvent ( pFnOnReticleLoaded, &OnReticleLoaded_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_StandardSniperZoomReticle.PerformReticleHide
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInstant                       ( CPF_Parm )

void USFXGUI_StandardSniperZoomReticle::eventPerformReticleHide ( unsigned long bInstant )
{
	static UFunction* pFnPerformReticleHide = NULL;

	if ( ! pFnPerformReticleHide )
		pFnPerformReticleHide = (UFunction*) UObject::GObjObjects()->Data[ 138832 ];

	USFXGUI_StandardSniperZoomReticle_eventPerformReticleHide_Parms PerformReticleHide_Parms;
	PerformReticleHide_Parms.bInstant = bInstant;

	this->ProcessEvent ( pFnPerformReticleHide, &PerformReticleHide_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_StandardSniperZoomReticle.PerformReticleShow
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInstant                       ( CPF_Parm )

void USFXGUI_StandardSniperZoomReticle::eventPerformReticleShow ( unsigned long bInstant )
{
	static UFunction* pFnPerformReticleShow = NULL;

	if ( ! pFnPerformReticleShow )
		pFnPerformReticleShow = (UFunction*) UObject::GObjObjects()->Data[ 138829 ];

	USFXGUI_StandardSniperZoomReticle_eventPerformReticleShow_Parms PerformReticleShow_Parms;
	PerformReticleShow_Parms.bInstant = bInstant;

	this->ProcessEvent ( pFnPerformReticleShow, &PerformReticleShow_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_StandardSniperZoomReticle.ZoomChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nZoom                          ( CPF_Parm )

void USFXGUI_AssaultRifleZoomReticle::eventZoomChanged ( int nZoom )
{
	static UFunction* pFnZoomChanged = NULL;

	if ( ! pFnZoomChanged )
		pFnZoomChanged = (UFunction*) UObject::GObjObjects()->Data[ 138844 ];

	USFXGUI_AssaultRifleZoomReticle_eventZoomChanged_Parms ZoomChanged_Parms;
	ZoomChanged_Parms.nZoom = nZoom;

	this->ProcessEvent ( pFnZoomChanged, &ZoomChanged_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_StandardSniperZoomReticle.WeaponAmmoChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nAmmo                          ( CPF_Parm )

void USFXGUI_AssaultRifleZoomReticle::eventWeaponAmmoChanged ( int nAmmo )
{
	static UFunction* pFnWeaponAmmoChanged = NULL;

	if ( ! pFnWeaponAmmoChanged )
		pFnWeaponAmmoChanged = (UFunction*) UObject::GObjObjects()->Data[ 138842 ];

	USFXGUI_AssaultRifleZoomReticle_eventWeaponAmmoChanged_Parms WeaponAmmoChanged_Parms;
	WeaponAmmoChanged_Parms.nAmmo = nAmmo;

	this->ProcessEvent ( pFnWeaponAmmoChanged, &WeaponAmmoChanged_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_StandardSniperZoomReticle.DistanceToTargetChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDistance                      ( CPF_Parm )

void USFXGUI_AssaultRifleZoomReticle::eventDistanceToTargetChanged ( float fDistance )
{
	static UFunction* pFnDistanceToTargetChanged = NULL;

	if ( ! pFnDistanceToTargetChanged )
		pFnDistanceToTargetChanged = (UFunction*) UObject::GObjObjects()->Data[ 138840 ];

	USFXGUI_AssaultRifleZoomReticle_eventDistanceToTargetChanged_Parms DistanceToTargetChanged_Parms;
	DistanceToTargetChanged_Parms.fDistance = fDistance;

	this->ProcessEvent ( pFnDistanceToTargetChanged, &DistanceToTargetChanged_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_StandardSniperZoomReticle.OnReticleLoaded
// [0x00020002] 
// Parameters infos:

void USFXGUI_AssaultRifleZoomReticle::OnReticleLoaded ( )
{
	static UFunction* pFnOnReticleLoaded = NULL;

	if ( ! pFnOnReticleLoaded )
		pFnOnReticleLoaded = (UFunction*) UObject::GObjObjects()->Data[ 138834 ];

	USFXGUI_AssaultRifleZoomReticle_execOnReticleLoaded_Parms OnReticleLoaded_Parms;

	this->ProcessEvent ( pFnOnReticleLoaded, &OnReticleLoaded_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_StandardSniperZoomReticle.PerformReticleHide
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInstant                       ( CPF_Parm )

void USFXGUI_AssaultRifleZoomReticle::eventPerformReticleHide ( unsigned long bInstant )
{
	static UFunction* pFnPerformReticleHide = NULL;

	if ( ! pFnPerformReticleHide )
		pFnPerformReticleHide = (UFunction*) UObject::GObjObjects()->Data[ 138832 ];

	USFXGUI_AssaultRifleZoomReticle_eventPerformReticleHide_Parms PerformReticleHide_Parms;
	PerformReticleHide_Parms.bInstant = bInstant;

	this->ProcessEvent ( pFnPerformReticleHide, &PerformReticleHide_Parms, NULL );
};

// Function sfxgamecontent.SFXGUI_StandardSniperZoomReticle.PerformReticleShow
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInstant                       ( CPF_Parm )

void USFXGUI_AssaultRifleZoomReticle::eventPerformReticleShow ( unsigned long bInstant )
{
	static UFunction* pFnPerformReticleShow = NULL;

	if ( ! pFnPerformReticleShow )
		pFnPerformReticleShow = (UFunction*) UObject::GObjObjects()->Data[ 138829 ];

	USFXGUI_AssaultRifleZoomReticle_eventPerformReticleShow_Parms PerformReticleShow_Parms;
	PerformReticleShow_Parms.bInstant = bInstant;

	this->ProcessEvent ( pFnPerformReticleShow, &PerformReticleShow_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.GetGameEffectClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   EffectClassName                ( CPF_Parm )

class UClass* USFXWeaponMod_SMGAccuracy::GetGameEffectClass ( struct FName EffectClassName )
{
	static UFunction* pFnGetGameEffectClass = NULL;

	if ( ! pFnGetGameEffectClass )
		pFnGetGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 72777 ];

	USFXWeaponMod_SMGAccuracy_execGetGameEffectClass_Parms GetGameEffectClass_Parms;
	memcpy ( &GetGameEffectClass_Parms.EffectClassName, &EffectClassName, 0x8 );

	this->ProcessEvent ( pFnGetGameEffectClass, &GetGameEffectClass_Parms, NULL );

	return GetGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetGameEffectDisplayValue
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            GameEffectIdx                  ( CPF_Parm )

float USFXWeaponMod_SMGAccuracy::GetGameEffectDisplayValue ( int GameEffectIdx )
{
	static UFunction* pFnGetGameEffectDisplayValue = NULL;

	if ( ! pFnGetGameEffectDisplayValue )
		pFnGetGameEffectDisplayValue = (UFunction*) UObject::GObjObjects()->Data[ 72773 ];

	USFXWeaponMod_SMGAccuracy_execGetGameEffectDisplayValue_Parms GetGameEffectDisplayValue_Parms;
	GetGameEffectDisplayValue_Parms.GameEffectIdx = GameEffectIdx;

	this->ProcessEvent ( pFnGetGameEffectDisplayValue, &GetGameEffectDisplayValue_Parms, NULL );

	return GetGameEffectDisplayValue_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.OnVisibilityChanged
// [0x00020000] 
// Parameters infos:
// unsigned long                  bHidden                        ( CPF_Parm )

void USFXWeaponMod_SMGAccuracy::OnVisibilityChanged ( unsigned long bHidden )
{
	static UFunction* pFnOnVisibilityChanged = NULL;

	if ( ! pFnOnVisibilityChanged )
		pFnOnVisibilityChanged = (UFunction*) UObject::GObjObjects()->Data[ 72771 ];

	USFXWeaponMod_SMGAccuracy_execOnVisibilityChanged_Parms OnVisibilityChanged_Parms;
	OnVisibilityChanged_Parms.bHidden = bHidden;

	this->ProcessEvent ( pFnOnVisibilityChanged, &OnVisibilityChanged_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.RemoveEffects
// [0x00020002] 
// Parameters infos:

void USFXWeaponMod_SMGAccuracy::RemoveEffects ( )
{
	static UFunction* pFnRemoveEffects = NULL;

	if ( ! pFnRemoveEffects )
		pFnRemoveEffects = (UFunction*) UObject::GObjObjects()->Data[ 72770 ];

	USFXWeaponMod_SMGAccuracy_execRemoveEffects_Parms RemoveEffects_Parms;

	this->ProcessEvent ( pFnRemoveEffects, &RemoveEffects_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.ApplyEffects
// [0x00020002] 
// Parameters infos:

void USFXWeaponMod_SMGAccuracy::ApplyEffects ( )
{
	static UFunction* pFnApplyEffects = NULL;

	if ( ! pFnApplyEffects )
		pFnApplyEffects = (UFunction*) UObject::GObjObjects()->Data[ 72768 ];

	USFXWeaponMod_SMGAccuracy_execApplyEffects_Parms ApplyEffects_Parms;

	this->ProcessEvent ( pFnApplyEffects, &ApplyEffects_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.Upgrade
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Instigator                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoNotification                ( CPF_OptionalParm | CPF_Parm )

bool USFXWeaponMod_SMGAccuracy::Upgrade ( class ABioPawn* Instigator, unsigned long bNoNotification )
{
	static UFunction* pFnUpgrade = NULL;

	if ( ! pFnUpgrade )
		pFnUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 72757 ];

	USFXWeaponMod_SMGAccuracy_execUpgrade_Parms Upgrade_Parms;
	Upgrade_Parms.Instigator = Instigator;
	Upgrade_Parms.bNoNotification = bNoNotification;

	this->ProcessEvent ( pFnUpgrade, &Upgrade_Parms, NULL );

	return Upgrade_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.LoadModClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ModClassName                   ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXWeaponMod_SMGAccuracy::LoadModClass ( struct FString ModClassName )
{
	static UFunction* pFnLoadModClass = NULL;

	if ( ! pFnLoadModClass )
		pFnLoadModClass = (UFunction*) UObject::GObjObjects()->Data[ 43499 ];

	USFXWeaponMod_SMGAccuracy_execLoadModClass_Parms LoadModClass_Parms;
	memcpy ( &LoadModClass_Parms.ModClassName, &ModClassName, 0xC );

	this->ProcessEvent ( pFnLoadModClass, &LoadModClass_Parms, NULL );

	return LoadModClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetModDescription
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )

struct FString USFXWeaponMod_SMGAccuracy::GetModDescription ( int nLevel )
{
	static UFunction* pFnGetModDescription = NULL;

	if ( ! pFnGetModDescription )
		pFnGetModDescription = (UFunction*) UObject::GObjObjects()->Data[ 72748 ];

	USFXWeaponMod_SMGAccuracy_execGetModDescription_Parms GetModDescription_Parms;
	GetModDescription_Parms.nLevel = nLevel;

	this->ProcessEvent ( pFnGetModDescription, &GetModDescription_Parms, NULL );

	return GetModDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetModName
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )
// unsigned long                  bShortForm                     ( CPF_OptionalParm | CPF_Parm )

struct FString USFXWeaponMod_SMGAccuracy::GetModName ( int nLevel, unsigned long bShortForm )
{
	static UFunction* pFnGetModName = NULL;

	if ( ! pFnGetModName )
		pFnGetModName = (UFunction*) UObject::GObjObjects()->Data[ 45583 ];

	USFXWeaponMod_SMGAccuracy_execGetModName_Parms GetModName_Parms;
	GetModName_Parms.nLevel = nLevel;
	GetModName_Parms.bShortForm = bShortForm;

	this->ProcessEvent ( pFnGetModName, &GetModName_Parms, NULL );

	return GetModName_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.IsUnlocked
// [0x00422002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nUnlockLevel                   ( CPF_Parm | CPF_OutParm )

bool USFXWeaponMod_SMGAccuracy::IsUnlocked ( int* nUnlockLevel )
{
	static UFunction* pFnIsUnlocked = NULL;

	if ( ! pFnIsUnlocked )
		pFnIsUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 43501 ];

	USFXWeaponMod_SMGAccuracy_execIsUnlocked_Parms IsUnlocked_Parms;

	this->ProcessEvent ( pFnIsUnlocked, &IsUnlocked_Parms, NULL );

	if ( nUnlockLevel )
		*nUnlockLevel = IsUnlocked_Parms.nUnlockLevel;

	return IsUnlocked_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetMaxRank
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWeaponMod_SMGAccuracy::GetMaxRank ( )
{
	static UFunction* pFnGetMaxRank = NULL;

	if ( ! pFnGetMaxRank )
		pFnGetMaxRank = (UFunction*) UObject::GObjObjects()->Data[ 72736 ];

	USFXWeaponMod_SMGAccuracy_execGetMaxRank_Parms GetMaxRank_Parms;

	this->ProcessEvent ( pFnGetMaxRank, &GetMaxRank_Parms, NULL );

	return GetMaxRank_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetGameEffectClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   EffectClassName                ( CPF_Parm )

class UClass* USFXWeaponMod_SMGConstraintDamage::GetGameEffectClass ( struct FName EffectClassName )
{
	static UFunction* pFnGetGameEffectClass = NULL;

	if ( ! pFnGetGameEffectClass )
		pFnGetGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 72777 ];

	USFXWeaponMod_SMGConstraintDamage_execGetGameEffectClass_Parms GetGameEffectClass_Parms;
	memcpy ( &GetGameEffectClass_Parms.EffectClassName, &EffectClassName, 0x8 );

	this->ProcessEvent ( pFnGetGameEffectClass, &GetGameEffectClass_Parms, NULL );

	return GetGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetGameEffectDisplayValue
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            GameEffectIdx                  ( CPF_Parm )

float USFXWeaponMod_SMGConstraintDamage::GetGameEffectDisplayValue ( int GameEffectIdx )
{
	static UFunction* pFnGetGameEffectDisplayValue = NULL;

	if ( ! pFnGetGameEffectDisplayValue )
		pFnGetGameEffectDisplayValue = (UFunction*) UObject::GObjObjects()->Data[ 72773 ];

	USFXWeaponMod_SMGConstraintDamage_execGetGameEffectDisplayValue_Parms GetGameEffectDisplayValue_Parms;
	GetGameEffectDisplayValue_Parms.GameEffectIdx = GameEffectIdx;

	this->ProcessEvent ( pFnGetGameEffectDisplayValue, &GetGameEffectDisplayValue_Parms, NULL );

	return GetGameEffectDisplayValue_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.OnVisibilityChanged
// [0x00020000] 
// Parameters infos:
// unsigned long                  bHidden                        ( CPF_Parm )

void USFXWeaponMod_SMGConstraintDamage::OnVisibilityChanged ( unsigned long bHidden )
{
	static UFunction* pFnOnVisibilityChanged = NULL;

	if ( ! pFnOnVisibilityChanged )
		pFnOnVisibilityChanged = (UFunction*) UObject::GObjObjects()->Data[ 72771 ];

	USFXWeaponMod_SMGConstraintDamage_execOnVisibilityChanged_Parms OnVisibilityChanged_Parms;
	OnVisibilityChanged_Parms.bHidden = bHidden;

	this->ProcessEvent ( pFnOnVisibilityChanged, &OnVisibilityChanged_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.RemoveEffects
// [0x00020002] 
// Parameters infos:

void USFXWeaponMod_SMGConstraintDamage::RemoveEffects ( )
{
	static UFunction* pFnRemoveEffects = NULL;

	if ( ! pFnRemoveEffects )
		pFnRemoveEffects = (UFunction*) UObject::GObjObjects()->Data[ 72770 ];

	USFXWeaponMod_SMGConstraintDamage_execRemoveEffects_Parms RemoveEffects_Parms;

	this->ProcessEvent ( pFnRemoveEffects, &RemoveEffects_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.ApplyEffects
// [0x00020002] 
// Parameters infos:

void USFXWeaponMod_SMGConstraintDamage::ApplyEffects ( )
{
	static UFunction* pFnApplyEffects = NULL;

	if ( ! pFnApplyEffects )
		pFnApplyEffects = (UFunction*) UObject::GObjObjects()->Data[ 72768 ];

	USFXWeaponMod_SMGConstraintDamage_execApplyEffects_Parms ApplyEffects_Parms;

	this->ProcessEvent ( pFnApplyEffects, &ApplyEffects_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.Upgrade
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Instigator                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoNotification                ( CPF_OptionalParm | CPF_Parm )

bool USFXWeaponMod_SMGConstraintDamage::Upgrade ( class ABioPawn* Instigator, unsigned long bNoNotification )
{
	static UFunction* pFnUpgrade = NULL;

	if ( ! pFnUpgrade )
		pFnUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 72757 ];

	USFXWeaponMod_SMGConstraintDamage_execUpgrade_Parms Upgrade_Parms;
	Upgrade_Parms.Instigator = Instigator;
	Upgrade_Parms.bNoNotification = bNoNotification;

	this->ProcessEvent ( pFnUpgrade, &Upgrade_Parms, NULL );

	return Upgrade_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.LoadModClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ModClassName                   ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXWeaponMod_SMGConstraintDamage::LoadModClass ( struct FString ModClassName )
{
	static UFunction* pFnLoadModClass = NULL;

	if ( ! pFnLoadModClass )
		pFnLoadModClass = (UFunction*) UObject::GObjObjects()->Data[ 43499 ];

	USFXWeaponMod_SMGConstraintDamage_execLoadModClass_Parms LoadModClass_Parms;
	memcpy ( &LoadModClass_Parms.ModClassName, &ModClassName, 0xC );

	this->ProcessEvent ( pFnLoadModClass, &LoadModClass_Parms, NULL );

	return LoadModClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetModDescription
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )

struct FString USFXWeaponMod_SMGConstraintDamage::GetModDescription ( int nLevel )
{
	static UFunction* pFnGetModDescription = NULL;

	if ( ! pFnGetModDescription )
		pFnGetModDescription = (UFunction*) UObject::GObjObjects()->Data[ 72748 ];

	USFXWeaponMod_SMGConstraintDamage_execGetModDescription_Parms GetModDescription_Parms;
	GetModDescription_Parms.nLevel = nLevel;

	this->ProcessEvent ( pFnGetModDescription, &GetModDescription_Parms, NULL );

	return GetModDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetModName
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )
// unsigned long                  bShortForm                     ( CPF_OptionalParm | CPF_Parm )

struct FString USFXWeaponMod_SMGConstraintDamage::GetModName ( int nLevel, unsigned long bShortForm )
{
	static UFunction* pFnGetModName = NULL;

	if ( ! pFnGetModName )
		pFnGetModName = (UFunction*) UObject::GObjObjects()->Data[ 45583 ];

	USFXWeaponMod_SMGConstraintDamage_execGetModName_Parms GetModName_Parms;
	GetModName_Parms.nLevel = nLevel;
	GetModName_Parms.bShortForm = bShortForm;

	this->ProcessEvent ( pFnGetModName, &GetModName_Parms, NULL );

	return GetModName_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.IsUnlocked
// [0x00422002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nUnlockLevel                   ( CPF_Parm | CPF_OutParm )

bool USFXWeaponMod_SMGConstraintDamage::IsUnlocked ( int* nUnlockLevel )
{
	static UFunction* pFnIsUnlocked = NULL;

	if ( ! pFnIsUnlocked )
		pFnIsUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 43501 ];

	USFXWeaponMod_SMGConstraintDamage_execIsUnlocked_Parms IsUnlocked_Parms;

	this->ProcessEvent ( pFnIsUnlocked, &IsUnlocked_Parms, NULL );

	if ( nUnlockLevel )
		*nUnlockLevel = IsUnlocked_Parms.nUnlockLevel;

	return IsUnlocked_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetMaxRank
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWeaponMod_SMGConstraintDamage::GetMaxRank ( )
{
	static UFunction* pFnGetMaxRank = NULL;

	if ( ! pFnGetMaxRank )
		pFnGetMaxRank = (UFunction*) UObject::GObjObjects()->Data[ 72736 ];

	USFXWeaponMod_SMGConstraintDamage_execGetMaxRank_Parms GetMaxRank_Parms;

	this->ProcessEvent ( pFnGetMaxRank, &GetMaxRank_Parms, NULL );

	return GetMaxRank_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetGameEffectClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   EffectClassName                ( CPF_Parm )

class UClass* USFXWeaponMod_SMGDamage::GetGameEffectClass ( struct FName EffectClassName )
{
	static UFunction* pFnGetGameEffectClass = NULL;

	if ( ! pFnGetGameEffectClass )
		pFnGetGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 72777 ];

	USFXWeaponMod_SMGDamage_execGetGameEffectClass_Parms GetGameEffectClass_Parms;
	memcpy ( &GetGameEffectClass_Parms.EffectClassName, &EffectClassName, 0x8 );

	this->ProcessEvent ( pFnGetGameEffectClass, &GetGameEffectClass_Parms, NULL );

	return GetGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetGameEffectDisplayValue
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            GameEffectIdx                  ( CPF_Parm )

float USFXWeaponMod_SMGDamage::GetGameEffectDisplayValue ( int GameEffectIdx )
{
	static UFunction* pFnGetGameEffectDisplayValue = NULL;

	if ( ! pFnGetGameEffectDisplayValue )
		pFnGetGameEffectDisplayValue = (UFunction*) UObject::GObjObjects()->Data[ 72773 ];

	USFXWeaponMod_SMGDamage_execGetGameEffectDisplayValue_Parms GetGameEffectDisplayValue_Parms;
	GetGameEffectDisplayValue_Parms.GameEffectIdx = GameEffectIdx;

	this->ProcessEvent ( pFnGetGameEffectDisplayValue, &GetGameEffectDisplayValue_Parms, NULL );

	return GetGameEffectDisplayValue_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.OnVisibilityChanged
// [0x00020000] 
// Parameters infos:
// unsigned long                  bHidden                        ( CPF_Parm )

void USFXWeaponMod_SMGDamage::OnVisibilityChanged ( unsigned long bHidden )
{
	static UFunction* pFnOnVisibilityChanged = NULL;

	if ( ! pFnOnVisibilityChanged )
		pFnOnVisibilityChanged = (UFunction*) UObject::GObjObjects()->Data[ 72771 ];

	USFXWeaponMod_SMGDamage_execOnVisibilityChanged_Parms OnVisibilityChanged_Parms;
	OnVisibilityChanged_Parms.bHidden = bHidden;

	this->ProcessEvent ( pFnOnVisibilityChanged, &OnVisibilityChanged_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.RemoveEffects
// [0x00020002] 
// Parameters infos:

void USFXWeaponMod_SMGDamage::RemoveEffects ( )
{
	static UFunction* pFnRemoveEffects = NULL;

	if ( ! pFnRemoveEffects )
		pFnRemoveEffects = (UFunction*) UObject::GObjObjects()->Data[ 72770 ];

	USFXWeaponMod_SMGDamage_execRemoveEffects_Parms RemoveEffects_Parms;

	this->ProcessEvent ( pFnRemoveEffects, &RemoveEffects_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.ApplyEffects
// [0x00020002] 
// Parameters infos:

void USFXWeaponMod_SMGDamage::ApplyEffects ( )
{
	static UFunction* pFnApplyEffects = NULL;

	if ( ! pFnApplyEffects )
		pFnApplyEffects = (UFunction*) UObject::GObjObjects()->Data[ 72768 ];

	USFXWeaponMod_SMGDamage_execApplyEffects_Parms ApplyEffects_Parms;

	this->ProcessEvent ( pFnApplyEffects, &ApplyEffects_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.Upgrade
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Instigator                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoNotification                ( CPF_OptionalParm | CPF_Parm )

bool USFXWeaponMod_SMGDamage::Upgrade ( class ABioPawn* Instigator, unsigned long bNoNotification )
{
	static UFunction* pFnUpgrade = NULL;

	if ( ! pFnUpgrade )
		pFnUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 72757 ];

	USFXWeaponMod_SMGDamage_execUpgrade_Parms Upgrade_Parms;
	Upgrade_Parms.Instigator = Instigator;
	Upgrade_Parms.bNoNotification = bNoNotification;

	this->ProcessEvent ( pFnUpgrade, &Upgrade_Parms, NULL );

	return Upgrade_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.LoadModClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ModClassName                   ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXWeaponMod_SMGDamage::LoadModClass ( struct FString ModClassName )
{
	static UFunction* pFnLoadModClass = NULL;

	if ( ! pFnLoadModClass )
		pFnLoadModClass = (UFunction*) UObject::GObjObjects()->Data[ 43499 ];

	USFXWeaponMod_SMGDamage_execLoadModClass_Parms LoadModClass_Parms;
	memcpy ( &LoadModClass_Parms.ModClassName, &ModClassName, 0xC );

	this->ProcessEvent ( pFnLoadModClass, &LoadModClass_Parms, NULL );

	return LoadModClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetModDescription
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )

struct FString USFXWeaponMod_SMGDamage::GetModDescription ( int nLevel )
{
	static UFunction* pFnGetModDescription = NULL;

	if ( ! pFnGetModDescription )
		pFnGetModDescription = (UFunction*) UObject::GObjObjects()->Data[ 72748 ];

	USFXWeaponMod_SMGDamage_execGetModDescription_Parms GetModDescription_Parms;
	GetModDescription_Parms.nLevel = nLevel;

	this->ProcessEvent ( pFnGetModDescription, &GetModDescription_Parms, NULL );

	return GetModDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetModName
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )
// unsigned long                  bShortForm                     ( CPF_OptionalParm | CPF_Parm )

struct FString USFXWeaponMod_SMGDamage::GetModName ( int nLevel, unsigned long bShortForm )
{
	static UFunction* pFnGetModName = NULL;

	if ( ! pFnGetModName )
		pFnGetModName = (UFunction*) UObject::GObjObjects()->Data[ 45583 ];

	USFXWeaponMod_SMGDamage_execGetModName_Parms GetModName_Parms;
	GetModName_Parms.nLevel = nLevel;
	GetModName_Parms.bShortForm = bShortForm;

	this->ProcessEvent ( pFnGetModName, &GetModName_Parms, NULL );

	return GetModName_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.IsUnlocked
// [0x00422002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nUnlockLevel                   ( CPF_Parm | CPF_OutParm )

bool USFXWeaponMod_SMGDamage::IsUnlocked ( int* nUnlockLevel )
{
	static UFunction* pFnIsUnlocked = NULL;

	if ( ! pFnIsUnlocked )
		pFnIsUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 43501 ];

	USFXWeaponMod_SMGDamage_execIsUnlocked_Parms IsUnlocked_Parms;

	this->ProcessEvent ( pFnIsUnlocked, &IsUnlocked_Parms, NULL );

	if ( nUnlockLevel )
		*nUnlockLevel = IsUnlocked_Parms.nUnlockLevel;

	return IsUnlocked_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetMaxRank
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWeaponMod_SMGDamage::GetMaxRank ( )
{
	static UFunction* pFnGetMaxRank = NULL;

	if ( ! pFnGetMaxRank )
		pFnGetMaxRank = (UFunction*) UObject::GObjObjects()->Data[ 72736 ];

	USFXWeaponMod_SMGDamage_execGetMaxRank_Parms GetMaxRank_Parms;

	this->ProcessEvent ( pFnGetMaxRank, &GetMaxRank_Parms, NULL );

	return GetMaxRank_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetGameEffectClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   EffectClassName                ( CPF_Parm )

class UClass* USFXWeaponMod_SMGMagSize::GetGameEffectClass ( struct FName EffectClassName )
{
	static UFunction* pFnGetGameEffectClass = NULL;

	if ( ! pFnGetGameEffectClass )
		pFnGetGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 72777 ];

	USFXWeaponMod_SMGMagSize_execGetGameEffectClass_Parms GetGameEffectClass_Parms;
	memcpy ( &GetGameEffectClass_Parms.EffectClassName, &EffectClassName, 0x8 );

	this->ProcessEvent ( pFnGetGameEffectClass, &GetGameEffectClass_Parms, NULL );

	return GetGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetGameEffectDisplayValue
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            GameEffectIdx                  ( CPF_Parm )

float USFXWeaponMod_SMGMagSize::GetGameEffectDisplayValue ( int GameEffectIdx )
{
	static UFunction* pFnGetGameEffectDisplayValue = NULL;

	if ( ! pFnGetGameEffectDisplayValue )
		pFnGetGameEffectDisplayValue = (UFunction*) UObject::GObjObjects()->Data[ 72773 ];

	USFXWeaponMod_SMGMagSize_execGetGameEffectDisplayValue_Parms GetGameEffectDisplayValue_Parms;
	GetGameEffectDisplayValue_Parms.GameEffectIdx = GameEffectIdx;

	this->ProcessEvent ( pFnGetGameEffectDisplayValue, &GetGameEffectDisplayValue_Parms, NULL );

	return GetGameEffectDisplayValue_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.OnVisibilityChanged
// [0x00020000] 
// Parameters infos:
// unsigned long                  bHidden                        ( CPF_Parm )

void USFXWeaponMod_SMGMagSize::OnVisibilityChanged ( unsigned long bHidden )
{
	static UFunction* pFnOnVisibilityChanged = NULL;

	if ( ! pFnOnVisibilityChanged )
		pFnOnVisibilityChanged = (UFunction*) UObject::GObjObjects()->Data[ 72771 ];

	USFXWeaponMod_SMGMagSize_execOnVisibilityChanged_Parms OnVisibilityChanged_Parms;
	OnVisibilityChanged_Parms.bHidden = bHidden;

	this->ProcessEvent ( pFnOnVisibilityChanged, &OnVisibilityChanged_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.RemoveEffects
// [0x00020002] 
// Parameters infos:

void USFXWeaponMod_SMGMagSize::RemoveEffects ( )
{
	static UFunction* pFnRemoveEffects = NULL;

	if ( ! pFnRemoveEffects )
		pFnRemoveEffects = (UFunction*) UObject::GObjObjects()->Data[ 72770 ];

	USFXWeaponMod_SMGMagSize_execRemoveEffects_Parms RemoveEffects_Parms;

	this->ProcessEvent ( pFnRemoveEffects, &RemoveEffects_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.ApplyEffects
// [0x00020002] 
// Parameters infos:

void USFXWeaponMod_SMGMagSize::ApplyEffects ( )
{
	static UFunction* pFnApplyEffects = NULL;

	if ( ! pFnApplyEffects )
		pFnApplyEffects = (UFunction*) UObject::GObjObjects()->Data[ 72768 ];

	USFXWeaponMod_SMGMagSize_execApplyEffects_Parms ApplyEffects_Parms;

	this->ProcessEvent ( pFnApplyEffects, &ApplyEffects_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.Upgrade
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Instigator                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoNotification                ( CPF_OptionalParm | CPF_Parm )

bool USFXWeaponMod_SMGMagSize::Upgrade ( class ABioPawn* Instigator, unsigned long bNoNotification )
{
	static UFunction* pFnUpgrade = NULL;

	if ( ! pFnUpgrade )
		pFnUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 72757 ];

	USFXWeaponMod_SMGMagSize_execUpgrade_Parms Upgrade_Parms;
	Upgrade_Parms.Instigator = Instigator;
	Upgrade_Parms.bNoNotification = bNoNotification;

	this->ProcessEvent ( pFnUpgrade, &Upgrade_Parms, NULL );

	return Upgrade_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.LoadModClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ModClassName                   ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXWeaponMod_SMGMagSize::LoadModClass ( struct FString ModClassName )
{
	static UFunction* pFnLoadModClass = NULL;

	if ( ! pFnLoadModClass )
		pFnLoadModClass = (UFunction*) UObject::GObjObjects()->Data[ 43499 ];

	USFXWeaponMod_SMGMagSize_execLoadModClass_Parms LoadModClass_Parms;
	memcpy ( &LoadModClass_Parms.ModClassName, &ModClassName, 0xC );

	this->ProcessEvent ( pFnLoadModClass, &LoadModClass_Parms, NULL );

	return LoadModClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetModDescription
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )

struct FString USFXWeaponMod_SMGMagSize::GetModDescription ( int nLevel )
{
	static UFunction* pFnGetModDescription = NULL;

	if ( ! pFnGetModDescription )
		pFnGetModDescription = (UFunction*) UObject::GObjObjects()->Data[ 72748 ];

	USFXWeaponMod_SMGMagSize_execGetModDescription_Parms GetModDescription_Parms;
	GetModDescription_Parms.nLevel = nLevel;

	this->ProcessEvent ( pFnGetModDescription, &GetModDescription_Parms, NULL );

	return GetModDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetModName
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )
// unsigned long                  bShortForm                     ( CPF_OptionalParm | CPF_Parm )

struct FString USFXWeaponMod_SMGMagSize::GetModName ( int nLevel, unsigned long bShortForm )
{
	static UFunction* pFnGetModName = NULL;

	if ( ! pFnGetModName )
		pFnGetModName = (UFunction*) UObject::GObjObjects()->Data[ 45583 ];

	USFXWeaponMod_SMGMagSize_execGetModName_Parms GetModName_Parms;
	GetModName_Parms.nLevel = nLevel;
	GetModName_Parms.bShortForm = bShortForm;

	this->ProcessEvent ( pFnGetModName, &GetModName_Parms, NULL );

	return GetModName_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.IsUnlocked
// [0x00422002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nUnlockLevel                   ( CPF_Parm | CPF_OutParm )

bool USFXWeaponMod_SMGMagSize::IsUnlocked ( int* nUnlockLevel )
{
	static UFunction* pFnIsUnlocked = NULL;

	if ( ! pFnIsUnlocked )
		pFnIsUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 43501 ];

	USFXWeaponMod_SMGMagSize_execIsUnlocked_Parms IsUnlocked_Parms;

	this->ProcessEvent ( pFnIsUnlocked, &IsUnlocked_Parms, NULL );

	if ( nUnlockLevel )
		*nUnlockLevel = IsUnlocked_Parms.nUnlockLevel;

	return IsUnlocked_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetMaxRank
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWeaponMod_SMGMagSize::GetMaxRank ( )
{
	static UFunction* pFnGetMaxRank = NULL;

	if ( ! pFnGetMaxRank )
		pFnGetMaxRank = (UFunction*) UObject::GObjObjects()->Data[ 72736 ];

	USFXWeaponMod_SMGMagSize_execGetMaxRank_Parms GetMaxRank_Parms;

	this->ProcessEvent ( pFnGetMaxRank, &GetMaxRank_Parms, NULL );

	return GetMaxRank_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetGameEffectClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   EffectClassName                ( CPF_Parm )

class UClass* USFXWeaponMod_SMGStability::GetGameEffectClass ( struct FName EffectClassName )
{
	static UFunction* pFnGetGameEffectClass = NULL;

	if ( ! pFnGetGameEffectClass )
		pFnGetGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 72777 ];

	USFXWeaponMod_SMGStability_execGetGameEffectClass_Parms GetGameEffectClass_Parms;
	memcpy ( &GetGameEffectClass_Parms.EffectClassName, &EffectClassName, 0x8 );

	this->ProcessEvent ( pFnGetGameEffectClass, &GetGameEffectClass_Parms, NULL );

	return GetGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetGameEffectDisplayValue
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            GameEffectIdx                  ( CPF_Parm )

float USFXWeaponMod_SMGStability::GetGameEffectDisplayValue ( int GameEffectIdx )
{
	static UFunction* pFnGetGameEffectDisplayValue = NULL;

	if ( ! pFnGetGameEffectDisplayValue )
		pFnGetGameEffectDisplayValue = (UFunction*) UObject::GObjObjects()->Data[ 72773 ];

	USFXWeaponMod_SMGStability_execGetGameEffectDisplayValue_Parms GetGameEffectDisplayValue_Parms;
	GetGameEffectDisplayValue_Parms.GameEffectIdx = GameEffectIdx;

	this->ProcessEvent ( pFnGetGameEffectDisplayValue, &GetGameEffectDisplayValue_Parms, NULL );

	return GetGameEffectDisplayValue_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.OnVisibilityChanged
// [0x00020000] 
// Parameters infos:
// unsigned long                  bHidden                        ( CPF_Parm )

void USFXWeaponMod_SMGStability::OnVisibilityChanged ( unsigned long bHidden )
{
	static UFunction* pFnOnVisibilityChanged = NULL;

	if ( ! pFnOnVisibilityChanged )
		pFnOnVisibilityChanged = (UFunction*) UObject::GObjObjects()->Data[ 72771 ];

	USFXWeaponMod_SMGStability_execOnVisibilityChanged_Parms OnVisibilityChanged_Parms;
	OnVisibilityChanged_Parms.bHidden = bHidden;

	this->ProcessEvent ( pFnOnVisibilityChanged, &OnVisibilityChanged_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.RemoveEffects
// [0x00020002] 
// Parameters infos:

void USFXWeaponMod_SMGStability::RemoveEffects ( )
{
	static UFunction* pFnRemoveEffects = NULL;

	if ( ! pFnRemoveEffects )
		pFnRemoveEffects = (UFunction*) UObject::GObjObjects()->Data[ 72770 ];

	USFXWeaponMod_SMGStability_execRemoveEffects_Parms RemoveEffects_Parms;

	this->ProcessEvent ( pFnRemoveEffects, &RemoveEffects_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.ApplyEffects
// [0x00020002] 
// Parameters infos:

void USFXWeaponMod_SMGStability::ApplyEffects ( )
{
	static UFunction* pFnApplyEffects = NULL;

	if ( ! pFnApplyEffects )
		pFnApplyEffects = (UFunction*) UObject::GObjObjects()->Data[ 72768 ];

	USFXWeaponMod_SMGStability_execApplyEffects_Parms ApplyEffects_Parms;

	this->ProcessEvent ( pFnApplyEffects, &ApplyEffects_Parms, NULL );
};

// Function SFXGame.SFXWeaponMod.Upgrade
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Instigator                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoNotification                ( CPF_OptionalParm | CPF_Parm )

bool USFXWeaponMod_SMGStability::Upgrade ( class ABioPawn* Instigator, unsigned long bNoNotification )
{
	static UFunction* pFnUpgrade = NULL;

	if ( ! pFnUpgrade )
		pFnUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 72757 ];

	USFXWeaponMod_SMGStability_execUpgrade_Parms Upgrade_Parms;
	Upgrade_Parms.Instigator = Instigator;
	Upgrade_Parms.bNoNotification = bNoNotification;

	this->ProcessEvent ( pFnUpgrade, &Upgrade_Parms, NULL );

	return Upgrade_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.LoadModClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ModClassName                   ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXWeaponMod_SMGStability::LoadModClass ( struct FString ModClassName )
{
	static UFunction* pFnLoadModClass = NULL;

	if ( ! pFnLoadModClass )
		pFnLoadModClass = (UFunction*) UObject::GObjObjects()->Data[ 43499 ];

	USFXWeaponMod_SMGStability_execLoadModClass_Parms LoadModClass_Parms;
	memcpy ( &LoadModClass_Parms.ModClassName, &ModClassName, 0xC );

	this->ProcessEvent ( pFnLoadModClass, &LoadModClass_Parms, NULL );

	return LoadModClass_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetModDescription
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )

struct FString USFXWeaponMod_SMGStability::GetModDescription ( int nLevel )
{
	static UFunction* pFnGetModDescription = NULL;

	if ( ! pFnGetModDescription )
		pFnGetModDescription = (UFunction*) UObject::GObjObjects()->Data[ 72748 ];

	USFXWeaponMod_SMGStability_execGetModDescription_Parms GetModDescription_Parms;
	GetModDescription_Parms.nLevel = nLevel;

	this->ProcessEvent ( pFnGetModDescription, &GetModDescription_Parms, NULL );

	return GetModDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetModName
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )
// unsigned long                  bShortForm                     ( CPF_OptionalParm | CPF_Parm )

struct FString USFXWeaponMod_SMGStability::GetModName ( int nLevel, unsigned long bShortForm )
{
	static UFunction* pFnGetModName = NULL;

	if ( ! pFnGetModName )
		pFnGetModName = (UFunction*) UObject::GObjObjects()->Data[ 45583 ];

	USFXWeaponMod_SMGStability_execGetModName_Parms GetModName_Parms;
	GetModName_Parms.nLevel = nLevel;
	GetModName_Parms.bShortForm = bShortForm;

	this->ProcessEvent ( pFnGetModName, &GetModName_Parms, NULL );

	return GetModName_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.IsUnlocked
// [0x00422002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nUnlockLevel                   ( CPF_Parm | CPF_OutParm )

bool USFXWeaponMod_SMGStability::IsUnlocked ( int* nUnlockLevel )
{
	static UFunction* pFnIsUnlocked = NULL;

	if ( ! pFnIsUnlocked )
		pFnIsUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 43501 ];

	USFXWeaponMod_SMGStability_execIsUnlocked_Parms IsUnlocked_Parms;

	this->ProcessEvent ( pFnIsUnlocked, &IsUnlocked_Parms, NULL );

	if ( nUnlockLevel )
		*nUnlockLevel = IsUnlocked_Parms.nUnlockLevel;

	return IsUnlocked_Parms.ReturnValue;
};

// Function SFXGame.SFXWeaponMod.GetMaxRank
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXWeaponMod_SMGStability::GetMaxRank ( )
{
	static UFunction* pFnGetMaxRank = NULL;

	if ( ! pFnGetMaxRank )
		pFnGetMaxRank = (UFunction*) UObject::GObjObjects()->Data[ 72736 ];

	USFXWeaponMod_SMGStability_execGetMaxRank_Parms GetMaxRank_Parms;

	this->ProcessEvent ( pFnGetMaxRank, &GetMaxRank_Parms, NULL );

	return GetMaxRank_Parms.ReturnValue;
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponMod_ArmorPiercingBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	USFXGameEffect_WeaponMod_ArmorPiercingBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponMod_PenetrationBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	USFXGameEffect_WeaponMod_PenetrationBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void Usfxgameeffect_weaponmod_penetrationdamagebonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	Usfxgameeffect_weaponmod_penetrationdamagebonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function sfxgamecontent.SFXGameEffect_WeaponMod.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponMod_StabilityBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 107012 ];

	USFXGameEffect_WeaponMod_StabilityBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif